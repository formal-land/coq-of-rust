(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module arch.
  Module testing.
    Module test_adapter.
      (* StructRecord
        {
          name := "TestAdapterChip";
          const_params := [];
          ty_params := [ "F" ];
          fields :=
            [
              ("prank_reads",
                Ty.apply
                  (Ty.path "alloc::collections::vec_deque::VecDeque")
                  []
                  [
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ];
                    Ty.path "alloc::alloc::Global"
                  ]);
              ("prank_pc_inc",
                Ty.apply
                  (Ty.path "alloc::collections::vec_deque::VecDeque")
                  []
                  [
                    Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u32" ];
                    Ty.path "alloc::alloc::Global"
                  ]);
              ("air", Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterAir")
            ];
        } *)
      
      Module Impl_openvm_circuit_arch_testing_test_adapter_TestAdapterChip_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterChip")
            []
            [ F ].
        
        (*
            pub fn new(
                prank_reads: Vec<Vec<F>>,
                prank_pc_inc: Vec<Option<u32>>,
                execution_bridge: ExecutionBridge,
            ) -> Self {
                Self {
                    prank_reads: prank_reads.into(),
                    prank_pc_inc: prank_pc_inc.into(),
                    air: TestAdapterAir { execution_bridge },
                }
            }
        *)
        Definition new (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ prank_reads; prank_pc_inc; execution_bridge ] =>
            ltac:(M.monadic
              (let prank_reads :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  prank_reads
                |) in
              let prank_pc_inc :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u32" ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  prank_pc_inc
                |) in
              let execution_bridge :=
                M.alloc (|
                  Ty.path "openvm_circuit::arch::execution::ExecutionBridge",
                  execution_bridge
                |) in
              Value.mkStructRecord
                "openvm_circuit::arch::testing::test_adapter::TestAdapterChip"
                []
                [ F ]
                [
                  ("prank_reads",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::collections::vec_deque::VecDeque")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_trait_method (|
                        "core::convert::Into",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        [
                          Ty.apply
                            (Ty.path "alloc::collections::vec_deque::VecDeque")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ],
                        "into",
                        [],
                        []
                      |),
                      [ M.read (| prank_reads |) ]
                    |));
                  ("prank_pc_inc",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::collections::vec_deque::VecDeque")
                        []
                        [
                          Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u32" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_trait_method (|
                        "core::convert::Into",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u32" ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        [
                          Ty.apply
                            (Ty.path "alloc::collections::vec_deque::VecDeque")
                            []
                            [
                              Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u32" ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ],
                        "into",
                        [],
                        []
                      |),
                      [ M.read (| prank_pc_inc |) ]
                    |));
                  ("air",
                    Value.mkStructRecord
                      "openvm_circuit::arch::testing::test_adapter::TestAdapterAir"
                      []
                      []
                      [ ("execution_bridge", M.read (| execution_bridge |)) ])
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_new :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "new" (new F).
        Admitted.
        Global Typeclasses Opaque new.
      End Impl_openvm_circuit_arch_testing_test_adapter_TestAdapterChip_F.
      
      (* StructRecord
        {
          name := "TestAdapterRecord";
          const_params := [];
          ty_params := [ "T" ];
          fields :=
            [
              ("from_pc", Ty.path "u32");
              ("operands", Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 7 ] [ T ])
            ];
        } *)
      
      Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_circuit_arch_testing_test_adapter_TestAdapterRecord_T.
        Definition Self (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterRecord")
            []
            [ T ].
        
        (* Clone *)
        Definition clone (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterRecord")
                        []
                        [ T ]
                    ],
                  self
                |) in
              Value.mkStructRecord
                "openvm_circuit::arch::testing::test_adapter::TestAdapterRecord"
                []
                [ T ]
                [
                  ("from_pc",
                    M.call_closure (|
                      Ty.path "u32",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "u32",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::arch::testing::test_adapter::TestAdapterRecord",
                                "from_pc"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("operands",
                    M.call_closure (|
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 7 ] [ T ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 7 ] [ T ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::arch::testing::test_adapter::TestAdapterRecord",
                                "operands"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self T)
            (* Instance *) [ ("clone", InstanceField.Method (clone T)) ].
      End Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_circuit_arch_testing_test_adapter_TestAdapterRecord_T.
      
      Module underscore.
        Module Impl_serde_ser_Serialize_where_serde_ser_Serialize_T_for_openvm_circuit_arch_testing_test_adapter_TestAdapterRecord_T.
          Definition Self (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterRecord")
              []
              [ T ].
          
          (* Serialize *)
          Definition serialize
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self T in
            match ε, τ, α with
            | [], [ __S ], [ self; __serializer ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterRecord")
                          []
                          [ T ]
                      ],
                    self
                  |) in
                let __serializer := M.alloc (| __S, __serializer |) in
                M.catch_return
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                    ]) (|
                  ltac:(M.monadic
                    (M.read (|
                      let~ __serde_state :
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct" :=
                        M.match_operator (|
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct"
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "SerializeStruct";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::Serializer",
                                    __S,
                                    [],
                                    [],
                                    "serialize_struct",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (| __serializer |);
                                    mk_str (| "TestAdapterRecord" |);
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.add,
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.add,
                                          [
                                            M.cast (Ty.path "usize") (Value.Bool false);
                                            Value.Integer IntegerKind.Usize 1
                                          ]
                                        |);
                                        Value.Integer IntegerKind.Usize 1
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val :=
                                  M.copy (|
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    γ0_0
                                  |) in
                                M.read (| val |)))
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.tuple []
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStruct",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    [],
                                    [],
                                    "serialize_field",
                                    [],
                                    [ Ty.path "u32" ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                      |)
                                    |);
                                    mk_str (| "from_pc" |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::arch::testing::test_adapter::TestAdapterRecord",
                                            "from_pc"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                M.read (| val |)))
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.tuple []
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStruct",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    [],
                                    [],
                                    "serialize_field",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 7 ]
                                        [ T ]
                                    ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                      |)
                                    |);
                                    mk_str (| "operands" |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::arch::testing::test_adapter::TestAdapterRecord",
                                            "operands"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                M.read (| val |)))
                          ]
                        |) in
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                            ],
                          M.get_trait_method (|
                            "serde::ser::SerializeStruct",
                            Ty.associated_in_trait
                              "serde::ser::Serializer"
                              []
                              []
                              __S
                              "SerializeStruct",
                            [],
                            [],
                            "end",
                            [],
                            []
                          |),
                          [ M.read (| __serde_state |) ]
                        |)
                      |)
                    |)))
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (T : Ty.t),
            M.IsTraitInstance
              "serde::ser::Serialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self T)
              (* Instance *) [ ("serialize", InstanceField.Method (serialize T)) ].
        End Impl_serde_ser_Serialize_where_serde_ser_Serialize_T_for_openvm_circuit_arch_testing_test_adapter_TestAdapterRecord_T.
        Module Impl_serde_de_Deserialize_where_serde_de_Deserialize_T_for_openvm_circuit_arch_testing_test_adapter_TestAdapterRecord_T.
          Definition Self (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterRecord")
              []
              [ T ].
          
          (* Deserialize *)
          Definition deserialize
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self T in
            match ε, τ, α with
            | [], [ __D ], [ __deserializer ] =>
              ltac:(M.monadic
                (let __deserializer := M.alloc (| __D, __deserializer |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterRecord")
                        []
                        [ T ];
                      Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                    ],
                  M.get_trait_method (|
                    "serde::de::Deserializer",
                    __D,
                    [],
                    [],
                    "deserialize_struct",
                    [],
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::arch::testing::test_adapter::_'1::deserialize::__Visitor")
                        []
                        [ T ]
                    ]
                  |),
                  [
                    M.read (| __deserializer |);
                    mk_str (| "TestAdapterRecord" |);
                    M.read (|
                      get_constant (|
                        "openvm_circuit::arch::testing::test_adapter::_'1::deserialize::FIELDS",
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ]
                      |)
                    |);
                    Value.mkStructRecord
                      "openvm_circuit::arch::testing::test_adapter::_'1::deserialize::__Visitor"
                      []
                      [ T ]
                      [
                        ("marker",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::arch::testing::test_adapter::TestAdapterRecord")
                                []
                                [ T ]
                            ]
                            []);
                        ("lifetime",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                            [])
                      ]
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (T : Ty.t),
            M.IsTraitInstance
              "serde::de::Deserialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self T)
              (* Instance *) [ ("deserialize", InstanceField.Method (deserialize T)) ].
        End Impl_serde_de_Deserialize_where_serde_de_Deserialize_T_for_openvm_circuit_arch_testing_test_adapter_TestAdapterRecord_T.
      End underscore.
      
      
      Module Impl_openvm_circuit_arch_integration_api_VmAdapterChip_where_p3_field_field_PrimeField32_F_F_for_openvm_circuit_arch_testing_test_adapter_TestAdapterChip_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterChip")
            []
            [ F ].
        
        (*     type ReadRecord = (); *)
        Definition _ReadRecord (F : Ty.t) : Ty.t := Ty.tuple [].
        
        (*     type WriteRecord = TestAdapterRecord<F>; *)
        Definition _WriteRecord (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterRecord")
            []
            [ F ].
        
        (*     type Air = TestAdapterAir; *)
        Definition _Air (F : Ty.t) : Ty.t :=
          Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterAir".
        
        (*     type Interface = DynAdapterInterface<F>; *)
        Definition _Interface (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "openvm_circuit::arch::integration_api::DynAdapterInterface") [] [ F ].
        
        (*
            fn preprocess(
                &mut self,
                _memory: &mut MemoryController<F>,
                _instruction: &Instruction<F>,
            ) -> Result<(DynArray<F>, Self::ReadRecord)> {
                Ok((
                    self.prank_reads
                        .pop_front()
                        .expect("Not enough prank reads provided")
                        .into(),
                    (),
                ))
            }
        *)
        Definition preprocess
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; _memory; _instruction ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterChip")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let _memory :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  _memory
                |) in
              let _instruction :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ] ],
                  _instruction
                |) in
              Value.StructTuple
                "core::result::Result::Ok"
                []
                [
                  Ty.tuple
                    [
                      Ty.apply (Ty.path "openvm_circuit::arch::integration_api::DynArray") [] [ F ];
                      Ty.tuple []
                    ];
                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                ]
                [
                  Value.Tuple
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::integration_api::DynArray")
                          []
                          [ F ],
                        M.get_trait_method (|
                          "core::convert::Into",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ],
                          [],
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::integration_api::DynArray")
                              []
                              [ F ]
                          ],
                          "into",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ F; Ty.path "alloc::alloc::Global" ]
                                ],
                              "expect",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ F; Ty.path "alloc::alloc::Global" ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::collections::vec_deque::VecDeque")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ F; Ty.path "alloc::alloc::Global" ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "pop_front",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::arch::testing::test_adapter::TestAdapterChip",
                                      "prank_reads"
                                    |)
                                  |)
                                ]
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| mk_str (| "Not enough prank reads provided" |) |)
                              |)
                            ]
                          |)
                        ]
                      |);
                      Value.Tuple []
                    ]
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn postprocess(
                &mut self,
                memory: &mut MemoryController<F>,
                instruction: &Instruction<F>,
                from_state: ExecutionState<u32>,
                _output: AdapterRuntimeContext<F, Self::Interface>,
                _read_record: &Self::ReadRecord,
            ) -> Result<(ExecutionState<u32>, Self::WriteRecord)> {
                let pc_inc = self
                    .prank_pc_inc
                    .pop_front()
                    .map(|x| x.unwrap_or(4))
                    .unwrap_or(4);
                Ok((
                    ExecutionState {
                        pc: from_state.pc + pc_inc,
                        timestamp: memory.timestamp(),
                    },
                    TestAdapterRecord {
                        operands: [
                            instruction.a,
                            instruction.b,
                            instruction.c,
                            instruction.d,
                            instruction.e,
                            instruction.f,
                            instruction.g,
                        ],
                        from_pc: from_state.pc,
                    },
                ))
            }
        *)
        Definition postprocess
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; memory; instruction; from_state; _output; _read_record ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterChip")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let memory :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  memory
                |) in
              let instruction :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ] ],
                  instruction
                |) in
              let from_state :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                    []
                    [ Ty.path "u32" ],
                  from_state
                |) in
              let _output :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                    []
                    [
                      F;
                      Ty.associated_in_trait
                        "openvm_circuit::arch::integration_api::VmAdapterChip"
                        []
                        [ F ]
                        (Ty.apply
                          (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterChip")
                          []
                          [ F ])
                        "Interface"
                    ],
                  _output
                |) in
              let _read_record :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.associated_in_trait
                        "openvm_circuit::arch::integration_api::VmAdapterChip"
                        []
                        [ F ]
                        (Ty.apply
                          (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterChip")
                          []
                          [ F ])
                        "ReadRecord"
                    ],
                  _read_record
                |) in
              M.read (|
                let~ pc_inc : Ty.path "u32" :=
                  M.call_closure (|
                    Ty.path "u32",
                    M.get_associated_function (|
                      Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u32" ],
                      "unwrap_or",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u32" ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u32" ] ],
                          "map",
                          [],
                          [
                            Ty.path "u32";
                            Ty.function
                              [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u32" ] ]
                              (Ty.path "u32")
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u32" ] ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::collections::vec_deque::VecDeque")
                                []
                                [
                                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "u32" ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "pop_front",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::arch::testing::test_adapter::TestAdapterChip",
                                  "prank_pc_inc"
                                |)
                              |)
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.path "u32",
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "u32" ],
                                        α0
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let x :=
                                              M.copy (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [ Ty.path "u32" ],
                                                γ
                                              |) in
                                            M.call_closure (|
                                              Ty.path "u32",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [ Ty.path "u32" ],
                                                "unwrap_or",
                                                [],
                                                []
                                              |),
                                              [ M.read (| x |); Value.Integer IntegerKind.U32 4 ]
                                            |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |);
                      Value.Integer IntegerKind.U32 4
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.tuple
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                            []
                            [ Ty.path "u32" ];
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::arch::testing::test_adapter::TestAdapterRecord")
                            []
                            [ F ]
                        ];
                      Ty.path "openvm_circuit::arch::execution::ExecutionError"
                    ],
                  Value.StructTuple
                    "core::result::Result::Ok"
                    []
                    [
                      Ty.tuple
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                            []
                            [ Ty.path "u32" ];
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::arch::testing::test_adapter::TestAdapterRecord")
                            []
                            [ F ]
                        ];
                      Ty.path "openvm_circuit::arch::execution::ExecutionError"
                    ]
                    [
                      Value.Tuple
                        [
                          Value.mkStructRecord
                            "openvm_circuit::arch::execution::ExecutionState"
                            []
                            [ Ty.path "u32" ]
                            [
                              ("pc",
                                M.call_closure (|
                                  Ty.path "u32",
                                  BinOp.Wrap.add,
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        from_state,
                                        "openvm_circuit::arch::execution::ExecutionState",
                                        "pc"
                                      |)
                                    |);
                                    M.read (| pc_inc |)
                                  ]
                                |));
                              ("timestamp",
                                M.call_closure (|
                                  Ty.path "u32",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::controller::MemoryController")
                                      []
                                      [ F ],
                                    "timestamp",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| memory |) |)
                                    |)
                                  ]
                                |))
                            ];
                          Value.mkStructRecord
                            "openvm_circuit::arch::testing::test_adapter::TestAdapterRecord"
                            []
                            [ F ]
                            [
                              ("operands",
                                Value.Array
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| instruction |) |),
                                        "openvm_instructions::instruction::Instruction",
                                        "a"
                                      |)
                                    |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| instruction |) |),
                                        "openvm_instructions::instruction::Instruction",
                                        "b"
                                      |)
                                    |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| instruction |) |),
                                        "openvm_instructions::instruction::Instruction",
                                        "c"
                                      |)
                                    |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| instruction |) |),
                                        "openvm_instructions::instruction::Instruction",
                                        "d"
                                      |)
                                    |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| instruction |) |),
                                        "openvm_instructions::instruction::Instruction",
                                        "e"
                                      |)
                                    |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| instruction |) |),
                                        "openvm_instructions::instruction::Instruction",
                                        "f"
                                      |)
                                    |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| instruction |) |),
                                        "openvm_instructions::instruction::Instruction",
                                        "g"
                                      |)
                                    |)
                                  ]);
                              ("from_pc",
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    from_state,
                                    "openvm_circuit::arch::execution::ExecutionState",
                                    "pc"
                                  |)
                                |))
                            ]
                        ]
                    ]
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn generate_trace_row(
                &self,
                row_slice: &mut [F],
                _read_record: Self::ReadRecord,
                write_record: Self::WriteRecord,
                _memory: &OfflineMemory<F>,
            ) {
                let cols: &mut TestAdapterCols<F> = row_slice.borrow_mut();
                cols.from_pc = F::from_canonical_u32(write_record.from_pc);
                cols.operands = write_record.operands;
                // row_slice[0] = F::from_canonical_u32(write_record.from_pc);
                // row_slice[1..].copy_from_slice(&write_record.operands);
            }
        *)
        Definition generate_trace_row
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; row_slice; _read_record; write_record; _memory ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterChip")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let row_slice :=
                M.alloc (|
                  Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                  row_slice
                |) in
              let _read_record :=
                M.alloc (|
                  Ty.associated_in_trait
                    "openvm_circuit::arch::integration_api::VmAdapterChip"
                    []
                    [ F ]
                    (Ty.apply
                      (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterChip")
                      []
                      [ F ])
                    "ReadRecord",
                  _read_record
                |) in
              let write_record :=
                M.alloc (|
                  Ty.associated_in_trait
                    "openvm_circuit::arch::integration_api::VmAdapterChip"
                    []
                    [ F ]
                    (Ty.apply
                      (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterChip")
                      []
                      [ F ])
                    "WriteRecord",
                  write_record
                |) in
              let _memory :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                        []
                        [ F ]
                    ],
                  _memory
                |) in
              M.read (|
                let~ cols :
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                          []
                          [ F ]
                      ] :=
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                              []
                              [ F ]
                          ],
                        M.get_trait_method (|
                          "core::borrow::BorrowMut",
                          Ty.apply (Ty.path "slice") [] [ F ],
                          [],
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                              []
                              [ F ]
                          ],
                          "borrow_mut",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| row_slice |) |) |) ]
                      |)
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.write (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| cols |) |),
                      "openvm_circuit::arch::testing::test_adapter::TestAdapterCols",
                      "from_pc"
                    |),
                    M.call_closure (|
                      F,
                      M.get_trait_method (|
                        "p3_field::field::FieldAlgebra",
                        F,
                        [],
                        [],
                        "from_canonical_u32",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            write_record,
                            "openvm_circuit::arch::testing::test_adapter::TestAdapterRecord",
                            "from_pc"
                          |)
                        |)
                      ]
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.write (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| cols |) |),
                      "openvm_circuit::arch::testing::test_adapter::TestAdapterCols",
                      "operands"
                    |),
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        write_record,
                        "openvm_circuit::arch::testing::test_adapter::TestAdapterRecord",
                        "operands"
                      |)
                    |)
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn air(&self) -> &Self::Air {
                &self.air
            }
        *)
        Definition air (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterChip")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::arch::testing::test_adapter::TestAdapterChip",
                      "air"
                    |)
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "openvm_circuit::arch::integration_api::VmAdapterChip"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self F)
            (* Instance *)
            [
              ("ReadRecord", InstanceField.Ty (_ReadRecord F));
              ("WriteRecord", InstanceField.Ty (_WriteRecord F));
              ("Air", InstanceField.Ty (_Air F));
              ("Interface", InstanceField.Ty (_Interface F));
              ("preprocess", InstanceField.Method (preprocess F));
              ("postprocess", InstanceField.Method (postprocess F));
              ("generate_trace_row", InstanceField.Method (generate_trace_row F));
              ("air", InstanceField.Method (air F))
            ].
      End Impl_openvm_circuit_arch_integration_api_VmAdapterChip_where_p3_field_field_PrimeField32_F_F_for_openvm_circuit_arch_testing_test_adapter_TestAdapterChip_F.
      
      (* StructRecord
        {
          name := "TestAdapterAir";
          const_params := [];
          ty_params := [];
          fields :=
            [ ("execution_bridge", Ty.path "openvm_circuit::arch::execution::ExecutionBridge") ];
        } *)
      
      Module Impl_core_clone_Clone_for_openvm_circuit_arch_testing_test_adapter_TestAdapterAir.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterAir".
        
        (* Clone *)
        Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterAir" ],
                  self
                |) in
              M.match_operator (|
                Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterAir",
                Value.DeclaredButUndefined,
                [ fun γ => ltac:(M.monadic (M.read (| M.deref (| M.read (| self |) |) |))) ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("clone", InstanceField.Method clone) ].
      End Impl_core_clone_Clone_for_openvm_circuit_arch_testing_test_adapter_TestAdapterAir.
      
      Module Impl_core_marker_Copy_for_openvm_circuit_arch_testing_test_adapter_TestAdapterAir.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterAir".
        
        Axiom Implements :
          M.IsTraitInstance
            "core::marker::Copy"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [].
      End Impl_core_marker_Copy_for_openvm_circuit_arch_testing_test_adapter_TestAdapterAir.
      
      Module Impl_core_fmt_Debug_for_openvm_circuit_arch_testing_test_adapter_TestAdapterAir.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterAir".
        
        (* Debug *)
        Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterAir" ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field1_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "TestAdapterAir" |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "execution_bridge" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.path "openvm_circuit::arch::execution::ExecutionBridge" ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.path "openvm_circuit::arch::execution::ExecutionBridge" ],
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::arch::testing::test_adapter::TestAdapterAir",
                                  "execution_bridge"
                                |)
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
      End Impl_core_fmt_Debug_for_openvm_circuit_arch_testing_test_adapter_TestAdapterAir.
      
      (* StructRecord
        {
          name := "TestAdapterCols";
          const_params := [];
          ty_params := [ "T" ];
          fields :=
            [
              ("from_pc", T);
              ("operands", Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 7 ] [ T ])
            ];
        } *)
      
      Module Impl_core_borrow_Borrow_openvm_circuit_arch_testing_test_adapter_TestAdapterCols_T_for_slice_T.
        Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ T ].
        
        (* AlignedBorrow *)
        Definition borrow (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                  self
                |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.tuple
                                    [
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                    ],
                                  Value.Tuple
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.path "usize",
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_associated_function (|
                                              Ty.apply (Ty.path "slice") [] [ T ],
                                              "len",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| self |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.path "usize",
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                                                []
                                                [ T ],
                                              "width",
                                              [],
                                              []
                                            |),
                                            []
                                          |)
                                        |)
                                      |)
                                    ]
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                      let left_val :=
                                        M.copy (|
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                          γ0_0
                                        |) in
                                      let right_val :=
                                        M.copy (|
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                          γ0_1
                                        |) in
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    Ty.path "bool",
                                                    UnOp.not (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        BinOp.eq,
                                                        [
                                                          M.read (|
                                                            M.deref (| M.read (| left_val |) |)
                                                          |);
                                                          M.read (|
                                                            M.deref (| M.read (| right_val |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)) in
                                              let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.never_to_any (|
                                                M.read (|
                                                  let~ kind :
                                                      Ty.path "core::panicking::AssertKind" :=
                                                    Value.StructTuple
                                                      "core::panicking::AssertKind::Eq"
                                                      []
                                                      []
                                                      [] in
                                                  M.alloc (|
                                                    Ty.path "never",
                                                    M.call_closure (|
                                                      Ty.path "never",
                                                      M.get_function (|
                                                        "core::panicking::assert_failed",
                                                        [],
                                                        [ Ty.path "usize"; Ty.path "usize" ]
                                                      |),
                                                      [
                                                        M.read (| kind |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| left_val |) |)
                                                            |)
                                                          |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| right_val |) |)
                                                            |)
                                                          |)
                                                        |);
                                                        Value.StructTuple
                                                          "core::option::Option::None"
                                                          []
                                                          [ Ty.path "core::fmt::Arguments" ]
                                                          []
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ => ltac:(M.monadic (Value.Tuple []))
                                        ]
                                      |)))
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                        []
                        [ T ]
                    ],
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                          []
                          [ T ]
                      ],
                    M.alloc (|
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                                    []
                                    [ T ]
                                ]
                            ];
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                        ],
                      M.call_closure (|
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                                      []
                                      [ T ]
                                  ]
                              ];
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                          ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ T ],
                          "align_to",
                          [],
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                              []
                              [ T ]
                          ]
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                          let prefix :=
                            M.copy (|
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                              γ0_0
                            |) in
                          let shorts :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                                        []
                                        [ T ]
                                    ]
                                ],
                              γ0_1
                            |) in
                          let _suffix :=
                            M.copy (|
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                              γ0_2
                            |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        Ty.path "bool",
                                                        UnOp.not (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_associated_function (|
                                                              Ty.apply (Ty.path "slice") [] [ T ],
                                                              "is_empty",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| prefix |) |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.never_to_any (|
                                                    M.call_closure (|
                                                      Ty.path "never",
                                                      M.get_function (|
                                                        "core::panicking::panic_fmt",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::Arguments",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::Arguments",
                                                            "new_const",
                                                            [ Value.Integer IntegerKind.Usize 1 ],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.alloc (|
                                                                    Ty.apply
                                                                      (Ty.path "array")
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          1
                                                                      ]
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ Ty.path "str" ]
                                                                      ],
                                                                    Value.Array
                                                                      [
                                                                        mk_str (|
                                                                          "Alignment should match"
                                                                        |)
                                                                      ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |)));
                                              fun γ => ltac:(M.monadic (Value.Tuple []))
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                      |)));
                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              Ty.tuple
                                                [
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                ],
                                              Value.Tuple
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.path "usize",
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                                                                []
                                                                [ T ]
                                                            ],
                                                          "len",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| shorts |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.path "usize",
                                                      Value.Integer IntegerKind.Usize 1
                                                    |)
                                                  |)
                                                ]
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                  let γ0_1 :=
                                                    M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                  let left_val :=
                                                    M.copy (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                      γ0_0
                                                    |) in
                                                  let right_val :=
                                                    M.copy (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                      γ0_1
                                                    |) in
                                                  M.match_operator (|
                                                    Ty.tuple [],
                                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                Ty.path "bool",
                                                                UnOp.not (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.eq,
                                                                    [
                                                                      M.read (|
                                                                        M.deref (|
                                                                          M.read (| left_val |)
                                                                        |)
                                                                      |);
                                                                      M.read (|
                                                                        M.deref (|
                                                                          M.read (| right_val |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.never_to_any (|
                                                            M.read (|
                                                              let~ kind :
                                                                  Ty.path
                                                                    "core::panicking::AssertKind" :=
                                                                Value.StructTuple
                                                                  "core::panicking::AssertKind::Eq"
                                                                  []
                                                                  []
                                                                  [] in
                                                              M.alloc (|
                                                                Ty.path "never",
                                                                M.call_closure (|
                                                                  Ty.path "never",
                                                                  M.get_function (|
                                                                    "core::panicking::assert_failed",
                                                                    [],
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.path "usize"
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.read (| kind |);
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| left_val |)
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |);
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| right_val |)
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |);
                                                                    Value.StructTuple
                                                                      "core::option::Option::None"
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "core::fmt::Arguments"
                                                                      ]
                                                                      []
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ => ltac:(M.monadic (Value.Tuple []))
                                                    ]
                                                  |)))
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                      |)));
                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                ]
                              |) in
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                                    []
                                    [ T ]
                                ],
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_array_field (|
                                      M.deref (| M.read (| shorts |) |),
                                      Value.Integer IntegerKind.Usize 0
                                    |)
                                  |)
                                |)
                              |)
                            |)
                          |)))
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "core::borrow::Borrow"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                []
                [ T ]
            ]
            (Self T)
            (* Instance *) [ ("borrow", InstanceField.Method (borrow T)) ].
      End Impl_core_borrow_Borrow_openvm_circuit_arch_testing_test_adapter_TestAdapterCols_T_for_slice_T.
      
      Module Impl_core_borrow_BorrowMut_openvm_circuit_arch_testing_test_adapter_TestAdapterCols_T_for_slice_T.
        Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ T ].
        
        (* AlignedBorrow *)
        Definition borrow_mut
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                  self
                |) in
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.read (|
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (|
                                      Ty.tuple
                                        [
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                        ],
                                      Value.Tuple
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Ty.path "usize",
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [] [ T ],
                                                  "len",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| self |) |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Ty.path "usize",
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                                                    []
                                                    [ T ],
                                                  "width",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |)
                                            |)
                                          |)
                                        ]
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                          let left_val :=
                                            M.copy (|
                                              Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                              γ0_0
                                            |) in
                                          let right_val :=
                                            M.copy (|
                                              Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                              γ0_1
                                            |) in
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        Ty.path "bool",
                                                        UnOp.not (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            BinOp.eq,
                                                            [
                                                              M.read (|
                                                                M.deref (| M.read (| left_val |) |)
                                                              |);
                                                              M.read (|
                                                                M.deref (| M.read (| right_val |) |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.never_to_any (|
                                                    M.read (|
                                                      let~ kind :
                                                          Ty.path "core::panicking::AssertKind" :=
                                                        Value.StructTuple
                                                          "core::panicking::AssertKind::Eq"
                                                          []
                                                          []
                                                          [] in
                                                      M.alloc (|
                                                        Ty.path "never",
                                                        M.call_closure (|
                                                          Ty.path "never",
                                                          M.get_function (|
                                                            "core::panicking::assert_failed",
                                                            [],
                                                            [ Ty.path "usize"; Ty.path "usize" ]
                                                          |),
                                                          [
                                                            M.read (| kind |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |)
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              |)
                                                            |);
                                                            Value.StructTuple
                                                              "core::option::Option::None"
                                                              []
                                                              [ Ty.path "core::fmt::Arguments" ]
                                                              []
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ => ltac:(M.monadic (Value.Tuple []))
                                            ]
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                              |)));
                          fun γ => ltac:(M.monadic (Value.Tuple []))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                            []
                            [ T ]
                        ],
                      M.match_operator (|
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                              []
                              [ T ]
                          ],
                        M.alloc (|
                          Ty.tuple
                            [
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                                        []
                                        [ T ]
                                    ]
                                ];
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                            ],
                          M.call_closure (|
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ];
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                                          []
                                          [ T ]
                                      ]
                                  ];
                                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                              ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ T ],
                              "align_to_mut",
                              [],
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                                  []
                                  [ T ]
                              ]
                            |),
                            [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                              let prefix :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                  γ0_0
                                |) in
                              let shorts :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                                            []
                                            [ T ]
                                        ]
                                    ],
                                  γ0_1
                                |) in
                              let _suffix :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                  γ0_2
                                |) in
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.read (|
                                            let~ _ : Ty.tuple [] :=
                                              M.match_operator (|
                                                Ty.tuple [],
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            Ty.path "bool",
                                                            UnOp.not (|
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ T ],
                                                                  "is_empty",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| prefix |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.never_to_any (|
                                                        M.call_closure (|
                                                          Ty.path "never",
                                                          M.get_function (|
                                                            "core::panicking::panic_fmt",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              Ty.path "core::fmt::Arguments",
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::Arguments",
                                                                "new_const",
                                                                [ Value.Integer IntegerKind.Usize 1
                                                                ],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.alloc (|
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              1
                                                                          ]
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [ Ty.path "str" ]
                                                                          ],
                                                                        Value.Array
                                                                          [
                                                                            mk_str (|
                                                                              "Alignment should match"
                                                                            |)
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |)));
                                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                                ]
                                              |) in
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                          |)));
                                      fun γ => ltac:(M.monadic (Value.Tuple []))
                                    ]
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.read (|
                                            let~ _ : Ty.tuple [] :=
                                              M.match_operator (|
                                                Ty.tuple [],
                                                M.alloc (|
                                                  Ty.tuple
                                                    [
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                    ],
                                                  Value.Tuple
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Ty.path "usize",
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                                                                    []
                                                                    [ T ]
                                                                ],
                                                              "len",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| shorts |) |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Ty.path "usize",
                                                          Value.Integer IntegerKind.Usize 1
                                                        |)
                                                      |)
                                                    ]
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                      let γ0_1 :=
                                                        M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                      let left_val :=
                                                        M.copy (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          γ0_0
                                                        |) in
                                                      let right_val :=
                                                        M.copy (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          γ0_1
                                                        |) in
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ :=
                                                                M.use
                                                                  (M.alloc (|
                                                                    Ty.path "bool",
                                                                    UnOp.not (|
                                                                      M.call_closure (|
                                                                        Ty.path "bool",
                                                                        BinOp.eq,
                                                                        [
                                                                          M.read (|
                                                                            M.deref (|
                                                                              M.read (| left_val |)
                                                                            |)
                                                                          |);
                                                                          M.read (|
                                                                            M.deref (|
                                                                              M.read (| right_val |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)) in
                                                              let _ :=
                                                                is_constant_or_break_match (|
                                                                  M.read (| γ |),
                                                                  Value.Bool true
                                                                |) in
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  let~ kind :
                                                                      Ty.path
                                                                        "core::panicking::AssertKind" :=
                                                                    Value.StructTuple
                                                                      "core::panicking::AssertKind::Eq"
                                                                      []
                                                                      []
                                                                      [] in
                                                                  M.alloc (|
                                                                    Ty.path "never",
                                                                    M.call_closure (|
                                                                      Ty.path "never",
                                                                      M.get_function (|
                                                                        "core::panicking::assert_failed",
                                                                        [],
                                                                        [
                                                                          Ty.path "usize";
                                                                          Ty.path "usize"
                                                                        ]
                                                                      |),
                                                                      [
                                                                        M.read (| kind |);
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  left_val
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  right_val
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        Value.StructTuple
                                                                          "core::option::Option::None"
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "core::fmt::Arguments"
                                                                          ]
                                                                          []
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)));
                                                          fun γ => ltac:(M.monadic (Value.Tuple []))
                                                        ]
                                                      |)))
                                                ]
                                              |) in
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                          |)));
                                      fun γ => ltac:(M.monadic (Value.Tuple []))
                                    ]
                                  |) in
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                                        []
                                        [ T ]
                                    ],
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.SubPointer.get_array_field (|
                                          M.deref (| M.read (| shorts |) |),
                                          Value.Integer IntegerKind.Usize 0
                                        |)
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |)
                    |)
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "core::borrow::BorrowMut"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                []
                [ T ]
            ]
            (Self T)
            (* Instance *) [ ("borrow_mut", InstanceField.Method (borrow_mut T)) ].
      End Impl_core_borrow_BorrowMut_openvm_circuit_arch_testing_test_adapter_TestAdapterCols_T_for_slice_T.
      
      Module Impl_openvm_circuit_arch_testing_test_adapter_TestAdapterCols_T.
        Definition Self (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
            []
            [ T ].
        
        (* AlignedBorrow *)
        Definition width (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [] =>
            ltac:(M.monadic
              (M.call_closure (|
                Ty.path "usize",
                M.get_function (|
                  "core::mem::size_of",
                  [],
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                      []
                      [ Ty.path "u8" ]
                  ]
                |),
                []
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_width :
          forall (T : Ty.t),
          M.IsAssociatedFunction.C (Self T) "width" (width T).
        Admitted.
        Global Typeclasses Opaque width.
      End Impl_openvm_circuit_arch_testing_test_adapter_TestAdapterCols_T.
      
      Module Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_circuit_arch_testing_test_adapter_TestAdapterAir.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterAir".
        
        (*
            fn width(&self) -> usize {
                TestAdapterCols::<F>::width()
            }
        *)
        Definition width (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterAir" ],
                  self
                |) in
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                    []
                    [ F ],
                  "width",
                  [],
                  []
                |),
                []
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "p3_air::air::BaseAir"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self F)
            (* Instance *) [ ("width", InstanceField.Method (width F)) ].
      End Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_circuit_arch_testing_test_adapter_TestAdapterAir.
      
      Module Impl_openvm_circuit_arch_integration_api_VmAdapterAir_where_openvm_stark_backend_interaction_InteractionBuilder_AB_AB_for_openvm_circuit_arch_testing_test_adapter_TestAdapterAir.
        Definition Self (AB : Ty.t) : Ty.t :=
          Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterAir".
        
        (*     type Interface = DynAdapterInterface<AB::Expr>; *)
        Definition _Interface (AB : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::arch::integration_api::DynAdapterInterface")
            []
            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ].
        
        (*
            fn eval(
                &self,
                builder: &mut AB,
                local: &[AB::Var],
                ctx: AdapterAirContext<AB::Expr, Self::Interface>,
            ) {
                let processed_instruction: MinimalInstruction<AB::Expr> = ctx.instruction.into();
                let cols: &TestAdapterCols<AB::Var> = local.borrow();
                self.execution_bridge
                    .execute_and_increment_or_set_pc(
                        processed_instruction.opcode,
                        cols.operands.to_vec(),
                        ExecutionState {
                            pc: cols.from_pc.into(),
                            timestamp: AB::Expr::ONE,
                        },
                        AB::Expr::ZERO,
                        (4, ctx.to_pc),
                    )
                    .eval(builder, processed_instruction.is_valid);
            }
        *)
        Definition eval (AB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self AB in
          match ε, τ, α with
          | [], [], [ self; builder; local; ctx ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterAir" ],
                  self
                |) in
              let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
              let local :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ],
                  local
                |) in
              let ctx :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::integration_api::AdapterAirContext")
                    []
                    [
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                      Ty.associated_in_trait
                        "openvm_circuit::arch::integration_api::VmAdapterAir"
                        []
                        [ AB ]
                        (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterAir")
                        "Interface"
                    ],
                  ctx
                |) in
              M.read (|
                let~ processed_instruction :
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::integration_api::MinimalInstruction")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::integration_api::MinimalInstruction")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    M.get_trait_method (|
                      "core::convert::Into",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::DynArray")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                      [],
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::integration_api::MinimalInstruction")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                      ],
                      "into",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          ctx,
                          "openvm_circuit::arch::integration_api::AdapterAirContext",
                          "instruction"
                        |)
                      |)
                    ]
                  |) in
                let~ cols :
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      ] :=
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                          ],
                        M.get_trait_method (|
                          "core::borrow::Borrow",
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                          [],
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                          ],
                          "borrow",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| local |) |) |) ]
                      |)
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::execution::ExecutionBridgeInteractor")
                        []
                        [ AB ],
                      "eval",
                      [],
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::execution::ExecutionBridgeInteractor")
                          []
                          [ AB ],
                        M.get_associated_function (|
                          Ty.path "openvm_circuit::arch::execution::ExecutionBridge",
                          "execute_and_increment_or_set_pc",
                          [],
                          [
                            AB;
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                            Ty.tuple
                              [
                                Ty.path "u32";
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ]
                              ]
                          ]
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::arch::testing::test_adapter::TestAdapterAir",
                              "execution_bridge"
                            |)
                          |);
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              processed_instruction,
                              "openvm_circuit::arch::integration_api::MinimalInstruction",
                              "opcode"
                            |)
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                              "to_vec",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                  ],
                                M.pointer_coercion
                                  M.PointerCoercion.Unsize
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 7 ]
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ]
                                    ])
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ]
                                    ]),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| cols |) |),
                                      "openvm_circuit::arch::testing::test_adapter::TestAdapterCols",
                                      "operands"
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |);
                          Value.mkStructRecord
                            "openvm_circuit::arch::execution::ExecutionState"
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                            [
                              ("pc",
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::convert::Into",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                    "into",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| cols |) |),
                                        "openvm_circuit::arch::testing::test_adapter::TestAdapterCols",
                                        "from_pc"
                                      |)
                                    |)
                                  ]
                                |));
                              ("timestamp",
                                M.read (|
                                  get_constant (|
                                    "p3_field::field::FieldAlgebra::ONE",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  |)
                                |))
                            ];
                          M.read (|
                            get_constant (|
                              "p3_field::field::FieldAlgebra::ZERO",
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                            |)
                          |);
                          Value.Tuple
                            [
                              Value.Integer IntegerKind.U32 4;
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  ctx,
                                  "openvm_circuit::arch::integration_api::AdapterAirContext",
                                  "to_pc"
                                |)
                              |)
                            ]
                        ]
                      |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          processed_instruction,
                          "openvm_circuit::arch::integration_api::MinimalInstruction",
                          "is_valid"
                        |)
                      |)
                    ]
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn get_from_pc(&self, local: &[AB::Var]) -> AB::Var {
                let cols: &TestAdapterCols<AB::Var> = local.borrow();
                cols.from_pc
            }
        *)
        Definition get_from_pc
            (AB : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self AB in
          match ε, τ, α with
          | [], [], [ self; local ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterAir" ],
                  self
                |) in
              let local :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ],
                  local
                |) in
              M.read (|
                let~ cols :
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      ] :=
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                          ],
                        M.get_trait_method (|
                          "core::borrow::Borrow",
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                          [],
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::arch::testing::test_adapter::TestAdapterCols")
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                          ],
                          "borrow",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| local |) |) |) ]
                      |)
                    |)
                  |) in
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| cols |) |),
                  "openvm_circuit::arch::testing::test_adapter::TestAdapterCols",
                  "from_pc"
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (AB : Ty.t),
          M.IsTraitInstance
            "openvm_circuit::arch::integration_api::VmAdapterAir"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ AB ]
            (Self AB)
            (* Instance *)
            [
              ("Interface", InstanceField.Ty (_Interface AB));
              ("eval", InstanceField.Method (eval AB));
              ("get_from_pc", InstanceField.Method (get_from_pc AB))
            ].
      End Impl_openvm_circuit_arch_integration_api_VmAdapterAir_where_openvm_stark_backend_interaction_InteractionBuilder_AB_AB_for_openvm_circuit_arch_testing_test_adapter_TestAdapterAir.
    End test_adapter.
  End testing.
End arch.
