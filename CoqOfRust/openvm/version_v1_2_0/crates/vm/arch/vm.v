(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module arch.
  Module vm.
    (*
    Enum GenerationError
    {
      const_params := [];
      ty_params := [];
      variants :=
        [
          {
            name := "TraceHeightsLimitExceeded";
            item := StructTuple [];
          };
          {
            name := "Execution";
            item := StructTuple [ Ty.path "openvm_circuit::arch::execution::ExecutionError" ];
          }
        ];
    }
    *)
    
    Axiom IsDiscriminant_GenerationError_TraceHeightsLimitExceeded :
      M.IsDiscriminant "openvm_circuit::arch::vm::GenerationError::TraceHeightsLimitExceeded" 0.
    Axiom IsDiscriminant_GenerationError_Execution :
      M.IsDiscriminant "openvm_circuit::arch::vm::GenerationError::Execution" 1.
    
    Module Impl_core_error_Error_for_openvm_circuit_arch_vm_GenerationError.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::vm::GenerationError".
      
      (* Error *)
      Definition source (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_circuit::arch::vm::GenerationError" ],
                self
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::error::Error::Trait", []) ] ] ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "openvm_circuit::arch::vm::GenerationError::TraceHeightsLimitExceeded"
                      |) in
                    Value.StructTuple
                      "core::option::Option::None"
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::error::Error::Trait", []) ] ] ]
                      []));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::vm::GenerationError::Execution",
                        0
                      |) in
                    let transparent :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.path "openvm_circuit::arch::execution::ExecutionError" ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::error::Error::Trait", []) ] ]
                        ],
                      M.get_trait_method (|
                        "core::error::Error",
                        Ty.dyn [ ("core::error::Error::Trait", []) ],
                        [],
                        [],
                        "source",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::error::Error::Trait", []) ] ],
                              M.get_trait_method (|
                                "thiserror::aserror::AsDynError",
                                Ty.path "openvm_circuit::arch::execution::ExecutionError",
                                [],
                                [],
                                "as_dyn_error",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.read (| transparent |) |)
                                |)
                              ]
                            |)
                          |)
                        |)
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::error::Error"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("source", InstanceField.Method source) ].
    End Impl_core_error_Error_for_openvm_circuit_arch_vm_GenerationError.
    
    Module Impl_core_fmt_Display_for_openvm_circuit_arch_vm_GenerationError.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::vm::GenerationError".
      
      (* Error *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; __formatter ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_circuit::arch::vm::GenerationError" ],
                self
              |) in
            let __formatter :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ],
                __formatter
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "openvm_circuit::arch::vm::GenerationError::TraceHeightsLimitExceeded"
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "write_str",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| __formatter |) |) |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "generated trace heights violate constraints" |) |)
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::vm::GenerationError::Execution",
                        0
                      |) in
                    let _0 :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.path "openvm_circuit::arch::execution::ExecutionError" ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_trait_method (|
                        "core::fmt::Display",
                        Ty.path "openvm_circuit::arch::execution::ExecutionError",
                        [],
                        [],
                        "fmt",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| _0 |) |) |);
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| __formatter |) |) |)
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Display"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Display_for_openvm_circuit_arch_vm_GenerationError.
    
    Module Impl_core_convert_From_openvm_circuit_arch_execution_ExecutionError_for_openvm_circuit_arch_vm_GenerationError.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::vm::GenerationError".
      
      (* Error *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ source ] =>
          ltac:(M.monadic
            (let source :=
              M.alloc (| Ty.path "openvm_circuit::arch::execution::ExecutionError", source |) in
            Value.StructTuple
              "openvm_circuit::arch::vm::GenerationError::Execution"
              []
              []
              [ M.read (| source |) ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.path "openvm_circuit::arch::execution::ExecutionError" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_openvm_circuit_arch_execution_ExecutionError_for_openvm_circuit_arch_vm_GenerationError.
    
    Module Impl_core_fmt_Debug_for_openvm_circuit_arch_vm_GenerationError.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::vm::GenerationError".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.path "openvm_circuit::arch::vm::GenerationError" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "openvm_circuit::arch::vm::GenerationError::TraceHeightsLimitExceeded"
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "write_str",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "TraceHeightsLimitExceeded" |) |)
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::vm::GenerationError::Execution",
                        0
                      |) in
                    let __self_0 :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.path "openvm_circuit::arch::execution::ExecutionError" ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "debug_tuple_field1_finish",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Execution" |) |) |);
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.path "openvm_circuit::arch::execution::ExecutionError" ]
                              ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                            |)
                          ]
                        |)
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_openvm_circuit_arch_vm_GenerationError.
    
    Axiom VmMemoryState :
      forall (F : Ty.t),
      (Ty.apply (Ty.path "openvm_circuit::arch::vm::VmMemoryState") [] [ F ]) =
        (Ty.apply
          (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
          [
            M.unevaluated_const
              (mk_str (| "openvm_circuit_system_memory_controller_MemoryImage_discriminant" |))
          ]
          [ F ]).
    
    (* StructRecord
      {
        name := "Streams";
        const_params := [];
        ty_params := [ "F" ];
        fields :=
          [
            ("input_stream",
              Ty.apply
                (Ty.path "alloc::collections::vec_deque::VecDeque")
                []
                [
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ];
                  Ty.path "alloc::alloc::Global"
                ]);
            ("hint_stream",
              Ty.apply
                (Ty.path "alloc::collections::vec_deque::VecDeque")
                []
                [ F; Ty.path "alloc::alloc::Global" ]);
            ("hint_space",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ];
                  Ty.path "alloc::alloc::Global"
                ])
          ];
      } *)
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_F_for_openvm_circuit_arch_vm_Streams_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ].
      
      (* Clone *)
      Definition clone (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ],
                self
              |) in
            Value.mkStructRecord
              "openvm_circuit::arch::vm::Streams"
              []
              [ F ]
              [
                ("input_stream",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::collections::vec_deque::VecDeque")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::collections::vec_deque::VecDeque")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::arch::vm::Streams",
                              "input_stream"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("hint_stream",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::collections::vec_deque::VecDeque")
                      []
                      [ F; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::collections::vec_deque::VecDeque")
                        []
                        [ F; Ty.path "alloc::alloc::Global" ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::arch::vm::Streams",
                              "hint_stream"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("hint_space",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::arch::vm::Streams",
                              "hint_space"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *) [ ("clone", InstanceField.Method (clone F)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_F_for_openvm_circuit_arch_vm_Streams_F.
    
    Module Impl_core_default_Default_where_core_default_Default_F_for_openvm_circuit_arch_vm_Streams_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ].
      
      (* Default *)
      Definition default (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (Value.mkStructRecord
              "openvm_circuit::arch::vm::Streams"
              []
              [ F ]
              [
                ("input_stream",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::collections::vec_deque::VecDeque")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply
                        (Ty.path "alloc::collections::vec_deque::VecDeque")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |));
                ("hint_stream",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::collections::vec_deque::VecDeque")
                      []
                      [ F; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply
                        (Ty.path "alloc::collections::vec_deque::VecDeque")
                        []
                        [ F; Ty.path "alloc::alloc::Global" ],
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |));
                ("hint_space",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::default::Default"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *) [ ("default", InstanceField.Method (default F)) ].
    End Impl_core_default_Default_where_core_default_Default_F_for_openvm_circuit_arch_vm_Streams_F.
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_circuit_arch_vm_Streams_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ].
      
      (* Debug *)
      Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field3_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Streams" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "input_stream" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::collections::vec_deque::VecDeque")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::arch::vm::Streams",
                            "input_stream"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "hint_stream" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::collections::vec_deque::VecDeque")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::arch::vm::Streams",
                            "hint_stream"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "hint_space" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ F; Ty.path "alloc::alloc::Global" ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::arch::vm::Streams",
                                "hint_space"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_circuit_arch_vm_Streams_F.
    
    Module Impl_openvm_circuit_arch_vm_Streams_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ].
      
      (*
          pub fn new(input_stream: impl Into<VecDeque<Vec<F>>>) -> Self {
              Self {
                  input_stream: input_stream.into(),
                  hint_stream: VecDeque::default(),
                  hint_space: Vec::default(),
              }
          }
      *)
      Definition new (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [ impl_Into_VecDeque_Vec_F___ ], [ input_stream ] =>
          ltac:(M.monadic
            (let input_stream := M.alloc (| impl_Into_VecDeque_Vec_F___, input_stream |) in
            Value.mkStructRecord
              "openvm_circuit::arch::vm::Streams"
              []
              [ F ]
              [
                ("input_stream",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::collections::vec_deque::VecDeque")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::convert::Into",
                      impl_Into_VecDeque_Vec_F___,
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::collections::vec_deque::VecDeque")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ],
                      "into",
                      [],
                      []
                    |),
                    [ M.read (| input_stream |) ]
                  |));
                ("hint_stream",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::collections::vec_deque::VecDeque")
                      []
                      [ F; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply
                        (Ty.path "alloc::collections::vec_deque::VecDeque")
                        []
                        [ F; Ty.path "alloc::alloc::Global" ],
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |));
                ("hint_space",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "new" (new F).
      Admitted.
      Global Typeclasses Opaque new.
    End Impl_openvm_circuit_arch_vm_Streams_F.
    
    Module Impl_core_convert_From_alloc_collections_vec_deque_VecDeque_alloc_vec_Vec_F_alloc_alloc_Global_alloc_alloc_Global_for_openvm_circuit_arch_vm_Streams_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ].
      
      (*
          fn from(value: VecDeque<Vec<F>>) -> Self {
              Streams::new(value)
          }
      *)
      Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value :=
              M.alloc (|
                Ty.apply
                  (Ty.path "alloc::collections::vec_deque::VecDeque")
                  []
                  [
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ];
                    Ty.path "alloc::alloc::Global"
                  ],
                value
              |) in
            M.call_closure (|
              Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ],
              M.get_associated_function (|
                Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ],
                "new",
                [],
                [
                  Ty.apply
                    (Ty.path "alloc::collections::vec_deque::VecDeque")
                    []
                    [
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ];
                      Ty.path "alloc::alloc::Global"
                    ]
                ]
              |),
              [ M.read (| value |) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "alloc::collections::vec_deque::VecDeque")
              []
              [
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ];
                Ty.path "alloc::alloc::Global"
              ]
          ]
          (Self F)
          (* Instance *) [ ("from", InstanceField.Method (from F)) ].
    End Impl_core_convert_From_alloc_collections_vec_deque_VecDeque_alloc_vec_Vec_F_alloc_alloc_Global_alloc_alloc_Global_for_openvm_circuit_arch_vm_Streams_F.
    
    Module Impl_core_convert_From_alloc_vec_Vec_alloc_vec_Vec_F_alloc_alloc_Global_alloc_alloc_Global_for_openvm_circuit_arch_vm_Streams_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ].
      
      (*
          fn from(value: Vec<Vec<F>>) -> Self {
              Streams::new(value)
          }
      *)
      Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ value ] =>
          ltac:(M.monadic
            (let value :=
              M.alloc (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ];
                    Ty.path "alloc::alloc::Global"
                  ],
                value
              |) in
            M.call_closure (|
              Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ],
              M.get_associated_function (|
                Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ],
                "new",
                [],
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ];
                      Ty.path "alloc::alloc::Global"
                    ]
                ]
              |),
              [ M.read (| value |) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ];
                Ty.path "alloc::alloc::Global"
              ]
          ]
          (Self F)
          (* Instance *) [ ("from", InstanceField.Method (from F)) ].
    End Impl_core_convert_From_alloc_vec_Vec_alloc_vec_Vec_F_alloc_alloc_Global_alloc_alloc_Global_for_openvm_circuit_arch_vm_Streams_F.
    
    (* StructRecord
      {
        name := "VmExecutor";
        const_params := [];
        ty_params := [ "F"; "VC" ];
        fields :=
          [
            ("config", VC);
            ("overridden_heights",
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights" ]);
            ("trace_height_constraints",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.path "openvm_stark_backend::keygen::types::LinearConstraint";
                  Ty.path "alloc::alloc::Global"
                ]);
            ("_marker", Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ])
          ];
      } *)
    
    (*
    Enum ExitCode
    {
      const_params := [];
      ty_params := [];
      variants :=
        [
          {
            name := "Success";
            item := StructTuple [];
          };
          {
            name := "Error";
            item := StructTuple [];
          };
          {
            name := "Suspended";
            item := StructTuple [];
          }
        ];
    }
    *)
    
    Axiom IsDiscriminant_ExitCode_Success :
      M.IsDiscriminant "openvm_circuit::arch::vm::ExitCode::Success" 0.
    Axiom IsDiscriminant_ExitCode_Error :
      M.IsDiscriminant "openvm_circuit::arch::vm::ExitCode::Error" 1.
    Axiom IsDiscriminant_ExitCode_Suspended :
      M.IsDiscriminant "openvm_circuit::arch::vm::ExitCode::Suspended" 2.
    
    (* StructRecord
      {
        name := "VmExecutorResult";
        const_params := [];
        ty_params := [ "SC" ];
        fields :=
          [
            ("per_segment",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply (Ty.path "openvm_stark_backend::prover::types::ProofInput") [] [ SC ];
                  Ty.path "alloc::alloc::Global"
                ]);
            ("final_memory",
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                    [
                      M.unevaluated_const
                        (mk_str (|
                          "openvm_circuit_system_memory_controller_MemoryImage_discriminant"
                        |))
                    ]
                    [
                      Ty.associated_in_trait
                        "p3_commit::domain::PolynomialSpace"
                        []
                        []
                        (Ty.associated_in_trait
                          "p3_commit::pcs::Pcs"
                          []
                          [
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge";
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenger"
                          ]
                          (Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Pcs")
                          "Domain")
                        "Val"
                    ]
                ])
          ];
      } *)
    
    (* StructRecord
      {
        name := "VmExecutorNextSegmentState";
        const_params := [];
        ty_params := [ "F" ];
        fields :=
          [
            ("memory",
              Ty.apply
                (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                [
                  M.unevaluated_const
                    (mk_str (|
                      "openvm_circuit_system_memory_controller_MemoryImage_discriminant"
                    |))
                ]
                [ F ]);
            ("input", Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ]);
            ("pc", Ty.path "u32");
            ("metrics", Ty.path "openvm_circuit::metrics::VmMetrics")
          ];
      } *)
    
    Module Impl_openvm_circuit_arch_vm_VmExecutorNextSegmentState_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutorNextSegmentState") [] [ F ].
      
      (*
          pub fn new(memory: MemoryImage<F>, input: impl Into<Streams<F>>, pc: u32) -> Self {
              Self {
                  memory,
                  input: input.into(),
                  pc,
                  #[cfg(feature = "bench-metrics")]
                  metrics: VmMetrics::default(),
              }
          }
      *)
      Definition new (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [ impl_Into_Streams_F__ ], [ memory; input; pc ] =>
          ltac:(M.monadic
            (let memory :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                  [
                    M.unevaluated_const
                      (mk_str (|
                        "openvm_circuit_system_memory_controller_MemoryImage_discriminant"
                      |))
                  ]
                  [ F ],
                memory
              |) in
            let input := M.alloc (| impl_Into_Streams_F__, input |) in
            let pc := M.alloc (| Ty.path "u32", pc |) in
            Value.mkStructRecord
              "openvm_circuit::arch::vm::VmExecutorNextSegmentState"
              []
              [ F ]
              [
                ("memory", M.read (| memory |));
                ("input",
                  M.call_closure (|
                    Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ],
                    M.get_trait_method (|
                      "core::convert::Into",
                      impl_Into_Streams_F__,
                      [],
                      [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ],
                      "into",
                      [],
                      []
                    |),
                    [ M.read (| input |) ]
                  |));
                ("pc", M.read (| pc |));
                ("metrics",
                  M.call_closure (|
                    Ty.path "openvm_circuit::metrics::VmMetrics",
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.path "openvm_circuit::metrics::VmMetrics",
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "new" (new F).
      Admitted.
      Global Typeclasses Opaque new.
    End Impl_openvm_circuit_arch_vm_VmExecutorNextSegmentState_F.
    
    (* StructRecord
      {
        name := "VmExecutorOneSegmentResult";
        const_params := [];
        ty_params := [ "F"; "VC" ];
        fields :=
          [
            ("segment",
              Ty.apply (Ty.path "openvm_circuit::arch::segment::ExecutionSegment") [] [ F; VC ]);
            ("next_state",
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutorNextSegmentState") [] [ F ]
                ])
          ];
      } *)
    
    Module Impl_openvm_circuit_arch_vm_VmExecutor_F_VC.
      Definition Self (F VC : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutor") [] [ F; VC ].
      
      (*
          pub fn new(config: VC) -> Self {
              Self::new_with_overridden_trace_heights(config, None)
          }
      *)
      Definition new (F VC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F VC in
        match ε, τ, α with
        | [], [], [ config ] =>
          ltac:(M.monadic
            (let config := M.alloc (| VC, config |) in
            M.call_closure (|
              Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutor") [] [ F; VC ],
              M.get_associated_function (|
                Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutor") [] [ F; VC ],
                "new_with_overridden_trace_heights",
                [],
                []
              |),
              [
                M.read (| config |);
                Value.StructTuple
                  "core::option::Option::None"
                  []
                  [ Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights" ]
                  []
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (F VC : Ty.t),
        M.IsAssociatedFunction.C (Self F VC) "new" (new F VC).
      Admitted.
      Global Typeclasses Opaque new.
      
      (*
          pub fn set_override_trace_heights(&mut self, overridden_heights: VmComplexTraceHeights) {
              self.overridden_heights = Some(overridden_heights);
          }
      *)
      Definition set_override_trace_heights
          (F VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F VC in
        match ε, τ, α with
        | [], [], [ self; overridden_heights ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutor") [] [ F; VC ] ],
                self
              |) in
            let overridden_heights :=
              M.alloc (|
                Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights",
                overridden_heights
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::vm::VmExecutor",
                    "overridden_heights"
                  |),
                  Value.StructTuple
                    "core::option::Option::Some"
                    []
                    [ Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights" ]
                    [ M.read (| overridden_heights |) ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_set_override_trace_heights :
        forall (F VC : Ty.t),
        M.IsAssociatedFunction.C
          (Self F VC)
          "set_override_trace_heights"
          (set_override_trace_heights F VC).
      Admitted.
      Global Typeclasses Opaque set_override_trace_heights.
      
      (*
          pub fn new_with_overridden_trace_heights(
              config: VC,
              overridden_heights: Option<VmComplexTraceHeights>,
          ) -> Self {
              Self {
                  config,
                  overridden_heights,
                  trace_height_constraints: vec![],
                  _marker: Default::default(),
              }
          }
      *)
      Definition new_with_overridden_trace_heights
          (F VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F VC in
        match ε, τ, α with
        | [], [], [ config; overridden_heights ] =>
          ltac:(M.monadic
            (let config := M.alloc (| VC, config |) in
            let overridden_heights :=
              M.alloc (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights" ],
                overridden_heights
              |) in
            Value.mkStructRecord
              "openvm_circuit::arch::vm::VmExecutor"
              []
              [ F; VC ]
              [
                ("config", M.read (| config |));
                ("overridden_heights", M.read (| overridden_heights |));
                ("trace_height_constraints",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.path "openvm_stark_backend::keygen::types::LinearConstraint";
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.path "openvm_stark_backend::keygen::types::LinearConstraint";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      [],
                      []
                    |),
                    []
                  |));
                ("_marker",
                  M.call_closure (|
                    Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ],
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ],
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new_with_overridden_trace_heights :
        forall (F VC : Ty.t),
        M.IsAssociatedFunction.C
          (Self F VC)
          "new_with_overridden_trace_heights"
          (new_with_overridden_trace_heights F VC).
      Admitted.
      Global Typeclasses Opaque new_with_overridden_trace_heights.
      
      (*
          pub fn continuation_enabled(&self) -> bool {
              self.config.system().continuation_enabled
          }
      *)
      Definition continuation_enabled
          (F VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F VC in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutor") [] [ F; VC ] ],
                self
              |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.deref (|
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_circuit::arch::config::SystemConfig" ],
                    M.get_trait_method (|
                      "openvm_circuit::arch::config::VmConfig",
                      VC,
                      [],
                      [ F ],
                      "system",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::arch::vm::VmExecutor",
                          "config"
                        |)
                      |)
                    ]
                  |)
                |),
                "openvm_circuit::arch::config::SystemConfig",
                "continuation_enabled"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_continuation_enabled :
        forall (F VC : Ty.t),
        M.IsAssociatedFunction.C (Self F VC) "continuation_enabled" (continuation_enabled F VC).
      Admitted.
      Global Typeclasses Opaque continuation_enabled.
      
      (*
          pub fn execute_and_then<R, E>(
              &self,
              exe: impl Into<VmExe<F>>,
              input: impl Into<Streams<F>>,
              mut f: impl FnMut(usize, ExecutionSegment<F, VC>) -> Result<R, E>,
              map_err: impl Fn(ExecutionError) -> E,
          ) -> Result<Vec<R>, E> {
              let mem_config = self.config.system().memory_config;
              let exe = exe.into();
              let mut segment_results = vec![];
              let memory = AddressMap::from_iter(
                  mem_config.as_offset,
                  1 << mem_config.as_height,
                  1 << mem_config.pointer_max_bits,
                  exe.init_memory.clone(),
              );
              let pc = exe.pc_start;
              let mut state = VmExecutorNextSegmentState::new(memory, input, pc);
      
              #[cfg(feature = "bench-metrics")]
              {
                  state.metrics.fn_bounds = exe.fn_bounds.clone();
              }
      
              let mut segment_idx = 0;
      
              loop {
                  let _span = info_span!("execute_segment", segment = segment_idx).entered();
                  let one_segment_result = self
                      .execute_until_segment(exe.clone(), state)
                      .map_err(&map_err)?;
                  segment_results.push(f(segment_idx, one_segment_result.segment)?);
                  if one_segment_result.next_state.is_none() {
                      break;
                  }
                  state = one_segment_result.next_state.unwrap();
                  segment_idx += 1;
              }
              tracing::debug!("Number of continuation segments: {}", segment_results.len());
              #[cfg(feature = "bench-metrics")]
              metrics::counter!("num_segments").absolute(segment_results.len() as u64);
      
              Ok(segment_results)
          }
      *)
      Definition execute_and_then
          (F VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F VC in
        match ε, τ, α with
        | [],
            [
              R;
              E;
              impl_Into_VmExe_F__;
              impl_Into_Streams_F__;
              impl_FnMut_usize__ExecutionSegment_F__VC___arrow_Result_R__E_;
              impl_Fn_ExecutionError__arrow_E
            ],
            [ self; exe; input; f; map_err ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutor") [] [ F; VC ] ],
                self
              |) in
            let exe := M.alloc (| impl_Into_VmExe_F__, exe |) in
            let input := M.alloc (| impl_Into_Streams_F__, input |) in
            let f :=
              M.alloc (| impl_FnMut_usize__ExecutionSegment_F__VC___arrow_Result_R__E_, f |) in
            let map_err := M.alloc (| impl_Fn_ExecutionError__arrow_E, map_err |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ R; Ty.path "alloc::alloc::Global" ]; E
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ mem_config : Ty.path "openvm_circuit::arch::config::MemoryConfig" :=
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.path "openvm_circuit::arch::config::SystemConfig" ],
                            M.get_trait_method (|
                              "openvm_circuit::arch::config::VmConfig",
                              VC,
                              [],
                              [ F ],
                              "system",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::arch::vm::VmExecutor",
                                  "config"
                                |)
                              |)
                            ]
                          |)
                        |),
                        "openvm_circuit::arch::config::SystemConfig",
                        "memory_config"
                      |)
                    |) in
                  let~ exe : Ty.apply (Ty.path "openvm_instructions::exe::VmExe") [] [ F ] :=
                    M.call_closure (|
                      Ty.apply (Ty.path "openvm_instructions::exe::VmExe") [] [ F ],
                      M.get_trait_method (|
                        "core::convert::Into",
                        impl_Into_VmExe_F__,
                        [],
                        [ Ty.apply (Ty.path "openvm_instructions::exe::VmExe") [] [ F ] ],
                        "into",
                        [],
                        []
                      |),
                      [ M.read (| exe |) ]
                    |) in
                  let~ segment_results :
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ R; Ty.path "alloc::alloc::Global" ] :=
                    M.call_closure (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ R; Ty.path "alloc::alloc::Global" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ R; Ty.path "alloc::alloc::Global" ],
                        "new",
                        [],
                        []
                      |),
                      []
                    |) in
                  let~ memory :
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                        [ Value.Integer IntegerKind.Usize 4096 ]
                        [ F ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                        [ Value.Integer IntegerKind.Usize 4096 ]
                        [ F ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                          [ Value.Integer IntegerKind.Usize 4096 ]
                          [ F ],
                        "from_iter",
                        [],
                        [
                          Ty.apply
                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                            []
                            [
                              Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                              F;
                              Ty.path "alloc::alloc::Global"
                            ]
                        ]
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            mem_config,
                            "openvm_circuit::arch::config::MemoryConfig",
                            "as_offset"
                          |)
                        |);
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.shl,
                          [
                            Value.Integer IntegerKind.Usize 1;
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                mem_config,
                                "openvm_circuit::arch::config::MemoryConfig",
                                "as_height"
                              |)
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.shl,
                          [
                            Value.Integer IntegerKind.Usize 1;
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                mem_config,
                                "openvm_circuit::arch::config::MemoryConfig",
                                "pointer_max_bits"
                              |)
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                            []
                            [
                              Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                              F;
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.apply
                              (Ty.path "alloc::collections::btree::map::BTreeMap")
                              []
                              [
                                Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                F;
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                exe,
                                "openvm_instructions::exe::VmExe",
                                "init_memory"
                              |)
                            |)
                          ]
                        |)
                      ]
                    |) in
                  let~ pc : Ty.path "u32" :=
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        exe,
                        "openvm_instructions::exe::VmExe",
                        "pc_start"
                      |)
                    |) in
                  let~ state :
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::vm::VmExecutorNextSegmentState")
                        []
                        [ F ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::vm::VmExecutorNextSegmentState")
                        []
                        [ F ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::vm::VmExecutorNextSegmentState")
                          []
                          [ F ],
                        "new",
                        [],
                        [ impl_Into_Streams_F__ ]
                      |),
                      [ M.read (| memory |); M.read (| input |); M.read (| pc |) ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      let~ _ : Ty.tuple [] :=
                        M.write (|
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              state,
                              "openvm_circuit::arch::vm::VmExecutorNextSegmentState",
                              "metrics"
                            |),
                            "openvm_circuit::metrics::VmMetrics",
                            "fn_bounds"
                          |),
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::collections::btree::map::BTreeMap")
                              []
                              [
                                Ty.path "u32";
                                Ty.path "openvm_instructions::exe::FnBound";
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.apply
                                (Ty.path "alloc::collections::btree::map::BTreeMap")
                                []
                                [
                                  Ty.path "u32";
                                  Ty.path "openvm_instructions::exe::FnBound";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  exe,
                                  "openvm_instructions::exe::VmExe",
                                  "fn_bounds"
                                |)
                              |)
                            ]
                          |)
                        |) in
                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                    |) in
                  let~ segment_idx : Ty.path "usize" := Value.Integer IntegerKind.Usize 0 in
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      M.loop (|
                        Ty.tuple [],
                        ltac:(M.monadic
                          (let~ _span : Ty.path "tracing::span::EnteredSpan" :=
                            M.call_closure (|
                              Ty.path "tracing::span::EnteredSpan",
                              M.get_associated_function (|
                                Ty.path "tracing::span::Span",
                                "entered",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  let~ interest : Ty.path "tracing_core::subscriber::Interest" :=
                                    M.call_closure (|
                                      Ty.path "tracing_core::subscriber::Interest",
                                      M.get_associated_function (|
                                        Ty.path "tracing_core::subscriber::Interest",
                                        "never",
                                        [],
                                        []
                                      |),
                                      []
                                    |) in
                                  M.alloc (|
                                    Ty.path "tracing::span::Span",
                                    M.match_operator (|
                                      Ty.path "tracing::span::Span",
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  Ty.path "bool",
                                                  LogicalOp.and (|
                                                    LogicalOp.and (|
                                                      LogicalOp.and (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_trait_method (|
                                                            "core::cmp::PartialOrd",
                                                            Ty.path "tracing_core::metadata::Level",
                                                            [],
                                                            [
                                                              Ty.path
                                                                "tracing_core::metadata::LevelFilter"
                                                            ],
                                                            "le",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              get_associated_constant (|
                                                                Ty.path
                                                                  "tracing_core::metadata::Level",
                                                                "INFO",
                                                                Ty.path
                                                                  "tracing_core::metadata::Level"
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              get_constant (|
                                                                "tracing::level_filters::STATIC_MAX_LEVEL",
                                                                Ty.path
                                                                  "tracing_core::metadata::LevelFilter"
                                                              |)
                                                            |)
                                                          ]
                                                        |),
                                                        ltac:(M.monadic
                                                          (M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_trait_method (|
                                                              "core::cmp::PartialOrd",
                                                              Ty.path
                                                                "tracing_core::metadata::Level",
                                                              [],
                                                              [
                                                                Ty.path
                                                                  "tracing_core::metadata::LevelFilter"
                                                              ],
                                                              "le",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                get_associated_constant (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::Level",
                                                                  "INFO",
                                                                  Ty.path
                                                                    "tracing_core::metadata::Level"
                                                                |)
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::LevelFilter",
                                                                  M.call_closure (|
                                                                    Ty.path
                                                                      "tracing_core::metadata::LevelFilter",
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "tracing_core::metadata::LevelFilter",
                                                                      "current",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    []
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)))
                                                      |),
                                                      ltac:(M.monadic
                                                        (M.read (|
                                                          let~ _ : Ty.tuple [] :=
                                                            M.write (|
                                                              interest,
                                                              M.call_closure (|
                                                                Ty.path
                                                                  "tracing_core::subscriber::Interest",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::callsite::DefaultCallsite",
                                                                  "interest",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (|
                                                                        get_constant (|
                                                                          "openvm_circuit::arch::vm::execute_and_then::__CALLSITE",
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::callsite::DefaultCallsite"
                                                                            ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          M.alloc (|
                                                            Ty.path "bool",
                                                            UnOp.not (|
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::subscriber::Interest",
                                                                  "is_never",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    interest
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)))
                                                    |),
                                                    ltac:(M.monadic
                                                      (M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_function (|
                                                          "tracing::__macro_support::__is_enabled",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::metadata::Metadata"
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "tracing_core::callsite::Callsite",
                                                                  Ty.path
                                                                    "tracing_core::callsite::DefaultCallsite",
                                                                  [],
                                                                  [],
                                                                  "metadata",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (|
                                                                        get_constant (|
                                                                          "openvm_circuit::arch::vm::execute_and_then::__CALLSITE",
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::callsite::DefaultCallsite"
                                                                            ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |);
                                                          M.read (| interest |)
                                                        ]
                                                      |)))
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.read (|
                                              let~ meta :
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "tracing_core::metadata::Metadata"
                                                    ] :=
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "tracing_core::metadata::Metadata" ],
                                                  M.get_trait_method (|
                                                    "tracing_core::callsite::Callsite",
                                                    Ty.path
                                                      "tracing_core::callsite::DefaultCallsite",
                                                    [],
                                                    [],
                                                    "metadata",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.read (|
                                                          get_constant (|
                                                            "openvm_circuit::arch::vm::execute_and_then::__CALLSITE",
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite"
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |) in
                                              M.alloc (|
                                                Ty.path "tracing::span::Span",
                                                M.call_closure (|
                                                  Ty.path "tracing::span::Span",
                                                  M.get_associated_function (|
                                                    Ty.path "tracing::span::Span",
                                                    "new",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| meta |) |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          let~ iter :
                                                              Ty.path "tracing_core::field::Iter" :=
                                                            M.call_closure (|
                                                              Ty.path "tracing_core::field::Iter",
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::field::FieldSet",
                                                                "iter",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::field::FieldSet"
                                                                        ],
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "tracing_core::metadata::Metadata",
                                                                        "fields",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| meta |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |) in
                                                          M.alloc (|
                                                            Ty.path "tracing_core::field::ValueSet",
                                                            M.call_closure (|
                                                              Ty.path
                                                                "tracing_core::field::ValueSet",
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::field::FieldSet",
                                                                "value_set",
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    ]
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::field::Field"
                                                                            ];
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.dyn
                                                                                    [
                                                                                      ("tracing_core::field::Value::Trait",
                                                                                        [])
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::field::FieldSet"
                                                                        ],
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "tracing_core::metadata::Metadata",
                                                                        "fields",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| meta |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.alloc (|
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              1
                                                                          ]
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.path
                                                                                      "tracing_core::field::Field"
                                                                                  ];
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::option::Option")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.dyn
                                                                                          [
                                                                                            ("tracing_core::field::Value::Trait",
                                                                                              [])
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ],
                                                                        Value.Array
                                                                          [
                                                                            Value.Tuple
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.alloc (|
                                                                                    Ty.path
                                                                                      "tracing_core::field::Field",
                                                                                    M.call_closure (|
                                                                                      Ty.path
                                                                                        "tracing_core::field::Field",
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::option::Option")
                                                                                          []
                                                                                          [
                                                                                            Ty.path
                                                                                              "tracing_core::field::Field"
                                                                                          ],
                                                                                        "expect",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.call_closure (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::option::Option")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "tracing_core::field::Field"
                                                                                            ],
                                                                                          M.get_trait_method (|
                                                                                            "core::iter::traits::iterator::Iterator",
                                                                                            Ty.path
                                                                                              "tracing_core::field::Iter",
                                                                                            [],
                                                                                            [],
                                                                                            "next",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.MutRef,
                                                                                              M.deref (|
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.MutRef,
                                                                                                  iter
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                        |);
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.deref (|
                                                                                            mk_str (|
                                                                                              "FieldSet corrupted (this is a bug)"
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |);
                                                                                Value.StructTuple
                                                                                  "core::option::Option::Some"
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.dyn
                                                                                          [
                                                                                            ("tracing_core::field::Value::Trait",
                                                                                              [])
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                                  [
                                                                                    M.read (|
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.dyn
                                                                                                [
                                                                                                  ("tracing_core::field::Value::Trait",
                                                                                                    [])
                                                                                                ]
                                                                                            ],
                                                                                          M.call_closure (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              []
                                                                                              [
                                                                                                Ty.dyn
                                                                                                  [
                                                                                                    ("tracing_core::field::Value::Trait",
                                                                                                      [])
                                                                                                  ]
                                                                                              ],
                                                                                            M.pointer_coercion
                                                                                              M.PointerCoercion.Unsize
                                                                                              (Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "usize"
                                                                                                ])
                                                                                              (Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.dyn
                                                                                                    [
                                                                                                      ("tracing_core::field::Value::Trait",
                                                                                                        [])
                                                                                                    ]
                                                                                                ]),
                                                                                            [
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.Ref,
                                                                                                M.deref (|
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    segment_idx
                                                                                                  |)
                                                                                                |)
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |))
                                                                                    |)
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.read (|
                                              let~ span : Ty.path "tracing::span::Span" :=
                                                M.call_closure (|
                                                  Ty.path "tracing::span::Span",
                                                  M.get_function (|
                                                    "tracing::__macro_support::__disabled_span",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.path
                                                                "tracing_core::metadata::Metadata"
                                                            ],
                                                          M.get_trait_method (|
                                                            "tracing_core::callsite::Callsite",
                                                            Ty.path
                                                              "tracing_core::callsite::DefaultCallsite",
                                                            [],
                                                            [],
                                                            "metadata",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.read (|
                                                                  get_constant (|
                                                                    "openvm_circuit::arch::vm::execute_and_then::__CALLSITE",
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "tracing_core::callsite::DefaultCallsite"
                                                                      ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |) in
                                              let~ _ : Ty.tuple [] := Value.Tuple [] in
                                              span
                                            |)))
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |) in
                          let~ one_segment_result :
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::vm::VmExecutorOneSegmentResult")
                                []
                                [ F; VC ] :=
                            M.match_operator (|
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::vm::VmExecutorOneSegmentResult")
                                []
                                [ F; VC ],
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "core::ops::control_flow::ControlFlow")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [ Ty.path "core::convert::Infallible"; E ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::arch::vm::VmExecutorOneSegmentResult")
                                      []
                                      [ F; VC ]
                                  ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::ops::control_flow::ControlFlow")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [ Ty.path "core::convert::Infallible"; E ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::arch::vm::VmExecutorOneSegmentResult")
                                        []
                                        [ F; VC ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::try_trait::Try",
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::vm::VmExecutorOneSegmentResult")
                                          []
                                          [ F; VC ];
                                        E
                                      ],
                                    [],
                                    [],
                                    "branch",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::vm::VmExecutorOneSegmentResult")
                                            []
                                            [ F; VC ];
                                          E
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::vm::VmExecutorOneSegmentResult")
                                              []
                                              [ F; VC ];
                                            Ty.path
                                              "openvm_circuit::arch::execution::ExecutionError"
                                          ],
                                        "map_err",
                                        [],
                                        [
                                          E;
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ impl_Fn_ExecutionError__arrow_E ]
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::arch::vm::VmExecutorOneSegmentResult")
                                                []
                                                [ F; VC ];
                                              Ty.path
                                                "openvm_circuit::arch::execution::ExecutionError"
                                            ],
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "openvm_circuit::arch::vm::VmExecutor")
                                              []
                                              [ F; VC ],
                                            "execute_until_segment",
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "openvm_instructions::exe::VmExe")
                                                []
                                                [ F ]
                                            ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| self |) |)
                                            |);
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "openvm_instructions::exe::VmExe")
                                                []
                                                [ F ],
                                              M.get_trait_method (|
                                                "core::clone::Clone",
                                                Ty.apply
                                                  (Ty.path "openvm_instructions::exe::VmExe")
                                                  []
                                                  [ F ],
                                                [],
                                                [],
                                                "clone",
                                                [],
                                                []
                                              |),
                                              [ M.borrow (| Pointer.Kind.Ref, exe |) ]
                                            |);
                                            M.read (| state |)
                                          ]
                                        |);
                                        M.borrow (| Pointer.Kind.Ref, map_err |)
                                      ]
                                    |)
                                  ]
                                |)
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Break",
                                        0
                                      |) in
                                    let residual :=
                                      M.copy (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [ Ty.path "core::convert::Infallible"; E ],
                                        γ0_0
                                      |) in
                                    M.never_to_any (|
                                      M.read (|
                                        M.return_ (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ R; Ty.path "alloc::alloc::Global" ];
                                                E
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::try_trait::FromResidual",
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ R; Ty.path "alloc::alloc::Global" ];
                                                  E
                                                ],
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [ Ty.path "core::convert::Infallible"; E ]
                                              ],
                                              "from_residual",
                                              [],
                                              []
                                            |),
                                            [ M.read (| residual |) ]
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 :=
                                      M.SubPointer.get_struct_tuple_field (|
                                        γ,
                                        "core::ops::control_flow::ControlFlow::Continue",
                                        0
                                      |) in
                                    let val :=
                                      M.copy (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::vm::VmExecutorOneSegmentResult")
                                          []
                                          [ F; VC ],
                                        γ0_0
                                      |) in
                                    M.read (| val |)))
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ R; Ty.path "alloc::alloc::Global" ],
                                "push",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, segment_results |);
                                M.match_operator (|
                                  R,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [ Ty.path "core::convert::Infallible"; E ];
                                        R
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [ Ty.path "core::convert::Infallible"; E ];
                                          R
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply (Ty.path "core::result::Result") [] [ R; E ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply (Ty.path "core::result::Result") [] [ R; E ],
                                          M.get_trait_method (|
                                            "core::ops::function::FnMut",
                                            impl_FnMut_usize__ExecutionSegment_F__VC___arrow_Result_R__E_,
                                            [],
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.path "usize";
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::segment::ExecutionSegment")
                                                    []
                                                    [ F; VC ]
                                                ]
                                            ],
                                            "call_mut",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (| Pointer.Kind.MutRef, f |);
                                            Value.Tuple
                                              [
                                                M.read (| segment_idx |);
                                                M.read (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    one_segment_result,
                                                    "openvm_circuit::arch::vm::VmExecutorOneSegmentResult",
                                                    "segment"
                                                  |)
                                                |)
                                              ]
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [ Ty.path "core::convert::Infallible"; E ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ R; Ty.path "alloc::alloc::Global" ];
                                                    E
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ R; Ty.path "alloc::alloc::Global" ];
                                                      E
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [ Ty.path "core::convert::Infallible"; E ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| R, γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |)
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          Ty.path "bool",
                                          M.call_closure (|
                                            Ty.path "bool",
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::vm::VmExecutorNextSegmentState")
                                                    []
                                                    [ F ]
                                                ],
                                              "is_none",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.SubPointer.get_struct_record_field (|
                                                  one_segment_result,
                                                  "openvm_circuit::arch::vm::VmExecutorOneSegmentResult",
                                                  "next_state"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.never_to_any (| M.read (| M.break (||) |) |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.write (|
                              state,
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::vm::VmExecutorNextSegmentState")
                                  []
                                  [ F ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::arch::vm::VmExecutorNextSegmentState")
                                        []
                                        [ F ]
                                    ],
                                  "unwrap",
                                  [],
                                  []
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      one_segment_result,
                                      "openvm_circuit::arch::vm::VmExecutorOneSegmentResult",
                                      "next_state"
                                    |)
                                  |)
                                ]
                              |)
                            |) in
                          let~ _ : Ty.tuple [] :=
                            let β := segment_idx in
                            M.write (|
                              β,
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.add,
                                [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                              |)
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                      |)
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      let~ enabled : Ty.path "bool" :=
                        LogicalOp.and (|
                          LogicalOp.and (|
                            M.call_closure (|
                              Ty.path "bool",
                              M.get_trait_method (|
                                "core::cmp::PartialOrd",
                                Ty.path "tracing_core::metadata::Level",
                                [],
                                [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                "le",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  get_associated_constant (|
                                    Ty.path "tracing_core::metadata::Level",
                                    "DEBUG",
                                    Ty.path "tracing_core::metadata::Level"
                                  |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  get_constant (|
                                    "tracing::level_filters::STATIC_MAX_LEVEL",
                                    Ty.path "tracing_core::metadata::LevelFilter"
                                  |)
                                |)
                              ]
                            |),
                            ltac:(M.monadic
                              (M.call_closure (|
                                Ty.path "bool",
                                M.get_trait_method (|
                                  "core::cmp::PartialOrd",
                                  Ty.path "tracing_core::metadata::Level",
                                  [],
                                  [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                  "le",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    get_associated_constant (|
                                      Ty.path "tracing_core::metadata::Level",
                                      "DEBUG",
                                      Ty.path "tracing_core::metadata::Level"
                                    |)
                                  |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Ty.path "tracing_core::metadata::LevelFilter",
                                      M.call_closure (|
                                        Ty.path "tracing_core::metadata::LevelFilter",
                                        M.get_associated_function (|
                                          Ty.path "tracing_core::metadata::LevelFilter",
                                          "current",
                                          [],
                                          []
                                        |),
                                        []
                                      |)
                                    |)
                                  |)
                                ]
                              |)))
                          |),
                          ltac:(M.monadic
                            (M.read (|
                              let~ interest : Ty.path "tracing_core::subscriber::Interest" :=
                                M.call_closure (|
                                  Ty.path "tracing_core::subscriber::Interest",
                                  M.get_associated_function (|
                                    Ty.path "tracing_core::callsite::DefaultCallsite",
                                    "interest",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.read (|
                                          get_constant (|
                                            "openvm_circuit::arch::vm::execute_and_then::__CALLSITE'1",
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.path "tracing_core::callsite::DefaultCallsite" ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |) in
                              M.alloc (|
                                Ty.path "bool",
                                LogicalOp.and (|
                                  UnOp.not (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_associated_function (|
                                        Ty.path "tracing_core::subscriber::Interest",
                                        "is_never",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, interest |) ]
                                    |)
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      Ty.path "bool",
                                      M.get_function (|
                                        "tracing::__macro_support::__is_enabled",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [ Ty.path "tracing_core::metadata::Metadata" ],
                                              M.get_trait_method (|
                                                "tracing_core::callsite::Callsite",
                                                Ty.path "tracing_core::callsite::DefaultCallsite",
                                                [],
                                                [],
                                                "metadata",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.read (|
                                                      get_constant (|
                                                        "openvm_circuit::arch::vm::execute_and_then::__CALLSITE'1",
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.path
                                                              "tracing_core::callsite::DefaultCallsite"
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |);
                                        M.read (| interest |)
                                      ]
                                    |)))
                                |)
                              |)
                            |)))
                        |) in
                      M.alloc (|
                        Ty.tuple [],
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.use enabled in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.read (|
                                  let~ _ : Ty.tuple [] :=
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_trait_method (|
                                        "core::ops::function::Fn",
                                        Ty.function
                                          [ Ty.path "tracing_core::field::ValueSet" ]
                                          (Ty.tuple []),
                                        [],
                                        [ Ty.tuple [ Ty.path "tracing_core::field::ValueSet" ] ],
                                        "call",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.function
                                              [ Ty.path "tracing_core::field::ValueSet" ]
                                              (Ty.tuple []),
                                            M.closure
                                              (fun γ =>
                                                ltac:(M.monadic
                                                  match γ with
                                                  | [ α0 ] =>
                                                    ltac:(M.monadic
                                                      (M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (|
                                                          Ty.path "tracing_core::field::ValueSet",
                                                          α0
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let value_set :=
                                                                M.copy (|
                                                                  Ty.path
                                                                    "tracing_core::field::ValueSet",
                                                                  γ
                                                                |) in
                                                              M.read (|
                                                                let~ meta :
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "tracing_core::metadata::Metadata"
                                                                      ] :=
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "tracing_core::metadata::Metadata"
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "tracing_core::callsite::Callsite",
                                                                      Ty.path
                                                                        "tracing_core::callsite::DefaultCallsite",
                                                                      [],
                                                                      [],
                                                                      "metadata",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (|
                                                                            get_constant (|
                                                                              "openvm_circuit::arch::vm::execute_and_then::__CALLSITE'1",
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "tracing_core::callsite::DefaultCallsite"
                                                                                ]
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |) in
                                                                let~ _ : Ty.tuple [] :=
                                                                  M.call_closure (|
                                                                    Ty.tuple [],
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "tracing_core::event::Event",
                                                                      "dispatch",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| meta |)
                                                                        |)
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            value_set
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |) in
                                                                M.alloc (|
                                                                  Ty.tuple [],
                                                                  Value.Tuple []
                                                                |)
                                                              |)))
                                                        ]
                                                      |)))
                                                  | _ => M.impossible "wrong number of arguments"
                                                  end))
                                          |)
                                        |);
                                        Value.Tuple
                                          [
                                            M.read (|
                                              let~ iter : Ty.path "tracing_core::field::Iter" :=
                                                M.call_closure (|
                                                  Ty.path "tracing_core::field::Iter",
                                                  M.get_associated_function (|
                                                    Ty.path "tracing_core::field::FieldSet",
                                                    "iter",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.path
                                                                "tracing_core::field::FieldSet"
                                                            ],
                                                          M.get_associated_function (|
                                                            Ty.path
                                                              "tracing_core::metadata::Metadata",
                                                            "fields",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "tracing_core::metadata::Metadata"
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "tracing_core::callsite::Callsite",
                                                                    Ty.path
                                                                      "tracing_core::callsite::DefaultCallsite",
                                                                    [],
                                                                    [],
                                                                    "metadata",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (|
                                                                          get_constant (|
                                                                            "openvm_circuit::arch::vm::execute_and_then::__CALLSITE'1",
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "tracing_core::callsite::DefaultCallsite"
                                                                              ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |) in
                                              M.alloc (|
                                                Ty.path "tracing_core::field::ValueSet",
                                                M.call_closure (|
                                                  Ty.path "tracing_core::field::ValueSet",
                                                  M.get_associated_function (|
                                                    Ty.path "tracing_core::field::FieldSet",
                                                    "value_set",
                                                    [],
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 1 ]
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::field::Field"
                                                                ];
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.dyn
                                                                        [
                                                                          ("tracing_core::field::Value::Trait",
                                                                            [])
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                    ]
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.path
                                                                "tracing_core::field::FieldSet"
                                                            ],
                                                          M.get_associated_function (|
                                                            Ty.path
                                                              "tracing_core::metadata::Metadata",
                                                            "fields",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.path
                                                                        "tracing_core::metadata::Metadata"
                                                                    ],
                                                                  M.get_trait_method (|
                                                                    "tracing_core::callsite::Callsite",
                                                                    Ty.path
                                                                      "tracing_core::callsite::DefaultCallsite",
                                                                    [],
                                                                    [],
                                                                    "metadata",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (|
                                                                          get_constant (|
                                                                            "openvm_circuit::arch::vm::execute_and_then::__CALLSITE'1",
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "tracing_core::callsite::DefaultCallsite"
                                                                              ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 1 ]
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "tracing_core::field::Field"
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::option::Option")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("tracing_core::field::Value::Trait",
                                                                                  [])
                                                                              ]
                                                                          ]
                                                                      ]
                                                                  ]
                                                              ],
                                                            Value.Array
                                                              [
                                                                Value.Tuple
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.alloc (|
                                                                        Ty.path
                                                                          "tracing_core::field::Field",
                                                                        M.call_closure (|
                                                                          Ty.path
                                                                            "tracing_core::field::Field",
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "tracing_core::field::Field"
                                                                              ],
                                                                            "expect",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::option::Option")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "tracing_core::field::Field"
                                                                                ],
                                                                              M.get_trait_method (|
                                                                                "core::iter::traits::iterator::Iterator",
                                                                                Ty.path
                                                                                  "tracing_core::field::Iter",
                                                                                [],
                                                                                [],
                                                                                "next",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.MutRef,
                                                                                  M.deref (|
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.MutRef,
                                                                                      iter
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |);
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                mk_str (|
                                                                                  "FieldSet corrupted (this is a bug)"
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |);
                                                                    Value.StructTuple
                                                                      "core::option::Option::Some"
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.dyn
                                                                              [
                                                                                ("tracing_core::field::Value::Trait",
                                                                                  [])
                                                                              ]
                                                                          ]
                                                                      ]
                                                                      [
                                                                        M.read (|
                                                                          M.use
                                                                            (M.alloc (|
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.dyn
                                                                                    [
                                                                                      ("tracing_core::field::Value::Trait",
                                                                                        [])
                                                                                    ]
                                                                                ],
                                                                              M.call_closure (|
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.dyn
                                                                                      [
                                                                                        ("tracing_core::field::Value::Trait",
                                                                                          [])
                                                                                      ]
                                                                                  ],
                                                                                M.pointer_coercion
                                                                                  M.PointerCoercion.Unsize
                                                                                  (Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "core::fmt::Arguments"
                                                                                    ])
                                                                                  (Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.dyn
                                                                                        [
                                                                                          ("tracing_core::field::Value::Trait",
                                                                                            [])
                                                                                        ]
                                                                                    ]),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.alloc (|
                                                                                          Ty.path
                                                                                            "core::fmt::Arguments",
                                                                                          M.call_closure (|
                                                                                            Ty.path
                                                                                              "core::fmt::Arguments",
                                                                                            M.get_associated_function (|
                                                                                              Ty.path
                                                                                                "core::fmt::Arguments",
                                                                                              "new_v1",
                                                                                              [
                                                                                                Value.Integer
                                                                                                  IntegerKind.Usize
                                                                                                  1;
                                                                                                Value.Integer
                                                                                                  IntegerKind.Usize
                                                                                                  1
                                                                                              ],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.Ref,
                                                                                                M.deref (|
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.alloc (|
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "array")
                                                                                                        [
                                                                                                          Value.Integer
                                                                                                            IntegerKind.Usize
                                                                                                            1
                                                                                                        ]
                                                                                                        [
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "&")
                                                                                                            []
                                                                                                            [
                                                                                                              Ty.path
                                                                                                                "str"
                                                                                                            ]
                                                                                                        ],
                                                                                                      Value.Array
                                                                                                        [
                                                                                                          mk_str (|
                                                                                                            "Number of continuation segments: "
                                                                                                          |)
                                                                                                        ]
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              |);
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.Ref,
                                                                                                M.deref (|
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.alloc (|
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "array")
                                                                                                        [
                                                                                                          Value.Integer
                                                                                                            IntegerKind.Usize
                                                                                                            1
                                                                                                        ]
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "core::fmt::rt::Argument"
                                                                                                        ],
                                                                                                      Value.Array
                                                                                                        [
                                                                                                          M.call_closure (|
                                                                                                            Ty.path
                                                                                                              "core::fmt::rt::Argument",
                                                                                                            M.get_associated_function (|
                                                                                                              Ty.path
                                                                                                                "core::fmt::rt::Argument",
                                                                                                              "new_display",
                                                                                                              [],
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "usize"
                                                                                                              ]
                                                                                                            |),
                                                                                                            [
                                                                                                              M.borrow (|
                                                                                                                Pointer.Kind.Ref,
                                                                                                                M.deref (|
                                                                                                                  M.borrow (|
                                                                                                                    Pointer.Kind.Ref,
                                                                                                                    M.alloc (|
                                                                                                                      Ty.path
                                                                                                                        "usize",
                                                                                                                      M.call_closure (|
                                                                                                                        Ty.path
                                                                                                                          "usize",
                                                                                                                        M.get_associated_function (|
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "alloc::vec::Vec")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              R;
                                                                                                                              Ty.path
                                                                                                                                "alloc::alloc::Global"
                                                                                                                            ],
                                                                                                                          "len",
                                                                                                                          [],
                                                                                                                          []
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          M.borrow (|
                                                                                                                            Pointer.Kind.Ref,
                                                                                                                            segment_results
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                |)
                                                                                                              |)
                                                                                                            ]
                                                                                                          |)
                                                                                                        ]
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |))
                                                                        |)
                                                                      ]
                                                                  ]
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)
                                          ]
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                |)));
                            fun γ => ltac:(M.monadic (Value.Tuple []))
                          ]
                        |)
                      |)
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.path "metrics::handles::Counter",
                        "absolute",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          let~ metric_key :
                              Ty.apply (Ty.path "&") [] [ Ty.path "metrics::key::Key" ] :=
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.read (|
                                  get_constant (|
                                    "openvm_circuit::arch::vm::execute_and_then::METRIC_KEY",
                                    Ty.apply (Ty.path "&") [] [ Ty.path "metrics::key::Key" ]
                                  |)
                                |)
                              |)
                            |) in
                          let~ metadata :
                              Ty.apply (Ty.path "&") [] [ Ty.path "metrics::metadata::Metadata" ] :=
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.read (|
                                  get_constant (|
                                    "openvm_circuit::arch::vm::execute_and_then::METADATA",
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.path "metrics::metadata::Metadata" ]
                                  |)
                                |)
                              |)
                            |) in
                          M.alloc (|
                            Ty.path "metrics::handles::Counter",
                            M.call_closure (|
                              Ty.path "metrics::handles::Counter",
                              M.get_function (|
                                "metrics::recorder::with_recorder",
                                [],
                                [
                                  Ty.path "metrics::handles::Counter";
                                  Ty.function
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("metrics::recorder::Recorder::Trait", []) ] ]
                                    ]
                                    (Ty.path "metrics::handles::Counter")
                                ]
                              |),
                              [
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.path "metrics::handles::Counter",
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.dyn
                                                    [ ("metrics::recorder::Recorder::Trait", []) ]
                                                ],
                                              α0
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let recorder :=
                                                    M.copy (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.dyn
                                                            [
                                                              ("metrics::recorder::Recorder::Trait",
                                                                [])
                                                            ]
                                                        ],
                                                      γ
                                                    |) in
                                                  M.call_closure (|
                                                    Ty.path "metrics::handles::Counter",
                                                    M.get_trait_method (|
                                                      "metrics::recorder::Recorder",
                                                      Ty.dyn
                                                        [ ("metrics::recorder::Recorder::Trait", [])
                                                        ],
                                                      [],
                                                      [],
                                                      "register_counter",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| recorder |) |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.read (|
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                metric_key
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| metadata |) |)
                                                      |)
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end))
                              ]
                            |)
                          |)
                        |);
                        M.cast
                          (Ty.path "u64")
                          (M.call_closure (|
                            Ty.path "usize",
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ R; Ty.path "alloc::alloc::Global" ],
                              "len",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, segment_results |) ]
                          |))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ R; Ty.path "alloc::alloc::Global" ];
                        E
                      ],
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ R; Ty.path "alloc::alloc::Global" ];
                        E
                      ]
                      [ M.read (| segment_results |) ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_execute_and_then :
        forall (F VC : Ty.t),
        M.IsAssociatedFunction.C (Self F VC) "execute_and_then" (execute_and_then F VC).
      Admitted.
      Global Typeclasses Opaque execute_and_then.
      
      (*
          pub fn execute_segments(
              &self,
              exe: impl Into<VmExe<F>>,
              input: impl Into<Streams<F>>,
          ) -> Result<Vec<ExecutionSegment<F, VC>>, ExecutionError> {
              self.execute_and_then(exe, input, |_, seg| Ok(seg), |err| err)
          }
      *)
      Definition execute_segments
          (F VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F VC in
        match ε, τ, α with
        | [], [ impl_Into_VmExe_F__; impl_Into_Streams_F__ ], [ self; exe; input ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutor") [] [ F; VC ] ],
                self
              |) in
            let exe := M.alloc (| impl_Into_VmExe_F__, exe |) in
            let input := M.alloc (| impl_Into_Streams_F__, input |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                        []
                        [ F; VC ];
                      Ty.path "alloc::alloc::Global"
                    ];
                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                ],
              M.get_associated_function (|
                Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutor") [] [ F; VC ],
                "execute_and_then",
                [],
                [
                  Ty.apply (Ty.path "openvm_circuit::arch::segment::ExecutionSegment") [] [ F; VC ];
                  Ty.path "openvm_circuit::arch::execution::ExecutionError";
                  impl_Into_VmExe_F__;
                  impl_Into_Streams_F__;
                  Ty.function
                    [
                      Ty.path "usize";
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                        []
                        [ F; VC ]
                    ]
                    (Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                          []
                          [ F; VC ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ]);
                  Ty.function
                    [ Ty.path "openvm_circuit::arch::execution::ExecutionError" ]
                    (Ty.path "openvm_circuit::arch::execution::ExecutionError")
                ]
              |),
              [
                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                M.read (| exe |);
                M.read (| input |);
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0; α1 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                                  []
                                  [ F; VC ];
                                Ty.path "openvm_circuit::arch::execution::ExecutionError"
                              ],
                            M.alloc (| Ty.path "usize", α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::segment::ExecutionSegment")
                                          []
                                          [ F; VC ];
                                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                      ],
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                                        []
                                        [ F; VC ],
                                      α1
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let seg :=
                                            M.copy (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::arch::segment::ExecutionSegment")
                                                []
                                                [ F; VC ],
                                              γ
                                            |) in
                                          Value.StructTuple
                                            "core::result::Result::Ok"
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::arch::segment::ExecutionSegment")
                                                []
                                                [ F; VC ];
                                              Ty.path
                                                "openvm_circuit::arch::execution::ExecutionError"
                                            ]
                                            [ M.read (| seg |) ]))
                                    ]
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end));
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.path "openvm_circuit::arch::execution::ExecutionError",
                            M.alloc (|
                              Ty.path "openvm_circuit::arch::execution::ExecutionError",
                              α0
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let err :=
                                    M.copy (|
                                      Ty.path "openvm_circuit::arch::execution::ExecutionError",
                                      γ
                                    |) in
                                  M.read (| err |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_execute_segments :
        forall (F VC : Ty.t),
        M.IsAssociatedFunction.C (Self F VC) "execute_segments" (execute_segments F VC).
      Admitted.
      Global Typeclasses Opaque execute_segments.
      
      (*
          pub fn execute_until_segment(
              &self,
              exe: impl Into<VmExe<F>>,
              from_state: VmExecutorNextSegmentState<F>,
          ) -> Result<VmExecutorOneSegmentResult<F, VC>, ExecutionError> {
              let exe = exe.into();
              let mut segment = ExecutionSegment::new(
                  &self.config,
                  exe.program.clone(),
                  from_state.input,
                  Some(from_state.memory),
                  self.trace_height_constraints.clone(),
                  exe.fn_bounds.clone(),
              );
              #[cfg(feature = "bench-metrics")]
              {
                  segment.metrics = from_state.metrics;
              }
              if let Some(overridden_heights) = self.overridden_heights.as_ref() {
                  segment.set_override_trace_heights(overridden_heights.clone());
              }
              let state = metrics_span("execute_time_ms", || segment.execute_from_pc(from_state.pc))?;
      
              if state.is_terminated {
                  return Ok(VmExecutorOneSegmentResult {
                      segment,
                      next_state: None,
                  });
              }
      
              assert!(
                  self.continuation_enabled(),
                  "multiple segments require to enable continuations"
              );
              assert_eq!(
                  state.pc,
                  segment.chip_complex.connector_chip().boundary_states[1]
                      .unwrap()
                      .pc
              );
              let final_memory = mem::take(&mut segment.final_memory)
                  .expect("final memory should be set in continuations segment");
              let streams = segment.chip_complex.take_streams();
              #[cfg(feature = "bench-metrics")]
              let metrics = segment.metrics.partial_take();
              Ok(VmExecutorOneSegmentResult {
                  segment,
                  next_state: Some(VmExecutorNextSegmentState {
                      memory: final_memory,
                      input: streams,
                      pc: state.pc,
                      #[cfg(feature = "bench-metrics")]
                      metrics,
                  }),
              })
          }
      *)
      Definition execute_until_segment
          (F VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F VC in
        match ε, τ, α with
        | [], [ impl_Into_VmExe_F__ ], [ self; exe; from_state ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutor") [] [ F; VC ] ],
                self
              |) in
            let exe := M.alloc (| impl_Into_VmExe_F__, exe |) in
            let from_state :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutorNextSegmentState") [] [ F ],
                from_state
              |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::vm::VmExecutorOneSegmentResult")
                    []
                    [ F; VC ];
                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ exe : Ty.apply (Ty.path "openvm_instructions::exe::VmExe") [] [ F ] :=
                    M.call_closure (|
                      Ty.apply (Ty.path "openvm_instructions::exe::VmExe") [] [ F ],
                      M.get_trait_method (|
                        "core::convert::Into",
                        impl_Into_VmExe_F__,
                        [],
                        [ Ty.apply (Ty.path "openvm_instructions::exe::VmExe") [] [ F ] ],
                        "into",
                        [],
                        []
                      |),
                      [ M.read (| exe |) ]
                    |) in
                  let~ segment :
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                        []
                        [ F; VC ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                        []
                        [ F; VC ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                          []
                          [ F; VC ],
                        "new",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::arch::vm::VmExecutor",
                                "config"
                              |)
                            |)
                          |)
                        |);
                        M.call_closure (|
                          Ty.apply (Ty.path "openvm_instructions::program::Program") [] [ F ],
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.apply (Ty.path "openvm_instructions::program::Program") [] [ F ],
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                exe,
                                "openvm_instructions::exe::VmExe",
                                "program"
                              |)
                            |)
                          ]
                        |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            from_state,
                            "openvm_circuit::arch::vm::VmExecutorNextSegmentState",
                            "input"
                          |)
                        |);
                        Value.StructTuple
                          "core::option::Option::Some"
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                              [ Value.Integer IntegerKind.Usize 4096 ]
                              [ F ]
                          ]
                          [
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                from_state,
                                "openvm_circuit::arch::vm::VmExecutorNextSegmentState",
                                "memory"
                              |)
                            |)
                          ];
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.path "openvm_stark_backend::keygen::types::LinearConstraint";
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.path "openvm_stark_backend::keygen::types::LinearConstraint";
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::arch::vm::VmExecutor",
                                "trace_height_constraints"
                              |)
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                            []
                            [
                              Ty.path "u32";
                              Ty.path "openvm_instructions::exe::FnBound";
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.apply
                              (Ty.path "alloc::collections::btree::map::BTreeMap")
                              []
                              [
                                Ty.path "u32";
                                Ty.path "openvm_instructions::exe::FnBound";
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                exe,
                                "openvm_instructions::exe::VmExe",
                                "fn_bounds"
                              |)
                            |)
                          ]
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      let~ _ : Ty.tuple [] :=
                        M.write (|
                          M.SubPointer.get_struct_record_field (|
                            segment,
                            "openvm_circuit::arch::segment::ExecutionSegment",
                            "metrics"
                          |),
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              from_state,
                              "openvm_circuit::arch::vm::VmExecutorNextSegmentState",
                              "metrics"
                            |)
                          |)
                        |) in
                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.path
                                          "openvm_circuit::arch::extensions::VmComplexTraceHeights"
                                      ]
                                  ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmComplexTraceHeights"
                                        ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.path
                                          "openvm_circuit::arch::extensions::VmComplexTraceHeights"
                                      ],
                                    "as_ref",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_circuit::arch::vm::VmExecutor",
                                        "overridden_heights"
                                      |)
                                    |)
                                  ]
                                |)
                              |) in
                            let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            let overridden_heights :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.path
                                      "openvm_circuit::arch::extensions::VmComplexTraceHeights"
                                  ],
                                γ0_0
                              |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.call_closure (|
                                  Ty.tuple [],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                                      []
                                      [ F; VC ],
                                    "set_override_trace_heights",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.MutRef, segment |);
                                    M.call_closure (|
                                      Ty.path
                                        "openvm_circuit::arch::extensions::VmComplexTraceHeights",
                                      M.get_trait_method (|
                                        "core::clone::Clone",
                                        Ty.path
                                          "openvm_circuit::arch::extensions::VmComplexTraceHeights",
                                        [],
                                        [],
                                        "clone",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| overridden_heights |) |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  let~ state : Ty.path "openvm_circuit::arch::segment::ExecutionSegmentState" :=
                    M.match_operator (|
                      Ty.path "openvm_circuit::arch::segment::ExecutionSegmentState",
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.path "openvm_circuit::arch::execution::ExecutionError"
                              ];
                            Ty.path "openvm_circuit::arch::segment::ExecutionSegmentState"
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                ];
                              Ty.path "openvm_circuit::arch::segment::ExecutionSegmentState"
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "openvm_circuit::arch::segment::ExecutionSegmentState";
                                Ty.path "openvm_circuit::arch::execution::ExecutionError"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "openvm_circuit::arch::segment::ExecutionSegmentState";
                                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                ],
                              M.get_function (|
                                "openvm_stark_backend::utils::metrics_span",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path
                                        "openvm_circuit::arch::segment::ExecutionSegmentState";
                                      Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                    ];
                                  Ty.function
                                    []
                                    (Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path
                                          "openvm_circuit::arch::segment::ExecutionSegmentState";
                                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                      ]);
                                  Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                                ]
                              |),
                              [
                                mk_str (| "execute_time_ms" |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_circuit::arch::segment::ExecutionSegmentState";
                                                Ty.path
                                                  "openvm_circuit::arch::execution::ExecutionError"
                                              ],
                                            M.alloc (| Ty.tuple [], α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path
                                                          "openvm_circuit::arch::segment::ExecutionSegmentState";
                                                        Ty.path
                                                          "openvm_circuit::arch::execution::ExecutionError"
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::arch::segment::ExecutionSegment")
                                                        []
                                                        [ F; VC ],
                                                      "execute_from_pc",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (| Pointer.Kind.MutRef, segment |);
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          from_state,
                                                          "openvm_circuit::arch::vm::VmExecutorNextSegmentState",
                                                          "pc"
                                                        |)
                                                      |)
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end))
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::vm::VmExecutorOneSegmentResult")
                                          []
                                          [ F; VC ];
                                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::vm::VmExecutorOneSegmentResult")
                                            []
                                            [ F; VC ];
                                          Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path
                                              "openvm_circuit::arch::execution::ExecutionError"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val :=
                              M.copy (|
                                Ty.path "openvm_circuit::arch::segment::ExecutionSegmentState",
                                γ0_0
                              |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.SubPointer.get_struct_record_field (|
                                  state,
                                  "openvm_circuit::arch::segment::ExecutionSegmentState",
                                  "is_terminated"
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Ok"
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::arch::vm::VmExecutorOneSegmentResult")
                                        []
                                        [ F; VC ];
                                      Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                    ]
                                    [
                                      Value.mkStructRecord
                                        "openvm_circuit::arch::vm::VmExecutorOneSegmentResult"
                                        []
                                        [ F; VC ]
                                        [
                                          ("segment", M.read (| segment |));
                                          ("next_state",
                                            Value.StructTuple
                                              "core::option::Option::None"
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::arch::vm::VmExecutorNextSegmentState")
                                                  []
                                                  [ F ]
                                              ]
                                              [])
                                        ]
                                    ]
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  UnOp.not (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "openvm_circuit::arch::vm::VmExecutor")
                                          []
                                          [ F; VC ],
                                        "continuation_enabled",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| self |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (|
                              M.call_closure (|
                                Ty.path "never",
                                M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                [
                                  M.call_closure (|
                                    Ty.path "core::fmt::Arguments",
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::Arguments",
                                      "new_const",
                                      [ Value.Integer IntegerKind.Usize 1 ],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 1 ]
                                                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                              Value.Array
                                                [
                                                  mk_str (|
                                                    "multiple segments require to enable continuations"
                                                  |)
                                                ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "&") [] [ Ty.path "u32" ];
                            Ty.apply (Ty.path "&") [] [ Ty.path "u32" ]
                          ],
                        Value.Tuple
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                state,
                                "openvm_circuit::arch::segment::ExecutionSegmentState",
                                "pc"
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::system::connector::ConnectorCols")
                                    []
                                    [ Ty.path "u32" ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::system::connector::ConnectorCols")
                                      []
                                      [ Ty.path "u32" ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::connector::ConnectorCols")
                                            []
                                            [ Ty.path "u32" ]
                                        ],
                                      "unwrap",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (|
                                        M.SubPointer.get_array_field (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::connector::VmConnectorChip")
                                                      []
                                                      [ F ]
                                                  ],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::arch::extensions::VmChipComplex")
                                                    []
                                                    [
                                                      F;
                                                      Ty.associated_in_trait
                                                        "openvm_circuit::arch::config::VmConfig"
                                                        []
                                                        [ F ]
                                                        VC
                                                        "Executor";
                                                      Ty.associated_in_trait
                                                        "openvm_circuit::arch::config::VmConfig"
                                                        []
                                                        [ F ]
                                                        VC
                                                        "Periphery"
                                                    ],
                                                  "connector_chip",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.SubPointer.get_struct_record_field (|
                                                      segment,
                                                      "openvm_circuit::arch::segment::ExecutionSegment",
                                                      "chip_complex"
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |),
                                            "openvm_circuit::system::connector::VmConnectorChip",
                                            "boundary_states"
                                          |),
                                          Value.Integer IntegerKind.Usize 1
                                        |)
                                      |)
                                    ]
                                  |)
                                |),
                                "openvm_circuit::system::connector::ConnectorCols",
                                "pc"
                              |)
                            |)
                          ]
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let left_val :=
                              M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ0_0 |) in
                            let right_val :=
                              M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ0_1 |) in
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use
                                        (M.alloc (|
                                          Ty.path "bool",
                                          UnOp.not (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              BinOp.eq,
                                              [
                                                M.read (| M.deref (| M.read (| left_val |) |) |);
                                                M.read (| M.deref (| M.read (| right_val |) |) |)
                                              ]
                                            |)
                                          |)
                                        |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.never_to_any (|
                                      M.read (|
                                        let~ kind : Ty.path "core::panicking::AssertKind" :=
                                          Value.StructTuple
                                            "core::panicking::AssertKind::Eq"
                                            []
                                            []
                                            [] in
                                        M.alloc (|
                                          Ty.path "never",
                                          M.call_closure (|
                                            Ty.path "never",
                                            M.get_function (|
                                              "core::panicking::assert_failed",
                                              [],
                                              [ Ty.path "u32"; Ty.path "u32" ]
                                            |),
                                            [
                                              M.read (| kind |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| left_val |) |)
                                                  |)
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| right_val |) |)
                                                  |)
                                                |)
                                              |);
                                              Value.StructTuple
                                                "core::option::Option::None"
                                                []
                                                [ Ty.path "core::fmt::Arguments" ]
                                                []
                                            ]
                                          |)
                                        |)
                                      |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |)))
                      ]
                    |) in
                  let~ final_memory :
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                        [ Value.Integer IntegerKind.Usize 4096 ]
                        [ F ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                        [ Value.Integer IntegerKind.Usize 4096 ]
                        [ F ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                              [ Value.Integer IntegerKind.Usize 4096 ]
                              [ F ]
                          ],
                        "expect",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                                [ Value.Integer IntegerKind.Usize 4096 ]
                                [ F ]
                            ],
                          M.get_function (|
                            "core::mem::take",
                            [],
                            [
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::paged_vec::AddressMap")
                                    [ Value.Integer IntegerKind.Usize 4096 ]
                                    [ F ]
                                ]
                            ]
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.SubPointer.get_struct_record_field (|
                                    segment,
                                    "openvm_circuit::arch::segment::ExecutionSegment",
                                    "final_memory"
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            mk_str (| "final memory should be set in continuations segment" |)
                          |)
                        |)
                      ]
                    |) in
                  let~ streams : Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] :=
                    M.call_closure (|
                      Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                          []
                          [
                            F;
                            Ty.associated_in_trait
                              "openvm_circuit::arch::config::VmConfig"
                              []
                              [ F ]
                              VC
                              "Executor";
                            Ty.associated_in_trait
                              "openvm_circuit::arch::config::VmConfig"
                              []
                              [ F ]
                              VC
                              "Periphery"
                          ],
                        "take_streams",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            segment,
                            "openvm_circuit::arch::segment::ExecutionSegment",
                            "chip_complex"
                          |)
                        |)
                      ]
                    |) in
                  let~ metrics : Ty.path "openvm_circuit::metrics::VmMetrics" :=
                    M.call_closure (|
                      Ty.path "openvm_circuit::metrics::VmMetrics",
                      M.get_associated_function (|
                        Ty.path "openvm_circuit::metrics::VmMetrics",
                        "partial_take",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            segment,
                            "openvm_circuit::arch::segment::ExecutionSegment",
                            "metrics"
                          |)
                        |)
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::vm::VmExecutorOneSegmentResult")
                          []
                          [ F; VC ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ],
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::vm::VmExecutorOneSegmentResult")
                          []
                          [ F; VC ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ]
                      [
                        Value.mkStructRecord
                          "openvm_circuit::arch::vm::VmExecutorOneSegmentResult"
                          []
                          [ F; VC ]
                          [
                            ("segment", M.read (| segment |));
                            ("next_state",
                              Value.StructTuple
                                "core::option::Option::Some"
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::vm::VmExecutorNextSegmentState")
                                    []
                                    [ F ]
                                ]
                                [
                                  Value.mkStructRecord
                                    "openvm_circuit::arch::vm::VmExecutorNextSegmentState"
                                    []
                                    [ F ]
                                    [
                                      ("memory", M.read (| final_memory |));
                                      ("input", M.read (| streams |));
                                      ("pc",
                                        M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            state,
                                            "openvm_circuit::arch::segment::ExecutionSegmentState",
                                            "pc"
                                          |)
                                        |));
                                      ("metrics", M.read (| metrics |))
                                    ]
                                ])
                          ]
                      ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_execute_until_segment :
        forall (F VC : Ty.t),
        M.IsAssociatedFunction.C (Self F VC) "execute_until_segment" (execute_until_segment F VC).
      Admitted.
      Global Typeclasses Opaque execute_until_segment.
      
      (*
          pub fn execute(
              &self,
              exe: impl Into<VmExe<F>>,
              input: impl Into<Streams<F>>,
          ) -> Result<Option<VmMemoryState<F>>, ExecutionError> {
              let mut last = None;
              self.execute_and_then(
                  exe,
                  input,
                  |_, seg| {
                      last = Some(seg);
                      Ok(())
                  },
                  |err| err,
              )?;
              let last = last.expect("at least one segment must be executed");
              let final_memory = last.final_memory;
              let end_state =
                  last.chip_complex.connector_chip().boundary_states[1].expect("end state must be set");
              if end_state.is_terminate != 1 {
                  return Err(ExecutionError::DidNotTerminate);
              }
              if end_state.exit_code != ExitCode::Success as u32 {
                  return Err(ExecutionError::FailedWithExitCode(end_state.exit_code));
              }
              Ok(final_memory)
          }
      *)
      Definition execute (F VC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F VC in
        match ε, τ, α with
        | [], [ impl_Into_VmExe_F__; impl_Into_Streams_F__ ], [ self; exe; input ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutor") [] [ F; VC ] ],
                self
              |) in
            let exe := M.alloc (| impl_Into_VmExe_F__, exe |) in
            let input := M.alloc (| impl_Into_Streams_F__, input |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                        [
                          M.unevaluated_const
                            (mk_str (|
                              "openvm_circuit_system_memory_controller_MemoryImage_discriminant"
                            |))
                        ]
                        [ F ]
                    ];
                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ last :
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                            []
                            [ F; VC ]
                        ] :=
                    Value.StructTuple
                      "core::option::Option::None"
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                          []
                          [ F; VC ]
                      ]
                      [] in
                  let~ _ :
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.tuple []; Ty.path "alloc::alloc::Global" ] :=
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.tuple []; Ty.path "alloc::alloc::Global" ],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.path "openvm_circuit::arch::execution::ExecutionError"
                              ];
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Ty.tuple []; Ty.path "alloc::alloc::Global" ]
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                ];
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Ty.tuple []; Ty.path "alloc::alloc::Global" ]
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Ty.tuple []; Ty.path "alloc::alloc::Global" ];
                                Ty.path "openvm_circuit::arch::execution::ExecutionError"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Ty.tuple []; Ty.path "alloc::alloc::Global" ];
                                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::vm::VmExecutor")
                                  []
                                  [ F; VC ],
                                "execute_and_then",
                                [],
                                [
                                  Ty.tuple [];
                                  Ty.path "openvm_circuit::arch::execution::ExecutionError";
                                  impl_Into_VmExe_F__;
                                  impl_Into_Streams_F__;
                                  Ty.function
                                    [
                                      Ty.path "usize";
                                      Ty.apply
                                        (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                                        []
                                        [ F; VC ]
                                    ]
                                    (Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.tuple [];
                                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                      ]);
                                  Ty.function
                                    [ Ty.path "openvm_circuit::arch::execution::ExecutionError" ]
                                    (Ty.path "openvm_circuit::arch::execution::ExecutionError")
                                ]
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                                M.read (| exe |);
                                M.read (| input |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0; α1 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.tuple [];
                                                Ty.path
                                                  "openvm_circuit::arch::execution::ExecutionError"
                                              ],
                                            M.alloc (| Ty.path "usize", α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.tuple [];
                                                        Ty.path
                                                          "openvm_circuit::arch::execution::ExecutionError"
                                                      ],
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::arch::segment::ExecutionSegment")
                                                        []
                                                        [ F; VC ],
                                                      α1
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let seg :=
                                                            M.copy (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::arch::segment::ExecutionSegment")
                                                                []
                                                                [ F; VC ],
                                                              γ
                                                            |) in
                                                          M.read (|
                                                            let~ _ : Ty.tuple [] :=
                                                              M.write (|
                                                                last,
                                                                Value.StructTuple
                                                                  "core::option::Option::Some"
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit::arch::segment::ExecutionSegment")
                                                                      []
                                                                      [ F; VC ]
                                                                  ]
                                                                  [ M.read (| seg |) ]
                                                              |) in
                                                            M.alloc (|
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "openvm_circuit::arch::execution::ExecutionError"
                                                                ],
                                                              Value.StructTuple
                                                                "core::result::Result::Ok"
                                                                []
                                                                [
                                                                  Ty.tuple [];
                                                                  Ty.path
                                                                    "openvm_circuit::arch::execution::ExecutionError"
                                                                ]
                                                                [ Value.Tuple [] ]
                                                            |)
                                                          |)))
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end));
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.path
                                              "openvm_circuit::arch::execution::ExecutionError",
                                            M.alloc (|
                                              Ty.path
                                                "openvm_circuit::arch::execution::ExecutionError",
                                              α0
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let err :=
                                                    M.copy (|
                                                      Ty.path
                                                        "openvm_circuit::arch::execution::ExecutionError",
                                                      γ
                                                    |) in
                                                  M.read (| err |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end))
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::paged_vec::AddressMap")
                                              [ Value.Integer IntegerKind.Usize 4096 ]
                                              [ F ]
                                          ];
                                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::paged_vec::AddressMap")
                                                [ Value.Integer IntegerKind.Usize 4096 ]
                                                [ F ]
                                            ];
                                          Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path
                                              "openvm_circuit::arch::execution::ExecutionError"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Ty.tuple []; Ty.path "alloc::alloc::Global" ],
                                γ0_0
                              |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ last :
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                        []
                        [ F; VC ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                        []
                        [ F; VC ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                              []
                              [ F; VC ]
                          ],
                        "expect",
                        [],
                        []
                      |),
                      [
                        M.read (| last |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "at least one segment must be executed" |) |)
                        |)
                      ]
                    |) in
                  let~ final_memory :
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                            [ Value.Integer IntegerKind.Usize 4096 ]
                            [ F ]
                        ] :=
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        last,
                        "openvm_circuit::arch::segment::ExecutionSegment",
                        "final_memory"
                      |)
                    |) in
                  let~ end_state :
                      Ty.apply
                        (Ty.path "openvm_circuit::system::connector::ConnectorCols")
                        []
                        [ Ty.path "u32" ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::connector::ConnectorCols")
                        []
                        [ Ty.path "u32" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::connector::ConnectorCols")
                              []
                              [ Ty.path "u32" ]
                          ],
                        "expect",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_array_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::connector::VmConnectorChip")
                                        []
                                        [ F ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                      []
                                      [
                                        F;
                                        Ty.associated_in_trait
                                          "openvm_circuit::arch::config::VmConfig"
                                          []
                                          [ F ]
                                          VC
                                          "Executor";
                                        Ty.associated_in_trait
                                          "openvm_circuit::arch::config::VmConfig"
                                          []
                                          [ F ]
                                          VC
                                          "Periphery"
                                      ],
                                    "connector_chip",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        last,
                                        "openvm_circuit::arch::segment::ExecutionSegment",
                                        "chip_complex"
                                      |)
                                    |)
                                  ]
                                |)
                              |),
                              "openvm_circuit::system::connector::VmConnectorChip",
                              "boundary_states"
                            |),
                            Value.Integer IntegerKind.Usize 1
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "end state must be set" |) |)
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.ne,
                                    [
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          end_state,
                                          "openvm_circuit::system::connector::ConnectorCols",
                                          "is_terminate"
                                        |)
                                      |);
                                      Value.Integer IntegerKind.U32 1
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::paged_vec::AddressMap")
                                            [ Value.Integer IntegerKind.Usize 4096 ]
                                            [ F ]
                                        ];
                                      Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                    ]
                                    [
                                      Value.StructTuple
                                        "openvm_circuit::arch::execution::ExecutionError::DidNotTerminate"
                                        []
                                        []
                                        []
                                    ]
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.ne,
                                    [
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          end_state,
                                          "openvm_circuit::system::connector::ConnectorCols",
                                          "exit_code"
                                        |)
                                      |);
                                      M.cast
                                        (Ty.path "u32")
                                        (M.call_closure (|
                                          Ty.path "i32",
                                          BinOp.Wrap.add,
                                          [
                                            M.read (|
                                              get_constant (|
                                                "openvm_circuit::arch::vm::ExitCode::Success_discriminant",
                                                Ty.path "i32"
                                              |)
                                            |);
                                            Value.Integer IntegerKind.I32 0
                                          ]
                                        |))
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::paged_vec::AddressMap")
                                            [ Value.Integer IntegerKind.Usize 4096 ]
                                            [ F ]
                                        ];
                                      Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                    ]
                                    [
                                      Value.StructTuple
                                        "openvm_circuit::arch::execution::ExecutionError::FailedWithExitCode"
                                        []
                                        []
                                        [
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              end_state,
                                              "openvm_circuit::system::connector::ConnectorCols",
                                              "exit_code"
                                            |)
                                          |)
                                        ]
                                    ]
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                              [ Value.Integer IntegerKind.Usize 4096 ]
                              [ F ]
                          ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ],
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                              [ Value.Integer IntegerKind.Usize 4096 ]
                              [ F ]
                          ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ]
                      [ M.read (| final_memory |) ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_execute :
        forall (F VC : Ty.t),
        M.IsAssociatedFunction.C (Self F VC) "execute" (execute F VC).
      Admitted.
      Global Typeclasses Opaque execute.
      
      (*
          pub fn execute_and_generate<SC: StarkGenericConfig>(
              &self,
              exe: impl Into<VmExe<F>>,
              input: impl Into<Streams<F>>,
          ) -> Result<VmExecutorResult<SC>, GenerationError>
          where
              Domain<SC>: PolynomialSpace<Val = F>,
              VC::Executor: Chip<SC>,
              VC::Periphery: Chip<SC>,
          {
              self.execute_and_generate_impl(exe.into(), None, input)
          }
      *)
      Definition execute_and_generate
          (F VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F VC in
        match ε, τ, α with
        | [], [ SC; impl_Into_VmExe_F__; impl_Into_Streams_F__ ], [ self; exe; input ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutor") [] [ F; VC ] ],
                self
              |) in
            let exe := M.alloc (| impl_Into_VmExe_F__, exe |) in
            let input := M.alloc (| impl_Into_Streams_F__, input |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutorResult") [] [ SC ];
                  Ty.path "openvm_circuit::arch::vm::GenerationError"
                ],
              M.get_associated_function (|
                Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutor") [] [ F; VC ],
                "execute_and_generate_impl",
                [],
                [ SC; impl_Into_Streams_F__ ]
              |),
              [
                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "openvm_instructions::exe::VmExe") [] [ F ],
                  M.get_trait_method (|
                    "core::convert::Into",
                    impl_Into_VmExe_F__,
                    [],
                    [ Ty.apply (Ty.path "openvm_instructions::exe::VmExe") [] [ F ] ],
                    "into",
                    [],
                    []
                  |),
                  [ M.read (| exe |) ]
                |);
                Value.StructTuple
                  "core::option::Option::None"
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::CommittedTraceData")
                      []
                      [ SC ]
                  ]
                  [];
                M.read (| input |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_execute_and_generate :
        forall (F VC : Ty.t),
        M.IsAssociatedFunction.C (Self F VC) "execute_and_generate" (execute_and_generate F VC).
      Admitted.
      Global Typeclasses Opaque execute_and_generate.
      
      (*
          pub fn execute_and_generate_with_cached_program<SC: StarkGenericConfig>(
              &self,
              committed_exe: Arc<VmCommittedExe<SC>>,
              input: impl Into<Streams<F>>,
          ) -> Result<VmExecutorResult<SC>, GenerationError>
          where
              Domain<SC>: PolynomialSpace<Val = F>,
              VC::Executor: Chip<SC>,
              VC::Periphery: Chip<SC>,
          {
              self.execute_and_generate_impl(
                  committed_exe.exe.clone(),
                  Some(committed_exe.committed_program.clone()),
                  input,
              )
          }
      *)
      Definition execute_and_generate_with_cached_program
          (F VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F VC in
        match ε, τ, α with
        | [], [ SC; impl_Into_Streams_F__ ], [ self; committed_exe; input ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutor") [] [ F; VC ] ],
                self
              |) in
            let committed_exe :=
              M.alloc (|
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::program::trace::VmCommittedExe")
                      []
                      [ SC ];
                    Ty.path "alloc::alloc::Global"
                  ],
                committed_exe
              |) in
            let input := M.alloc (| impl_Into_Streams_F__, input |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutorResult") [] [ SC ];
                  Ty.path "openvm_circuit::arch::vm::GenerationError"
                ],
              M.get_associated_function (|
                Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutor") [] [ F; VC ],
                "execute_and_generate_impl",
                [],
                [ SC; impl_Into_Streams_F__ ]
              |),
              [
                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "openvm_instructions::exe::VmExe") [] [ F ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply (Ty.path "openvm_instructions::exe::VmExe") [] [ F ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::program::trace::VmCommittedExe")
                                  []
                                  [ SC ]
                              ],
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::program::trace::VmCommittedExe")
                                    []
                                    [ SC ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              [],
                              "deref",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, committed_exe |) ]
                          |)
                        |),
                        "openvm_circuit::system::program::trace::VmCommittedExe",
                        "exe"
                      |)
                    |)
                  ]
                |);
                Value.StructTuple
                  "core::option::Option::Some"
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::CommittedTraceData")
                      []
                      [ SC ]
                  ]
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "openvm_stark_backend::prover::types::CommittedTraceData")
                        []
                        [ SC ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::CommittedTraceData")
                          []
                          [ SC ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::program::trace::VmCommittedExe")
                                      []
                                      [ SC ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::program::trace::VmCommittedExe")
                                        []
                                        [ SC ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, committed_exe |) ]
                              |)
                            |),
                            "openvm_circuit::system::program::trace::VmCommittedExe",
                            "committed_program"
                          |)
                        |)
                      ]
                    |)
                  ];
                M.read (| input |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_execute_and_generate_with_cached_program :
        forall (F VC : Ty.t),
        M.IsAssociatedFunction.C
          (Self F VC)
          "execute_and_generate_with_cached_program"
          (execute_and_generate_with_cached_program F VC).
      Admitted.
      Global Typeclasses Opaque execute_and_generate_with_cached_program.
      
      (*
          fn execute_and_generate_impl<SC: StarkGenericConfig>(
              &self,
              exe: VmExe<F>,
              committed_program: Option<CommittedTraceData<SC>>,
              input: impl Into<Streams<F>>,
          ) -> Result<VmExecutorResult<SC>, GenerationError>
          where
              Domain<SC>: PolynomialSpace<Val = F>,
              VC::Executor: Chip<SC>,
              VC::Periphery: Chip<SC>,
          {
              let mut final_memory = None;
              let per_segment = self.execute_and_then(
                  exe,
                  input,
                  |seg_idx, mut seg| {
                      // Note: this will only be Some on the last segment; otherwise it is
                      // already moved into next segment state
                      final_memory = mem::take(&mut seg.final_memory);
                      tracing::info_span!("trace_gen", segment = seg_idx)
                          .in_scope(|| seg.generate_proof_input(committed_program.clone()))
                  },
                  GenerationError::Execution,
              )?;
      
              Ok(VmExecutorResult {
                  per_segment,
                  final_memory,
              })
          }
      *)
      Definition execute_and_generate_impl
          (F VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F VC in
        match ε, τ, α with
        | [], [ SC; impl_Into_Streams_F__ ], [ self; exe; committed_program; input ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutor") [] [ F; VC ] ],
                self
              |) in
            let exe :=
              M.alloc (| Ty.apply (Ty.path "openvm_instructions::exe::VmExe") [] [ F ], exe |) in
            let committed_program :=
              M.alloc (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::CommittedTraceData")
                      []
                      [ SC ]
                  ],
                committed_program
              |) in
            let input := M.alloc (| impl_Into_Streams_F__, input |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutorResult") [] [ SC ];
                  Ty.path "openvm_circuit::arch::vm::GenerationError"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ final_memory :
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                            [ Value.Integer IntegerKind.Usize 4096 ]
                            [ F ]
                        ] :=
                    Value.StructTuple
                      "core::option::Option::None"
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                          [ Value.Integer IntegerKind.Usize 4096 ]
                          [ F ]
                      ]
                      [] in
                  let~ per_segment :
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                            []
                            [ SC ];
                          Ty.path "alloc::alloc::Global"
                        ] :=
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                            []
                            [ SC ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.path "openvm_circuit::arch::vm::GenerationError"
                              ];
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                                  []
                                  [ SC ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "openvm_circuit::arch::vm::GenerationError"
                                ];
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                                    []
                                    [ SC ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                                      []
                                      [ SC ];
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.path "openvm_circuit::arch::vm::GenerationError"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                                        []
                                        [ SC ];
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.path "openvm_circuit::arch::vm::GenerationError"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::vm::VmExecutor")
                                  []
                                  [ F; VC ],
                                "execute_and_then",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                                    []
                                    [ SC ];
                                  Ty.path "openvm_circuit::arch::vm::GenerationError";
                                  Ty.apply (Ty.path "openvm_instructions::exe::VmExe") [] [ F ];
                                  impl_Into_Streams_F__;
                                  Ty.function
                                    [
                                      Ty.path "usize";
                                      Ty.apply
                                        (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                                        []
                                        [ F; VC ]
                                    ]
                                    (Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::prover::types::ProofInput")
                                          []
                                          [ SC ];
                                        Ty.path "openvm_circuit::arch::vm::GenerationError"
                                      ]);
                                  Ty.function
                                    [ Ty.path "openvm_circuit::arch::execution::ExecutionError" ]
                                    (Ty.path "openvm_circuit::arch::vm::GenerationError")
                                ]
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                                M.read (| exe |);
                                M.read (| input |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0; α1 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::prover::types::ProofInput")
                                                  []
                                                  [ SC ];
                                                Ty.path "openvm_circuit::arch::vm::GenerationError"
                                              ],
                                            M.alloc (| Ty.path "usize", α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let seg_idx := M.copy (| Ty.path "usize", γ |) in
                                                  M.match_operator (|
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::prover::types::ProofInput")
                                                          []
                                                          [ SC ];
                                                        Ty.path
                                                          "openvm_circuit::arch::vm::GenerationError"
                                                      ],
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::arch::segment::ExecutionSegment")
                                                        []
                                                        [ F; VC ],
                                                      α1
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let seg :=
                                                            M.copy (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::arch::segment::ExecutionSegment")
                                                                []
                                                                [ F; VC ],
                                                              γ
                                                            |) in
                                                          M.read (|
                                                            let~ _ : Ty.tuple [] :=
                                                              M.write (|
                                                                final_memory,
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_circuit::system::memory::paged_vec::AddressMap")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            4096
                                                                        ]
                                                                        [ F ]
                                                                    ],
                                                                  M.get_function (|
                                                                    "core::mem::take",
                                                                    [],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_circuit::system::memory::paged_vec::AddressMap")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                4096
                                                                            ]
                                                                            [ F ]
                                                                        ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.MutRef,
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            seg,
                                                                            "openvm_circuit::arch::segment::ExecutionSegment",
                                                                            "final_memory"
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |) in
                                                            M.alloc (|
                                                              Ty.apply
                                                                (Ty.path "core::result::Result")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_stark_backend::prover::types::ProofInput")
                                                                    []
                                                                    [ SC ];
                                                                  Ty.path
                                                                    "openvm_circuit::arch::vm::GenerationError"
                                                                ],
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "core::result::Result")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_stark_backend::prover::types::ProofInput")
                                                                      []
                                                                      [ SC ];
                                                                    Ty.path
                                                                      "openvm_circuit::arch::vm::GenerationError"
                                                                  ],
                                                                M.get_associated_function (|
                                                                  Ty.path "tracing::span::Span",
                                                                  "in_scope",
                                                                  [],
                                                                  [
                                                                    Ty.function
                                                                      []
                                                                      (Ty.apply
                                                                        (Ty.path
                                                                          "core::result::Result")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_stark_backend::prover::types::ProofInput")
                                                                            []
                                                                            [ SC ];
                                                                          Ty.path
                                                                            "openvm_circuit::arch::vm::GenerationError"
                                                                        ]);
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::result::Result")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "openvm_stark_backend::prover::types::ProofInput")
                                                                          []
                                                                          [ SC ];
                                                                        Ty.path
                                                                          "openvm_circuit::arch::vm::GenerationError"
                                                                      ]
                                                                  ]
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    let~ interest :
                                                                        Ty.path
                                                                          "tracing_core::subscriber::Interest" :=
                                                                      M.call_closure (|
                                                                        Ty.path
                                                                          "tracing_core::subscriber::Interest",
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "tracing_core::subscriber::Interest",
                                                                          "never",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        []
                                                                      |) in
                                                                    M.alloc (|
                                                                      Ty.path "tracing::span::Span",
                                                                      M.match_operator (|
                                                                        Ty.path
                                                                          "tracing::span::Span",
                                                                        M.alloc (|
                                                                          Ty.tuple [],
                                                                          Value.Tuple []
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ :=
                                                                                M.use
                                                                                  (M.alloc (|
                                                                                    Ty.path "bool",
                                                                                    LogicalOp.and (|
                                                                                      LogicalOp.and (|
                                                                                        LogicalOp.and (|
                                                                                          M.call_closure (|
                                                                                            Ty.path
                                                                                              "bool",
                                                                                            M.get_trait_method (|
                                                                                              "core::cmp::PartialOrd",
                                                                                              Ty.path
                                                                                                "tracing_core::metadata::Level",
                                                                                              [],
                                                                                              [
                                                                                                Ty.path
                                                                                                  "tracing_core::metadata::LevelFilter"
                                                                                              ],
                                                                                              "le",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.Ref,
                                                                                                get_associated_constant (|
                                                                                                  Ty.path
                                                                                                    "tracing_core::metadata::Level",
                                                                                                  "INFO",
                                                                                                  Ty.path
                                                                                                    "tracing_core::metadata::Level"
                                                                                                |)
                                                                                              |);
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.Ref,
                                                                                                get_constant (|
                                                                                                  "tracing::level_filters::STATIC_MAX_LEVEL",
                                                                                                  Ty.path
                                                                                                    "tracing_core::metadata::LevelFilter"
                                                                                                |)
                                                                                              |)
                                                                                            ]
                                                                                          |),
                                                                                          ltac:(M.monadic
                                                                                            (M.call_closure (|
                                                                                              Ty.path
                                                                                                "bool",
                                                                                              M.get_trait_method (|
                                                                                                "core::cmp::PartialOrd",
                                                                                                Ty.path
                                                                                                  "tracing_core::metadata::Level",
                                                                                                [],
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "tracing_core::metadata::LevelFilter"
                                                                                                ],
                                                                                                "le",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.Ref,
                                                                                                  get_associated_constant (|
                                                                                                    Ty.path
                                                                                                      "tracing_core::metadata::Level",
                                                                                                    "INFO",
                                                                                                    Ty.path
                                                                                                      "tracing_core::metadata::Level"
                                                                                                  |)
                                                                                                |);
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.Ref,
                                                                                                  M.alloc (|
                                                                                                    Ty.path
                                                                                                      "tracing_core::metadata::LevelFilter",
                                                                                                    M.call_closure (|
                                                                                                      Ty.path
                                                                                                        "tracing_core::metadata::LevelFilter",
                                                                                                      M.get_associated_function (|
                                                                                                        Ty.path
                                                                                                          "tracing_core::metadata::LevelFilter",
                                                                                                        "current",
                                                                                                        [],
                                                                                                        []
                                                                                                      |),
                                                                                                      []
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              ]
                                                                                            |)))
                                                                                        |),
                                                                                        ltac:(M.monadic
                                                                                          (M.read (|
                                                                                            let~ _ :
                                                                                                Ty.tuple
                                                                                                  [] :=
                                                                                              M.write (|
                                                                                                interest,
                                                                                                M.call_closure (|
                                                                                                  Ty.path
                                                                                                    "tracing_core::subscriber::Interest",
                                                                                                  M.get_associated_function (|
                                                                                                    Ty.path
                                                                                                      "tracing_core::callsite::DefaultCallsite",
                                                                                                    "interest",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.Ref,
                                                                                                      M.deref (|
                                                                                                        M.read (|
                                                                                                          get_constant (|
                                                                                                            "openvm_circuit::arch::vm::execute_and_generate_impl::{{closure}}::__CALLSITE",
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "tracing_core::callsite::DefaultCallsite"
                                                                                                              ]
                                                                                                          |)
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |) in
                                                                                            M.alloc (|
                                                                                              Ty.path
                                                                                                "bool",
                                                                                              UnOp.not (|
                                                                                                M.call_closure (|
                                                                                                  Ty.path
                                                                                                    "bool",
                                                                                                  M.get_associated_function (|
                                                                                                    Ty.path
                                                                                                      "tracing_core::subscriber::Interest",
                                                                                                    "is_never",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.Ref,
                                                                                                      interest
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          |)))
                                                                                      |),
                                                                                      ltac:(M.monadic
                                                                                        (M.call_closure (|
                                                                                          Ty.path
                                                                                            "bool",
                                                                                          M.get_function (|
                                                                                            "tracing::__macro_support::__is_enabled",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.Ref,
                                                                                              M.deref (|
                                                                                                M.call_closure (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "tracing_core::metadata::Metadata"
                                                                                                    ],
                                                                                                  M.get_trait_method (|
                                                                                                    "tracing_core::callsite::Callsite",
                                                                                                    Ty.path
                                                                                                      "tracing_core::callsite::DefaultCallsite",
                                                                                                    [],
                                                                                                    [],
                                                                                                    "metadata",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.Ref,
                                                                                                      M.deref (|
                                                                                                        M.read (|
                                                                                                          get_constant (|
                                                                                                            "openvm_circuit::arch::vm::execute_and_generate_impl::{{closure}}::__CALLSITE",
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "tracing_core::callsite::DefaultCallsite"
                                                                                                              ]
                                                                                                          |)
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              |)
                                                                                            |);
                                                                                            M.read (|
                                                                                              interest
                                                                                            |)
                                                                                          ]
                                                                                        |)))
                                                                                    |)
                                                                                  |)) in
                                                                              let _ :=
                                                                                is_constant_or_break_match (|
                                                                                  M.read (| γ |),
                                                                                  Value.Bool true
                                                                                |) in
                                                                              M.read (|
                                                                                let~ meta :
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "tracing_core::metadata::Metadata"
                                                                                      ] :=
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "tracing_core::metadata::Metadata"
                                                                                      ],
                                                                                    M.get_trait_method (|
                                                                                      "tracing_core::callsite::Callsite",
                                                                                      Ty.path
                                                                                        "tracing_core::callsite::DefaultCallsite",
                                                                                      [],
                                                                                      [],
                                                                                      "metadata",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            get_constant (|
                                                                                              "openvm_circuit::arch::vm::execute_and_generate_impl::{{closure}}::__CALLSITE",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "tracing_core::callsite::DefaultCallsite"
                                                                                                ]
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Ty.path
                                                                                    "tracing::span::Span",
                                                                                  M.call_closure (|
                                                                                    Ty.path
                                                                                      "tracing::span::Span",
                                                                                    M.get_associated_function (|
                                                                                      Ty.path
                                                                                        "tracing::span::Span",
                                                                                      "new",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            meta
                                                                                          |)
                                                                                        |)
                                                                                      |);
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.deref (|
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            let~
                                                                                                  iter :
                                                                                                Ty.path
                                                                                                  "tracing_core::field::Iter" :=
                                                                                              M.call_closure (|
                                                                                                Ty.path
                                                                                                  "tracing_core::field::Iter",
                                                                                                M.get_associated_function (|
                                                                                                  Ty.path
                                                                                                    "tracing_core::field::FieldSet",
                                                                                                  "iter",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.deref (|
                                                                                                      M.call_closure (|
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "tracing_core::field::FieldSet"
                                                                                                          ],
                                                                                                        M.get_associated_function (|
                                                                                                          Ty.path
                                                                                                            "tracing_core::metadata::Metadata",
                                                                                                          "fields",
                                                                                                          [],
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.Ref,
                                                                                                            M.deref (|
                                                                                                              M.read (|
                                                                                                                meta
                                                                                                              |)
                                                                                                            |)
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |) in
                                                                                            M.alloc (|
                                                                                              Ty.path
                                                                                                "tracing_core::field::ValueSet",
                                                                                              M.call_closure (|
                                                                                                Ty.path
                                                                                                  "tracing_core::field::ValueSet",
                                                                                                M.get_associated_function (|
                                                                                                  Ty.path
                                                                                                    "tracing_core::field::FieldSet",
                                                                                                  "value_set",
                                                                                                  [],
                                                                                                  [
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "array")
                                                                                                      [
                                                                                                        Value.Integer
                                                                                                          IntegerKind.Usize
                                                                                                          1
                                                                                                      ]
                                                                                                      [
                                                                                                        Ty.tuple
                                                                                                          [
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.path
                                                                                                                  "tracing_core::field::Field"
                                                                                                              ];
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "core::option::Option")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "&")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.dyn
                                                                                                                      [
                                                                                                                        ("tracing_core::field::Value::Trait",
                                                                                                                          [])
                                                                                                                      ]
                                                                                                                  ]
                                                                                                              ]
                                                                                                          ]
                                                                                                      ]
                                                                                                  ]
                                                                                                |),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.deref (|
                                                                                                      M.call_closure (|
                                                                                                        Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "tracing_core::field::FieldSet"
                                                                                                          ],
                                                                                                        M.get_associated_function (|
                                                                                                          Ty.path
                                                                                                            "tracing_core::metadata::Metadata",
                                                                                                          "fields",
                                                                                                          [],
                                                                                                          []
                                                                                                        |),
                                                                                                        [
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.Ref,
                                                                                                            M.deref (|
                                                                                                              M.read (|
                                                                                                                meta
                                                                                                              |)
                                                                                                            |)
                                                                                                          |)
                                                                                                        ]
                                                                                                      |)
                                                                                                    |)
                                                                                                  |);
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.deref (|
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.Ref,
                                                                                                        M.alloc (|
                                                                                                          Ty.apply
                                                                                                            (Ty.path
                                                                                                              "array")
                                                                                                            [
                                                                                                              Value.Integer
                                                                                                                IntegerKind.Usize
                                                                                                                1
                                                                                                            ]
                                                                                                            [
                                                                                                              Ty.tuple
                                                                                                                [
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "&")
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.path
                                                                                                                        "tracing_core::field::Field"
                                                                                                                    ];
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "core::option::Option")
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "&")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          Ty.dyn
                                                                                                                            [
                                                                                                                              ("tracing_core::field::Value::Trait",
                                                                                                                                [])
                                                                                                                            ]
                                                                                                                        ]
                                                                                                                    ]
                                                                                                                ]
                                                                                                            ],
                                                                                                          Value.Array
                                                                                                            [
                                                                                                              Value.Tuple
                                                                                                                [
                                                                                                                  M.borrow (|
                                                                                                                    Pointer.Kind.Ref,
                                                                                                                    M.alloc (|
                                                                                                                      Ty.path
                                                                                                                        "tracing_core::field::Field",
                                                                                                                      M.call_closure (|
                                                                                                                        Ty.path
                                                                                                                          "tracing_core::field::Field",
                                                                                                                        M.get_associated_function (|
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "core::option::Option")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Ty.path
                                                                                                                                "tracing_core::field::Field"
                                                                                                                            ],
                                                                                                                          "expect",
                                                                                                                          [],
                                                                                                                          []
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          M.call_closure (|
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "core::option::Option")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.path
                                                                                                                                  "tracing_core::field::Field"
                                                                                                                              ],
                                                                                                                            M.get_trait_method (|
                                                                                                                              "core::iter::traits::iterator::Iterator",
                                                                                                                              Ty.path
                                                                                                                                "tracing_core::field::Iter",
                                                                                                                              [],
                                                                                                                              [],
                                                                                                                              "next",
                                                                                                                              [],
                                                                                                                              []
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              M.borrow (|
                                                                                                                                Pointer.Kind.MutRef,
                                                                                                                                M.deref (|
                                                                                                                                  M.borrow (|
                                                                                                                                    Pointer.Kind.MutRef,
                                                                                                                                    iter
                                                                                                                                  |)
                                                                                                                                |)
                                                                                                                              |)
                                                                                                                            ]
                                                                                                                          |);
                                                                                                                          M.borrow (|
                                                                                                                            Pointer.Kind.Ref,
                                                                                                                            M.deref (|
                                                                                                                              mk_str (|
                                                                                                                                "FieldSet corrupted (this is a bug)"
                                                                                                                              |)
                                                                                                                            |)
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  |);
                                                                                                                  Value.StructTuple
                                                                                                                    "core::option::Option::Some"
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "&")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          Ty.dyn
                                                                                                                            [
                                                                                                                              ("tracing_core::field::Value::Trait",
                                                                                                                                [])
                                                                                                                            ]
                                                                                                                        ]
                                                                                                                    ]
                                                                                                                    [
                                                                                                                      M.read (|
                                                                                                                        M.use
                                                                                                                          (M.alloc (|
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "&")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.dyn
                                                                                                                                  [
                                                                                                                                    ("tracing_core::field::Value::Trait",
                                                                                                                                      [])
                                                                                                                                  ]
                                                                                                                              ],
                                                                                                                            M.call_closure (|
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "&")
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.dyn
                                                                                                                                    [
                                                                                                                                      ("tracing_core::field::Value::Trait",
                                                                                                                                        [])
                                                                                                                                    ]
                                                                                                                                ],
                                                                                                                              M.pointer_coercion
                                                                                                                                M.PointerCoercion.Unsize
                                                                                                                                (Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "&")
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.path
                                                                                                                                      "usize"
                                                                                                                                  ])
                                                                                                                                (Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "&")
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.dyn
                                                                                                                                      [
                                                                                                                                        ("tracing_core::field::Value::Trait",
                                                                                                                                          [])
                                                                                                                                      ]
                                                                                                                                  ]),
                                                                                                                              [
                                                                                                                                M.borrow (|
                                                                                                                                  Pointer.Kind.Ref,
                                                                                                                                  M.deref (|
                                                                                                                                    M.borrow (|
                                                                                                                                      Pointer.Kind.Ref,
                                                                                                                                      seg_idx
                                                                                                                                    |)
                                                                                                                                  |)
                                                                                                                                |)
                                                                                                                              ]
                                                                                                                            |)
                                                                                                                          |))
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                ]
                                                                                                            ]
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |)
                                                                              |)));
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (M.read (|
                                                                                let~ span :
                                                                                    Ty.path
                                                                                      "tracing::span::Span" :=
                                                                                  M.call_closure (|
                                                                                    Ty.path
                                                                                      "tracing::span::Span",
                                                                                    M.get_function (|
                                                                                      "tracing::__macro_support::__disabled_span",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.deref (|
                                                                                          M.call_closure (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "tracing_core::metadata::Metadata"
                                                                                              ],
                                                                                            M.get_trait_method (|
                                                                                              "tracing_core::callsite::Callsite",
                                                                                              Ty.path
                                                                                                "tracing_core::callsite::DefaultCallsite",
                                                                                              [],
                                                                                              [],
                                                                                              "metadata",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.Ref,
                                                                                                M.deref (|
                                                                                                  M.read (|
                                                                                                    get_constant (|
                                                                                                      "openvm_circuit::arch::vm::execute_and_generate_impl::{{closure}}::__CALLSITE",
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "&")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.path
                                                                                                            "tracing_core::callsite::DefaultCallsite"
                                                                                                        ]
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |) in
                                                                                let~ _ :
                                                                                    Ty.tuple [] :=
                                                                                  Value.Tuple [] in
                                                                                span
                                                                              |)))
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |);
                                                                  M.closure
                                                                    (fun γ =>
                                                                      ltac:(M.monadic
                                                                        match γ with
                                                                        | [ α0 ] =>
                                                                          ltac:(M.monadic
                                                                            (M.match_operator (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::result::Result")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "openvm_stark_backend::prover::types::ProofInput")
                                                                                    []
                                                                                    [ SC ];
                                                                                  Ty.path
                                                                                    "openvm_circuit::arch::vm::GenerationError"
                                                                                ],
                                                                              M.alloc (|
                                                                                Ty.tuple [],
                                                                                α0
                                                                              |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::result::Result")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "openvm_stark_backend::prover::types::ProofInput")
                                                                                            []
                                                                                            [ SC ];
                                                                                          Ty.path
                                                                                            "openvm_circuit::arch::vm::GenerationError"
                                                                                        ],
                                                                                      M.get_associated_function (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "openvm_circuit::arch::segment::ExecutionSegment")
                                                                                          []
                                                                                          [ F; VC ],
                                                                                        "generate_proof_input",
                                                                                        [],
                                                                                        [ SC ]
                                                                                      |),
                                                                                      [
                                                                                        M.read (|
                                                                                          seg
                                                                                        |);
                                                                                        M.call_closure (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::option::Option")
                                                                                            []
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "openvm_stark_backend::prover::types::CommittedTraceData")
                                                                                                []
                                                                                                [ SC
                                                                                                ]
                                                                                            ],
                                                                                          M.get_trait_method (|
                                                                                            "core::clone::Clone",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::option::Option")
                                                                                              []
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "openvm_stark_backend::prover::types::CommittedTraceData")
                                                                                                  []
                                                                                                  [
                                                                                                    SC
                                                                                                  ]
                                                                                              ],
                                                                                            [],
                                                                                            [],
                                                                                            "clone",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.Ref,
                                                                                              committed_program
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      ]
                                                                                    |)))
                                                                              ]
                                                                            |)))
                                                                        | _ =>
                                                                          M.impossible
                                                                            "wrong number of arguments"
                                                                        end))
                                                                ]
                                                              |)
                                                            |)
                                                          |)))
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end));
                                M.constructor_as_closure
                                  "openvm_circuit::arch::vm::GenerationError::Execution"
                                  []
                                  []
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.path "openvm_circuit::arch::vm::GenerationError"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "openvm_circuit::arch::vm::VmExecutorResult")
                                          []
                                          [ SC ];
                                        Ty.path "openvm_circuit::arch::vm::GenerationError"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "openvm_circuit::arch::vm::VmExecutorResult")
                                            []
                                            [ SC ];
                                          Ty.path "openvm_circuit::arch::vm::GenerationError"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "openvm_circuit::arch::vm::GenerationError"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                                      []
                                      [ SC ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                γ0_0
                              |) in
                            M.read (| val |)))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutorResult") [] [ SC ];
                        Ty.path "openvm_circuit::arch::vm::GenerationError"
                      ],
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [
                        Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutorResult") [] [ SC ];
                        Ty.path "openvm_circuit::arch::vm::GenerationError"
                      ]
                      [
                        Value.mkStructRecord
                          "openvm_circuit::arch::vm::VmExecutorResult"
                          []
                          [ SC ]
                          [
                            ("per_segment", M.read (| per_segment |));
                            ("final_memory", M.read (| final_memory |))
                          ]
                      ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_execute_and_generate_impl :
        forall (F VC : Ty.t),
        M.IsAssociatedFunction.C
          (Self F VC)
          "execute_and_generate_impl"
          (execute_and_generate_impl F VC).
      Admitted.
      Global Typeclasses Opaque execute_and_generate_impl.
      
      (*
          pub fn set_trace_height_constraints(&mut self, constraints: Vec<LinearConstraint>) {
              self.trace_height_constraints = constraints;
          }
      *)
      Definition set_trace_height_constraints
          (F VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F VC in
        match ε, τ, α with
        | [], [], [ self; constraints ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutor") [] [ F; VC ] ],
                self
              |) in
            let constraints :=
              M.alloc (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.path "openvm_stark_backend::keygen::types::LinearConstraint";
                    Ty.path "alloc::alloc::Global"
                  ],
                constraints
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::vm::VmExecutor",
                    "trace_height_constraints"
                  |),
                  M.read (| constraints |)
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_set_trace_height_constraints :
        forall (F VC : Ty.t),
        M.IsAssociatedFunction.C
          (Self F VC)
          "set_trace_height_constraints"
          (set_trace_height_constraints F VC).
      Admitted.
      Global Typeclasses Opaque set_trace_height_constraints.
    End Impl_openvm_circuit_arch_vm_VmExecutor_F_VC.
    
    (* StructRecord
      {
        name := "SingleSegmentVmExecutor";
        const_params := [];
        ty_params := [ "F"; "VC" ];
        fields :=
          [
            ("config", VC);
            ("overridden_heights",
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights" ]);
            ("trace_height_constraints",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.path "openvm_stark_backend::keygen::types::LinearConstraint";
                  Ty.path "alloc::alloc::Global"
                ]);
            ("_marker", Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ])
          ];
      } *)
    
    (* StructRecord
      {
        name := "SingleSegmentVmExecutionResult";
        const_params := [];
        ty_params := [ "F" ];
        fields :=
          [
            ("public_values",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [ Ty.apply (Ty.path "core::option::Option") [] [ F ]; Ty.path "alloc::alloc::Global"
                ]);
            ("air_heights",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]);
            ("vm_heights", Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights")
          ];
      } *)
    
    Module Impl_openvm_circuit_arch_vm_SingleSegmentVmExecutor_F_VC.
      Definition Self (F VC : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::vm::SingleSegmentVmExecutor") [] [ F; VC ].
      
      (*
          pub fn new(config: VC) -> Self {
              Self::new_with_overridden_trace_heights(config, None)
          }
      *)
      Definition new (F VC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F VC in
        match ε, τ, α with
        | [], [], [ config ] =>
          ltac:(M.monadic
            (let config := M.alloc (| VC, config |) in
            M.call_closure (|
              Ty.apply (Ty.path "openvm_circuit::arch::vm::SingleSegmentVmExecutor") [] [ F; VC ],
              M.get_associated_function (|
                Ty.apply (Ty.path "openvm_circuit::arch::vm::SingleSegmentVmExecutor") [] [ F; VC ],
                "new_with_overridden_trace_heights",
                [],
                []
              |),
              [
                M.read (| config |);
                Value.StructTuple
                  "core::option::Option::None"
                  []
                  [ Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights" ]
                  []
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (F VC : Ty.t),
        M.IsAssociatedFunction.C (Self F VC) "new" (new F VC).
      Admitted.
      Global Typeclasses Opaque new.
      
      (*
          pub fn new_with_overridden_trace_heights(
              config: VC,
              overridden_heights: Option<VmComplexTraceHeights>,
          ) -> Self {
              assert!(
                  !config.system().continuation_enabled,
                  "Single segment VM doesn't support continuation mode"
              );
              Self {
                  config,
                  overridden_heights,
                  trace_height_constraints: vec![],
                  _marker: Default::default(),
              }
          }
      *)
      Definition new_with_overridden_trace_heights
          (F VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F VC in
        match ε, τ, α with
        | [], [], [ config; overridden_heights ] =>
          ltac:(M.monadic
            (let config := M.alloc (| VC, config |) in
            let overridden_heights :=
              M.alloc (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights" ],
                overridden_heights
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              Ty.path "bool",
                              UnOp.not (|
                                UnOp.not (|
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.path "openvm_circuit::arch::config::SystemConfig"
                                            ],
                                          M.get_trait_method (|
                                            "openvm_circuit::arch::config::VmConfig",
                                            VC,
                                            [],
                                            [ F ],
                                            "system",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, config |) ]
                                        |)
                                      |),
                                      "openvm_circuit::arch::config::SystemConfig",
                                      "continuation_enabled"
                                    |)
                                  |)
                                |)
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.never_to_any (|
                          M.call_closure (|
                            Ty.path "never",
                            M.get_function (| "core::panicking::panic_fmt", [], [] |),
                            [
                              M.call_closure (|
                                Ty.path "core::fmt::Arguments",
                                M.get_associated_function (|
                                  Ty.path "core::fmt::Arguments",
                                  "new_const",
                                  [ Value.Integer IntegerKind.Usize 1 ],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 1 ]
                                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                          Value.Array
                                            [
                                              mk_str (|
                                                "Single segment VM doesn't support continuation mode"
                                              |)
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              M.alloc (|
                Ty.apply (Ty.path "openvm_circuit::arch::vm::SingleSegmentVmExecutor") [] [ F; VC ],
                Value.mkStructRecord
                  "openvm_circuit::arch::vm::SingleSegmentVmExecutor"
                  []
                  [ F; VC ]
                  [
                    ("config", M.read (| config |));
                    ("overridden_heights", M.read (| overridden_heights |));
                    ("trace_height_constraints",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.path "openvm_stark_backend::keygen::types::LinearConstraint";
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.path "openvm_stark_backend::keygen::types::LinearConstraint";
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          [],
                          []
                        |),
                        []
                      |));
                    ("_marker",
                      M.call_closure (|
                        Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ],
                        M.get_trait_method (|
                          "core::default::Default",
                          Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ],
                          [],
                          [],
                          "default",
                          [],
                          []
                        |),
                        []
                      |))
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new_with_overridden_trace_heights :
        forall (F VC : Ty.t),
        M.IsAssociatedFunction.C
          (Self F VC)
          "new_with_overridden_trace_heights"
          (new_with_overridden_trace_heights F VC).
      Admitted.
      Global Typeclasses Opaque new_with_overridden_trace_heights.
      
      (*
          pub fn set_override_trace_heights(&mut self, overridden_heights: VmComplexTraceHeights) {
              self.overridden_heights = Some(overridden_heights);
          }
      *)
      Definition set_override_trace_heights
          (F VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F VC in
        match ε, τ, α with
        | [], [], [ self; overridden_heights ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::vm::SingleSegmentVmExecutor")
                      []
                      [ F; VC ]
                  ],
                self
              |) in
            let overridden_heights :=
              M.alloc (|
                Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights",
                overridden_heights
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::vm::SingleSegmentVmExecutor",
                    "overridden_heights"
                  |),
                  Value.StructTuple
                    "core::option::Option::Some"
                    []
                    [ Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights" ]
                    [ M.read (| overridden_heights |) ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_set_override_trace_heights :
        forall (F VC : Ty.t),
        M.IsAssociatedFunction.C
          (Self F VC)
          "set_override_trace_heights"
          (set_override_trace_heights F VC).
      Admitted.
      Global Typeclasses Opaque set_override_trace_heights.
      
      (*
          pub fn set_trace_height_constraints(&mut self, constraints: Vec<LinearConstraint>) {
              self.trace_height_constraints = constraints;
          }
      *)
      Definition set_trace_height_constraints
          (F VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F VC in
        match ε, τ, α with
        | [], [], [ self; constraints ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::vm::SingleSegmentVmExecutor")
                      []
                      [ F; VC ]
                  ],
                self
              |) in
            let constraints :=
              M.alloc (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.path "openvm_stark_backend::keygen::types::LinearConstraint";
                    Ty.path "alloc::alloc::Global"
                  ],
                constraints
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::vm::SingleSegmentVmExecutor",
                    "trace_height_constraints"
                  |),
                  M.read (| constraints |)
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_set_trace_height_constraints :
        forall (F VC : Ty.t),
        M.IsAssociatedFunction.C
          (Self F VC)
          "set_trace_height_constraints"
          (set_trace_height_constraints F VC).
      Admitted.
      Global Typeclasses Opaque set_trace_height_constraints.
      
      (*
          pub fn execute_and_compute_heights(
              &self,
              exe: impl Into<VmExe<F>>,
              input: impl Into<Streams<F>>,
          ) -> Result<SingleSegmentVmExecutionResult<F>, ExecutionError> {
              let segment = {
                  let mut segment = self.execute_impl(exe.into(), input.into())?;
                  segment.chip_complex.finalize_memory();
                  segment
              };
              let air_heights = segment.chip_complex.current_trace_heights();
              let vm_heights = segment.chip_complex.get_internal_trace_heights();
              let public_values = if let Some(pv_chip) = segment.chip_complex.public_values_chip() {
                  pv_chip.core.get_custom_public_values()
              } else {
                  vec![]
              };
              Ok(SingleSegmentVmExecutionResult {
                  public_values,
                  air_heights,
                  vm_heights,
              })
          }
      *)
      Definition execute_and_compute_heights
          (F VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F VC in
        match ε, τ, α with
        | [], [ impl_Into_VmExe_F__; impl_Into_Streams_F__ ], [ self; exe; input ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::vm::SingleSegmentVmExecutor")
                      []
                      [ F; VC ]
                  ],
                self
              |) in
            let exe := M.alloc (| impl_Into_VmExe_F__, exe |) in
            let input := M.alloc (| impl_Into_Streams_F__, input |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::vm::SingleSegmentVmExecutionResult")
                    []
                    [ F ];
                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ segment :
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                        []
                        [ F; VC ] :=
                    M.read (|
                      let~ segment :
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                            []
                            [ F; VC ] :=
                        M.match_operator (|
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                            []
                            [ F; VC ],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                  ];
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                                  []
                                  [ F; VC ]
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                    ];
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                                    []
                                    [ F; VC ]
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                                      []
                                      [ F; VC ];
                                    Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                                        []
                                        [ F; VC ];
                                      Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::vm::SingleSegmentVmExecutor")
                                      []
                                      [ F; VC ],
                                    "execute_impl",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_circuit::arch::vm::Streams")
                                        []
                                        [ F ]
                                    ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| self |) |)
                                    |);
                                    M.call_closure (|
                                      Ty.apply (Ty.path "openvm_instructions::exe::VmExe") [] [ F ],
                                      M.get_trait_method (|
                                        "core::convert::Into",
                                        impl_Into_VmExe_F__,
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "openvm_instructions::exe::VmExe")
                                            []
                                            [ F ]
                                        ],
                                        "into",
                                        [],
                                        []
                                      |),
                                      [ M.read (| exe |) ]
                                    |);
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "openvm_circuit::arch::vm::Streams")
                                        []
                                        [ F ],
                                      M.get_trait_method (|
                                        "core::convert::Into",
                                        impl_Into_Streams_F__,
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "openvm_circuit::arch::vm::Streams")
                                            []
                                            [ F ]
                                        ],
                                        "into",
                                        [],
                                        []
                                      |),
                                      [ M.read (| input |) ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::vm::SingleSegmentVmExecutionResult")
                                              []
                                              [ F ];
                                            Ty.path
                                              "openvm_circuit::arch::execution::ExecutionError"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::arch::vm::SingleSegmentVmExecutionResult")
                                                []
                                                [ F ];
                                              Ty.path
                                                "openvm_circuit::arch::execution::ExecutionError"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.path
                                                  "openvm_circuit::arch::execution::ExecutionError"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                                      []
                                      [ F; VC ],
                                    γ0_0
                                  |) in
                                M.read (| val |)))
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                              []
                              [
                                F;
                                Ty.associated_in_trait
                                  "openvm_circuit::arch::config::VmConfig"
                                  []
                                  [ F ]
                                  VC
                                  "Executor";
                                Ty.associated_in_trait
                                  "openvm_circuit::arch::config::VmConfig"
                                  []
                                  [ F ]
                                  VC
                                  "Periphery"
                              ],
                            "finalize_memory",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.SubPointer.get_struct_record_field (|
                                segment,
                                "openvm_circuit::arch::segment::ExecutionSegment",
                                "chip_complex"
                              |)
                            |)
                          ]
                        |) in
                      segment
                    |) in
                  let~ air_heights :
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                          []
                          [
                            F;
                            Ty.associated_in_trait
                              "openvm_circuit::arch::config::VmConfig"
                              []
                              [ F ]
                              VC
                              "Executor";
                            Ty.associated_in_trait
                              "openvm_circuit::arch::config::VmConfig"
                              []
                              [ F ]
                              VC
                              "Periphery"
                          ],
                        "current_trace_heights",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            segment,
                            "openvm_circuit::arch::segment::ExecutionSegment",
                            "chip_complex"
                          |)
                        |)
                      ]
                    |) in
                  let~ vm_heights :
                      Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights" :=
                    M.call_closure (|
                      Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights",
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                          []
                          [
                            F;
                            Ty.associated_in_trait
                              "openvm_circuit::arch::config::VmConfig"
                              []
                              [ F ]
                              VC
                              "Executor";
                            Ty.associated_in_trait
                              "openvm_circuit::arch::config::VmConfig"
                              []
                              [ F ]
                              VC
                              "Periphery"
                          ],
                        "get_internal_trace_heights",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            segment,
                            "openvm_circuit::arch::segment::ExecutionSegment",
                            "chip_complex"
                          |)
                        |)
                      ]
                    |) in
                  let~ public_values :
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply (Ty.path "core::option::Option") [] [ F ];
                          Ty.path "alloc::alloc::Global"
                        ] :=
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply (Ty.path "core::option::Option") [] [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::integration_api::VmChipWrapper")
                                          []
                                          [
                                            F;
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::native_adapter::NativeAdapterChip")
                                              [
                                                Value.Integer IntegerKind.Usize 2;
                                                Value.Integer IntegerKind.Usize 0
                                              ]
                                              [ F ];
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                              []
                                              [ F ]
                                          ]
                                      ]
                                  ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::VmChipWrapper")
                                            []
                                            [
                                              F;
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::native_adapter::NativeAdapterChip")
                                                [
                                                  Value.Integer IntegerKind.Usize 2;
                                                  Value.Integer IntegerKind.Usize 0
                                                ]
                                                [ F ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                                []
                                                [ F ]
                                            ]
                                        ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                      []
                                      [
                                        F;
                                        Ty.associated_in_trait
                                          "openvm_circuit::arch::config::VmConfig"
                                          []
                                          [ F ]
                                          VC
                                          "Executor";
                                        Ty.associated_in_trait
                                          "openvm_circuit::arch::config::VmConfig"
                                          []
                                          [ F ]
                                          VC
                                          "Periphery"
                                      ],
                                    "public_values_chip",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        segment,
                                        "openvm_circuit::arch::segment::ExecutionSegment",
                                        "chip_complex"
                                      |)
                                    |)
                                  ]
                                |)
                              |) in
                            let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            let pv_chip :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::arch::integration_api::VmChipWrapper")
                                      []
                                      [
                                        F;
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::native_adapter::NativeAdapterChip")
                                          [
                                            Value.Integer IntegerKind.Usize 2;
                                            Value.Integer IntegerKind.Usize 0
                                          ]
                                          [ F ];
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                          []
                                          [ F ]
                                      ]
                                  ],
                                γ0_0
                              |) in
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply (Ty.path "core::option::Option") [] [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                  []
                                  [ F ],
                                "get_custom_public_values",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| pv_chip |) |),
                                    "openvm_circuit::arch::integration_api::VmChipWrapper",
                                    "core"
                                  |)
                                |)
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply (Ty.path "core::option::Option") [] [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply (Ty.path "core::option::Option") [] [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                [],
                                []
                              |),
                              []
                            |)))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::vm::SingleSegmentVmExecutionResult")
                          []
                          [ F ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ],
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::vm::SingleSegmentVmExecutionResult")
                          []
                          [ F ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ]
                      [
                        Value.mkStructRecord
                          "openvm_circuit::arch::vm::SingleSegmentVmExecutionResult"
                          []
                          [ F ]
                          [
                            ("public_values", M.read (| public_values |));
                            ("air_heights", M.read (| air_heights |));
                            ("vm_heights", M.read (| vm_heights |))
                          ]
                      ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_execute_and_compute_heights :
        forall (F VC : Ty.t),
        M.IsAssociatedFunction.C
          (Self F VC)
          "execute_and_compute_heights"
          (execute_and_compute_heights F VC).
      Admitted.
      Global Typeclasses Opaque execute_and_compute_heights.
      
      (*
          pub fn execute_and_generate<SC: StarkGenericConfig>(
              &self,
              committed_exe: Arc<VmCommittedExe<SC>>,
              input: impl Into<Streams<F>>,
          ) -> Result<ProofInput<SC>, GenerationError>
          where
              Domain<SC>: PolynomialSpace<Val = F>,
              VC::Executor: Chip<SC>,
              VC::Periphery: Chip<SC>,
          {
              let segment = self.execute_impl(committed_exe.exe.clone(), input)?;
              let proof_input = tracing::info_span!("trace_gen").in_scope(|| {
                  segment.generate_proof_input(Some(committed_exe.committed_program.clone()))
              })?;
              Ok(proof_input)
          }
      *)
      Definition execute_and_generate
          (F VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F VC in
        match ε, τ, α with
        | [], [ SC; impl_Into_Streams_F__ ], [ self; committed_exe; input ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::vm::SingleSegmentVmExecutor")
                      []
                      [ F; VC ]
                  ],
                self
              |) in
            let committed_exe :=
              M.alloc (|
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::program::trace::VmCommittedExe")
                      []
                      [ SC ];
                    Ty.path "alloc::alloc::Global"
                  ],
                committed_exe
              |) in
            let input := M.alloc (| impl_Into_Streams_F__, input |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply (Ty.path "openvm_stark_backend::prover::types::ProofInput") [] [ SC ];
                  Ty.path "openvm_circuit::arch::vm::GenerationError"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ segment :
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                        []
                        [ F; VC ] :=
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                        []
                        [ F; VC ],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.path "openvm_circuit::arch::execution::ExecutionError"
                              ];
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                              []
                              [ F; VC ]
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                ];
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                                []
                                [ F; VC ]
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                                  []
                                  [ F; VC ];
                                Ty.path "openvm_circuit::arch::execution::ExecutionError"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                                    []
                                    [ F; VC ];
                                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::vm::SingleSegmentVmExecutor")
                                  []
                                  [ F; VC ],
                                "execute_impl",
                                [],
                                [ impl_Into_Streams_F__ ]
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                                M.call_closure (|
                                  Ty.apply (Ty.path "openvm_instructions::exe::VmExe") [] [ F ],
                                  M.get_trait_method (|
                                    "core::clone::Clone",
                                    Ty.apply (Ty.path "openvm_instructions::exe::VmExe") [] [ F ],
                                    [],
                                    [],
                                    "clone",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::program::trace::VmCommittedExe")
                                                  []
                                                  [ SC ]
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::program::trace::VmCommittedExe")
                                                    []
                                                    [ SC ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, committed_exe |) ]
                                          |)
                                        |),
                                        "openvm_circuit::system::program::trace::VmCommittedExe",
                                        "exe"
                                      |)
                                    |)
                                  ]
                                |);
                                M.read (| input |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::prover::types::ProofInput")
                                          []
                                          [ SC ];
                                        Ty.path "openvm_circuit::arch::vm::GenerationError"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::prover::types::ProofInput")
                                            []
                                            [ SC ];
                                          Ty.path "openvm_circuit::arch::vm::GenerationError"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path
                                              "openvm_circuit::arch::execution::ExecutionError"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                                  []
                                  [ F; VC ],
                                γ0_0
                              |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ proof_input :
                      Ty.apply
                        (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                        []
                        [ SC ] :=
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                        []
                        [ SC ],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.path "openvm_circuit::arch::vm::GenerationError"
                              ];
                            Ty.apply
                              (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                              []
                              [ SC ]
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "openvm_circuit::arch::vm::GenerationError"
                                ];
                              Ty.apply
                                (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                                []
                                [ SC ]
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                                  []
                                  [ SC ];
                                Ty.path "openvm_circuit::arch::vm::GenerationError"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                                    []
                                    [ SC ];
                                  Ty.path "openvm_circuit::arch::vm::GenerationError"
                                ],
                              M.get_associated_function (|
                                Ty.path "tracing::span::Span",
                                "in_scope",
                                [],
                                [
                                  Ty.function
                                    []
                                    (Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::prover::types::ProofInput")
                                          []
                                          [ SC ];
                                        Ty.path "openvm_circuit::arch::vm::GenerationError"
                                      ]);
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                                        []
                                        [ SC ];
                                      Ty.path "openvm_circuit::arch::vm::GenerationError"
                                    ]
                                ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  let~ interest : Ty.path "tracing_core::subscriber::Interest" :=
                                    M.call_closure (|
                                      Ty.path "tracing_core::subscriber::Interest",
                                      M.get_associated_function (|
                                        Ty.path "tracing_core::subscriber::Interest",
                                        "never",
                                        [],
                                        []
                                      |),
                                      []
                                    |) in
                                  M.alloc (|
                                    Ty.path "tracing::span::Span",
                                    M.match_operator (|
                                      Ty.path "tracing::span::Span",
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  Ty.path "bool",
                                                  LogicalOp.and (|
                                                    LogicalOp.and (|
                                                      LogicalOp.and (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_trait_method (|
                                                            "core::cmp::PartialOrd",
                                                            Ty.path "tracing_core::metadata::Level",
                                                            [],
                                                            [
                                                              Ty.path
                                                                "tracing_core::metadata::LevelFilter"
                                                            ],
                                                            "le",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              get_associated_constant (|
                                                                Ty.path
                                                                  "tracing_core::metadata::Level",
                                                                "INFO",
                                                                Ty.path
                                                                  "tracing_core::metadata::Level"
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              get_constant (|
                                                                "tracing::level_filters::STATIC_MAX_LEVEL",
                                                                Ty.path
                                                                  "tracing_core::metadata::LevelFilter"
                                                              |)
                                                            |)
                                                          ]
                                                        |),
                                                        ltac:(M.monadic
                                                          (M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_trait_method (|
                                                              "core::cmp::PartialOrd",
                                                              Ty.path
                                                                "tracing_core::metadata::Level",
                                                              [],
                                                              [
                                                                Ty.path
                                                                  "tracing_core::metadata::LevelFilter"
                                                              ],
                                                              "le",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                get_associated_constant (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::Level",
                                                                  "INFO",
                                                                  Ty.path
                                                                    "tracing_core::metadata::Level"
                                                                |)
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Ty.path
                                                                    "tracing_core::metadata::LevelFilter",
                                                                  M.call_closure (|
                                                                    Ty.path
                                                                      "tracing_core::metadata::LevelFilter",
                                                                    M.get_associated_function (|
                                                                      Ty.path
                                                                        "tracing_core::metadata::LevelFilter",
                                                                      "current",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    []
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)))
                                                      |),
                                                      ltac:(M.monadic
                                                        (M.read (|
                                                          let~ _ : Ty.tuple [] :=
                                                            M.write (|
                                                              interest,
                                                              M.call_closure (|
                                                                Ty.path
                                                                  "tracing_core::subscriber::Interest",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::callsite::DefaultCallsite",
                                                                  "interest",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (|
                                                                        get_constant (|
                                                                          "openvm_circuit::arch::vm::execute_and_generate::__CALLSITE",
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::callsite::DefaultCallsite"
                                                                            ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |) in
                                                          M.alloc (|
                                                            Ty.path "bool",
                                                            UnOp.not (|
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                M.get_associated_function (|
                                                                  Ty.path
                                                                    "tracing_core::subscriber::Interest",
                                                                  "is_never",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    interest
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)))
                                                    |),
                                                    ltac:(M.monadic
                                                      (M.call_closure (|
                                                        Ty.path "bool",
                                                        M.get_function (|
                                                          "tracing::__macro_support::__is_enabled",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "tracing_core::metadata::Metadata"
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "tracing_core::callsite::Callsite",
                                                                  Ty.path
                                                                    "tracing_core::callsite::DefaultCallsite",
                                                                  [],
                                                                  [],
                                                                  "metadata",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (|
                                                                        get_constant (|
                                                                          "openvm_circuit::arch::vm::execute_and_generate::__CALLSITE",
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::callsite::DefaultCallsite"
                                                                            ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |);
                                                          M.read (| interest |)
                                                        ]
                                                      |)))
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.read (|
                                              let~ meta :
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "tracing_core::metadata::Metadata"
                                                    ] :=
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "tracing_core::metadata::Metadata" ],
                                                  M.get_trait_method (|
                                                    "tracing_core::callsite::Callsite",
                                                    Ty.path
                                                      "tracing_core::callsite::DefaultCallsite",
                                                    [],
                                                    [],
                                                    "metadata",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.read (|
                                                          get_constant (|
                                                            "openvm_circuit::arch::vm::execute_and_generate::__CALLSITE",
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite"
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |) in
                                              M.alloc (|
                                                Ty.path "tracing::span::Span",
                                                M.call_closure (|
                                                  Ty.path "tracing::span::Span",
                                                  M.get_associated_function (|
                                                    Ty.path "tracing::span::Span",
                                                    "new",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| meta |) |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.path "tracing_core::field::ValueSet",
                                                            M.call_closure (|
                                                              Ty.path
                                                                "tracing_core::field::ValueSet",
                                                              M.get_associated_function (|
                                                                Ty.path
                                                                  "tracing_core::field::FieldSet",
                                                                "value_set",
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        0
                                                                    ]
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::field::Field"
                                                                            ];
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.dyn
                                                                                    [
                                                                                      ("tracing_core::field::Value::Trait",
                                                                                        [])
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                ]
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::field::FieldSet"
                                                                        ],
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "tracing_core::metadata::Metadata",
                                                                        "fields",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| meta |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.alloc (|
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              0
                                                                          ]
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.path
                                                                                      "tracing_core::field::Field"
                                                                                  ];
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::option::Option")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.dyn
                                                                                          [
                                                                                            ("tracing_core::field::Value::Trait",
                                                                                              [])
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ],
                                                                        Value.Array []
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (M.read (|
                                              let~ span : Ty.path "tracing::span::Span" :=
                                                M.call_closure (|
                                                  Ty.path "tracing::span::Span",
                                                  M.get_function (|
                                                    "tracing::__macro_support::__disabled_span",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.path
                                                                "tracing_core::metadata::Metadata"
                                                            ],
                                                          M.get_trait_method (|
                                                            "tracing_core::callsite::Callsite",
                                                            Ty.path
                                                              "tracing_core::callsite::DefaultCallsite",
                                                            [],
                                                            [],
                                                            "metadata",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.read (|
                                                                  get_constant (|
                                                                    "openvm_circuit::arch::vm::execute_and_generate::__CALLSITE",
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "tracing_core::callsite::DefaultCallsite"
                                                                      ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |) in
                                              let~ _ : Ty.tuple [] := Value.Tuple [] in
                                              span
                                            |)))
                                      ]
                                    |)
                                  |)
                                |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::prover::types::ProofInput")
                                                  []
                                                  [ SC ];
                                                Ty.path "openvm_circuit::arch::vm::GenerationError"
                                              ],
                                            M.alloc (| Ty.tuple [], α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::prover::types::ProofInput")
                                                          []
                                                          [ SC ];
                                                        Ty.path
                                                          "openvm_circuit::arch::vm::GenerationError"
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::arch::segment::ExecutionSegment")
                                                        []
                                                        [ F; VC ],
                                                      "generate_proof_input",
                                                      [],
                                                      [ SC ]
                                                    |),
                                                    [
                                                      M.read (| segment |);
                                                      Value.StructTuple
                                                        "core::option::Option::Some"
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::prover::types::CommittedTraceData")
                                                            []
                                                            [ SC ]
                                                        ]
                                                        [
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_stark_backend::prover::types::CommittedTraceData")
                                                              []
                                                              [ SC ],
                                                            M.get_trait_method (|
                                                              "core::clone::Clone",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_stark_backend::prover::types::CommittedTraceData")
                                                                []
                                                                [ SC ],
                                                              [],
                                                              [],
                                                              "clone",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.deref (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_circuit::system::program::trace::VmCommittedExe")
                                                                            []
                                                                            [ SC ]
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::ops::deref::Deref",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::sync::Arc")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "openvm_circuit::system::program::trace::VmCommittedExe")
                                                                              []
                                                                              [ SC ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [],
                                                                        [],
                                                                        "deref",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          committed_exe
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |),
                                                                  "openvm_circuit::system::program::trace::VmCommittedExe",
                                                                  "committed_program"
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end))
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.path "openvm_circuit::arch::vm::GenerationError"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::prover::types::ProofInput")
                                          []
                                          [ SC ];
                                        Ty.path "openvm_circuit::arch::vm::GenerationError"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::prover::types::ProofInput")
                                            []
                                            [ SC ];
                                          Ty.path "openvm_circuit::arch::vm::GenerationError"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path "openvm_circuit::arch::vm::GenerationError"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                                  []
                                  [ SC ],
                                γ0_0
                              |) in
                            M.read (| val |)))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                          []
                          [ SC ];
                        Ty.path "openvm_circuit::arch::vm::GenerationError"
                      ],
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                          []
                          [ SC ];
                        Ty.path "openvm_circuit::arch::vm::GenerationError"
                      ]
                      [ M.read (| proof_input |) ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_execute_and_generate :
        forall (F VC : Ty.t),
        M.IsAssociatedFunction.C (Self F VC) "execute_and_generate" (execute_and_generate F VC).
      Admitted.
      Global Typeclasses Opaque execute_and_generate.
      
      (*
          fn execute_impl(
              &self,
              exe: VmExe<F>,
              input: impl Into<Streams<F>>,
          ) -> Result<ExecutionSegment<F, VC>, ExecutionError> {
              let pc_start = exe.pc_start;
              let mut segment = ExecutionSegment::new(
                  &self.config,
                  exe.program.clone(),
                  input.into(),
                  None,
                  self.trace_height_constraints.clone(),
                  exe.fn_bounds.clone(),
              );
              if let Some(overridden_heights) = self.overridden_heights.as_ref() {
                  segment.set_override_trace_heights(overridden_heights.clone());
              }
              metrics_span("execute_time_ms", || segment.execute_from_pc(pc_start))?;
              Ok(segment)
          }
      *)
      Definition execute_impl
          (F VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F VC in
        match ε, τ, α with
        | [], [ impl_Into_Streams_F__ ], [ self; exe; input ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::vm::SingleSegmentVmExecutor")
                      []
                      [ F; VC ]
                  ],
                self
              |) in
            let exe :=
              M.alloc (| Ty.apply (Ty.path "openvm_instructions::exe::VmExe") [] [ F ], exe |) in
            let input := M.alloc (| impl_Into_Streams_F__, input |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply (Ty.path "openvm_circuit::arch::segment::ExecutionSegment") [] [ F; VC ];
                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ pc_start : Ty.path "u32" :=
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        exe,
                        "openvm_instructions::exe::VmExe",
                        "pc_start"
                      |)
                    |) in
                  let~ segment :
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                        []
                        [ F; VC ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                        []
                        [ F; VC ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                          []
                          [ F; VC ],
                        "new",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::arch::vm::SingleSegmentVmExecutor",
                                "config"
                              |)
                            |)
                          |)
                        |);
                        M.call_closure (|
                          Ty.apply (Ty.path "openvm_instructions::program::Program") [] [ F ],
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.apply (Ty.path "openvm_instructions::program::Program") [] [ F ],
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                exe,
                                "openvm_instructions::exe::VmExe",
                                "program"
                              |)
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ],
                          M.get_trait_method (|
                            "core::convert::Into",
                            impl_Into_Streams_F__,
                            [],
                            [ Ty.apply (Ty.path "openvm_circuit::arch::vm::Streams") [] [ F ] ],
                            "into",
                            [],
                            []
                          |),
                          [ M.read (| input |) ]
                        |);
                        Value.StructTuple
                          "core::option::Option::None"
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                              [ Value.Integer IntegerKind.Usize 4096 ]
                              [ F ]
                          ]
                          [];
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.path "openvm_stark_backend::keygen::types::LinearConstraint";
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.path "openvm_stark_backend::keygen::types::LinearConstraint";
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::arch::vm::SingleSegmentVmExecutor",
                                "trace_height_constraints"
                              |)
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                            []
                            [
                              Ty.path "u32";
                              Ty.path "openvm_instructions::exe::FnBound";
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.apply
                              (Ty.path "alloc::collections::btree::map::BTreeMap")
                              []
                              [
                                Ty.path "u32";
                                Ty.path "openvm_instructions::exe::FnBound";
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                exe,
                                "openvm_instructions::exe::VmExe",
                                "fn_bounds"
                              |)
                            |)
                          ]
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.path
                                          "openvm_circuit::arch::extensions::VmComplexTraceHeights"
                                      ]
                                  ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.path
                                            "openvm_circuit::arch::extensions::VmComplexTraceHeights"
                                        ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.path
                                          "openvm_circuit::arch::extensions::VmComplexTraceHeights"
                                      ],
                                    "as_ref",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_circuit::arch::vm::SingleSegmentVmExecutor",
                                        "overridden_heights"
                                      |)
                                    |)
                                  ]
                                |)
                              |) in
                            let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            let overridden_heights :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.path
                                      "openvm_circuit::arch::extensions::VmComplexTraceHeights"
                                  ],
                                γ0_0
                              |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.call_closure (|
                                  Ty.tuple [],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                                      []
                                      [ F; VC ],
                                    "set_override_trace_heights",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.MutRef, segment |);
                                    M.call_closure (|
                                      Ty.path
                                        "openvm_circuit::arch::extensions::VmComplexTraceHeights",
                                      M.get_trait_method (|
                                        "core::clone::Clone",
                                        Ty.path
                                          "openvm_circuit::arch::extensions::VmComplexTraceHeights",
                                        [],
                                        [],
                                        "clone",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| overridden_heights |) |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  let~ _ : Ty.path "openvm_circuit::arch::segment::ExecutionSegmentState" :=
                    M.match_operator (|
                      Ty.path "openvm_circuit::arch::segment::ExecutionSegmentState",
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.path "openvm_circuit::arch::execution::ExecutionError"
                              ];
                            Ty.path "openvm_circuit::arch::segment::ExecutionSegmentState"
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                ];
                              Ty.path "openvm_circuit::arch::segment::ExecutionSegmentState"
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "openvm_circuit::arch::segment::ExecutionSegmentState";
                                Ty.path "openvm_circuit::arch::execution::ExecutionError"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "openvm_circuit::arch::segment::ExecutionSegmentState";
                                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                ],
                              M.get_function (|
                                "openvm_stark_backend::utils::metrics_span",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path
                                        "openvm_circuit::arch::segment::ExecutionSegmentState";
                                      Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                    ];
                                  Ty.function
                                    []
                                    (Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path
                                          "openvm_circuit::arch::segment::ExecutionSegmentState";
                                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                      ]);
                                  Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                                ]
                              |),
                              [
                                mk_str (| "execute_time_ms" |);
                                M.closure
                                  (fun γ =>
                                    ltac:(M.monadic
                                      match γ with
                                      | [ α0 ] =>
                                        ltac:(M.monadic
                                          (M.match_operator (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_circuit::arch::segment::ExecutionSegmentState";
                                                Ty.path
                                                  "openvm_circuit::arch::execution::ExecutionError"
                                              ],
                                            M.alloc (| Ty.tuple [], α0 |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path
                                                          "openvm_circuit::arch::segment::ExecutionSegmentState";
                                                        Ty.path
                                                          "openvm_circuit::arch::execution::ExecutionError"
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::arch::segment::ExecutionSegment")
                                                        []
                                                        [ F; VC ],
                                                      "execute_from_pc",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (| Pointer.Kind.MutRef, segment |);
                                                      M.read (| pc_start |)
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                      | _ => M.impossible "wrong number of arguments"
                                      end))
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::segment::ExecutionSegment")
                                          []
                                          [ F; VC ];
                                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::segment::ExecutionSegment")
                                            []
                                            [ F; VC ];
                                          Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path
                                              "openvm_circuit::arch::execution::ExecutionError"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val :=
                              M.copy (|
                                Ty.path "openvm_circuit::arch::segment::ExecutionSegmentState",
                                γ0_0
                              |) in
                            M.read (| val |)))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                          []
                          [ F; VC ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ],
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                          []
                          [ F; VC ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ]
                      [ M.read (| segment |) ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_execute_impl :
        forall (F VC : Ty.t),
        M.IsAssociatedFunction.C (Self F VC) "execute_impl" (execute_impl F VC).
      Admitted.
      Global Typeclasses Opaque execute_impl.
    End Impl_openvm_circuit_arch_vm_SingleSegmentVmExecutor_F_VC.
    
    (*
    Enum VmVerificationError
    {
      const_params := [];
      ty_params := [];
      variants :=
        [
          {
            name := "ProofNotFound";
            item := StructTuple [];
          };
          {
            name := "ProgramCommitMismatch";
            item := StructRecord [ ("index", Ty.path "usize") ];
          };
          {
            name := "InitialPcMismatch";
            item := StructRecord [ ("initial", Ty.path "u32"); ("prev_final", Ty.path "u32") ];
          };
          {
            name := "InitialMemoryRootMismatch";
            item := StructTuple [];
          };
          {
            name := "IsTerminateMismatch";
            item := StructRecord [ ("expected", Ty.path "bool"); ("actual", Ty.path "bool") ];
          };
          {
            name := "ExitCodeMismatch";
            item := StructRecord [ ("expected", Ty.path "u32"); ("actual", Ty.path "u32") ];
          };
          {
            name := "UnexpectedPvs";
            item := StructRecord [ ("expected", Ty.path "usize"); ("actual", Ty.path "usize") ];
          };
          {
            name := "SystemAirMissing";
            item := StructRecord [ ("air_id", Ty.path "usize") ];
          };
          {
            name := "StarkError";
            item :=
              StructTuple [ Ty.path "openvm_stark_backend::verifier::error::VerificationError" ];
          };
          {
            name := "UserPublicValuesError";
            item :=
              StructTuple
                [
                  Ty.path
                    "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError"
                ];
          }
        ];
    }
    *)
    
    Axiom IsDiscriminant_VmVerificationError_ProofNotFound :
      M.IsDiscriminant "openvm_circuit::arch::vm::VmVerificationError::ProofNotFound" 0.
    Axiom IsDiscriminant_VmVerificationError_ProgramCommitMismatch :
      M.IsDiscriminant "openvm_circuit::arch::vm::VmVerificationError::ProgramCommitMismatch" 1.
    Axiom IsDiscriminant_VmVerificationError_InitialPcMismatch :
      M.IsDiscriminant "openvm_circuit::arch::vm::VmVerificationError::InitialPcMismatch" 2.
    Axiom IsDiscriminant_VmVerificationError_InitialMemoryRootMismatch :
      M.IsDiscriminant "openvm_circuit::arch::vm::VmVerificationError::InitialMemoryRootMismatch" 3.
    Axiom IsDiscriminant_VmVerificationError_IsTerminateMismatch :
      M.IsDiscriminant "openvm_circuit::arch::vm::VmVerificationError::IsTerminateMismatch" 4.
    Axiom IsDiscriminant_VmVerificationError_ExitCodeMismatch :
      M.IsDiscriminant "openvm_circuit::arch::vm::VmVerificationError::ExitCodeMismatch" 5.
    Axiom IsDiscriminant_VmVerificationError_UnexpectedPvs :
      M.IsDiscriminant "openvm_circuit::arch::vm::VmVerificationError::UnexpectedPvs" 6.
    Axiom IsDiscriminant_VmVerificationError_SystemAirMissing :
      M.IsDiscriminant "openvm_circuit::arch::vm::VmVerificationError::SystemAirMissing" 7.
    Axiom IsDiscriminant_VmVerificationError_StarkError :
      M.IsDiscriminant "openvm_circuit::arch::vm::VmVerificationError::StarkError" 8.
    Axiom IsDiscriminant_VmVerificationError_UserPublicValuesError :
      M.IsDiscriminant "openvm_circuit::arch::vm::VmVerificationError::UserPublicValuesError" 9.
    
    Module Impl_core_error_Error_for_openvm_circuit_arch_vm_VmVerificationError.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::vm::VmVerificationError".
      
      (* Error *)
      Definition source (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_circuit::arch::vm::VmVerificationError" ],
                self
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::error::Error::Trait", []) ] ] ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::ProofNotFound"
                      |) in
                    Value.StructTuple
                      "core::option::Option::None"
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::error::Error::Trait", []) ] ] ]
                      []));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::ProgramCommitMismatch"
                      |) in
                    Value.StructTuple
                      "core::option::Option::None"
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::error::Error::Trait", []) ] ] ]
                      []));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::InitialPcMismatch"
                      |) in
                    Value.StructTuple
                      "core::option::Option::None"
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::error::Error::Trait", []) ] ] ]
                      []));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::InitialMemoryRootMismatch"
                      |) in
                    Value.StructTuple
                      "core::option::Option::None"
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::error::Error::Trait", []) ] ] ]
                      []));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::IsTerminateMismatch"
                      |) in
                    Value.StructTuple
                      "core::option::Option::None"
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::error::Error::Trait", []) ] ] ]
                      []));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::ExitCodeMismatch"
                      |) in
                    Value.StructTuple
                      "core::option::Option::None"
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::error::Error::Trait", []) ] ] ]
                      []));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::UnexpectedPvs"
                      |) in
                    Value.StructTuple
                      "core::option::Option::None"
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::error::Error::Trait", []) ] ] ]
                      []));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::SystemAirMissing"
                      |) in
                    Value.StructTuple
                      "core::option::Option::None"
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::error::Error::Trait", []) ] ] ]
                      []));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::StarkError",
                        0
                      |) in
                    let source :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.path "openvm_stark_backend::verifier::error::VerificationError" ],
                        γ1_0
                      |) in
                    Value.StructTuple
                      "core::option::Option::Some"
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::error::Error::Trait", []) ] ] ]
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.dyn [ ("core::error::Error::Trait", []) ] ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::error::Error::Trait", []) ] ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::error::Error::Trait", []) ] ]),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::error::Error::Trait", []) ] ],
                                  M.get_trait_method (|
                                    "thiserror::aserror::AsDynError",
                                    Ty.path
                                      "openvm_stark_backend::verifier::error::VerificationError",
                                    [],
                                    [],
                                    "as_dyn_error",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| source |) |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::UserPublicValuesError",
                        0
                      |) in
                    let source :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.path
                              "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError"
                          ],
                        γ1_0
                      |) in
                    Value.StructTuple
                      "core::option::Option::Some"
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::error::Error::Trait", []) ] ] ]
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.dyn [ ("core::error::Error::Trait", []) ] ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::error::Error::Trait", []) ] ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::error::Error::Trait", []) ] ]),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::error::Error::Trait", []) ] ],
                                  M.get_trait_method (|
                                    "thiserror::aserror::AsDynError",
                                    Ty.path
                                      "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError",
                                    [],
                                    [],
                                    "as_dyn_error",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| source |) |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::error::Error"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("source", InstanceField.Method source) ].
    End Impl_core_error_Error_for_openvm_circuit_arch_vm_VmVerificationError.
    
    Module Impl_core_fmt_Display_for_openvm_circuit_arch_vm_VmVerificationError.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::vm::VmVerificationError".
      
      (* Error *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; __formatter ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_circuit::arch::vm::VmVerificationError" ],
                self
              |) in
            let __formatter :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ],
                __formatter
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::ProofNotFound"
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "write_str",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| __formatter |) |) |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "no proof is provided" |) |)
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::ProgramCommitMismatch",
                        "index"
                      |) in
                    let index :=
                      M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "write_fmt",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| __formatter |) |) |);
                        M.call_closure (|
                          Ty.path "core::fmt::Arguments",
                          M.get_associated_function (|
                            Ty.path "core::fmt::Arguments",
                            "new_v1",
                            [ Value.Integer IntegerKind.Usize 1; Value.Integer IntegerKind.Usize 1
                            ],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                    Value.Array
                                      [
                                        mk_str (|
                                          "program commit mismatch (index of mismatch proof: "
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "core::fmt::rt::Argument" ],
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::rt::Argument",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_display",
                                            [],
                                            [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                    M.call_closure (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                      M.get_trait_method (|
                                                        "thiserror::display::AsDisplay",
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        [],
                                                        [],
                                                        "as_display",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.borrow (| Pointer.Kind.Ref, index |) ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::InitialPcMismatch",
                        "initial"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::InitialPcMismatch",
                        "prev_final"
                      |) in
                    let initial :=
                      M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ1_0 |) in
                    let prev_final :=
                      M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ1_1 |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "write_fmt",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| __formatter |) |) |);
                        M.call_closure (|
                          Ty.path "core::fmt::Arguments",
                          M.get_associated_function (|
                            Ty.path "core::fmt::Arguments",
                            "new_v1",
                            [ Value.Integer IntegerKind.Usize 3; Value.Integer IntegerKind.Usize 2
                            ],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 3 ]
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                    Value.Array
                                      [
                                        mk_str (| "initial pc mismatch (initial: " |);
                                        mk_str (| ", prev_final: " |);
                                        mk_str (| ")" |)
                                      ]
                                  |)
                                |)
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ Ty.path "core::fmt::rt::Argument" ],
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::rt::Argument",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_display",
                                            [],
                                            [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                                    M.call_closure (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                                      M.get_trait_method (|
                                                        "thiserror::display::AsDisplay",
                                                        Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                                        [],
                                                        [],
                                                        "as_display",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.borrow (| Pointer.Kind.Ref, initial |) ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |);
                                        M.call_closure (|
                                          Ty.path "core::fmt::rt::Argument",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_display",
                                            [],
                                            [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                                    M.call_closure (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                                      M.get_trait_method (|
                                                        "thiserror::display::AsDisplay",
                                                        Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                                        [],
                                                        [],
                                                        "as_display",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.borrow (| Pointer.Kind.Ref, prev_final |)
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::InitialMemoryRootMismatch"
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "write_str",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| __formatter |) |) |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "initial memory root mismatch" |) |)
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::IsTerminateMismatch",
                        "expected"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::IsTerminateMismatch",
                        "actual"
                      |) in
                    let expected :=
                      M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "bool" ], γ1_0 |) in
                    let actual :=
                      M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "bool" ], γ1_1 |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "write_fmt",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| __formatter |) |) |);
                        M.call_closure (|
                          Ty.path "core::fmt::Arguments",
                          M.get_associated_function (|
                            Ty.path "core::fmt::Arguments",
                            "new_v1",
                            [ Value.Integer IntegerKind.Usize 3; Value.Integer IntegerKind.Usize 2
                            ],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 3 ]
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                    Value.Array
                                      [
                                        mk_str (| "is terminate mismatch (expected: " |);
                                        mk_str (| ", actual: " |);
                                        mk_str (| ")" |)
                                      ]
                                  |)
                                |)
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ Ty.path "core::fmt::rt::Argument" ],
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::rt::Argument",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_display",
                                            [],
                                            [ Ty.apply (Ty.path "&") [] [ Ty.path "bool" ] ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "bool" ],
                                                    M.call_closure (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "bool" ],
                                                      M.get_trait_method (|
                                                        "thiserror::display::AsDisplay",
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "bool" ],
                                                        [],
                                                        [],
                                                        "as_display",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.borrow (| Pointer.Kind.Ref, expected |) ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |);
                                        M.call_closure (|
                                          Ty.path "core::fmt::rt::Argument",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_display",
                                            [],
                                            [ Ty.apply (Ty.path "&") [] [ Ty.path "bool" ] ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "bool" ],
                                                    M.call_closure (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "bool" ],
                                                      M.get_trait_method (|
                                                        "thiserror::display::AsDisplay",
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "bool" ],
                                                        [],
                                                        [],
                                                        "as_display",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.borrow (| Pointer.Kind.Ref, actual |) ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::ExitCodeMismatch",
                        "expected"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::ExitCodeMismatch",
                        "actual"
                      |) in
                    let expected :=
                      M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ1_0 |) in
                    let actual := M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ1_1 |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "write_str",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| __formatter |) |) |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "exit code mismatch" |) |)
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::UnexpectedPvs",
                        "expected"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::UnexpectedPvs",
                        "actual"
                      |) in
                    let expected :=
                      M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                    let actual :=
                      M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_1 |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "write_fmt",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| __formatter |) |) |);
                        M.call_closure (|
                          Ty.path "core::fmt::Arguments",
                          M.get_associated_function (|
                            Ty.path "core::fmt::Arguments",
                            "new_v1",
                            [ Value.Integer IntegerKind.Usize 3; Value.Integer IntegerKind.Usize 2
                            ],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 3 ]
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                    Value.Array
                                      [
                                        mk_str (| "AIR has unexpected public values (expected: " |);
                                        mk_str (| ", actual: " |);
                                        mk_str (| ")" |)
                                      ]
                                  |)
                                |)
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ Ty.path "core::fmt::rt::Argument" ],
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::rt::Argument",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_display",
                                            [],
                                            [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                    M.call_closure (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                      M.get_trait_method (|
                                                        "thiserror::display::AsDisplay",
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        [],
                                                        [],
                                                        "as_display",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.borrow (| Pointer.Kind.Ref, expected |) ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |);
                                        M.call_closure (|
                                          Ty.path "core::fmt::rt::Argument",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_display",
                                            [],
                                            [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                    M.call_closure (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                      M.get_trait_method (|
                                                        "thiserror::display::AsDisplay",
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        [],
                                                        [],
                                                        "as_display",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.borrow (| Pointer.Kind.Ref, actual |) ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::SystemAirMissing",
                        "air_id"
                      |) in
                    let air_id :=
                      M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "write_fmt",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| __formatter |) |) |);
                        M.call_closure (|
                          Ty.path "core::fmt::Arguments",
                          M.get_associated_function (|
                            Ty.path "core::fmt::Arguments",
                            "new_v1",
                            [ Value.Integer IntegerKind.Usize 1; Value.Integer IntegerKind.Usize 1
                            ],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                    Value.Array [ mk_str (| "missing system AIR with ID " |) ]
                                  |)
                                |)
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "core::fmt::rt::Argument" ],
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::rt::Argument",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_display",
                                            [],
                                            [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                    M.call_closure (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                      M.get_trait_method (|
                                                        "thiserror::display::AsDisplay",
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        [],
                                                        [],
                                                        "as_display",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.borrow (| Pointer.Kind.Ref, air_id |) ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::StarkError",
                        0
                      |) in
                    let _0 :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.path "openvm_stark_backend::verifier::error::VerificationError" ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "write_fmt",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| __formatter |) |) |);
                        M.call_closure (|
                          Ty.path "core::fmt::Arguments",
                          M.get_associated_function (|
                            Ty.path "core::fmt::Arguments",
                            "new_v1",
                            [ Value.Integer IntegerKind.Usize 1; Value.Integer IntegerKind.Usize 1
                            ],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                    Value.Array [ mk_str (| "stark verification error: " |) ]
                                  |)
                                |)
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "core::fmt::rt::Argument" ],
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::rt::Argument",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_display",
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.path
                                                    "openvm_stark_backend::verifier::error::VerificationError"
                                                ]
                                            ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.path
                                                          "openvm_stark_backend::verifier::error::VerificationError"
                                                      ],
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.path
                                                            "openvm_stark_backend::verifier::error::VerificationError"
                                                        ],
                                                      M.get_trait_method (|
                                                        "thiserror::display::AsDisplay",
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.path
                                                              "openvm_stark_backend::verifier::error::VerificationError"
                                                          ],
                                                        [],
                                                        [],
                                                        "as_display",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.borrow (| Pointer.Kind.Ref, _0 |) ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::UserPublicValuesError",
                        0
                      |) in
                    let _0 :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.path
                              "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError"
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "write_fmt",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| __formatter |) |) |);
                        M.call_closure (|
                          Ty.path "core::fmt::Arguments",
                          M.get_associated_function (|
                            Ty.path "core::fmt::Arguments",
                            "new_v1",
                            [ Value.Integer IntegerKind.Usize 1; Value.Integer IntegerKind.Usize 1
                            ],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                    Value.Array [ mk_str (| "user public values proof error: " |) ]
                                  |)
                                |)
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "core::fmt::rt::Argument" ],
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::rt::Argument",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_display",
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.path
                                                    "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError"
                                                ]
                                            ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.path
                                                          "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError"
                                                      ],
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.path
                                                            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError"
                                                        ],
                                                      M.get_trait_method (|
                                                        "thiserror::display::AsDisplay",
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.path
                                                              "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError"
                                                          ],
                                                        [],
                                                        [],
                                                        "as_display",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.borrow (| Pointer.Kind.Ref, _0 |) ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Display"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Display_for_openvm_circuit_arch_vm_VmVerificationError.
    
    Module Impl_core_convert_From_openvm_stark_backend_verifier_error_VerificationError_for_openvm_circuit_arch_vm_VmVerificationError.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::vm::VmVerificationError".
      
      (* Error *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ source ] =>
          ltac:(M.monadic
            (let source :=
              M.alloc (|
                Ty.path "openvm_stark_backend::verifier::error::VerificationError",
                source
              |) in
            Value.StructTuple
              "openvm_circuit::arch::vm::VmVerificationError::StarkError"
              []
              []
              [ M.read (| source |) ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.path "openvm_stark_backend::verifier::error::VerificationError" ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_openvm_stark_backend_verifier_error_VerificationError_for_openvm_circuit_arch_vm_VmVerificationError.
    
    Module Impl_core_convert_From_openvm_circuit_system_memory_tree_public_values_UserPublicValuesProofError_for_openvm_circuit_arch_vm_VmVerificationError.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::vm::VmVerificationError".
      
      (* Error *)
      Definition from (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ source ] =>
          ltac:(M.monadic
            (let source :=
              M.alloc (|
                Ty.path
                  "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError",
                source
              |) in
            Value.StructTuple
              "openvm_circuit::arch::vm::VmVerificationError::UserPublicValuesError"
              []
              []
              [ M.read (| source |) ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::convert::From"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.path
              "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError"
          ]
          Self
          (* Instance *) [ ("from", InstanceField.Method from) ].
    End Impl_core_convert_From_openvm_circuit_system_memory_tree_public_values_UserPublicValuesProofError_for_openvm_circuit_arch_vm_VmVerificationError.
    
    Module Impl_core_fmt_Debug_for_openvm_circuit_arch_vm_VmVerificationError.
      Definition Self : Ty.t := Ty.path "openvm_circuit::arch::vm::VmVerificationError".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_circuit::arch::vm::VmVerificationError" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::ProofNotFound"
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "write_str",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "ProofNotFound" |) |) |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::ProgramCommitMismatch",
                        "index"
                      |) in
                    let __self_0 :=
                      M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "debug_struct_field1_finish",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "ProgramCommitMismatch" |) |)
                        |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "index" |) |) |);
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                            |)
                          ]
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::InitialPcMismatch",
                        "initial"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::InitialPcMismatch",
                        "prev_final"
                      |) in
                    let __self_0 :=
                      M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ1_0 |) in
                    let __self_1 :=
                      M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ1_1 |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "debug_struct_field2_finish",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "InitialPcMismatch" |) |)
                        |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "initial" |) |) |);
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply (Ty.path "&") [] [ Ty.path "u32" ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                        |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "prev_final" |) |) |);
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_1 |) |)
                            |)
                          ]
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let _ :=
                      M.is_struct_tuple (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::InitialMemoryRootMismatch"
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "write_str",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "InitialMemoryRootMismatch" |) |)
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::IsTerminateMismatch",
                        "expected"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::IsTerminateMismatch",
                        "actual"
                      |) in
                    let __self_0 :=
                      M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "bool" ], γ1_0 |) in
                    let __self_1 :=
                      M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "bool" ], γ1_1 |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "debug_struct_field2_finish",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "IsTerminateMismatch" |) |)
                        |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "expected" |) |) |);
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply (Ty.path "&") [] [ Ty.path "bool" ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                        |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "actual" |) |) |);
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "bool" ] ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_1 |) |)
                            |)
                          ]
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::ExitCodeMismatch",
                        "expected"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::ExitCodeMismatch",
                        "actual"
                      |) in
                    let __self_0 :=
                      M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ1_0 |) in
                    let __self_1 :=
                      M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ1_1 |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "debug_struct_field2_finish",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "ExitCodeMismatch" |) |)
                        |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "expected" |) |) |);
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply (Ty.path "&") [] [ Ty.path "u32" ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                        |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "actual" |) |) |);
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_1 |) |)
                            |)
                          ]
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::UnexpectedPvs",
                        "expected"
                      |) in
                    let γ1_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::UnexpectedPvs",
                        "actual"
                      |) in
                    let __self_0 :=
                      M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                    let __self_1 :=
                      M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_1 |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "debug_struct_field2_finish",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "UnexpectedPvs" |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "expected" |) |) |);
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                        |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "actual" |) |) |);
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_1 |) |)
                            |)
                          ]
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::SystemAirMissing",
                        "air_id"
                      |) in
                    let __self_0 :=
                      M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "debug_struct_field1_finish",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "SystemAirMissing" |) |)
                        |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "air_id" |) |) |);
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                            |)
                          ]
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::StarkError",
                        0
                      |) in
                    let __self_0 :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.path "openvm_stark_backend::verifier::error::VerificationError" ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "debug_tuple_field1_finish",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "StarkError" |) |) |);
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.path
                                      "openvm_stark_backend::verifier::error::VerificationError"
                                  ]
                              ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                            |)
                          ]
                        |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.deref (| M.read (| γ |) |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::arch::vm::VmVerificationError::UserPublicValuesError",
                        0
                      |) in
                    let __self_0 :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.path
                              "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError"
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                      M.get_associated_function (|
                        Ty.path "core::fmt::Formatter",
                        "debug_tuple_field1_finish",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| mk_str (| "UserPublicValuesError" |) |)
                        |);
                        M.call_closure (|
                          Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.path
                                      "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError"
                                  ]
                              ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                            |)
                          ]
                        |)
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_openvm_circuit_arch_vm_VmVerificationError.
    
    (* StructRecord
      {
        name := "VirtualMachine";
        const_params := [];
        ty_params := [ "SC"; "E"; "VC" ];
        fields :=
          [
            ("engine", E);
            ("executor",
              Ty.apply
                (Ty.path "openvm_circuit::arch::vm::VmExecutor")
                []
                [
                  Ty.associated_in_trait
                    "p3_commit::domain::PolynomialSpace"
                    []
                    []
                    (Ty.associated_in_trait
                      "p3_commit::pcs::Pcs"
                      []
                      [
                        Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenge";
                        Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenger"
                      ]
                      (Ty.associated_in_trait
                        "openvm_stark_backend::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Pcs")
                      "Domain")
                    "Val";
                  VC
                ]);
            ("_marker", Ty.apply (Ty.path "core::marker::PhantomData") [] [ SC ])
          ];
      } *)
    
    Module Impl_openvm_circuit_arch_vm_VirtualMachine_SC_E_VC.
      Definition Self (F SC E VC : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::vm::VirtualMachine") [] [ SC; E; VC ].
      
      (*
          pub fn new(engine: E, config: VC) -> Self {
              let executor = VmExecutor::new(config);
              Self {
                  engine,
                  executor,
                  _marker: PhantomData,
              }
          }
      *)
      Definition new (F SC E VC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F SC E VC in
        match ε, τ, α with
        | [], [], [ engine; config ] =>
          ltac:(M.monadic
            (let engine := M.alloc (| E, engine |) in
            let config := M.alloc (| VC, config |) in
            M.read (|
              let~ executor :
                  Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutor") [] [ F; VC ] :=
                M.call_closure (|
                  Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutor") [] [ F; VC ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutor") [] [ F; VC ],
                    "new",
                    [],
                    []
                  |),
                  [ M.read (| config |) ]
                |) in
              M.alloc (|
                Ty.apply (Ty.path "openvm_circuit::arch::vm::VirtualMachine") [] [ SC; E; VC ],
                Value.mkStructRecord
                  "openvm_circuit::arch::vm::VirtualMachine"
                  []
                  [ SC; E; VC ]
                  [
                    ("engine", M.read (| engine |));
                    ("executor", M.read (| executor |));
                    ("_marker", Value.StructTuple "core::marker::PhantomData" [] [ SC ] [])
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (F SC E VC : Ty.t),
        M.IsAssociatedFunction.C (Self F SC E VC) "new" (new F SC E VC).
      Admitted.
      Global Typeclasses Opaque new.
      
      (*
          pub fn new_with_overridden_trace_heights(
              engine: E,
              config: VC,
              overridden_heights: Option<VmComplexTraceHeights>,
          ) -> Self {
              let executor = VmExecutor::new_with_overridden_trace_heights(config, overridden_heights);
              Self {
                  engine,
                  executor,
                  _marker: PhantomData,
              }
          }
      *)
      Definition new_with_overridden_trace_heights
          (F SC E VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F SC E VC in
        match ε, τ, α with
        | [], [], [ engine; config; overridden_heights ] =>
          ltac:(M.monadic
            (let engine := M.alloc (| E, engine |) in
            let config := M.alloc (| VC, config |) in
            let overridden_heights :=
              M.alloc (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.path "openvm_circuit::arch::extensions::VmComplexTraceHeights" ],
                overridden_heights
              |) in
            M.read (|
              let~ executor :
                  Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutor") [] [ F; VC ] :=
                M.call_closure (|
                  Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutor") [] [ F; VC ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutor") [] [ F; VC ],
                    "new_with_overridden_trace_heights",
                    [],
                    []
                  |),
                  [ M.read (| config |); M.read (| overridden_heights |) ]
                |) in
              M.alloc (|
                Ty.apply (Ty.path "openvm_circuit::arch::vm::VirtualMachine") [] [ SC; E; VC ],
                Value.mkStructRecord
                  "openvm_circuit::arch::vm::VirtualMachine"
                  []
                  [ SC; E; VC ]
                  [
                    ("engine", M.read (| engine |));
                    ("executor", M.read (| executor |));
                    ("_marker", Value.StructTuple "core::marker::PhantomData" [] [ SC ] [])
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new_with_overridden_trace_heights :
        forall (F SC E VC : Ty.t),
        M.IsAssociatedFunction.C
          (Self F SC E VC)
          "new_with_overridden_trace_heights"
          (new_with_overridden_trace_heights F SC E VC).
      Admitted.
      Global Typeclasses Opaque new_with_overridden_trace_heights.
      
      (*
          pub fn config(&self) -> &VC {
              &self.executor.config
          }
      *)
      Definition config
          (F SC E VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F SC E VC in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::VirtualMachine") [] [ SC; E; VC ]
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::arch::vm::VirtualMachine",
                      "executor"
                    |),
                    "openvm_circuit::arch::vm::VmExecutor",
                    "config"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_config :
        forall (F SC E VC : Ty.t),
        M.IsAssociatedFunction.C (Self F SC E VC) "config" (config F SC E VC).
      Admitted.
      Global Typeclasses Opaque config.
      
      (*
          pub fn keygen(&self) -> MultiStarkProvingKey<SC> {
              let mut keygen_builder = self.engine.keygen_builder();
              let chip_complex = self.config().create_chip_complex().unwrap();
              for air in chip_complex.airs() {
                  keygen_builder.add_air(air);
              }
              keygen_builder.generate_pk()
          }
      *)
      Definition keygen
          (F SC E VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F SC E VC in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::VirtualMachine") [] [ SC; E; VC ]
                  ],
                self
              |) in
            M.read (|
              let~ keygen_builder :
                  Ty.apply
                    (Ty.path "openvm_stark_backend::keygen::MultiStarkKeygenBuilder")
                    []
                    [ SC ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "openvm_stark_backend::keygen::MultiStarkKeygenBuilder")
                    []
                    [ SC ],
                  M.get_trait_method (|
                    "openvm_stark_backend::engine::StarkEngine",
                    E,
                    [],
                    [ SC ],
                    "keygen_builder",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::vm::VirtualMachine",
                        "engine"
                      |)
                    |)
                  ]
                |) in
              let~ chip_complex :
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                    []
                    [
                      F;
                      Ty.associated_in_trait
                        "openvm_circuit::arch::config::VmConfig"
                        []
                        [ F ]
                        VC
                        "Executor";
                      Ty.associated_in_trait
                        "openvm_circuit::arch::config::VmConfig"
                        []
                        [ F ]
                        VC
                        "Periphery"
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                    []
                    [
                      F;
                      Ty.associated_in_trait
                        "openvm_circuit::arch::config::VmConfig"
                        []
                        [ F ]
                        VC
                        "Executor";
                      Ty.associated_in_trait
                        "openvm_circuit::arch::config::VmConfig"
                        []
                        [ F ]
                        VC
                        "Periphery"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                          []
                          [
                            F;
                            Ty.associated_in_trait
                              "openvm_circuit::arch::config::VmConfig"
                              []
                              [ F ]
                              VC
                              "Executor";
                            Ty.associated_in_trait
                              "openvm_circuit::arch::config::VmConfig"
                              []
                              [ F ]
                              VC
                              "Periphery"
                          ];
                        Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                      ],
                    "unwrap",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                            []
                            [
                              F;
                              Ty.associated_in_trait
                                "openvm_circuit::arch::config::VmConfig"
                                []
                                [ F ]
                                VC
                                "Executor";
                              Ty.associated_in_trait
                                "openvm_circuit::arch::config::VmConfig"
                                []
                                [ F ]
                                VC
                                "Periphery"
                            ];
                          Ty.path "openvm_circuit::arch::extensions::VmInventoryError"
                        ],
                      M.get_trait_method (|
                        "openvm_circuit::arch::config::VmConfig",
                        VC,
                        [],
                        [ F ],
                        "create_chip_complex",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply (Ty.path "&") [] [ VC ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::vm::VirtualMachine")
                                  []
                                  [ SC; E; VC ],
                                "config",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.read (|
                  M.use
                    (M.alloc (|
                      Ty.tuple [],
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                      Ty.path "alloc::alloc::Global"
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                        Ty.path "alloc::alloc::Global"
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::VmChipComplex")
                                    []
                                    [
                                      F;
                                      Ty.associated_in_trait
                                        "openvm_circuit::arch::config::VmConfig"
                                        []
                                        [ F ]
                                        VC
                                        "Executor";
                                      Ty.associated_in_trait
                                        "openvm_circuit::arch::config::VmConfig"
                                        []
                                        [ F ]
                                        VC
                                        "Periphery"
                                    ],
                                  "airs",
                                  [],
                                  [ SC ]
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, chip_complex |) ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.dyn
                                            [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  γ
                                |) in
                              M.read (|
                                M.loop (|
                                  Ty.tuple [],
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                []
                                                [
                                                  Ty.dyn
                                                    [
                                                      ("openvm_stark_backend::rap::AnyRap::Trait",
                                                        [])
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::sync::Arc")
                                                  []
                                                  [
                                                    Ty.dyn
                                                      [
                                                        ("openvm_stark_backend::rap::AnyRap::Trait",
                                                          [])
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    []
                                                    [
                                                      Ty.dyn
                                                        [
                                                          ("openvm_stark_backend::rap::AnyRap::Trait",
                                                            [])
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              [],
                                              "next",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, iter |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "core::option::Option::None"
                                                |) in
                                              M.never_to_any (| M.read (| M.break (||) |) |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let air :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    []
                                                    [
                                                      Ty.dyn
                                                        [
                                                          ("openvm_stark_backend::rap::AnyRap::Trait",
                                                            [])
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  γ0_0
                                                |) in
                                              M.read (|
                                                let~ _ : Ty.path "usize" :=
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::keygen::MultiStarkKeygenBuilder")
                                                        []
                                                        [ SC ],
                                                      "add_air",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        keygen_builder
                                                      |);
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "alloc::sync::Arc")
                                                          []
                                                          [
                                                            Ty.dyn
                                                              [
                                                                ("openvm_stark_backend::rap::AnyRap::Trait",
                                                                  [])
                                                              ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        M.pointer_coercion
                                                          M.PointerCoercion.Unsize
                                                          (Ty.apply
                                                            (Ty.path "alloc::sync::Arc")
                                                            []
                                                            [
                                                              Ty.dyn
                                                                [
                                                                  ("openvm_stark_backend::rap::AnyRap::Trait",
                                                                    [])
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ])
                                                          (Ty.apply
                                                            (Ty.path "alloc::sync::Arc")
                                                            []
                                                            [
                                                              Ty.dyn
                                                                [
                                                                  ("openvm_stark_backend::rap::AnyRap::Trait",
                                                                    [])
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ]),
                                                        [ M.read (| air |) ]
                                                      |)
                                                    ]
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                |)
                              |)))
                        ]
                      |)
                    |))
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_stark_backend::keygen::types::MultiStarkProvingKey")
                  []
                  [ SC ],
                M.call_closure (|
                  Ty.apply
                    (Ty.path "openvm_stark_backend::keygen::types::MultiStarkProvingKey")
                    []
                    [ SC ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::keygen::MultiStarkKeygenBuilder")
                      []
                      [ SC ],
                    "generate_pk",
                    [],
                    []
                  |),
                  [ M.read (| keygen_builder |) ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_keygen :
        forall (F SC E VC : Ty.t),
        M.IsAssociatedFunction.C (Self F SC E VC) "keygen" (keygen F SC E VC).
      Admitted.
      Global Typeclasses Opaque keygen.
      
      (*
          pub fn set_trace_height_constraints(
              &mut self,
              trace_height_constraints: Vec<LinearConstraint>,
          ) {
              self.executor
                  .set_trace_height_constraints(trace_height_constraints);
          }
      *)
      Definition set_trace_height_constraints
          (F SC E VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F SC E VC in
        match ε, τ, α with
        | [], [], [ self; trace_height_constraints ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::VirtualMachine") [] [ SC; E; VC ]
                  ],
                self
              |) in
            let trace_height_constraints :=
              M.alloc (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.path "openvm_stark_backend::keygen::types::LinearConstraint";
                    Ty.path "alloc::alloc::Global"
                  ],
                trace_height_constraints
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutor") [] [ F; VC ],
                    "set_trace_height_constraints",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::arch::vm::VirtualMachine",
                        "executor"
                      |)
                    |);
                    M.read (| trace_height_constraints |)
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_set_trace_height_constraints :
        forall (F SC E VC : Ty.t),
        M.IsAssociatedFunction.C
          (Self F SC E VC)
          "set_trace_height_constraints"
          (set_trace_height_constraints F SC E VC).
      Admitted.
      Global Typeclasses Opaque set_trace_height_constraints.
      
      (*
          pub fn commit_exe(&self, exe: impl Into<VmExe<F>>) -> Arc<VmCommittedExe<SC>> {
              let exe = exe.into();
              Arc::new(VmCommittedExe::commit(exe, self.engine.config().pcs()))
          }
      *)
      Definition commit_exe
          (F SC E VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F SC E VC in
        match ε, τ, α with
        | [], [ impl_Into_VmExe_F__ ], [ self; exe ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::VirtualMachine") [] [ SC; E; VC ]
                  ],
                self
              |) in
            let exe := M.alloc (| impl_Into_VmExe_F__, exe |) in
            M.read (|
              let~ exe : Ty.apply (Ty.path "openvm_instructions::exe::VmExe") [] [ F ] :=
                M.call_closure (|
                  Ty.apply (Ty.path "openvm_instructions::exe::VmExe") [] [ F ],
                  M.get_trait_method (|
                    "core::convert::Into",
                    impl_Into_VmExe_F__,
                    [],
                    [ Ty.apply (Ty.path "openvm_instructions::exe::VmExe") [] [ F ] ],
                    "into",
                    [],
                    []
                  |),
                  [ M.read (| exe |) ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::program::trace::VmCommittedExe")
                      []
                      [ SC ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::program::trace::VmCommittedExe")
                        []
                        [ SC ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::program::trace::VmCommittedExe")
                          []
                          [ SC ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    "new",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::program::trace::VmCommittedExe")
                        []
                        [ SC ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_circuit::system::program::trace::VmCommittedExe")
                          []
                          [ SC ],
                        "commit",
                        [],
                        []
                      |),
                      [
                        M.read (| exe |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Pcs"
                                ],
                              M.get_trait_method (|
                                "openvm_stark_backend::config::StarkGenericConfig",
                                SC,
                                [],
                                [],
                                "pcs",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply (Ty.path "&") [] [ SC ],
                                      M.get_trait_method (|
                                        "openvm_stark_backend::engine::StarkEngine",
                                        E,
                                        [],
                                        [ SC ],
                                        "config",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::arch::vm::VirtualMachine",
                                            "engine"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_commit_exe :
        forall (F SC E VC : Ty.t),
        M.IsAssociatedFunction.C (Self F SC E VC) "commit_exe" (commit_exe F SC E VC).
      Admitted.
      Global Typeclasses Opaque commit_exe.
      
      (*
          pub fn execute(
              &self,
              exe: impl Into<VmExe<F>>,
              input: impl Into<Streams<F>>,
          ) -> Result<Option<VmMemoryState<F>>, ExecutionError> {
              self.executor.execute(exe, input)
          }
      *)
      Definition execute
          (F SC E VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F SC E VC in
        match ε, τ, α with
        | [], [ impl_Into_VmExe_F__; impl_Into_Streams_F__ ], [ self; exe; input ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::VirtualMachine") [] [ SC; E; VC ]
                  ],
                self
              |) in
            let exe := M.alloc (| impl_Into_VmExe_F__, exe |) in
            let input := M.alloc (| impl_Into_Streams_F__, input |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                        [ Value.Integer IntegerKind.Usize 4096 ]
                        [ F ]
                    ];
                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                ],
              M.get_associated_function (|
                Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutor") [] [ F; VC ],
                "execute",
                [],
                [ impl_Into_VmExe_F__; impl_Into_Streams_F__ ]
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::vm::VirtualMachine",
                    "executor"
                  |)
                |);
                M.read (| exe |);
                M.read (| input |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_execute :
        forall (F SC E VC : Ty.t),
        M.IsAssociatedFunction.C (Self F SC E VC) "execute" (execute F SC E VC).
      Admitted.
      Global Typeclasses Opaque execute.
      
      (*
          pub fn execute_and_generate(
              &self,
              exe: impl Into<VmExe<F>>,
              input: impl Into<Streams<F>>,
          ) -> Result<VmExecutorResult<SC>, GenerationError> {
              self.executor.execute_and_generate(exe, input)
          }
      *)
      Definition execute_and_generate
          (F SC E VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F SC E VC in
        match ε, τ, α with
        | [], [ impl_Into_VmExe_F__; impl_Into_Streams_F__ ], [ self; exe; input ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::VirtualMachine") [] [ SC; E; VC ]
                  ],
                self
              |) in
            let exe := M.alloc (| impl_Into_VmExe_F__, exe |) in
            let input := M.alloc (| impl_Into_Streams_F__, input |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutorResult") [] [ SC ];
                  Ty.path "openvm_circuit::arch::vm::GenerationError"
                ],
              M.get_associated_function (|
                Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutor") [] [ F; VC ],
                "execute_and_generate",
                [],
                [ SC; impl_Into_VmExe_F__; impl_Into_Streams_F__ ]
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::vm::VirtualMachine",
                    "executor"
                  |)
                |);
                M.read (| exe |);
                M.read (| input |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_execute_and_generate :
        forall (F SC E VC : Ty.t),
        M.IsAssociatedFunction.C
          (Self F SC E VC)
          "execute_and_generate"
          (execute_and_generate F SC E VC).
      Admitted.
      Global Typeclasses Opaque execute_and_generate.
      
      (*
          pub fn execute_and_generate_with_cached_program(
              &self,
              committed_exe: Arc<VmCommittedExe<SC>>,
              input: impl Into<Streams<F>>,
          ) -> Result<VmExecutorResult<SC>, GenerationError>
          where
              Domain<SC>: PolynomialSpace<Val = F>,
          {
              self.executor
                  .execute_and_generate_with_cached_program(committed_exe, input)
          }
      *)
      Definition execute_and_generate_with_cached_program
          (F SC E VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F SC E VC in
        match ε, τ, α with
        | [], [ impl_Into_Streams_F__ ], [ self; committed_exe; input ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::VirtualMachine") [] [ SC; E; VC ]
                  ],
                self
              |) in
            let committed_exe :=
              M.alloc (|
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::program::trace::VmCommittedExe")
                      []
                      [ SC ];
                    Ty.path "alloc::alloc::Global"
                  ],
                committed_exe
              |) in
            let input := M.alloc (| impl_Into_Streams_F__, input |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutorResult") [] [ SC ];
                  Ty.path "openvm_circuit::arch::vm::GenerationError"
                ],
              M.get_associated_function (|
                Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutor") [] [ F; VC ],
                "execute_and_generate_with_cached_program",
                [],
                [ SC; impl_Into_Streams_F__ ]
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::vm::VirtualMachine",
                    "executor"
                  |)
                |);
                M.read (| committed_exe |);
                M.read (| input |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_execute_and_generate_with_cached_program :
        forall (F SC E VC : Ty.t),
        M.IsAssociatedFunction.C
          (Self F SC E VC)
          "execute_and_generate_with_cached_program"
          (execute_and_generate_with_cached_program F SC E VC).
      Admitted.
      Global Typeclasses Opaque execute_and_generate_with_cached_program.
      
      (*
          pub fn prove_single(
              &self,
              pk: &MultiStarkProvingKey<SC>,
              proof_input: ProofInput<SC>,
          ) -> Proof<SC> {
              self.engine.prove(pk, proof_input)
          }
      *)
      Definition prove_single
          (F SC E VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F SC E VC in
        match ε, τ, α with
        | [], [], [ self; pk; proof_input ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::VirtualMachine") [] [ SC; E; VC ]
                  ],
                self
              |) in
            let pk :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::keygen::types::MultiStarkProvingKey")
                      []
                      [ SC ]
                  ],
                pk
              |) in
            let proof_input :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_stark_backend::prover::types::ProofInput") [] [ SC ],
                proof_input
              |) in
            M.call_closure (|
              Ty.apply (Ty.path "openvm_stark_backend::proof::Proof") [] [ SC ],
              M.get_trait_method (|
                "openvm_stark_backend::engine::StarkEngine",
                E,
                [],
                [ SC ],
                "prove",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::vm::VirtualMachine",
                    "engine"
                  |)
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| pk |) |) |);
                M.read (| proof_input |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_prove_single :
        forall (F SC E VC : Ty.t),
        M.IsAssociatedFunction.C (Self F SC E VC) "prove_single" (prove_single F SC E VC).
      Admitted.
      Global Typeclasses Opaque prove_single.
      
      (*
          pub fn prove(
              &self,
              pk: &MultiStarkProvingKey<SC>,
              results: VmExecutorResult<SC>,
          ) -> Vec<Proof<SC>> {
              results
                  .per_segment
                  .into_iter()
                  .enumerate()
                  .map(|(seg_idx, proof_input)| {
                      tracing::info_span!("prove_segment", segment = seg_idx)
                          .in_scope(|| self.engine.prove(pk, proof_input))
                  })
                  .collect()
          }
      *)
      Definition prove
          (F SC E VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F SC E VC in
        match ε, τ, α with
        | [], [], [ self; pk; results ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::VirtualMachine") [] [ SC; E; VC ]
                  ],
                self
              |) in
            let pk :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::keygen::types::MultiStarkProvingKey")
                      []
                      [ SC ]
                  ],
                pk
              |) in
            let results :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_circuit::arch::vm::VmExecutorResult") [] [ SC ],
                results
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply (Ty.path "openvm_stark_backend::proof::Proof") [] [ SC ];
                  Ty.path "alloc::alloc::Global"
                ],
              M.get_trait_method (|
                "core::iter::traits::iterator::Iterator",
                Ty.apply
                  (Ty.path "core::iter::adapters::map::Map")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                              []
                              [ SC ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ];
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.path "usize";
                            Ty.apply
                              (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                              []
                              [ SC ]
                          ]
                      ]
                      (Ty.apply (Ty.path "openvm_stark_backend::proof::Proof") [] [ SC ])
                  ],
                [],
                [],
                "collect",
                [],
                [
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply (Ty.path "openvm_stark_backend::proof::Proof") [] [ SC ];
                      Ty.path "alloc::alloc::Global"
                    ]
                ]
              |),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                                []
                                [ SC ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ];
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.path "usize";
                              Ty.apply
                                (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                                []
                                [ SC ]
                            ]
                        ]
                        (Ty.apply (Ty.path "openvm_stark_backend::proof::Proof") [] [ SC ])
                    ],
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                              []
                              [ SC ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ],
                    [],
                    [],
                    "map",
                    [],
                    [
                      Ty.apply (Ty.path "openvm_stark_backend::proof::Proof") [] [ SC ];
                      Ty.function
                        [
                          Ty.tuple
                            [
                              Ty.path "usize";
                              Ty.apply
                                (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                                []
                                [ SC ]
                            ]
                        ]
                        (Ty.apply (Ty.path "openvm_stark_backend::proof::Proof") [] [ SC ])
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                                []
                                [ SC ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                              []
                              [ SC ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        [],
                        "enumerate",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                                []
                                [ SC ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                                  []
                                  [ SC ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                results,
                                "openvm_circuit::arch::vm::VmExecutorResult",
                                "per_segment"
                              |)
                            |)
                          ]
                        |)
                      ]
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.apply (Ty.path "openvm_stark_backend::proof::Proof") [] [ SC ],
                                M.alloc (|
                                  Ty.tuple
                                    [
                                      Ty.path "usize";
                                      Ty.apply
                                        (Ty.path "openvm_stark_backend::prover::types::ProofInput")
                                        []
                                        [ SC ]
                                    ],
                                  α0
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                      let seg_idx := M.copy (| Ty.path "usize", γ0_0 |) in
                                      let proof_input :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::prover::types::ProofInput")
                                            []
                                            [ SC ],
                                          γ0_1
                                        |) in
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "openvm_stark_backend::proof::Proof")
                                          []
                                          [ SC ],
                                        M.get_associated_function (|
                                          Ty.path "tracing::span::Span",
                                          "in_scope",
                                          [],
                                          [
                                            Ty.function
                                              []
                                              (Ty.apply
                                                (Ty.path "openvm_stark_backend::proof::Proof")
                                                []
                                                [ SC ]);
                                            Ty.apply
                                              (Ty.path "openvm_stark_backend::proof::Proof")
                                              []
                                              [ SC ]
                                          ]
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            let~ interest :
                                                Ty.path "tracing_core::subscriber::Interest" :=
                                              M.call_closure (|
                                                Ty.path "tracing_core::subscriber::Interest",
                                                M.get_associated_function (|
                                                  Ty.path "tracing_core::subscriber::Interest",
                                                  "never",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |) in
                                            M.alloc (|
                                              Ty.path "tracing::span::Span",
                                              M.match_operator (|
                                                Ty.path "tracing::span::Span",
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            Ty.path "bool",
                                                            LogicalOp.and (|
                                                              LogicalOp.and (|
                                                                LogicalOp.and (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    M.get_trait_method (|
                                                                      "core::cmp::PartialOrd",
                                                                      Ty.path
                                                                        "tracing_core::metadata::Level",
                                                                      [],
                                                                      [
                                                                        Ty.path
                                                                          "tracing_core::metadata::LevelFilter"
                                                                      ],
                                                                      "le",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        get_associated_constant (|
                                                                          Ty.path
                                                                            "tracing_core::metadata::Level",
                                                                          "INFO",
                                                                          Ty.path
                                                                            "tracing_core::metadata::Level"
                                                                        |)
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        get_constant (|
                                                                          "tracing::level_filters::STATIC_MAX_LEVEL",
                                                                          Ty.path
                                                                            "tracing_core::metadata::LevelFilter"
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |),
                                                                  ltac:(M.monadic
                                                                    (M.call_closure (|
                                                                      Ty.path "bool",
                                                                      M.get_trait_method (|
                                                                        "core::cmp::PartialOrd",
                                                                        Ty.path
                                                                          "tracing_core::metadata::Level",
                                                                        [],
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::metadata::LevelFilter"
                                                                        ],
                                                                        "le",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          get_associated_constant (|
                                                                            Ty.path
                                                                              "tracing_core::metadata::Level",
                                                                            "INFO",
                                                                            Ty.path
                                                                              "tracing_core::metadata::Level"
                                                                          |)
                                                                        |);
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.alloc (|
                                                                            Ty.path
                                                                              "tracing_core::metadata::LevelFilter",
                                                                            M.call_closure (|
                                                                              Ty.path
                                                                                "tracing_core::metadata::LevelFilter",
                                                                              M.get_associated_function (|
                                                                                Ty.path
                                                                                  "tracing_core::metadata::LevelFilter",
                                                                                "current",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              []
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)))
                                                                |),
                                                                ltac:(M.monadic
                                                                  (M.read (|
                                                                    let~ _ : Ty.tuple [] :=
                                                                      M.write (|
                                                                        interest,
                                                                        M.call_closure (|
                                                                          Ty.path
                                                                            "tracing_core::subscriber::Interest",
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite",
                                                                            "interest",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  get_constant (|
                                                                                    "openvm_circuit::arch::vm::prove::{{closure}}::__CALLSITE",
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "tracing_core::callsite::DefaultCallsite"
                                                                                      ]
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |) in
                                                                    M.alloc (|
                                                                      Ty.path "bool",
                                                                      UnOp.not (|
                                                                        M.call_closure (|
                                                                          Ty.path "bool",
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "tracing_core::subscriber::Interest",
                                                                            "is_never",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              interest
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)))
                                                              |),
                                                              ltac:(M.monadic
                                                                (M.call_closure (|
                                                                  Ty.path "bool",
                                                                  M.get_function (|
                                                                    "tracing::__macro_support::__is_enabled",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::metadata::Metadata"
                                                                            ],
                                                                          M.get_trait_method (|
                                                                            "tracing_core::callsite::Callsite",
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite",
                                                                            [],
                                                                            [],
                                                                            "metadata",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  get_constant (|
                                                                                    "openvm_circuit::arch::vm::prove::{{closure}}::__CALLSITE",
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "tracing_core::callsite::DefaultCallsite"
                                                                                      ]
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |);
                                                                    M.read (| interest |)
                                                                  ]
                                                                |)))
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.read (|
                                                        let~ meta :
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "tracing_core::metadata::Metadata"
                                                              ] :=
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "tracing_core::metadata::Metadata"
                                                              ],
                                                            M.get_trait_method (|
                                                              "tracing_core::callsite::Callsite",
                                                              Ty.path
                                                                "tracing_core::callsite::DefaultCallsite",
                                                              [],
                                                              [],
                                                              "metadata",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (|
                                                                    get_constant (|
                                                                      "openvm_circuit::arch::vm::prove::{{closure}}::__CALLSITE",
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "tracing_core::callsite::DefaultCallsite"
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |) in
                                                        M.alloc (|
                                                          Ty.path "tracing::span::Span",
                                                          M.call_closure (|
                                                            Ty.path "tracing::span::Span",
                                                            M.get_associated_function (|
                                                              Ty.path "tracing::span::Span",
                                                              "new",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| meta |) |)
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    let~ iter :
                                                                        Ty.path
                                                                          "tracing_core::field::Iter" :=
                                                                      M.call_closure (|
                                                                        Ty.path
                                                                          "tracing_core::field::Iter",
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "tracing_core::field::FieldSet",
                                                                          "iter",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.call_closure (|
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.path
                                                                                      "tracing_core::field::FieldSet"
                                                                                  ],
                                                                                M.get_associated_function (|
                                                                                  Ty.path
                                                                                    "tracing_core::metadata::Metadata",
                                                                                  "fields",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        meta
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |) in
                                                                    M.alloc (|
                                                                      Ty.path
                                                                        "tracing_core::field::ValueSet",
                                                                      M.call_closure (|
                                                                        Ty.path
                                                                          "tracing_core::field::ValueSet",
                                                                        M.get_associated_function (|
                                                                          Ty.path
                                                                            "tracing_core::field::FieldSet",
                                                                          "value_set",
                                                                          [],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "array")
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  1
                                                                              ]
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "tracing_core::field::Field"
                                                                                      ];
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Ty.dyn
                                                                                              [
                                                                                                ("tracing_core::field::Value::Trait",
                                                                                                  [])
                                                                                              ]
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          ]
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.call_closure (|
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [
                                                                                    Ty.path
                                                                                      "tracing_core::field::FieldSet"
                                                                                  ],
                                                                                M.get_associated_function (|
                                                                                  Ty.path
                                                                                    "tracing_core::metadata::Metadata",
                                                                                  "fields",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        meta
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |);
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.alloc (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "array")
                                                                                    [
                                                                                      Value.Integer
                                                                                        IntegerKind.Usize
                                                                                        1
                                                                                    ]
                                                                                    [
                                                                                      Ty.tuple
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [
                                                                                              Ty.path
                                                                                                "tracing_core::field::Field"
                                                                                            ];
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "core::option::Option")
                                                                                            []
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.dyn
                                                                                                    [
                                                                                                      ("tracing_core::field::Value::Trait",
                                                                                                        [])
                                                                                                    ]
                                                                                                ]
                                                                                            ]
                                                                                        ]
                                                                                    ],
                                                                                  Value.Array
                                                                                    [
                                                                                      Value.Tuple
                                                                                        [
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            M.alloc (|
                                                                                              Ty.path
                                                                                                "tracing_core::field::Field",
                                                                                              M.call_closure (|
                                                                                                Ty.path
                                                                                                  "tracing_core::field::Field",
                                                                                                M.get_associated_function (|
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "core::option::Option")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "tracing_core::field::Field"
                                                                                                    ],
                                                                                                  "expect",
                                                                                                  [],
                                                                                                  []
                                                                                                |),
                                                                                                [
                                                                                                  M.call_closure (|
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "core::option::Option")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.path
                                                                                                          "tracing_core::field::Field"
                                                                                                      ],
                                                                                                    M.get_trait_method (|
                                                                                                      "core::iter::traits::iterator::Iterator",
                                                                                                      Ty.path
                                                                                                        "tracing_core::field::Iter",
                                                                                                      [],
                                                                                                      [],
                                                                                                      "next",
                                                                                                      [],
                                                                                                      []
                                                                                                    |),
                                                                                                    [
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.MutRef,
                                                                                                        M.deref (|
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.MutRef,
                                                                                                            iter
                                                                                                          |)
                                                                                                        |)
                                                                                                      |)
                                                                                                    ]
                                                                                                  |);
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.deref (|
                                                                                                      mk_str (|
                                                                                                        "FieldSet corrupted (this is a bug)"
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |)
                                                                                          |);
                                                                                          Value.StructTuple
                                                                                            "core::option::Option::Some"
                                                                                            []
                                                                                            [
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.dyn
                                                                                                    [
                                                                                                      ("tracing_core::field::Value::Trait",
                                                                                                        [])
                                                                                                    ]
                                                                                                ]
                                                                                            ]
                                                                                            [
                                                                                              M.read (|
                                                                                                M.use
                                                                                                  (M.alloc (|
                                                                                                    Ty.apply
                                                                                                      (Ty.path
                                                                                                        "&")
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.dyn
                                                                                                          [
                                                                                                            ("tracing_core::field::Value::Trait",
                                                                                                              [])
                                                                                                          ]
                                                                                                      ],
                                                                                                    M.call_closure (|
                                                                                                      Ty.apply
                                                                                                        (Ty.path
                                                                                                          "&")
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.dyn
                                                                                                            [
                                                                                                              ("tracing_core::field::Value::Trait",
                                                                                                                [])
                                                                                                            ]
                                                                                                        ],
                                                                                                      M.pointer_coercion
                                                                                                        M.PointerCoercion.Unsize
                                                                                                        (Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.path
                                                                                                              "usize"
                                                                                                          ])
                                                                                                        (Ty.apply
                                                                                                          (Ty.path
                                                                                                            "&")
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.dyn
                                                                                                              [
                                                                                                                ("tracing_core::field::Value::Trait",
                                                                                                                  [])
                                                                                                              ]
                                                                                                          ]),
                                                                                                      [
                                                                                                        M.borrow (|
                                                                                                          Pointer.Kind.Ref,
                                                                                                          M.deref (|
                                                                                                            M.borrow (|
                                                                                                              Pointer.Kind.Ref,
                                                                                                              seg_idx
                                                                                                            |)
                                                                                                          |)
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  |))
                                                                                              |)
                                                                                            ]
                                                                                        ]
                                                                                    ]
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (M.read (|
                                                        let~ span : Ty.path "tracing::span::Span" :=
                                                          M.call_closure (|
                                                            Ty.path "tracing::span::Span",
                                                            M.get_function (|
                                                              "tracing::__macro_support::__disabled_span",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "tracing_core::metadata::Metadata"
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "tracing_core::callsite::Callsite",
                                                                      Ty.path
                                                                        "tracing_core::callsite::DefaultCallsite",
                                                                      [],
                                                                      [],
                                                                      "metadata",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (|
                                                                            get_constant (|
                                                                              "openvm_circuit::arch::vm::prove::{{closure}}::__CALLSITE",
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "tracing_core::callsite::DefaultCallsite"
                                                                                ]
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |) in
                                                        let~ _ : Ty.tuple [] := Value.Tuple [] in
                                                        span
                                                      |)))
                                                ]
                                              |)
                                            |)
                                          |);
                                          M.closure
                                            (fun γ =>
                                              ltac:(M.monadic
                                                match γ with
                                                | [ α0 ] =>
                                                  ltac:(M.monadic
                                                    (M.match_operator (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_stark_backend::proof::Proof")
                                                        []
                                                        [ SC ],
                                                      M.alloc (| Ty.tuple [], α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_stark_backend::proof::Proof")
                                                                []
                                                                [ SC ],
                                                              M.get_trait_method (|
                                                                "openvm_stark_backend::engine::StarkEngine",
                                                                E,
                                                                [],
                                                                [ SC ],
                                                                "prove",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.deref (| M.read (| self |) |),
                                                                    "openvm_circuit::arch::vm::VirtualMachine",
                                                                    "engine"
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| pk |) |)
                                                                |);
                                                                M.read (| proof_input |)
                                                              ]
                                                            |)))
                                                      ]
                                                    |)))
                                                | _ => M.impossible "wrong number of arguments"
                                                end))
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_prove :
        forall (F SC E VC : Ty.t),
        M.IsAssociatedFunction.C (Self F SC E VC) "prove" (prove F SC E VC).
      Admitted.
      Global Typeclasses Opaque prove.
      
      (*
          pub fn verify(
              &self,
              vk: &MultiStarkVerifyingKey<SC>,
              proofs: Vec<Proof<SC>>,
          ) -> Result<(), VmVerificationError>
          where
              Val<SC>: PrimeField32,
              Com<SC>: AsRef<[Val<SC>; CHUNK]> + From<[Val<SC>; CHUNK]>,
          {
              if self.config().system().continuation_enabled {
                  verify_segments(&self.engine, vk, &proofs).map(|_| ())
              } else {
                  assert_eq!(proofs.len(), 1);
                  verify_single(&self.engine, vk, &proofs.into_iter().next().unwrap())
                      .map_err(VmVerificationError::StarkError)
              }
          }
      *)
      Definition verify
          (F SC E VC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F SC E VC in
        match ε, τ, α with
        | [], [], [ self; vk; proofs ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::VirtualMachine") [] [ SC; E; VC ]
                  ],
                self
              |) in
            let vk :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::keygen::types::MultiStarkVerifyingKey")
                      []
                      [ SC ]
                  ],
                vk
              |) in
            let proofs :=
              M.alloc (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply (Ty.path "openvm_stark_backend::proof::Proof") [] [ SC ];
                    Ty.path "alloc::alloc::Global"
                  ],
                proofs
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "openvm_circuit::arch::vm::VmVerificationError" ],
              M.alloc (| Ty.tuple [], Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.SubPointer.get_struct_record_field (|
                          M.deref (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.path "openvm_circuit::arch::config::SystemConfig" ],
                              M.get_trait_method (|
                                "openvm_circuit::arch::config::VmConfig",
                                VC,
                                [],
                                [ F ],
                                "system",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply (Ty.path "&") [] [ VC ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "openvm_circuit::arch::vm::VirtualMachine")
                                          []
                                          [ SC; E; VC ],
                                        "config",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| self |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          |),
                          "openvm_circuit::arch::config::SystemConfig",
                          "continuation_enabled"
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [ Ty.tuple []; Ty.path "openvm_circuit::arch::vm::VmVerificationError" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::vm::VerifiedExecutionPayload")
                              []
                              [ F ];
                            Ty.path "openvm_circuit::arch::vm::VmVerificationError"
                          ],
                        "map",
                        [],
                        [
                          Ty.tuple [];
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::vm::VerifiedExecutionPayload")
                                []
                                [ F ]
                            ]
                            (Ty.tuple [])
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::vm::VerifiedExecutionPayload")
                                []
                                [ F ];
                              Ty.path "openvm_circuit::arch::vm::VmVerificationError"
                            ],
                          M.get_function (|
                            "openvm_circuit::arch::vm::verify_segments",
                            [],
                            [ SC; E ]
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::arch::vm::VirtualMachine",
                                    "engine"
                                  |)
                                |)
                              |)
                            |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| vk |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "openvm_stark_backend::proof::Proof")
                                            []
                                            [ SC ]
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "openvm_stark_backend::proof::Proof")
                                          []
                                          [ SC ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    [],
                                    "deref",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.borrow (| Pointer.Kind.Ref, proofs |) |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::arch::vm::VerifiedExecutionPayload")
                                        []
                                        [ F ],
                                      α0
                                    |),
                                    [ fun γ => ltac:(M.monadic (Value.Tuple [])) ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (M.read (|
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.tuple
                              [
                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                              ],
                            Value.Tuple
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.path "usize",
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "openvm_stark_backend::proof::Proof")
                                              []
                                              [ SC ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        "len",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, proofs |) ]
                                    |)
                                  |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 1 |)
                                |)
                              ]
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let left_val :=
                                  M.copy (|
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                    γ0_0
                                  |) in
                                let right_val :=
                                  M.copy (|
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                    γ0_1
                                  |) in
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use
                                            (M.alloc (|
                                              Ty.path "bool",
                                              UnOp.not (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.eq,
                                                  [
                                                    M.read (|
                                                      M.deref (| M.read (| left_val |) |)
                                                    |);
                                                    M.read (|
                                                      M.deref (| M.read (| right_val |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            let~ kind : Ty.path "core::panicking::AssertKind" :=
                                              Value.StructTuple
                                                "core::panicking::AssertKind::Eq"
                                                []
                                                []
                                                [] in
                                            M.alloc (|
                                              Ty.path "never",
                                              M.call_closure (|
                                                Ty.path "never",
                                                M.get_function (|
                                                  "core::panicking::assert_failed",
                                                  [],
                                                  [ Ty.path "usize"; Ty.path "usize" ]
                                                |),
                                                [
                                                  M.read (| kind |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| left_val |) |)
                                                      |)
                                                    |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| right_val |) |)
                                                      |)
                                                    |)
                                                  |);
                                                  Value.StructTuple
                                                    "core::option::Option::None"
                                                    []
                                                    [ Ty.path "core::fmt::Arguments" ]
                                                    []
                                                ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |)))
                          ]
                        |) in
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "openvm_circuit::arch::vm::VmVerificationError" ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "openvm_circuit::arch::vm::VmVerificationError"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.tuple [];
                                Ty.path "openvm_stark_backend::verifier::error::VerificationError"
                              ],
                            "map_err",
                            [],
                            [
                              Ty.path "openvm_circuit::arch::vm::VmVerificationError";
                              Ty.function
                                [ Ty.path "openvm_stark_backend::verifier::error::VerificationError"
                                ]
                                (Ty.path "openvm_circuit::arch::vm::VmVerificationError")
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.path "openvm_stark_backend::verifier::error::VerificationError"
                                ],
                              M.get_function (|
                                "openvm_circuit::arch::vm::verify_single",
                                [],
                                [ SC; E ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_circuit::arch::vm::VirtualMachine",
                                        "engine"
                                      |)
                                    |)
                                  |)
                                |);
                                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| vk |) |) |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "openvm_stark_backend::proof::Proof")
                                          []
                                          [ SC ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "openvm_stark_backend::proof::Proof")
                                            []
                                            [ SC ],
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "openvm_stark_backend::proof::Proof")
                                                  []
                                                  [ SC ]
                                              ],
                                            "unwrap",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "openvm_stark_backend::proof::Proof")
                                                    []
                                                    [ SC ]
                                                ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "openvm_stark_backend::proof::Proof")
                                                      []
                                                      [ SC ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                [],
                                                "next",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.alloc (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::proof::Proof")
                                                          []
                                                          [ SC ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::proof::Proof")
                                                            []
                                                            [ SC ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::iter::traits::collect::IntoIterator",
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_stark_backend::proof::Proof")
                                                              []
                                                              [ SC ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        [],
                                                        "into_iter",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.read (| proofs |) ]
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |);
                            M.constructor_as_closure
                              "openvm_circuit::arch::vm::VmVerificationError::StarkError"
                              []
                              []
                          ]
                        |)
                      |)
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_verify :
        forall (F SC E VC : Ty.t),
        M.IsAssociatedFunction.C (Self F SC E VC) "verify" (verify F SC E VC).
      Admitted.
      Global Typeclasses Opaque verify.
    End Impl_openvm_circuit_arch_vm_VirtualMachine_SC_E_VC.
    
    (*
    pub fn verify_single<SC, E>(
        engine: &E,
        vk: &MultiStarkVerifyingKey<SC>,
        proof: &Proof<SC>,
    ) -> Result<(), VerificationError>
    where
        SC: StarkGenericConfig,
        E: StarkEngine<SC>,
    {
        engine.verify(vk, proof)
    }
    *)
    Definition verify_single (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ SC; E ], [ engine; vk; proof ] =>
        ltac:(M.monadic
          (let engine := M.alloc (| Ty.apply (Ty.path "&") [] [ E ], engine |) in
          let vk :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_stark_backend::keygen::types::MultiStarkVerifyingKey")
                    []
                    [ SC ]
                ],
              vk
            |) in
          let proof :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "openvm_stark_backend::proof::Proof") [] [ SC ] ],
              proof
            |) in
          M.call_closure (|
            Ty.apply
              (Ty.path "core::result::Result")
              []
              [ Ty.tuple []; Ty.path "openvm_stark_backend::verifier::error::VerificationError" ],
            M.get_trait_method (|
              "openvm_stark_backend::engine::StarkEngine",
              E,
              [],
              [ SC ],
              "verify",
              [],
              []
            |),
            [
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| engine |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| vk |) |) |);
              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| proof |) |) |)
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_verify_single :
      M.IsFunction.C "openvm_circuit::arch::vm::verify_single" verify_single.
    Admitted.
    Global Typeclasses Opaque verify_single.
    
    (* StructRecord
      {
        name := "VerifiedExecutionPayload";
        const_params := [];
        ty_params := [ "F" ];
        fields :=
          [
            ("exe_commit",
              Ty.apply
                (Ty.path "array")
                [
                  M.unevaluated_const
                    (mk_str (|
                      "openvm_circuit_arch_vm_VerifiedExecutionPayload_exe_commit_discriminant"
                    |))
                ]
                [ F ]);
            ("final_memory_root",
              Ty.apply
                (Ty.path "array")
                [
                  M.unevaluated_const
                    (mk_str (|
                      "openvm_circuit_arch_vm_VerifiedExecutionPayload_final_memory_root_discriminant"
                    |))
                ]
                [ F ])
          ];
      } *)
    
    (*
    pub fn verify_segments<SC, E>(
        engine: &E,
        vk: &MultiStarkVerifyingKey<SC>,
        proofs: &[Proof<SC>],
    ) -> Result<VerifiedExecutionPayload<Val<SC>>, VmVerificationError>
    where
        SC: StarkGenericConfig,
        E: StarkEngine<SC>,
        Val<SC>: PrimeField32,
        Com<SC>: AsRef<[Val<SC>; CHUNK]>,
    {
        if proofs.is_empty() {
            return Err(VmVerificationError::ProofNotFound);
        }
        let mut prev_final_memory_root = None;
        let mut prev_final_pc = None;
        let mut start_pc = None;
        let mut initial_memory_root = None;
        let mut program_commit = None;
    
        for (i, proof) in proofs.iter().enumerate() {
            let res = engine.verify(vk, proof);
            match res {
                Ok(_) => (),
                Err(e) => return Err(VmVerificationError::StarkError(e)),
            };
    
            let mut program_air_present = false;
            let mut connector_air_present = false;
            let mut merkle_air_present = false;
    
            // Check public values.
            for air_proof_data in proof.per_air.iter() {
                let pvs = &air_proof_data.public_values;
                let air_vk = &vk.inner.per_air[air_proof_data.air_id];
                if air_proof_data.air_id == PROGRAM_AIR_ID {
                    program_air_present = true;
                    if i == 0 {
                        program_commit =
                            Some(proof.commitments.main_trace[PROGRAM_CACHED_TRACE_INDEX].as_ref());
                    } else if program_commit.unwrap()
                        != proof.commitments.main_trace[PROGRAM_CACHED_TRACE_INDEX].as_ref()
                    {
                        return Err(VmVerificationError::ProgramCommitMismatch { index: i });
                    }
                } else if air_proof_data.air_id == CONNECTOR_AIR_ID {
                    connector_air_present = true;
                    let pvs: &VmConnectorPvs<_> = pvs.as_slice().borrow();
    
                    if i != 0 {
                        // Check initial pc matches the previous final pc.
                        if pvs.initial_pc != prev_final_pc.unwrap() {
                            return Err(VmVerificationError::InitialPcMismatch {
                                initial: pvs.initial_pc.as_canonical_u32(),
                                prev_final: prev_final_pc.unwrap().as_canonical_u32(),
                            });
                        }
                    } else {
                        start_pc = Some(pvs.initial_pc);
                    }
                    prev_final_pc = Some(pvs.final_pc);
    
                    let expected_is_terminate = i == proofs.len() - 1;
                    if pvs.is_terminate != FieldAlgebra::from_bool(expected_is_terminate) {
                        return Err(VmVerificationError::IsTerminateMismatch {
                            expected: expected_is_terminate,
                            actual: pvs.is_terminate.as_canonical_u32() != 0,
                        });
                    }
    
                    let expected_exit_code = if expected_is_terminate {
                        ExitCode::Success as u32
                    } else {
                        DEFAULT_SUSPEND_EXIT_CODE
                    };
                    if pvs.exit_code != FieldAlgebra::from_canonical_u32(expected_exit_code) {
                        return Err(VmVerificationError::ExitCodeMismatch {
                            expected: expected_exit_code,
                            actual: pvs.exit_code.as_canonical_u32(),
                        });
                    }
                } else if air_proof_data.air_id == MERKLE_AIR_ID {
                    merkle_air_present = true;
                    let pvs: &MemoryMerklePvs<_, CHUNK> = pvs.as_slice().borrow();
    
                    // Check that initial root matches the previous final root.
                    if i != 0 {
                        if pvs.initial_root != prev_final_memory_root.unwrap() {
                            return Err(VmVerificationError::InitialMemoryRootMismatch);
                        }
                    } else {
                        initial_memory_root = Some(pvs.initial_root);
                    }
                    prev_final_memory_root = Some(pvs.final_root);
                } else {
                    if !pvs.is_empty() {
                        return Err(VmVerificationError::UnexpectedPvs {
                            expected: 0,
                            actual: pvs.len(),
                        });
                    }
                    // We assume the vk is valid, so this is only a debug assert.
                    debug_assert_eq!(air_vk.params.num_public_values, 0);
                }
            }
            if !program_air_present {
                return Err(VmVerificationError::SystemAirMissing {
                    air_id: PROGRAM_AIR_ID,
                });
            }
            if !connector_air_present {
                return Err(VmVerificationError::SystemAirMissing {
                    air_id: CONNECTOR_AIR_ID,
                });
            }
            if !merkle_air_present {
                return Err(VmVerificationError::SystemAirMissing {
                    air_id: MERKLE_AIR_ID,
                });
            }
        }
        let exe_commit = compute_exe_commit(
            &vm_poseidon2_hasher(),
            program_commit.unwrap(),
            initial_memory_root.as_ref().unwrap(),
            start_pc.unwrap(),
        );
        Ok(VerifiedExecutionPayload {
            exe_commit,
            final_memory_root: prev_final_memory_root.unwrap(),
        })
    }
    *)
    Definition verify_segments (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ SC; E ], [ engine; vk; proofs ] =>
        ltac:(M.monadic
          (let engine := M.alloc (| Ty.apply (Ty.path "&") [] [ E ], engine |) in
          let vk :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "openvm_stark_backend::keygen::types::MultiStarkVerifyingKey")
                    []
                    [ SC ]
                ],
              vk
            |) in
          let proofs :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [
                  Ty.apply
                    (Ty.path "slice")
                    []
                    [ Ty.apply (Ty.path "openvm_stark_backend::proof::Proof") [] [ SC ] ]
                ],
              proofs
            |) in
          M.catch_return
            (Ty.apply
              (Ty.path "core::result::Result")
              []
              [
                Ty.apply
                  (Ty.path "openvm_circuit::arch::vm::VerifiedExecutionPayload")
                  []
                  [
                    Ty.associated_in_trait
                      "p3_commit::domain::PolynomialSpace"
                      []
                      []
                      (Ty.associated_in_trait
                        "p3_commit::pcs::Pcs"
                        []
                        [
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenge";
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenger"
                        ]
                        (Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Pcs")
                        "Domain")
                      "Val"
                  ];
                Ty.path "openvm_circuit::arch::vm::VmVerificationError"
              ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "openvm_stark_backend::proof::Proof")
                                          []
                                          [ SC ]
                                      ],
                                    "is_empty",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| proofs |) |)
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.read (|
                              M.return_ (|
                                Value.StructTuple
                                  "core::result::Result::Err"
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::vm::VerifiedExecutionPayload")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val"
                                      ];
                                    Ty.path "openvm_circuit::arch::vm::VmVerificationError"
                                  ]
                                  [
                                    Value.StructTuple
                                      "openvm_circuit::arch::vm::VmVerificationError::ProofNotFound"
                                      []
                                      []
                                      []
                                  ]
                              |)
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ prev_final_memory_root :
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 8 ]
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val"
                          ]
                      ] :=
                  Value.StructTuple
                    "core::option::Option::None"
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val"
                        ]
                    ]
                    [] in
                let~ prev_final_pc :
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val"
                      ] :=
                  Value.StructTuple
                    "core::option::Option::None"
                    []
                    [
                      Ty.associated_in_trait
                        "p3_commit::domain::PolynomialSpace"
                        []
                        []
                        (Ty.associated_in_trait
                          "p3_commit::pcs::Pcs"
                          []
                          [
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge";
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenger"
                          ]
                          (Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Pcs")
                          "Domain")
                        "Val"
                    ]
                    [] in
                let~ start_pc :
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val"
                      ] :=
                  Value.StructTuple
                    "core::option::Option::None"
                    []
                    [
                      Ty.associated_in_trait
                        "p3_commit::domain::PolynomialSpace"
                        []
                        []
                        (Ty.associated_in_trait
                          "p3_commit::pcs::Pcs"
                          []
                          [
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge";
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenger"
                          ]
                          (Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Pcs")
                          "Domain")
                        "Val"
                    ]
                    [] in
                let~ initial_memory_root :
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 8 ]
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val"
                          ]
                      ] :=
                  Value.StructTuple
                    "core::option::Option::None"
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val"
                        ]
                    ]
                    [] in
                let~ program_commit :
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 8 ]
                              [
                                Ty.associated_in_trait
                                  "p3_commit::domain::PolynomialSpace"
                                  []
                                  []
                                  (Ty.associated_in_trait
                                    "p3_commit::pcs::Pcs"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenge";
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenger"
                                    ]
                                    (Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Pcs")
                                    "Domain")
                                  "Val"
                              ]
                          ]
                      ] :=
                  Value.StructTuple
                    "core::option::Option::None"
                    []
                    [
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [
                              Ty.associated_in_trait
                                "p3_commit::domain::PolynomialSpace"
                                []
                                []
                                (Ty.associated_in_trait
                                  "p3_commit::pcs::Pcs"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Pcs")
                                  "Domain")
                                "Val"
                            ]
                        ]
                    ]
                    [] in
                let~ _ : Ty.tuple [] :=
                  M.read (|
                    M.use
                      (M.alloc (|
                        Ty.tuple [],
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::proof::Proof")
                                      []
                                      [ SC ]
                                  ]
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_stark_backend::proof::Proof")
                                        []
                                        [ SC ]
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "openvm_stark_backend::proof::Proof")
                                          []
                                          [ SC ]
                                      ]
                                  ],
                                [],
                                [],
                                "into_iter",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "openvm_stark_backend::proof::Proof")
                                            []
                                            [ SC ]
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "openvm_stark_backend::proof::Proof")
                                          []
                                          [ SC ]
                                      ],
                                    [],
                                    [],
                                    "enumerate",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "openvm_stark_backend::proof::Proof")
                                            []
                                            [ SC ]
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "openvm_stark_backend::proof::Proof")
                                              []
                                              [ SC ]
                                          ],
                                        "iter",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| proofs |) |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "openvm_stark_backend::proof::Proof")
                                              []
                                              [ SC ]
                                          ]
                                      ],
                                    γ
                                  |) in
                                M.read (|
                                  M.loop (|
                                    Ty.tuple [],
                                    ltac:(M.monadic
                                      (let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.path "usize";
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::proof::Proof")
                                                          []
                                                          [ SC ]
                                                      ]
                                                  ]
                                              ],
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.path "usize";
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_stark_backend::proof::Proof")
                                                            []
                                                            [ SC ]
                                                        ]
                                                    ]
                                                ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path
                                                    "core::iter::adapters::enumerate::Enumerate")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::proof::Proof")
                                                          []
                                                          [ SC ]
                                                      ]
                                                  ],
                                                [],
                                                [],
                                                "next",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (|
                                                    M.borrow (| Pointer.Kind.MutRef, iter |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let _ :=
                                                  M.is_struct_tuple (|
                                                    γ,
                                                    "core::option::Option::None"
                                                  |) in
                                                M.never_to_any (| M.read (| M.break (||) |) |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let γ1_0 :=
                                                  M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                                let γ1_1 :=
                                                  M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                                let i := M.copy (| Ty.path "usize", γ1_0 |) in
                                                let proof :=
                                                  M.copy (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_stark_backend::proof::Proof")
                                                          []
                                                          [ SC ]
                                                      ],
                                                    γ1_1
                                                  |) in
                                                M.read (|
                                                  let~ res :
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "openvm_stark_backend::verifier::error::VerificationError"
                                                        ] :=
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::result::Result")
                                                        []
                                                        [
                                                          Ty.tuple [];
                                                          Ty.path
                                                            "openvm_stark_backend::verifier::error::VerificationError"
                                                        ],
                                                      M.get_trait_method (|
                                                        "openvm_stark_backend::engine::StarkEngine",
                                                        E,
                                                        [],
                                                        [ SC ],
                                                        "verify",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| engine |) |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| vk |) |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| proof |) |)
                                                        |)
                                                      ]
                                                    |) in
                                                  let~ _ : Ty.tuple [] :=
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      res,
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::result::Result::Ok",
                                                                0
                                                              |) in
                                                            Value.Tuple []));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::result::Result::Err",
                                                                0
                                                              |) in
                                                            let e :=
                                                              M.copy (|
                                                                Ty.path
                                                                  "openvm_stark_backend::verifier::error::VerificationError",
                                                                γ0_0
                                                              |) in
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  Value.StructTuple
                                                                    "core::result::Result::Err"
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_circuit::arch::vm::VerifiedExecutionPayload")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_commit::domain::PolynomialSpace"
                                                                            []
                                                                            []
                                                                            (Ty.associated_in_trait
                                                                              "p3_commit::pcs::Pcs"
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenge";
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenger"
                                                                              ]
                                                                              (Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Pcs")
                                                                              "Domain")
                                                                            "Val"
                                                                        ];
                                                                      Ty.path
                                                                        "openvm_circuit::arch::vm::VmVerificationError"
                                                                    ]
                                                                    [
                                                                      Value.StructTuple
                                                                        "openvm_circuit::arch::vm::VmVerificationError::StarkError"
                                                                        []
                                                                        []
                                                                        [ M.read (| e |) ]
                                                                    ]
                                                                |)
                                                              |)
                                                            |)))
                                                      ]
                                                    |) in
                                                  let~ program_air_present : Ty.path "bool" :=
                                                    Value.Bool false in
                                                  let~ connector_air_present : Ty.path "bool" :=
                                                    Value.Bool false in
                                                  let~ merkle_air_present : Ty.path "bool" :=
                                                    Value.Bool false in
                                                  let~ _ : Ty.tuple [] :=
                                                    M.read (|
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.tuple [],
                                                          M.match_operator (|
                                                            Ty.tuple [],
                                                            M.alloc (|
                                                              Ty.apply
                                                                (Ty.path "core::slice::iter::Iter")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_stark_backend::proof::AirProofData")
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_commit::domain::PolynomialSpace"
                                                                        []
                                                                        []
                                                                        (Ty.associated_in_trait
                                                                          "p3_commit::pcs::Pcs"
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenge";
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenger"
                                                                          ]
                                                                          (Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Pcs")
                                                                          "Domain")
                                                                        "Val";
                                                                      Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Challenge"
                                                                    ]
                                                                ],
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_stark_backend::proof::AirProofData")
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_commit::domain::PolynomialSpace"
                                                                          []
                                                                          []
                                                                          (Ty.associated_in_trait
                                                                            "p3_commit::pcs::Pcs"
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Challenge";
                                                                              Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Challenger"
                                                                            ]
                                                                            (Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Pcs")
                                                                            "Domain")
                                                                          "Val";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge"
                                                                      ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::iter::traits::collect::IntoIterator",
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::Iter")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_stark_backend::proof::AirProofData")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_commit::domain::PolynomialSpace"
                                                                            []
                                                                            []
                                                                            (Ty.associated_in_trait
                                                                              "p3_commit::pcs::Pcs"
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenge";
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenger"
                                                                              ]
                                                                              (Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Pcs")
                                                                              "Domain")
                                                                            "Val";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge"
                                                                        ]
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "into_iter",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "core::slice::iter::Iter")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "openvm_stark_backend::proof::AirProofData")
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_commit::domain::PolynomialSpace"
                                                                              []
                                                                              []
                                                                              (Ty.associated_in_trait
                                                                                "p3_commit::pcs::Pcs"
                                                                                []
                                                                                [
                                                                                  Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Challenge";
                                                                                  Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Challenger"
                                                                                ]
                                                                                (Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Pcs")
                                                                                "Domain")
                                                                              "Val";
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenge"
                                                                          ]
                                                                      ],
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_stark_backend::proof::AirProofData")
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_commit::domain::PolynomialSpace"
                                                                                []
                                                                                []
                                                                                (Ty.associated_in_trait
                                                                                  "p3_commit::pcs::Pcs"
                                                                                  []
                                                                                  [
                                                                                    Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Challenge";
                                                                                    Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Challenger"
                                                                                  ]
                                                                                  (Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Pcs")
                                                                                  "Domain")
                                                                                "Val";
                                                                              Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Challenge"
                                                                            ]
                                                                        ],
                                                                      "iter",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.call_closure (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "slice")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "openvm_stark_backend::proof::AirProofData")
                                                                                      []
                                                                                      [
                                                                                        Ty.associated_in_trait
                                                                                          "p3_commit::domain::PolynomialSpace"
                                                                                          []
                                                                                          []
                                                                                          (Ty.associated_in_trait
                                                                                            "p3_commit::pcs::Pcs"
                                                                                            []
                                                                                            [
                                                                                              Ty.associated_in_trait
                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                []
                                                                                                []
                                                                                                SC
                                                                                                "Challenge";
                                                                                              Ty.associated_in_trait
                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                []
                                                                                                []
                                                                                                SC
                                                                                                "Challenger"
                                                                                            ]
                                                                                            (Ty.associated_in_trait
                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                              []
                                                                                              []
                                                                                              SC
                                                                                              "Pcs")
                                                                                            "Domain")
                                                                                          "Val";
                                                                                        Ty.associated_in_trait
                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                          []
                                                                                          []
                                                                                          SC
                                                                                          "Challenge"
                                                                                      ]
                                                                                  ]
                                                                              ],
                                                                            M.get_trait_method (|
                                                                              "core::ops::deref::Deref",
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "alloc::vec::Vec")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "openvm_stark_backend::proof::AirProofData")
                                                                                    []
                                                                                    [
                                                                                      Ty.associated_in_trait
                                                                                        "p3_commit::domain::PolynomialSpace"
                                                                                        []
                                                                                        []
                                                                                        (Ty.associated_in_trait
                                                                                          "p3_commit::pcs::Pcs"
                                                                                          []
                                                                                          [
                                                                                            Ty.associated_in_trait
                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                              []
                                                                                              []
                                                                                              SC
                                                                                              "Challenge";
                                                                                            Ty.associated_in_trait
                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                              []
                                                                                              []
                                                                                              SC
                                                                                              "Challenger"
                                                                                          ]
                                                                                          (Ty.associated_in_trait
                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                            []
                                                                                            []
                                                                                            SC
                                                                                            "Pcs")
                                                                                          "Domain")
                                                                                        "Val";
                                                                                      Ty.associated_in_trait
                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                        []
                                                                                        []
                                                                                        SC
                                                                                        "Challenge"
                                                                                    ];
                                                                                  Ty.path
                                                                                    "alloc::alloc::Global"
                                                                                ],
                                                                              [],
                                                                              [],
                                                                              "deref",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      proof
                                                                                    |)
                                                                                  |),
                                                                                  "openvm_stark_backend::proof::Proof",
                                                                                  "per_air"
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                              |)
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let iter :=
                                                                    M.copy (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::slice::iter::Iter")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_stark_backend::proof::AirProofData")
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_commit::domain::PolynomialSpace"
                                                                                []
                                                                                []
                                                                                (Ty.associated_in_trait
                                                                                  "p3_commit::pcs::Pcs"
                                                                                  []
                                                                                  [
                                                                                    Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Challenge";
                                                                                    Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Challenger"
                                                                                  ]
                                                                                  (Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Pcs")
                                                                                  "Domain")
                                                                                "Val";
                                                                              Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Challenge"
                                                                            ]
                                                                        ],
                                                                      γ
                                                                    |) in
                                                                  M.read (|
                                                                    M.loop (|
                                                                      Ty.tuple [],
                                                                      ltac:(M.monadic
                                                                        (let~ _ : Ty.tuple [] :=
                                                                          M.match_operator (|
                                                                            Ty.tuple [],
                                                                            M.alloc (|
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::option::Option")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "openvm_stark_backend::proof::AirProofData")
                                                                                        []
                                                                                        [
                                                                                          Ty.associated_in_trait
                                                                                            "p3_commit::domain::PolynomialSpace"
                                                                                            []
                                                                                            []
                                                                                            (Ty.associated_in_trait
                                                                                              "p3_commit::pcs::Pcs"
                                                                                              []
                                                                                              [
                                                                                                Ty.associated_in_trait
                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                  []
                                                                                                  []
                                                                                                  SC
                                                                                                  "Challenge";
                                                                                                Ty.associated_in_trait
                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                  []
                                                                                                  []
                                                                                                  SC
                                                                                                  "Challenger"
                                                                                              ]
                                                                                              (Ty.associated_in_trait
                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                []
                                                                                                []
                                                                                                SC
                                                                                                "Pcs")
                                                                                              "Domain")
                                                                                            "Val";
                                                                                          Ty.associated_in_trait
                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                            []
                                                                                            []
                                                                                            SC
                                                                                            "Challenge"
                                                                                        ]
                                                                                    ]
                                                                                ],
                                                                              M.call_closure (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "core::option::Option")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "openvm_stark_backend::proof::AirProofData")
                                                                                          []
                                                                                          [
                                                                                            Ty.associated_in_trait
                                                                                              "p3_commit::domain::PolynomialSpace"
                                                                                              []
                                                                                              []
                                                                                              (Ty.associated_in_trait
                                                                                                "p3_commit::pcs::Pcs"
                                                                                                []
                                                                                                [
                                                                                                  Ty.associated_in_trait
                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                    []
                                                                                                    []
                                                                                                    SC
                                                                                                    "Challenge";
                                                                                                  Ty.associated_in_trait
                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                    []
                                                                                                    []
                                                                                                    SC
                                                                                                    "Challenger"
                                                                                                ]
                                                                                                (Ty.associated_in_trait
                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                  []
                                                                                                  []
                                                                                                  SC
                                                                                                  "Pcs")
                                                                                                "Domain")
                                                                                              "Val";
                                                                                            Ty.associated_in_trait
                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                              []
                                                                                              []
                                                                                              SC
                                                                                              "Challenge"
                                                                                          ]
                                                                                      ]
                                                                                  ],
                                                                                M.get_trait_method (|
                                                                                  "core::iter::traits::iterator::Iterator",
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "core::slice::iter::Iter")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "openvm_stark_backend::proof::AirProofData")
                                                                                        []
                                                                                        [
                                                                                          Ty.associated_in_trait
                                                                                            "p3_commit::domain::PolynomialSpace"
                                                                                            []
                                                                                            []
                                                                                            (Ty.associated_in_trait
                                                                                              "p3_commit::pcs::Pcs"
                                                                                              []
                                                                                              [
                                                                                                Ty.associated_in_trait
                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                  []
                                                                                                  []
                                                                                                  SC
                                                                                                  "Challenge";
                                                                                                Ty.associated_in_trait
                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                  []
                                                                                                  []
                                                                                                  SC
                                                                                                  "Challenger"
                                                                                              ]
                                                                                              (Ty.associated_in_trait
                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                []
                                                                                                []
                                                                                                SC
                                                                                                "Pcs")
                                                                                              "Domain")
                                                                                            "Val";
                                                                                          Ty.associated_in_trait
                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                            []
                                                                                            []
                                                                                            SC
                                                                                            "Challenge"
                                                                                        ]
                                                                                    ],
                                                                                  [],
                                                                                  [],
                                                                                  "next",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.MutRef,
                                                                                    M.deref (|
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.MutRef,
                                                                                        iter
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |),
                                                                            [
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (let _ :=
                                                                                    M.is_struct_tuple (|
                                                                                      γ,
                                                                                      "core::option::Option::None"
                                                                                    |) in
                                                                                  M.never_to_any (|
                                                                                    M.read (|
                                                                                      M.break (||)
                                                                                    |)
                                                                                  |)));
                                                                              fun γ =>
                                                                                ltac:(M.monadic
                                                                                  (let γ0_0 :=
                                                                                    M.SubPointer.get_struct_tuple_field (|
                                                                                      γ,
                                                                                      "core::option::Option::Some",
                                                                                      0
                                                                                    |) in
                                                                                  let
                                                                                        air_proof_data :=
                                                                                    M.copy (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "openvm_stark_backend::proof::AirProofData")
                                                                                            []
                                                                                            [
                                                                                              Ty.associated_in_trait
                                                                                                "p3_commit::domain::PolynomialSpace"
                                                                                                []
                                                                                                []
                                                                                                (Ty.associated_in_trait
                                                                                                  "p3_commit::pcs::Pcs"
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.associated_in_trait
                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                      []
                                                                                                      []
                                                                                                      SC
                                                                                                      "Challenge";
                                                                                                    Ty.associated_in_trait
                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                      []
                                                                                                      []
                                                                                                      SC
                                                                                                      "Challenger"
                                                                                                  ]
                                                                                                  (Ty.associated_in_trait
                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                    []
                                                                                                    []
                                                                                                    SC
                                                                                                    "Pcs")
                                                                                                  "Domain")
                                                                                                "Val";
                                                                                              Ty.associated_in_trait
                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                []
                                                                                                []
                                                                                                SC
                                                                                                "Challenge"
                                                                                            ]
                                                                                        ],
                                                                                      γ0_0
                                                                                    |) in
                                                                                  M.read (|
                                                                                    let~ pvs :
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "alloc::vec::Vec")
                                                                                              []
                                                                                              [
                                                                                                Ty.associated_in_trait
                                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                                  []
                                                                                                  []
                                                                                                  (Ty.associated_in_trait
                                                                                                    "p3_commit::pcs::Pcs"
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.associated_in_trait
                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                        []
                                                                                                        []
                                                                                                        SC
                                                                                                        "Challenge";
                                                                                                      Ty.associated_in_trait
                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                        []
                                                                                                        []
                                                                                                        SC
                                                                                                        "Challenger"
                                                                                                    ]
                                                                                                    (Ty.associated_in_trait
                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                      []
                                                                                                      []
                                                                                                      SC
                                                                                                      "Pcs")
                                                                                                    "Domain")
                                                                                                  "Val";
                                                                                                Ty.path
                                                                                                  "alloc::alloc::Global"
                                                                                              ]
                                                                                          ] :=
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                          M.deref (|
                                                                                            M.read (|
                                                                                              air_proof_data
                                                                                            |)
                                                                                          |),
                                                                                          "openvm_stark_backend::proof::AirProofData",
                                                                                          "public_values"
                                                                                        |)
                                                                                      |) in
                                                                                    let~ air_vk :
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                                                                              []
                                                                                              [
                                                                                                Ty.associated_in_trait
                                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                                  []
                                                                                                  []
                                                                                                  (Ty.associated_in_trait
                                                                                                    "p3_commit::pcs::Pcs"
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.associated_in_trait
                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                        []
                                                                                                        []
                                                                                                        SC
                                                                                                        "Challenge";
                                                                                                      Ty.associated_in_trait
                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                        []
                                                                                                        []
                                                                                                        SC
                                                                                                        "Challenger"
                                                                                                    ]
                                                                                                    (Ty.associated_in_trait
                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                      []
                                                                                                      []
                                                                                                      SC
                                                                                                      "Pcs")
                                                                                                    "Domain")
                                                                                                  "Val";
                                                                                                Ty.associated_in_trait
                                                                                                  "p3_commit::pcs::Pcs"
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.associated_in_trait
                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                      []
                                                                                                      []
                                                                                                      SC
                                                                                                      "Challenge";
                                                                                                    Ty.associated_in_trait
                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                      []
                                                                                                      []
                                                                                                      SC
                                                                                                      "Challenger"
                                                                                                  ]
                                                                                                  (Ty.associated_in_trait
                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                    []
                                                                                                    []
                                                                                                    SC
                                                                                                    "Pcs")
                                                                                                  "Commitment"
                                                                                              ]
                                                                                          ] :=
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.deref (|
                                                                                          M.call_closure (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              []
                                                                                              [
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.associated_in_trait
                                                                                                      "p3_commit::domain::PolynomialSpace"
                                                                                                      []
                                                                                                      []
                                                                                                      (Ty.associated_in_trait
                                                                                                        "p3_commit::pcs::Pcs"
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.associated_in_trait
                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                            []
                                                                                                            []
                                                                                                            SC
                                                                                                            "Challenge";
                                                                                                          Ty.associated_in_trait
                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                            []
                                                                                                            []
                                                                                                            SC
                                                                                                            "Challenger"
                                                                                                        ]
                                                                                                        (Ty.associated_in_trait
                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                          []
                                                                                                          []
                                                                                                          SC
                                                                                                          "Pcs")
                                                                                                        "Domain")
                                                                                                      "Val";
                                                                                                    Ty.associated_in_trait
                                                                                                      "p3_commit::pcs::Pcs"
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.associated_in_trait
                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                          []
                                                                                                          []
                                                                                                          SC
                                                                                                          "Challenge";
                                                                                                        Ty.associated_in_trait
                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                          []
                                                                                                          []
                                                                                                          SC
                                                                                                          "Challenger"
                                                                                                      ]
                                                                                                      (Ty.associated_in_trait
                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                        []
                                                                                                        []
                                                                                                        SC
                                                                                                        "Pcs")
                                                                                                      "Commitment"
                                                                                                  ]
                                                                                              ],
                                                                                            M.get_trait_method (|
                                                                                              "core::ops::index::Index",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "alloc::vec::Vec")
                                                                                                []
                                                                                                [
                                                                                                  Ty.apply
                                                                                                    (Ty.path
                                                                                                      "openvm_stark_backend::keygen::types::StarkVerifyingKey")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.associated_in_trait
                                                                                                        "p3_commit::domain::PolynomialSpace"
                                                                                                        []
                                                                                                        []
                                                                                                        (Ty.associated_in_trait
                                                                                                          "p3_commit::pcs::Pcs"
                                                                                                          []
                                                                                                          [
                                                                                                            Ty.associated_in_trait
                                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                              []
                                                                                                              []
                                                                                                              SC
                                                                                                              "Challenge";
                                                                                                            Ty.associated_in_trait
                                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                              []
                                                                                                              []
                                                                                                              SC
                                                                                                              "Challenger"
                                                                                                          ]
                                                                                                          (Ty.associated_in_trait
                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                            []
                                                                                                            []
                                                                                                            SC
                                                                                                            "Pcs")
                                                                                                          "Domain")
                                                                                                        "Val";
                                                                                                      Ty.associated_in_trait
                                                                                                        "p3_commit::pcs::Pcs"
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.associated_in_trait
                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                            []
                                                                                                            []
                                                                                                            SC
                                                                                                            "Challenge";
                                                                                                          Ty.associated_in_trait
                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                            []
                                                                                                            []
                                                                                                            SC
                                                                                                            "Challenger"
                                                                                                        ]
                                                                                                        (Ty.associated_in_trait
                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                          []
                                                                                                          []
                                                                                                          SC
                                                                                                          "Pcs")
                                                                                                        "Commitment"
                                                                                                    ];
                                                                                                  Ty.path
                                                                                                    "alloc::alloc::Global"
                                                                                                ],
                                                                                              [],
                                                                                              [
                                                                                                Ty.path
                                                                                                  "usize"
                                                                                              ],
                                                                                              "index",
                                                                                              [],
                                                                                              []
                                                                                            |),
                                                                                            [
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.Ref,
                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                    M.deref (|
                                                                                                      M.read (|
                                                                                                        vk
                                                                                                      |)
                                                                                                    |),
                                                                                                    "openvm_stark_backend::keygen::types::MultiStarkVerifyingKey",
                                                                                                    "inner"
                                                                                                  |),
                                                                                                  "openvm_stark_backend::keygen::types::MultiStarkVerifyingKey0",
                                                                                                  "per_air"
                                                                                                |)
                                                                                              |);
                                                                                              M.read (|
                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                  M.deref (|
                                                                                                    M.read (|
                                                                                                      air_proof_data
                                                                                                    |)
                                                                                                  |),
                                                                                                  "openvm_stark_backend::proof::AirProofData",
                                                                                                  "air_id"
                                                                                                |)
                                                                                              |)
                                                                                            ]
                                                                                          |)
                                                                                        |)
                                                                                      |) in
                                                                                    M.alloc (|
                                                                                      Ty.tuple [],
                                                                                      M.match_operator (|
                                                                                        Ty.tuple [],
                                                                                        M.alloc (|
                                                                                          Ty.tuple
                                                                                            [],
                                                                                          Value.Tuple
                                                                                            []
                                                                                        |),
                                                                                        [
                                                                                          fun γ =>
                                                                                            ltac:(M.monadic
                                                                                              (let
                                                                                                    γ :=
                                                                                                M.use
                                                                                                  (M.alloc (|
                                                                                                    Ty.path
                                                                                                      "bool",
                                                                                                    M.call_closure (|
                                                                                                      Ty.path
                                                                                                        "bool",
                                                                                                      BinOp.eq,
                                                                                                      [
                                                                                                        M.read (|
                                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                                            M.deref (|
                                                                                                              M.read (|
                                                                                                                air_proof_data
                                                                                                              |)
                                                                                                            |),
                                                                                                            "openvm_stark_backend::proof::AirProofData",
                                                                                                            "air_id"
                                                                                                          |)
                                                                                                        |);
                                                                                                        M.read (|
                                                                                                          get_constant (|
                                                                                                            "openvm_circuit::arch::extensions::PROGRAM_AIR_ID",
                                                                                                            Ty.path
                                                                                                              "usize"
                                                                                                          |)
                                                                                                        |)
                                                                                                      ]
                                                                                                    |)
                                                                                                  |)) in
                                                                                              let
                                                                                                    _ :=
                                                                                                is_constant_or_break_match (|
                                                                                                  M.read (|
                                                                                                    γ
                                                                                                  |),
                                                                                                  Value.Bool
                                                                                                    true
                                                                                                |) in
                                                                                              M.read (|
                                                                                                let~
                                                                                                      _ :
                                                                                                    Ty.tuple
                                                                                                      [] :=
                                                                                                  M.write (|
                                                                                                    program_air_present,
                                                                                                    Value.Bool
                                                                                                      true
                                                                                                  |) in
                                                                                                M.alloc (|
                                                                                                  Ty.tuple
                                                                                                    [],
                                                                                                  M.match_operator (|
                                                                                                    Ty.tuple
                                                                                                      [],
                                                                                                    M.alloc (|
                                                                                                      Ty.tuple
                                                                                                        [],
                                                                                                      Value.Tuple
                                                                                                        []
                                                                                                    |),
                                                                                                    [
                                                                                                      fun
                                                                                                          γ =>
                                                                                                        ltac:(M.monadic
                                                                                                          (let
                                                                                                                γ :=
                                                                                                            M.use
                                                                                                              (M.alloc (|
                                                                                                                Ty.path
                                                                                                                  "bool",
                                                                                                                M.call_closure (|
                                                                                                                  Ty.path
                                                                                                                    "bool",
                                                                                                                  BinOp.eq,
                                                                                                                  [
                                                                                                                    M.read (|
                                                                                                                      i
                                                                                                                    |);
                                                                                                                    Value.Integer
                                                                                                                      IntegerKind.Usize
                                                                                                                      0
                                                                                                                  ]
                                                                                                                |)
                                                                                                              |)) in
                                                                                                          let
                                                                                                                _ :=
                                                                                                            is_constant_or_break_match (|
                                                                                                              M.read (|
                                                                                                                γ
                                                                                                              |),
                                                                                                              Value.Bool
                                                                                                                true
                                                                                                            |) in
                                                                                                          M.read (|
                                                                                                            let~
                                                                                                                  _ :
                                                                                                                Ty.tuple
                                                                                                                  [] :=
                                                                                                              M.write (|
                                                                                                                program_commit,
                                                                                                                Value.StructTuple
                                                                                                                  "core::option::Option::Some"
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "&")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "array")
                                                                                                                          [
                                                                                                                            Value.Integer
                                                                                                                              IntegerKind.Usize
                                                                                                                              8
                                                                                                                          ]
                                                                                                                          [
                                                                                                                            Ty.associated_in_trait
                                                                                                                              "p3_commit::domain::PolynomialSpace"
                                                                                                                              []
                                                                                                                              []
                                                                                                                              (Ty.associated_in_trait
                                                                                                                                "p3_commit::pcs::Pcs"
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.associated_in_trait
                                                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    SC
                                                                                                                                    "Challenge";
                                                                                                                                  Ty.associated_in_trait
                                                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    SC
                                                                                                                                    "Challenger"
                                                                                                                                ]
                                                                                                                                (Ty.associated_in_trait
                                                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                  []
                                                                                                                                  []
                                                                                                                                  SC
                                                                                                                                  "Pcs")
                                                                                                                                "Domain")
                                                                                                                              "Val"
                                                                                                                          ]
                                                                                                                      ]
                                                                                                                  ]
                                                                                                                  [
                                                                                                                    M.call_closure (|
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "&")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "array")
                                                                                                                            [
                                                                                                                              Value.Integer
                                                                                                                                IntegerKind.Usize
                                                                                                                                8
                                                                                                                            ]
                                                                                                                            [
                                                                                                                              Ty.associated_in_trait
                                                                                                                                "p3_commit::domain::PolynomialSpace"
                                                                                                                                []
                                                                                                                                []
                                                                                                                                (Ty.associated_in_trait
                                                                                                                                  "p3_commit::pcs::Pcs"
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.associated_in_trait
                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      SC
                                                                                                                                      "Challenge";
                                                                                                                                    Ty.associated_in_trait
                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      SC
                                                                                                                                      "Challenger"
                                                                                                                                  ]
                                                                                                                                  (Ty.associated_in_trait
                                                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    SC
                                                                                                                                    "Pcs")
                                                                                                                                  "Domain")
                                                                                                                                "Val"
                                                                                                                            ]
                                                                                                                        ],
                                                                                                                      M.get_trait_method (|
                                                                                                                        "core::convert::AsRef",
                                                                                                                        Ty.associated_in_trait
                                                                                                                          "p3_commit::pcs::Pcs"
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.associated_in_trait
                                                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                              []
                                                                                                                              []
                                                                                                                              SC
                                                                                                                              "Challenge";
                                                                                                                            Ty.associated_in_trait
                                                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                              []
                                                                                                                              []
                                                                                                                              SC
                                                                                                                              "Challenger"
                                                                                                                          ]
                                                                                                                          (Ty.associated_in_trait
                                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                            []
                                                                                                                            []
                                                                                                                            SC
                                                                                                                            "Pcs")
                                                                                                                          "Commitment",
                                                                                                                        [],
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "array")
                                                                                                                            [
                                                                                                                              Value.Integer
                                                                                                                                IntegerKind.Usize
                                                                                                                                8
                                                                                                                            ]
                                                                                                                            [
                                                                                                                              Ty.associated_in_trait
                                                                                                                                "p3_commit::domain::PolynomialSpace"
                                                                                                                                []
                                                                                                                                []
                                                                                                                                (Ty.associated_in_trait
                                                                                                                                  "p3_commit::pcs::Pcs"
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.associated_in_trait
                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      SC
                                                                                                                                      "Challenge";
                                                                                                                                    Ty.associated_in_trait
                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      SC
                                                                                                                                      "Challenger"
                                                                                                                                  ]
                                                                                                                                  (Ty.associated_in_trait
                                                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    SC
                                                                                                                                    "Pcs")
                                                                                                                                  "Domain")
                                                                                                                                "Val"
                                                                                                                            ]
                                                                                                                        ],
                                                                                                                        "as_ref",
                                                                                                                        [],
                                                                                                                        []
                                                                                                                      |),
                                                                                                                      [
                                                                                                                        M.borrow (|
                                                                                                                          Pointer.Kind.Ref,
                                                                                                                          M.deref (|
                                                                                                                            M.call_closure (|
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "&")
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.associated_in_trait
                                                                                                                                    "p3_commit::pcs::Pcs"
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      Ty.associated_in_trait
                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        SC
                                                                                                                                        "Challenge";
                                                                                                                                      Ty.associated_in_trait
                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        SC
                                                                                                                                        "Challenger"
                                                                                                                                    ]
                                                                                                                                    (Ty.associated_in_trait
                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      SC
                                                                                                                                      "Pcs")
                                                                                                                                    "Commitment"
                                                                                                                                ],
                                                                                                                              M.get_trait_method (|
                                                                                                                                "core::ops::index::Index",
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "alloc::vec::Vec")
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.associated_in_trait
                                                                                                                                      "p3_commit::pcs::Pcs"
                                                                                                                                      []
                                                                                                                                      [
                                                                                                                                        Ty.associated_in_trait
                                                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                          []
                                                                                                                                          []
                                                                                                                                          SC
                                                                                                                                          "Challenge";
                                                                                                                                        Ty.associated_in_trait
                                                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                          []
                                                                                                                                          []
                                                                                                                                          SC
                                                                                                                                          "Challenger"
                                                                                                                                      ]
                                                                                                                                      (Ty.associated_in_trait
                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        SC
                                                                                                                                        "Pcs")
                                                                                                                                      "Commitment";
                                                                                                                                    Ty.path
                                                                                                                                      "alloc::alloc::Global"
                                                                                                                                  ],
                                                                                                                                [],
                                                                                                                                [
                                                                                                                                  Ty.path
                                                                                                                                    "usize"
                                                                                                                                ],
                                                                                                                                "index",
                                                                                                                                [],
                                                                                                                                []
                                                                                                                              |),
                                                                                                                              [
                                                                                                                                M.borrow (|
                                                                                                                                  Pointer.Kind.Ref,
                                                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                                                    M.SubPointer.get_struct_record_field (|
                                                                                                                                      M.deref (|
                                                                                                                                        M.read (|
                                                                                                                                          proof
                                                                                                                                        |)
                                                                                                                                      |),
                                                                                                                                      "openvm_stark_backend::proof::Proof",
                                                                                                                                      "commitments"
                                                                                                                                    |),
                                                                                                                                    "openvm_stark_backend::proof::Commitments",
                                                                                                                                    "main_trace"
                                                                                                                                  |)
                                                                                                                                |);
                                                                                                                                M.read (|
                                                                                                                                  get_constant (|
                                                                                                                                    "openvm_circuit::arch::extensions::PROGRAM_CACHED_TRACE_INDEX",
                                                                                                                                    Ty.path
                                                                                                                                      "usize"
                                                                                                                                  |)
                                                                                                                                |)
                                                                                                                              ]
                                                                                                                            |)
                                                                                                                          |)
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |)
                                                                                                                  ]
                                                                                                              |) in
                                                                                                            M.alloc (|
                                                                                                              Ty.tuple
                                                                                                                [],
                                                                                                              Value.Tuple
                                                                                                                []
                                                                                                            |)
                                                                                                          |)));
                                                                                                      fun
                                                                                                          γ =>
                                                                                                        ltac:(M.monadic
                                                                                                          (M.match_operator (|
                                                                                                            Ty.tuple
                                                                                                              [],
                                                                                                            M.alloc (|
                                                                                                              Ty.tuple
                                                                                                                [],
                                                                                                              Value.Tuple
                                                                                                                []
                                                                                                            |),
                                                                                                            [
                                                                                                              fun
                                                                                                                  γ =>
                                                                                                                ltac:(M.monadic
                                                                                                                  (let
                                                                                                                        γ :=
                                                                                                                    M.use
                                                                                                                      (M.alloc (|
                                                                                                                        Ty.path
                                                                                                                          "bool",
                                                                                                                        M.call_closure (|
                                                                                                                          Ty.path
                                                                                                                            "bool",
                                                                                                                          M.get_trait_method (|
                                                                                                                            "core::cmp::PartialEq",
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "&")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "array")
                                                                                                                                  [
                                                                                                                                    Value.Integer
                                                                                                                                      IntegerKind.Usize
                                                                                                                                      8
                                                                                                                                  ]
                                                                                                                                  [
                                                                                                                                    Ty.associated_in_trait
                                                                                                                                      "p3_commit::domain::PolynomialSpace"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      (Ty.associated_in_trait
                                                                                                                                        "p3_commit::pcs::Pcs"
                                                                                                                                        []
                                                                                                                                        [
                                                                                                                                          Ty.associated_in_trait
                                                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                            []
                                                                                                                                            []
                                                                                                                                            SC
                                                                                                                                            "Challenge";
                                                                                                                                          Ty.associated_in_trait
                                                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                            []
                                                                                                                                            []
                                                                                                                                            SC
                                                                                                                                            "Challenger"
                                                                                                                                        ]
                                                                                                                                        (Ty.associated_in_trait
                                                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                          []
                                                                                                                                          []
                                                                                                                                          SC
                                                                                                                                          "Pcs")
                                                                                                                                        "Domain")
                                                                                                                                      "Val"
                                                                                                                                  ]
                                                                                                                              ],
                                                                                                                            [],
                                                                                                                            [
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "&")
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "array")
                                                                                                                                    [
                                                                                                                                      Value.Integer
                                                                                                                                        IntegerKind.Usize
                                                                                                                                        8
                                                                                                                                    ]
                                                                                                                                    [
                                                                                                                                      Ty.associated_in_trait
                                                                                                                                        "p3_commit::domain::PolynomialSpace"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        (Ty.associated_in_trait
                                                                                                                                          "p3_commit::pcs::Pcs"
                                                                                                                                          []
                                                                                                                                          [
                                                                                                                                            Ty.associated_in_trait
                                                                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                              []
                                                                                                                                              []
                                                                                                                                              SC
                                                                                                                                              "Challenge";
                                                                                                                                            Ty.associated_in_trait
                                                                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                              []
                                                                                                                                              []
                                                                                                                                              SC
                                                                                                                                              "Challenger"
                                                                                                                                          ]
                                                                                                                                          (Ty.associated_in_trait
                                                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                            []
                                                                                                                                            []
                                                                                                                                            SC
                                                                                                                                            "Pcs")
                                                                                                                                          "Domain")
                                                                                                                                        "Val"
                                                                                                                                    ]
                                                                                                                                ]
                                                                                                                            ],
                                                                                                                            "ne",
                                                                                                                            [],
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            M.borrow (|
                                                                                                                              Pointer.Kind.Ref,
                                                                                                                              M.alloc (|
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "&")
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "array")
                                                                                                                                      [
                                                                                                                                        Value.Integer
                                                                                                                                          IntegerKind.Usize
                                                                                                                                          8
                                                                                                                                      ]
                                                                                                                                      [
                                                                                                                                        Ty.associated_in_trait
                                                                                                                                          "p3_commit::domain::PolynomialSpace"
                                                                                                                                          []
                                                                                                                                          []
                                                                                                                                          (Ty.associated_in_trait
                                                                                                                                            "p3_commit::pcs::Pcs"
                                                                                                                                            []
                                                                                                                                            [
                                                                                                                                              Ty.associated_in_trait
                                                                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                SC
                                                                                                                                                "Challenge";
                                                                                                                                              Ty.associated_in_trait
                                                                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                SC
                                                                                                                                                "Challenger"
                                                                                                                                            ]
                                                                                                                                            (Ty.associated_in_trait
                                                                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                              []
                                                                                                                                              []
                                                                                                                                              SC
                                                                                                                                              "Pcs")
                                                                                                                                            "Domain")
                                                                                                                                          "Val"
                                                                                                                                      ]
                                                                                                                                  ],
                                                                                                                                M.call_closure (|
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "&")
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      Ty.apply
                                                                                                                                        (Ty.path
                                                                                                                                          "array")
                                                                                                                                        [
                                                                                                                                          Value.Integer
                                                                                                                                            IntegerKind.Usize
                                                                                                                                            8
                                                                                                                                        ]
                                                                                                                                        [
                                                                                                                                          Ty.associated_in_trait
                                                                                                                                            "p3_commit::domain::PolynomialSpace"
                                                                                                                                            []
                                                                                                                                            []
                                                                                                                                            (Ty.associated_in_trait
                                                                                                                                              "p3_commit::pcs::Pcs"
                                                                                                                                              []
                                                                                                                                              [
                                                                                                                                                Ty.associated_in_trait
                                                                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                  []
                                                                                                                                                  []
                                                                                                                                                  SC
                                                                                                                                                  "Challenge";
                                                                                                                                                Ty.associated_in_trait
                                                                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                  []
                                                                                                                                                  []
                                                                                                                                                  SC
                                                                                                                                                  "Challenger"
                                                                                                                                              ]
                                                                                                                                              (Ty.associated_in_trait
                                                                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                SC
                                                                                                                                                "Pcs")
                                                                                                                                              "Domain")
                                                                                                                                            "Val"
                                                                                                                                        ]
                                                                                                                                    ],
                                                                                                                                  M.get_associated_function (|
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "core::option::Option")
                                                                                                                                      []
                                                                                                                                      [
                                                                                                                                        Ty.apply
                                                                                                                                          (Ty.path
                                                                                                                                            "&")
                                                                                                                                          []
                                                                                                                                          [
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "array")
                                                                                                                                              [
                                                                                                                                                Value.Integer
                                                                                                                                                  IntegerKind.Usize
                                                                                                                                                  8
                                                                                                                                              ]
                                                                                                                                              [
                                                                                                                                                Ty.associated_in_trait
                                                                                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                                                                                  []
                                                                                                                                                  []
                                                                                                                                                  (Ty.associated_in_trait
                                                                                                                                                    "p3_commit::pcs::Pcs"
                                                                                                                                                    []
                                                                                                                                                    [
                                                                                                                                                      Ty.associated_in_trait
                                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                        []
                                                                                                                                                        []
                                                                                                                                                        SC
                                                                                                                                                        "Challenge";
                                                                                                                                                      Ty.associated_in_trait
                                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                        []
                                                                                                                                                        []
                                                                                                                                                        SC
                                                                                                                                                        "Challenger"
                                                                                                                                                    ]
                                                                                                                                                    (Ty.associated_in_trait
                                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                      []
                                                                                                                                                      []
                                                                                                                                                      SC
                                                                                                                                                      "Pcs")
                                                                                                                                                    "Domain")
                                                                                                                                                  "Val"
                                                                                                                                              ]
                                                                                                                                          ]
                                                                                                                                      ],
                                                                                                                                    "unwrap",
                                                                                                                                    [],
                                                                                                                                    []
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    M.read (|
                                                                                                                                      program_commit
                                                                                                                                    |)
                                                                                                                                  ]
                                                                                                                                |)
                                                                                                                              |)
                                                                                                                            |);
                                                                                                                            M.borrow (|
                                                                                                                              Pointer.Kind.Ref,
                                                                                                                              M.alloc (|
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "&")
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "array")
                                                                                                                                      [
                                                                                                                                        Value.Integer
                                                                                                                                          IntegerKind.Usize
                                                                                                                                          8
                                                                                                                                      ]
                                                                                                                                      [
                                                                                                                                        Ty.associated_in_trait
                                                                                                                                          "p3_commit::domain::PolynomialSpace"
                                                                                                                                          []
                                                                                                                                          []
                                                                                                                                          (Ty.associated_in_trait
                                                                                                                                            "p3_commit::pcs::Pcs"
                                                                                                                                            []
                                                                                                                                            [
                                                                                                                                              Ty.associated_in_trait
                                                                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                SC
                                                                                                                                                "Challenge";
                                                                                                                                              Ty.associated_in_trait
                                                                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                SC
                                                                                                                                                "Challenger"
                                                                                                                                            ]
                                                                                                                                            (Ty.associated_in_trait
                                                                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                              []
                                                                                                                                              []
                                                                                                                                              SC
                                                                                                                                              "Pcs")
                                                                                                                                            "Domain")
                                                                                                                                          "Val"
                                                                                                                                      ]
                                                                                                                                  ],
                                                                                                                                M.call_closure (|
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "&")
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      Ty.apply
                                                                                                                                        (Ty.path
                                                                                                                                          "array")
                                                                                                                                        [
                                                                                                                                          Value.Integer
                                                                                                                                            IntegerKind.Usize
                                                                                                                                            8
                                                                                                                                        ]
                                                                                                                                        [
                                                                                                                                          Ty.associated_in_trait
                                                                                                                                            "p3_commit::domain::PolynomialSpace"
                                                                                                                                            []
                                                                                                                                            []
                                                                                                                                            (Ty.associated_in_trait
                                                                                                                                              "p3_commit::pcs::Pcs"
                                                                                                                                              []
                                                                                                                                              [
                                                                                                                                                Ty.associated_in_trait
                                                                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                  []
                                                                                                                                                  []
                                                                                                                                                  SC
                                                                                                                                                  "Challenge";
                                                                                                                                                Ty.associated_in_trait
                                                                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                  []
                                                                                                                                                  []
                                                                                                                                                  SC
                                                                                                                                                  "Challenger"
                                                                                                                                              ]
                                                                                                                                              (Ty.associated_in_trait
                                                                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                SC
                                                                                                                                                "Pcs")
                                                                                                                                              "Domain")
                                                                                                                                            "Val"
                                                                                                                                        ]
                                                                                                                                    ],
                                                                                                                                  M.get_trait_method (|
                                                                                                                                    "core::convert::AsRef",
                                                                                                                                    Ty.associated_in_trait
                                                                                                                                      "p3_commit::pcs::Pcs"
                                                                                                                                      []
                                                                                                                                      [
                                                                                                                                        Ty.associated_in_trait
                                                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                          []
                                                                                                                                          []
                                                                                                                                          SC
                                                                                                                                          "Challenge";
                                                                                                                                        Ty.associated_in_trait
                                                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                          []
                                                                                                                                          []
                                                                                                                                          SC
                                                                                                                                          "Challenger"
                                                                                                                                      ]
                                                                                                                                      (Ty.associated_in_trait
                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        SC
                                                                                                                                        "Pcs")
                                                                                                                                      "Commitment",
                                                                                                                                    [],
                                                                                                                                    [
                                                                                                                                      Ty.apply
                                                                                                                                        (Ty.path
                                                                                                                                          "array")
                                                                                                                                        [
                                                                                                                                          Value.Integer
                                                                                                                                            IntegerKind.Usize
                                                                                                                                            8
                                                                                                                                        ]
                                                                                                                                        [
                                                                                                                                          Ty.associated_in_trait
                                                                                                                                            "p3_commit::domain::PolynomialSpace"
                                                                                                                                            []
                                                                                                                                            []
                                                                                                                                            (Ty.associated_in_trait
                                                                                                                                              "p3_commit::pcs::Pcs"
                                                                                                                                              []
                                                                                                                                              [
                                                                                                                                                Ty.associated_in_trait
                                                                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                  []
                                                                                                                                                  []
                                                                                                                                                  SC
                                                                                                                                                  "Challenge";
                                                                                                                                                Ty.associated_in_trait
                                                                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                  []
                                                                                                                                                  []
                                                                                                                                                  SC
                                                                                                                                                  "Challenger"
                                                                                                                                              ]
                                                                                                                                              (Ty.associated_in_trait
                                                                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                SC
                                                                                                                                                "Pcs")
                                                                                                                                              "Domain")
                                                                                                                                            "Val"
                                                                                                                                        ]
                                                                                                                                    ],
                                                                                                                                    "as_ref",
                                                                                                                                    [],
                                                                                                                                    []
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    M.borrow (|
                                                                                                                                      Pointer.Kind.Ref,
                                                                                                                                      M.deref (|
                                                                                                                                        M.call_closure (|
                                                                                                                                          Ty.apply
                                                                                                                                            (Ty.path
                                                                                                                                              "&")
                                                                                                                                            []
                                                                                                                                            [
                                                                                                                                              Ty.associated_in_trait
                                                                                                                                                "p3_commit::pcs::Pcs"
                                                                                                                                                []
                                                                                                                                                [
                                                                                                                                                  Ty.associated_in_trait
                                                                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                    []
                                                                                                                                                    []
                                                                                                                                                    SC
                                                                                                                                                    "Challenge";
                                                                                                                                                  Ty.associated_in_trait
                                                                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                    []
                                                                                                                                                    []
                                                                                                                                                    SC
                                                                                                                                                    "Challenger"
                                                                                                                                                ]
                                                                                                                                                (Ty.associated_in_trait
                                                                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                  []
                                                                                                                                                  []
                                                                                                                                                  SC
                                                                                                                                                  "Pcs")
                                                                                                                                                "Commitment"
                                                                                                                                            ],
                                                                                                                                          M.get_trait_method (|
                                                                                                                                            "core::ops::index::Index",
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "alloc::vec::Vec")
                                                                                                                                              []
                                                                                                                                              [
                                                                                                                                                Ty.associated_in_trait
                                                                                                                                                  "p3_commit::pcs::Pcs"
                                                                                                                                                  []
                                                                                                                                                  [
                                                                                                                                                    Ty.associated_in_trait
                                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                      []
                                                                                                                                                      []
                                                                                                                                                      SC
                                                                                                                                                      "Challenge";
                                                                                                                                                    Ty.associated_in_trait
                                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                      []
                                                                                                                                                      []
                                                                                                                                                      SC
                                                                                                                                                      "Challenger"
                                                                                                                                                  ]
                                                                                                                                                  (Ty.associated_in_trait
                                                                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                    []
                                                                                                                                                    []
                                                                                                                                                    SC
                                                                                                                                                    "Pcs")
                                                                                                                                                  "Commitment";
                                                                                                                                                Ty.path
                                                                                                                                                  "alloc::alloc::Global"
                                                                                                                                              ],
                                                                                                                                            [],
                                                                                                                                            [
                                                                                                                                              Ty.path
                                                                                                                                                "usize"
                                                                                                                                            ],
                                                                                                                                            "index",
                                                                                                                                            [],
                                                                                                                                            []
                                                                                                                                          |),
                                                                                                                                          [
                                                                                                                                            M.borrow (|
                                                                                                                                              Pointer.Kind.Ref,
                                                                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                                                                  M.deref (|
                                                                                                                                                    M.read (|
                                                                                                                                                      proof
                                                                                                                                                    |)
                                                                                                                                                  |),
                                                                                                                                                  "openvm_stark_backend::proof::Proof",
                                                                                                                                                  "commitments"
                                                                                                                                                |),
                                                                                                                                                "openvm_stark_backend::proof::Commitments",
                                                                                                                                                "main_trace"
                                                                                                                                              |)
                                                                                                                                            |);
                                                                                                                                            M.read (|
                                                                                                                                              get_constant (|
                                                                                                                                                "openvm_circuit::arch::extensions::PROGRAM_CACHED_TRACE_INDEX",
                                                                                                                                                Ty.path
                                                                                                                                                  "usize"
                                                                                                                                              |)
                                                                                                                                            |)
                                                                                                                                          ]
                                                                                                                                        |)
                                                                                                                                      |)
                                                                                                                                    |)
                                                                                                                                  ]
                                                                                                                                |)
                                                                                                                              |)
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      |)) in
                                                                                                                  let
                                                                                                                        _ :=
                                                                                                                    is_constant_or_break_match (|
                                                                                                                      M.read (|
                                                                                                                        γ
                                                                                                                      |),
                                                                                                                      Value.Bool
                                                                                                                        true
                                                                                                                    |) in
                                                                                                                  M.never_to_any (|
                                                                                                                    M.read (|
                                                                                                                      M.return_ (|
                                                                                                                        Value.StructTuple
                                                                                                                          "core::result::Result::Err"
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "openvm_circuit::arch::vm::VerifiedExecutionPayload")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.associated_in_trait
                                                                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                                                                  []
                                                                                                                                  []
                                                                                                                                  (Ty.associated_in_trait
                                                                                                                                    "p3_commit::pcs::Pcs"
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      Ty.associated_in_trait
                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        SC
                                                                                                                                        "Challenge";
                                                                                                                                      Ty.associated_in_trait
                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        SC
                                                                                                                                        "Challenger"
                                                                                                                                    ]
                                                                                                                                    (Ty.associated_in_trait
                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      SC
                                                                                                                                      "Pcs")
                                                                                                                                    "Domain")
                                                                                                                                  "Val"
                                                                                                                              ];
                                                                                                                            Ty.path
                                                                                                                              "openvm_circuit::arch::vm::VmVerificationError"
                                                                                                                          ]
                                                                                                                          [
                                                                                                                            Value.mkStructRecord
                                                                                                                              "openvm_circuit::arch::vm::VmVerificationError::ProgramCommitMismatch"
                                                                                                                              []
                                                                                                                              []
                                                                                                                              [
                                                                                                                                ("index",
                                                                                                                                  M.read (|
                                                                                                                                    i
                                                                                                                                  |))
                                                                                                                              ]
                                                                                                                          ]
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  |)));
                                                                                                              fun
                                                                                                                  γ =>
                                                                                                                ltac:(M.monadic
                                                                                                                  (Value.Tuple
                                                                                                                    []))
                                                                                                            ]
                                                                                                          |)))
                                                                                                    ]
                                                                                                  |)
                                                                                                |)
                                                                                              |)));
                                                                                          fun γ =>
                                                                                            ltac:(M.monadic
                                                                                              (M.match_operator (|
                                                                                                Ty.tuple
                                                                                                  [],
                                                                                                M.alloc (|
                                                                                                  Ty.tuple
                                                                                                    [],
                                                                                                  Value.Tuple
                                                                                                    []
                                                                                                |),
                                                                                                [
                                                                                                  fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      (let
                                                                                                            γ :=
                                                                                                        M.use
                                                                                                          (M.alloc (|
                                                                                                            Ty.path
                                                                                                              "bool",
                                                                                                            M.call_closure (|
                                                                                                              Ty.path
                                                                                                                "bool",
                                                                                                              BinOp.eq,
                                                                                                              [
                                                                                                                M.read (|
                                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                                    M.deref (|
                                                                                                                      M.read (|
                                                                                                                        air_proof_data
                                                                                                                      |)
                                                                                                                    |),
                                                                                                                    "openvm_stark_backend::proof::AirProofData",
                                                                                                                    "air_id"
                                                                                                                  |)
                                                                                                                |);
                                                                                                                M.read (|
                                                                                                                  get_constant (|
                                                                                                                    "openvm_circuit::arch::extensions::CONNECTOR_AIR_ID",
                                                                                                                    Ty.path
                                                                                                                      "usize"
                                                                                                                  |)
                                                                                                                |)
                                                                                                              ]
                                                                                                            |)
                                                                                                          |)) in
                                                                                                      let
                                                                                                            _ :=
                                                                                                        is_constant_or_break_match (|
                                                                                                          M.read (|
                                                                                                            γ
                                                                                                          |),
                                                                                                          Value.Bool
                                                                                                            true
                                                                                                        |) in
                                                                                                      M.read (|
                                                                                                        let~
                                                                                                              _ :
                                                                                                            Ty.tuple
                                                                                                              [] :=
                                                                                                          M.write (|
                                                                                                            connector_air_present,
                                                                                                            Value.Bool
                                                                                                              true
                                                                                                          |) in
                                                                                                        let~
                                                                                                              pvs :
                                                                                                            Ty.apply
                                                                                                              (Ty.path
                                                                                                                "&")
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "openvm_circuit::system::connector::VmConnectorPvs")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.associated_in_trait
                                                                                                                      "p3_commit::domain::PolynomialSpace"
                                                                                                                      []
                                                                                                                      []
                                                                                                                      (Ty.associated_in_trait
                                                                                                                        "p3_commit::pcs::Pcs"
                                                                                                                        []
                                                                                                                        [
                                                                                                                          Ty.associated_in_trait
                                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                            []
                                                                                                                            []
                                                                                                                            SC
                                                                                                                            "Challenge";
                                                                                                                          Ty.associated_in_trait
                                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                            []
                                                                                                                            []
                                                                                                                            SC
                                                                                                                            "Challenger"
                                                                                                                        ]
                                                                                                                        (Ty.associated_in_trait
                                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                          []
                                                                                                                          []
                                                                                                                          SC
                                                                                                                          "Pcs")
                                                                                                                        "Domain")
                                                                                                                      "Val"
                                                                                                                  ]
                                                                                                              ] :=
                                                                                                          M.borrow (|
                                                                                                            Pointer.Kind.Ref,
                                                                                                            M.deref (|
                                                                                                              M.call_closure (|
                                                                                                                Ty.apply
                                                                                                                  (Ty.path
                                                                                                                    "&")
                                                                                                                  []
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "openvm_circuit::system::connector::VmConnectorPvs")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.associated_in_trait
                                                                                                                          "p3_commit::domain::PolynomialSpace"
                                                                                                                          []
                                                                                                                          []
                                                                                                                          (Ty.associated_in_trait
                                                                                                                            "p3_commit::pcs::Pcs"
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Ty.associated_in_trait
                                                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                []
                                                                                                                                []
                                                                                                                                SC
                                                                                                                                "Challenge";
                                                                                                                              Ty.associated_in_trait
                                                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                []
                                                                                                                                []
                                                                                                                                SC
                                                                                                                                "Challenger"
                                                                                                                            ]
                                                                                                                            (Ty.associated_in_trait
                                                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                              []
                                                                                                                              []
                                                                                                                              SC
                                                                                                                              "Pcs")
                                                                                                                            "Domain")
                                                                                                                          "Val"
                                                                                                                      ]
                                                                                                                  ],
                                                                                                                M.get_trait_method (|
                                                                                                                  "core::borrow::Borrow",
                                                                                                                  Ty.apply
                                                                                                                    (Ty.path
                                                                                                                      "slice")
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.associated_in_trait
                                                                                                                        "p3_commit::domain::PolynomialSpace"
                                                                                                                        []
                                                                                                                        []
                                                                                                                        (Ty.associated_in_trait
                                                                                                                          "p3_commit::pcs::Pcs"
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.associated_in_trait
                                                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                              []
                                                                                                                              []
                                                                                                                              SC
                                                                                                                              "Challenge";
                                                                                                                            Ty.associated_in_trait
                                                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                              []
                                                                                                                              []
                                                                                                                              SC
                                                                                                                              "Challenger"
                                                                                                                          ]
                                                                                                                          (Ty.associated_in_trait
                                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                            []
                                                                                                                            []
                                                                                                                            SC
                                                                                                                            "Pcs")
                                                                                                                          "Domain")
                                                                                                                        "Val"
                                                                                                                    ],
                                                                                                                  [],
                                                                                                                  [
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "openvm_circuit::system::connector::VmConnectorPvs")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.associated_in_trait
                                                                                                                          "p3_commit::domain::PolynomialSpace"
                                                                                                                          []
                                                                                                                          []
                                                                                                                          (Ty.associated_in_trait
                                                                                                                            "p3_commit::pcs::Pcs"
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Ty.associated_in_trait
                                                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                []
                                                                                                                                []
                                                                                                                                SC
                                                                                                                                "Challenge";
                                                                                                                              Ty.associated_in_trait
                                                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                []
                                                                                                                                []
                                                                                                                                SC
                                                                                                                                "Challenger"
                                                                                                                            ]
                                                                                                                            (Ty.associated_in_trait
                                                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                              []
                                                                                                                              []
                                                                                                                              SC
                                                                                                                              "Pcs")
                                                                                                                            "Domain")
                                                                                                                          "Val"
                                                                                                                      ]
                                                                                                                  ],
                                                                                                                  "borrow",
                                                                                                                  [],
                                                                                                                  []
                                                                                                                |),
                                                                                                                [
                                                                                                                  M.borrow (|
                                                                                                                    Pointer.Kind.Ref,
                                                                                                                    M.deref (|
                                                                                                                      M.call_closure (|
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "&")
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "slice")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.associated_in_trait
                                                                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                                                                  []
                                                                                                                                  []
                                                                                                                                  (Ty.associated_in_trait
                                                                                                                                    "p3_commit::pcs::Pcs"
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      Ty.associated_in_trait
                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        SC
                                                                                                                                        "Challenge";
                                                                                                                                      Ty.associated_in_trait
                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        SC
                                                                                                                                        "Challenger"
                                                                                                                                    ]
                                                                                                                                    (Ty.associated_in_trait
                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      SC
                                                                                                                                      "Pcs")
                                                                                                                                    "Domain")
                                                                                                                                  "Val"
                                                                                                                              ]
                                                                                                                          ],
                                                                                                                        M.get_associated_function (|
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "alloc::vec::Vec")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Ty.associated_in_trait
                                                                                                                                "p3_commit::domain::PolynomialSpace"
                                                                                                                                []
                                                                                                                                []
                                                                                                                                (Ty.associated_in_trait
                                                                                                                                  "p3_commit::pcs::Pcs"
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.associated_in_trait
                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      SC
                                                                                                                                      "Challenge";
                                                                                                                                    Ty.associated_in_trait
                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      SC
                                                                                                                                      "Challenger"
                                                                                                                                  ]
                                                                                                                                  (Ty.associated_in_trait
                                                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    SC
                                                                                                                                    "Pcs")
                                                                                                                                  "Domain")
                                                                                                                                "Val";
                                                                                                                              Ty.path
                                                                                                                                "alloc::alloc::Global"
                                                                                                                            ],
                                                                                                                          "as_slice",
                                                                                                                          [],
                                                                                                                          []
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          M.borrow (|
                                                                                                                            Pointer.Kind.Ref,
                                                                                                                            M.deref (|
                                                                                                                              M.read (|
                                                                                                                                pvs
                                                                                                                              |)
                                                                                                                            |)
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                ]
                                                                                                              |)
                                                                                                            |)
                                                                                                          |) in
                                                                                                        let~
                                                                                                              _ :
                                                                                                            Ty.tuple
                                                                                                              [] :=
                                                                                                          M.match_operator (|
                                                                                                            Ty.tuple
                                                                                                              [],
                                                                                                            M.alloc (|
                                                                                                              Ty.tuple
                                                                                                                [],
                                                                                                              Value.Tuple
                                                                                                                []
                                                                                                            |),
                                                                                                            [
                                                                                                              fun
                                                                                                                  γ =>
                                                                                                                ltac:(M.monadic
                                                                                                                  (let
                                                                                                                        γ :=
                                                                                                                    M.use
                                                                                                                      (M.alloc (|
                                                                                                                        Ty.path
                                                                                                                          "bool",
                                                                                                                        M.call_closure (|
                                                                                                                          Ty.path
                                                                                                                            "bool",
                                                                                                                          BinOp.ne,
                                                                                                                          [
                                                                                                                            M.read (|
                                                                                                                              i
                                                                                                                            |);
                                                                                                                            Value.Integer
                                                                                                                              IntegerKind.Usize
                                                                                                                              0
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      |)) in
                                                                                                                  let
                                                                                                                        _ :=
                                                                                                                    is_constant_or_break_match (|
                                                                                                                      M.read (|
                                                                                                                        γ
                                                                                                                      |),
                                                                                                                      Value.Bool
                                                                                                                        true
                                                                                                                    |) in
                                                                                                                  M.match_operator (|
                                                                                                                    Ty.tuple
                                                                                                                      [],
                                                                                                                    M.alloc (|
                                                                                                                      Ty.tuple
                                                                                                                        [],
                                                                                                                      Value.Tuple
                                                                                                                        []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      fun
                                                                                                                          γ =>
                                                                                                                        ltac:(M.monadic
                                                                                                                          (let
                                                                                                                                γ :=
                                                                                                                            M.use
                                                                                                                              (M.alloc (|
                                                                                                                                Ty.path
                                                                                                                                  "bool",
                                                                                                                                M.call_closure (|
                                                                                                                                  Ty.path
                                                                                                                                    "bool",
                                                                                                                                  M.get_trait_method (|
                                                                                                                                    "core::cmp::PartialEq",
                                                                                                                                    Ty.associated_in_trait
                                                                                                                                      "p3_commit::domain::PolynomialSpace"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      (Ty.associated_in_trait
                                                                                                                                        "p3_commit::pcs::Pcs"
                                                                                                                                        []
                                                                                                                                        [
                                                                                                                                          Ty.associated_in_trait
                                                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                            []
                                                                                                                                            []
                                                                                                                                            SC
                                                                                                                                            "Challenge";
                                                                                                                                          Ty.associated_in_trait
                                                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                            []
                                                                                                                                            []
                                                                                                                                            SC
                                                                                                                                            "Challenger"
                                                                                                                                        ]
                                                                                                                                        (Ty.associated_in_trait
                                                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                          []
                                                                                                                                          []
                                                                                                                                          SC
                                                                                                                                          "Pcs")
                                                                                                                                        "Domain")
                                                                                                                                      "Val",
                                                                                                                                    [],
                                                                                                                                    [
                                                                                                                                      Ty.associated_in_trait
                                                                                                                                        "p3_commit::domain::PolynomialSpace"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        (Ty.associated_in_trait
                                                                                                                                          "p3_commit::pcs::Pcs"
                                                                                                                                          []
                                                                                                                                          [
                                                                                                                                            Ty.associated_in_trait
                                                                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                              []
                                                                                                                                              []
                                                                                                                                              SC
                                                                                                                                              "Challenge";
                                                                                                                                            Ty.associated_in_trait
                                                                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                              []
                                                                                                                                              []
                                                                                                                                              SC
                                                                                                                                              "Challenger"
                                                                                                                                          ]
                                                                                                                                          (Ty.associated_in_trait
                                                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                            []
                                                                                                                                            []
                                                                                                                                            SC
                                                                                                                                            "Pcs")
                                                                                                                                          "Domain")
                                                                                                                                        "Val"
                                                                                                                                    ],
                                                                                                                                    "ne",
                                                                                                                                    [],
                                                                                                                                    []
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    M.borrow (|
                                                                                                                                      Pointer.Kind.Ref,
                                                                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                                                                        M.deref (|
                                                                                                                                          M.read (|
                                                                                                                                            pvs
                                                                                                                                          |)
                                                                                                                                        |),
                                                                                                                                        "openvm_circuit::system::connector::VmConnectorPvs",
                                                                                                                                        "initial_pc"
                                                                                                                                      |)
                                                                                                                                    |);
                                                                                                                                    M.borrow (|
                                                                                                                                      Pointer.Kind.Ref,
                                                                                                                                      M.alloc (|
                                                                                                                                        Ty.associated_in_trait
                                                                                                                                          "p3_commit::domain::PolynomialSpace"
                                                                                                                                          []
                                                                                                                                          []
                                                                                                                                          (Ty.associated_in_trait
                                                                                                                                            "p3_commit::pcs::Pcs"
                                                                                                                                            []
                                                                                                                                            [
                                                                                                                                              Ty.associated_in_trait
                                                                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                SC
                                                                                                                                                "Challenge";
                                                                                                                                              Ty.associated_in_trait
                                                                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                SC
                                                                                                                                                "Challenger"
                                                                                                                                            ]
                                                                                                                                            (Ty.associated_in_trait
                                                                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                              []
                                                                                                                                              []
                                                                                                                                              SC
                                                                                                                                              "Pcs")
                                                                                                                                            "Domain")
                                                                                                                                          "Val",
                                                                                                                                        M.call_closure (|
                                                                                                                                          Ty.associated_in_trait
                                                                                                                                            "p3_commit::domain::PolynomialSpace"
                                                                                                                                            []
                                                                                                                                            []
                                                                                                                                            (Ty.associated_in_trait
                                                                                                                                              "p3_commit::pcs::Pcs"
                                                                                                                                              []
                                                                                                                                              [
                                                                                                                                                Ty.associated_in_trait
                                                                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                  []
                                                                                                                                                  []
                                                                                                                                                  SC
                                                                                                                                                  "Challenge";
                                                                                                                                                Ty.associated_in_trait
                                                                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                  []
                                                                                                                                                  []
                                                                                                                                                  SC
                                                                                                                                                  "Challenger"
                                                                                                                                              ]
                                                                                                                                              (Ty.associated_in_trait
                                                                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                SC
                                                                                                                                                "Pcs")
                                                                                                                                              "Domain")
                                                                                                                                            "Val",
                                                                                                                                          M.get_associated_function (|
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "core::option::Option")
                                                                                                                                              []
                                                                                                                                              [
                                                                                                                                                Ty.associated_in_trait
                                                                                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                                                                                  []
                                                                                                                                                  []
                                                                                                                                                  (Ty.associated_in_trait
                                                                                                                                                    "p3_commit::pcs::Pcs"
                                                                                                                                                    []
                                                                                                                                                    [
                                                                                                                                                      Ty.associated_in_trait
                                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                        []
                                                                                                                                                        []
                                                                                                                                                        SC
                                                                                                                                                        "Challenge";
                                                                                                                                                      Ty.associated_in_trait
                                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                        []
                                                                                                                                                        []
                                                                                                                                                        SC
                                                                                                                                                        "Challenger"
                                                                                                                                                    ]
                                                                                                                                                    (Ty.associated_in_trait
                                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                      []
                                                                                                                                                      []
                                                                                                                                                      SC
                                                                                                                                                      "Pcs")
                                                                                                                                                    "Domain")
                                                                                                                                                  "Val"
                                                                                                                                              ],
                                                                                                                                            "unwrap",
                                                                                                                                            [],
                                                                                                                                            []
                                                                                                                                          |),
                                                                                                                                          [
                                                                                                                                            M.read (|
                                                                                                                                              prev_final_pc
                                                                                                                                            |)
                                                                                                                                          ]
                                                                                                                                        |)
                                                                                                                                      |)
                                                                                                                                    |)
                                                                                                                                  ]
                                                                                                                                |)
                                                                                                                              |)) in
                                                                                                                          let
                                                                                                                                _ :=
                                                                                                                            is_constant_or_break_match (|
                                                                                                                              M.read (|
                                                                                                                                γ
                                                                                                                              |),
                                                                                                                              Value.Bool
                                                                                                                                true
                                                                                                                            |) in
                                                                                                                          M.never_to_any (|
                                                                                                                            M.read (|
                                                                                                                              M.return_ (|
                                                                                                                                Value.StructTuple
                                                                                                                                  "core::result::Result::Err"
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "openvm_circuit::arch::vm::VerifiedExecutionPayload")
                                                                                                                                      []
                                                                                                                                      [
                                                                                                                                        Ty.associated_in_trait
                                                                                                                                          "p3_commit::domain::PolynomialSpace"
                                                                                                                                          []
                                                                                                                                          []
                                                                                                                                          (Ty.associated_in_trait
                                                                                                                                            "p3_commit::pcs::Pcs"
                                                                                                                                            []
                                                                                                                                            [
                                                                                                                                              Ty.associated_in_trait
                                                                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                SC
                                                                                                                                                "Challenge";
                                                                                                                                              Ty.associated_in_trait
                                                                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                SC
                                                                                                                                                "Challenger"
                                                                                                                                            ]
                                                                                                                                            (Ty.associated_in_trait
                                                                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                              []
                                                                                                                                              []
                                                                                                                                              SC
                                                                                                                                              "Pcs")
                                                                                                                                            "Domain")
                                                                                                                                          "Val"
                                                                                                                                      ];
                                                                                                                                    Ty.path
                                                                                                                                      "openvm_circuit::arch::vm::VmVerificationError"
                                                                                                                                  ]
                                                                                                                                  [
                                                                                                                                    Value.mkStructRecord
                                                                                                                                      "openvm_circuit::arch::vm::VmVerificationError::InitialPcMismatch"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      [
                                                                                                                                        ("initial",
                                                                                                                                          M.call_closure (|
                                                                                                                                            Ty.path
                                                                                                                                              "u32",
                                                                                                                                            M.get_trait_method (|
                                                                                                                                              "p3_field::field::PrimeField32",
                                                                                                                                              Ty.associated_in_trait
                                                                                                                                                "p3_commit::domain::PolynomialSpace"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                (Ty.associated_in_trait
                                                                                                                                                  "p3_commit::pcs::Pcs"
                                                                                                                                                  []
                                                                                                                                                  [
                                                                                                                                                    Ty.associated_in_trait
                                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                      []
                                                                                                                                                      []
                                                                                                                                                      SC
                                                                                                                                                      "Challenge";
                                                                                                                                                    Ty.associated_in_trait
                                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                      []
                                                                                                                                                      []
                                                                                                                                                      SC
                                                                                                                                                      "Challenger"
                                                                                                                                                  ]
                                                                                                                                                  (Ty.associated_in_trait
                                                                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                    []
                                                                                                                                                    []
                                                                                                                                                    SC
                                                                                                                                                    "Pcs")
                                                                                                                                                  "Domain")
                                                                                                                                                "Val",
                                                                                                                                              [],
                                                                                                                                              [],
                                                                                                                                              "as_canonical_u32",
                                                                                                                                              [],
                                                                                                                                              []
                                                                                                                                            |),
                                                                                                                                            [
                                                                                                                                              M.borrow (|
                                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                                M.SubPointer.get_struct_record_field (|
                                                                                                                                                  M.deref (|
                                                                                                                                                    M.read (|
                                                                                                                                                      pvs
                                                                                                                                                    |)
                                                                                                                                                  |),
                                                                                                                                                  "openvm_circuit::system::connector::VmConnectorPvs",
                                                                                                                                                  "initial_pc"
                                                                                                                                                |)
                                                                                                                                              |)
                                                                                                                                            ]
                                                                                                                                          |));
                                                                                                                                        ("prev_final",
                                                                                                                                          M.call_closure (|
                                                                                                                                            Ty.path
                                                                                                                                              "u32",
                                                                                                                                            M.get_trait_method (|
                                                                                                                                              "p3_field::field::PrimeField32",
                                                                                                                                              Ty.associated_in_trait
                                                                                                                                                "p3_commit::domain::PolynomialSpace"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                (Ty.associated_in_trait
                                                                                                                                                  "p3_commit::pcs::Pcs"
                                                                                                                                                  []
                                                                                                                                                  [
                                                                                                                                                    Ty.associated_in_trait
                                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                      []
                                                                                                                                                      []
                                                                                                                                                      SC
                                                                                                                                                      "Challenge";
                                                                                                                                                    Ty.associated_in_trait
                                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                      []
                                                                                                                                                      []
                                                                                                                                                      SC
                                                                                                                                                      "Challenger"
                                                                                                                                                  ]
                                                                                                                                                  (Ty.associated_in_trait
                                                                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                    []
                                                                                                                                                    []
                                                                                                                                                    SC
                                                                                                                                                    "Pcs")
                                                                                                                                                  "Domain")
                                                                                                                                                "Val",
                                                                                                                                              [],
                                                                                                                                              [],
                                                                                                                                              "as_canonical_u32",
                                                                                                                                              [],
                                                                                                                                              []
                                                                                                                                            |),
                                                                                                                                            [
                                                                                                                                              M.borrow (|
                                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                                M.alloc (|
                                                                                                                                                  Ty.associated_in_trait
                                                                                                                                                    "p3_commit::domain::PolynomialSpace"
                                                                                                                                                    []
                                                                                                                                                    []
                                                                                                                                                    (Ty.associated_in_trait
                                                                                                                                                      "p3_commit::pcs::Pcs"
                                                                                                                                                      []
                                                                                                                                                      [
                                                                                                                                                        Ty.associated_in_trait
                                                                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                          []
                                                                                                                                                          []
                                                                                                                                                          SC
                                                                                                                                                          "Challenge";
                                                                                                                                                        Ty.associated_in_trait
                                                                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                          []
                                                                                                                                                          []
                                                                                                                                                          SC
                                                                                                                                                          "Challenger"
                                                                                                                                                      ]
                                                                                                                                                      (Ty.associated_in_trait
                                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                        []
                                                                                                                                                        []
                                                                                                                                                        SC
                                                                                                                                                        "Pcs")
                                                                                                                                                      "Domain")
                                                                                                                                                    "Val",
                                                                                                                                                  M.call_closure (|
                                                                                                                                                    Ty.associated_in_trait
                                                                                                                                                      "p3_commit::domain::PolynomialSpace"
                                                                                                                                                      []
                                                                                                                                                      []
                                                                                                                                                      (Ty.associated_in_trait
                                                                                                                                                        "p3_commit::pcs::Pcs"
                                                                                                                                                        []
                                                                                                                                                        [
                                                                                                                                                          Ty.associated_in_trait
                                                                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                            []
                                                                                                                                                            []
                                                                                                                                                            SC
                                                                                                                                                            "Challenge";
                                                                                                                                                          Ty.associated_in_trait
                                                                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                            []
                                                                                                                                                            []
                                                                                                                                                            SC
                                                                                                                                                            "Challenger"
                                                                                                                                                        ]
                                                                                                                                                        (Ty.associated_in_trait
                                                                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                          []
                                                                                                                                                          []
                                                                                                                                                          SC
                                                                                                                                                          "Pcs")
                                                                                                                                                        "Domain")
                                                                                                                                                      "Val",
                                                                                                                                                    M.get_associated_function (|
                                                                                                                                                      Ty.apply
                                                                                                                                                        (Ty.path
                                                                                                                                                          "core::option::Option")
                                                                                                                                                        []
                                                                                                                                                        [
                                                                                                                                                          Ty.associated_in_trait
                                                                                                                                                            "p3_commit::domain::PolynomialSpace"
                                                                                                                                                            []
                                                                                                                                                            []
                                                                                                                                                            (Ty.associated_in_trait
                                                                                                                                                              "p3_commit::pcs::Pcs"
                                                                                                                                                              []
                                                                                                                                                              [
                                                                                                                                                                Ty.associated_in_trait
                                                                                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                                  []
                                                                                                                                                                  []
                                                                                                                                                                  SC
                                                                                                                                                                  "Challenge";
                                                                                                                                                                Ty.associated_in_trait
                                                                                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                                  []
                                                                                                                                                                  []
                                                                                                                                                                  SC
                                                                                                                                                                  "Challenger"
                                                                                                                                                              ]
                                                                                                                                                              (Ty.associated_in_trait
                                                                                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                                []
                                                                                                                                                                []
                                                                                                                                                                SC
                                                                                                                                                                "Pcs")
                                                                                                                                                              "Domain")
                                                                                                                                                            "Val"
                                                                                                                                                        ],
                                                                                                                                                      "unwrap",
                                                                                                                                                      [],
                                                                                                                                                      []
                                                                                                                                                    |),
                                                                                                                                                    [
                                                                                                                                                      M.read (|
                                                                                                                                                        prev_final_pc
                                                                                                                                                      |)
                                                                                                                                                    ]
                                                                                                                                                  |)
                                                                                                                                                |)
                                                                                                                                              |)
                                                                                                                                            ]
                                                                                                                                          |))
                                                                                                                                      ]
                                                                                                                                  ]
                                                                                                                              |)
                                                                                                                            |)
                                                                                                                          |)));
                                                                                                                      fun
                                                                                                                          γ =>
                                                                                                                        ltac:(M.monadic
                                                                                                                          (Value.Tuple
                                                                                                                            []))
                                                                                                                    ]
                                                                                                                  |)));
                                                                                                              fun
                                                                                                                  γ =>
                                                                                                                ltac:(M.monadic
                                                                                                                  (M.read (|
                                                                                                                    let~
                                                                                                                          _ :
                                                                                                                        Ty.tuple
                                                                                                                          [] :=
                                                                                                                      M.write (|
                                                                                                                        start_pc,
                                                                                                                        Value.StructTuple
                                                                                                                          "core::option::Option::Some"
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.associated_in_trait
                                                                                                                              "p3_commit::domain::PolynomialSpace"
                                                                                                                              []
                                                                                                                              []
                                                                                                                              (Ty.associated_in_trait
                                                                                                                                "p3_commit::pcs::Pcs"
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.associated_in_trait
                                                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    SC
                                                                                                                                    "Challenge";
                                                                                                                                  Ty.associated_in_trait
                                                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    SC
                                                                                                                                    "Challenger"
                                                                                                                                ]
                                                                                                                                (Ty.associated_in_trait
                                                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                  []
                                                                                                                                  []
                                                                                                                                  SC
                                                                                                                                  "Pcs")
                                                                                                                                "Domain")
                                                                                                                              "Val"
                                                                                                                          ]
                                                                                                                          [
                                                                                                                            M.read (|
                                                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                                                M.deref (|
                                                                                                                                  M.read (|
                                                                                                                                    pvs
                                                                                                                                  |)
                                                                                                                                |),
                                                                                                                                "openvm_circuit::system::connector::VmConnectorPvs",
                                                                                                                                "initial_pc"
                                                                                                                              |)
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                      |) in
                                                                                                                    M.alloc (|
                                                                                                                      Ty.tuple
                                                                                                                        [],
                                                                                                                      Value.Tuple
                                                                                                                        []
                                                                                                                    |)
                                                                                                                  |)))
                                                                                                            ]
                                                                                                          |) in
                                                                                                        let~
                                                                                                              _ :
                                                                                                            Ty.tuple
                                                                                                              [] :=
                                                                                                          M.write (|
                                                                                                            prev_final_pc,
                                                                                                            Value.StructTuple
                                                                                                              "core::option::Option::Some"
                                                                                                              []
                                                                                                              [
                                                                                                                Ty.associated_in_trait
                                                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                                                  []
                                                                                                                  []
                                                                                                                  (Ty.associated_in_trait
                                                                                                                    "p3_commit::pcs::Pcs"
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.associated_in_trait
                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                        []
                                                                                                                        []
                                                                                                                        SC
                                                                                                                        "Challenge";
                                                                                                                      Ty.associated_in_trait
                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                        []
                                                                                                                        []
                                                                                                                        SC
                                                                                                                        "Challenger"
                                                                                                                    ]
                                                                                                                    (Ty.associated_in_trait
                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                      []
                                                                                                                      []
                                                                                                                      SC
                                                                                                                      "Pcs")
                                                                                                                    "Domain")
                                                                                                                  "Val"
                                                                                                              ]
                                                                                                              [
                                                                                                                M.read (|
                                                                                                                  M.SubPointer.get_struct_record_field (|
                                                                                                                    M.deref (|
                                                                                                                      M.read (|
                                                                                                                        pvs
                                                                                                                      |)
                                                                                                                    |),
                                                                                                                    "openvm_circuit::system::connector::VmConnectorPvs",
                                                                                                                    "final_pc"
                                                                                                                  |)
                                                                                                                |)
                                                                                                              ]
                                                                                                          |) in
                                                                                                        let~
                                                                                                              expected_is_terminate :
                                                                                                            Ty.path
                                                                                                              "bool" :=
                                                                                                          M.call_closure (|
                                                                                                            Ty.path
                                                                                                              "bool",
                                                                                                            BinOp.eq,
                                                                                                            [
                                                                                                              M.read (|
                                                                                                                i
                                                                                                              |);
                                                                                                              M.call_closure (|
                                                                                                                Ty.path
                                                                                                                  "usize",
                                                                                                                BinOp.Wrap.sub,
                                                                                                                [
                                                                                                                  M.call_closure (|
                                                                                                                    Ty.path
                                                                                                                      "usize",
                                                                                                                    M.get_associated_function (|
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "slice")
                                                                                                                        []
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "openvm_stark_backend::proof::Proof")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              SC
                                                                                                                            ]
                                                                                                                        ],
                                                                                                                      "len",
                                                                                                                      [],
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.borrow (|
                                                                                                                        Pointer.Kind.Ref,
                                                                                                                        M.deref (|
                                                                                                                          M.read (|
                                                                                                                            proofs
                                                                                                                          |)
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                  |);
                                                                                                                  Value.Integer
                                                                                                                    IntegerKind.Usize
                                                                                                                    1
                                                                                                                ]
                                                                                                              |)
                                                                                                            ]
                                                                                                          |) in
                                                                                                        let~
                                                                                                              _ :
                                                                                                            Ty.tuple
                                                                                                              [] :=
                                                                                                          M.match_operator (|
                                                                                                            Ty.tuple
                                                                                                              [],
                                                                                                            M.alloc (|
                                                                                                              Ty.tuple
                                                                                                                [],
                                                                                                              Value.Tuple
                                                                                                                []
                                                                                                            |),
                                                                                                            [
                                                                                                              fun
                                                                                                                  γ =>
                                                                                                                ltac:(M.monadic
                                                                                                                  (let
                                                                                                                        γ :=
                                                                                                                    M.use
                                                                                                                      (M.alloc (|
                                                                                                                        Ty.path
                                                                                                                          "bool",
                                                                                                                        M.call_closure (|
                                                                                                                          Ty.path
                                                                                                                            "bool",
                                                                                                                          M.get_trait_method (|
                                                                                                                            "core::cmp::PartialEq",
                                                                                                                            Ty.associated_in_trait
                                                                                                                              "p3_commit::domain::PolynomialSpace"
                                                                                                                              []
                                                                                                                              []
                                                                                                                              (Ty.associated_in_trait
                                                                                                                                "p3_commit::pcs::Pcs"
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.associated_in_trait
                                                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    SC
                                                                                                                                    "Challenge";
                                                                                                                                  Ty.associated_in_trait
                                                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    SC
                                                                                                                                    "Challenger"
                                                                                                                                ]
                                                                                                                                (Ty.associated_in_trait
                                                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                  []
                                                                                                                                  []
                                                                                                                                  SC
                                                                                                                                  "Pcs")
                                                                                                                                "Domain")
                                                                                                                              "Val",
                                                                                                                            [],
                                                                                                                            [
                                                                                                                              Ty.associated_in_trait
                                                                                                                                "p3_commit::domain::PolynomialSpace"
                                                                                                                                []
                                                                                                                                []
                                                                                                                                (Ty.associated_in_trait
                                                                                                                                  "p3_commit::pcs::Pcs"
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.associated_in_trait
                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      SC
                                                                                                                                      "Challenge";
                                                                                                                                    Ty.associated_in_trait
                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      SC
                                                                                                                                      "Challenger"
                                                                                                                                  ]
                                                                                                                                  (Ty.associated_in_trait
                                                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    SC
                                                                                                                                    "Pcs")
                                                                                                                                  "Domain")
                                                                                                                                "Val"
                                                                                                                            ],
                                                                                                                            "ne",
                                                                                                                            [],
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            M.borrow (|
                                                                                                                              Pointer.Kind.Ref,
                                                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                                                M.deref (|
                                                                                                                                  M.read (|
                                                                                                                                    pvs
                                                                                                                                  |)
                                                                                                                                |),
                                                                                                                                "openvm_circuit::system::connector::VmConnectorPvs",
                                                                                                                                "is_terminate"
                                                                                                                              |)
                                                                                                                            |);
                                                                                                                            M.borrow (|
                                                                                                                              Pointer.Kind.Ref,
                                                                                                                              M.alloc (|
                                                                                                                                Ty.associated_in_trait
                                                                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                                                                  []
                                                                                                                                  []
                                                                                                                                  (Ty.associated_in_trait
                                                                                                                                    "p3_commit::pcs::Pcs"
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      Ty.associated_in_trait
                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        SC
                                                                                                                                        "Challenge";
                                                                                                                                      Ty.associated_in_trait
                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        SC
                                                                                                                                        "Challenger"
                                                                                                                                    ]
                                                                                                                                    (Ty.associated_in_trait
                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      SC
                                                                                                                                      "Pcs")
                                                                                                                                    "Domain")
                                                                                                                                  "Val",
                                                                                                                                M.call_closure (|
                                                                                                                                  Ty.associated_in_trait
                                                                                                                                    "p3_commit::domain::PolynomialSpace"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    (Ty.associated_in_trait
                                                                                                                                      "p3_commit::pcs::Pcs"
                                                                                                                                      []
                                                                                                                                      [
                                                                                                                                        Ty.associated_in_trait
                                                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                          []
                                                                                                                                          []
                                                                                                                                          SC
                                                                                                                                          "Challenge";
                                                                                                                                        Ty.associated_in_trait
                                                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                          []
                                                                                                                                          []
                                                                                                                                          SC
                                                                                                                                          "Challenger"
                                                                                                                                      ]
                                                                                                                                      (Ty.associated_in_trait
                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        SC
                                                                                                                                        "Pcs")
                                                                                                                                      "Domain")
                                                                                                                                    "Val",
                                                                                                                                  M.get_trait_method (|
                                                                                                                                    "p3_field::field::FieldAlgebra",
                                                                                                                                    Ty.associated_in_trait
                                                                                                                                      "p3_commit::domain::PolynomialSpace"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      (Ty.associated_in_trait
                                                                                                                                        "p3_commit::pcs::Pcs"
                                                                                                                                        []
                                                                                                                                        [
                                                                                                                                          Ty.associated_in_trait
                                                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                            []
                                                                                                                                            []
                                                                                                                                            SC
                                                                                                                                            "Challenge";
                                                                                                                                          Ty.associated_in_trait
                                                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                            []
                                                                                                                                            []
                                                                                                                                            SC
                                                                                                                                            "Challenger"
                                                                                                                                        ]
                                                                                                                                        (Ty.associated_in_trait
                                                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                          []
                                                                                                                                          []
                                                                                                                                          SC
                                                                                                                                          "Pcs")
                                                                                                                                        "Domain")
                                                                                                                                      "Val",
                                                                                                                                    [],
                                                                                                                                    [],
                                                                                                                                    "from_bool",
                                                                                                                                    [],
                                                                                                                                    []
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    M.read (|
                                                                                                                                      expected_is_terminate
                                                                                                                                    |)
                                                                                                                                  ]
                                                                                                                                |)
                                                                                                                              |)
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      |)) in
                                                                                                                  let
                                                                                                                        _ :=
                                                                                                                    is_constant_or_break_match (|
                                                                                                                      M.read (|
                                                                                                                        γ
                                                                                                                      |),
                                                                                                                      Value.Bool
                                                                                                                        true
                                                                                                                    |) in
                                                                                                                  M.never_to_any (|
                                                                                                                    M.read (|
                                                                                                                      M.return_ (|
                                                                                                                        Value.StructTuple
                                                                                                                          "core::result::Result::Err"
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "openvm_circuit::arch::vm::VerifiedExecutionPayload")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.associated_in_trait
                                                                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                                                                  []
                                                                                                                                  []
                                                                                                                                  (Ty.associated_in_trait
                                                                                                                                    "p3_commit::pcs::Pcs"
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      Ty.associated_in_trait
                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        SC
                                                                                                                                        "Challenge";
                                                                                                                                      Ty.associated_in_trait
                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        SC
                                                                                                                                        "Challenger"
                                                                                                                                    ]
                                                                                                                                    (Ty.associated_in_trait
                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      SC
                                                                                                                                      "Pcs")
                                                                                                                                    "Domain")
                                                                                                                                  "Val"
                                                                                                                              ];
                                                                                                                            Ty.path
                                                                                                                              "openvm_circuit::arch::vm::VmVerificationError"
                                                                                                                          ]
                                                                                                                          [
                                                                                                                            Value.mkStructRecord
                                                                                                                              "openvm_circuit::arch::vm::VmVerificationError::IsTerminateMismatch"
                                                                                                                              []
                                                                                                                              []
                                                                                                                              [
                                                                                                                                ("expected",
                                                                                                                                  M.read (|
                                                                                                                                    expected_is_terminate
                                                                                                                                  |));
                                                                                                                                ("actual",
                                                                                                                                  M.call_closure (|
                                                                                                                                    Ty.path
                                                                                                                                      "bool",
                                                                                                                                    BinOp.ne,
                                                                                                                                    [
                                                                                                                                      M.call_closure (|
                                                                                                                                        Ty.path
                                                                                                                                          "u32",
                                                                                                                                        M.get_trait_method (|
                                                                                                                                          "p3_field::field::PrimeField32",
                                                                                                                                          Ty.associated_in_trait
                                                                                                                                            "p3_commit::domain::PolynomialSpace"
                                                                                                                                            []
                                                                                                                                            []
                                                                                                                                            (Ty.associated_in_trait
                                                                                                                                              "p3_commit::pcs::Pcs"
                                                                                                                                              []
                                                                                                                                              [
                                                                                                                                                Ty.associated_in_trait
                                                                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                  []
                                                                                                                                                  []
                                                                                                                                                  SC
                                                                                                                                                  "Challenge";
                                                                                                                                                Ty.associated_in_trait
                                                                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                  []
                                                                                                                                                  []
                                                                                                                                                  SC
                                                                                                                                                  "Challenger"
                                                                                                                                              ]
                                                                                                                                              (Ty.associated_in_trait
                                                                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                SC
                                                                                                                                                "Pcs")
                                                                                                                                              "Domain")
                                                                                                                                            "Val",
                                                                                                                                          [],
                                                                                                                                          [],
                                                                                                                                          "as_canonical_u32",
                                                                                                                                          [],
                                                                                                                                          []
                                                                                                                                        |),
                                                                                                                                        [
                                                                                                                                          M.borrow (|
                                                                                                                                            Pointer.Kind.Ref,
                                                                                                                                            M.SubPointer.get_struct_record_field (|
                                                                                                                                              M.deref (|
                                                                                                                                                M.read (|
                                                                                                                                                  pvs
                                                                                                                                                |)
                                                                                                                                              |),
                                                                                                                                              "openvm_circuit::system::connector::VmConnectorPvs",
                                                                                                                                              "is_terminate"
                                                                                                                                            |)
                                                                                                                                          |)
                                                                                                                                        ]
                                                                                                                                      |);
                                                                                                                                      Value.Integer
                                                                                                                                        IntegerKind.U32
                                                                                                                                        0
                                                                                                                                    ]
                                                                                                                                  |))
                                                                                                                              ]
                                                                                                                          ]
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  |)));
                                                                                                              fun
                                                                                                                  γ =>
                                                                                                                ltac:(M.monadic
                                                                                                                  (Value.Tuple
                                                                                                                    []))
                                                                                                            ]
                                                                                                          |) in
                                                                                                        let~
                                                                                                              expected_exit_code :
                                                                                                            Ty.path
                                                                                                              "u32" :=
                                                                                                          M.match_operator (|
                                                                                                            Ty.path
                                                                                                              "u32",
                                                                                                            M.alloc (|
                                                                                                              Ty.tuple
                                                                                                                [],
                                                                                                              Value.Tuple
                                                                                                                []
                                                                                                            |),
                                                                                                            [
                                                                                                              fun
                                                                                                                  γ =>
                                                                                                                ltac:(M.monadic
                                                                                                                  (let
                                                                                                                        γ :=
                                                                                                                    M.use
                                                                                                                      expected_is_terminate in
                                                                                                                  let
                                                                                                                        _ :=
                                                                                                                    is_constant_or_break_match (|
                                                                                                                      M.read (|
                                                                                                                        γ
                                                                                                                      |),
                                                                                                                      Value.Bool
                                                                                                                        true
                                                                                                                    |) in
                                                                                                                  M.cast
                                                                                                                    (Ty.path
                                                                                                                      "u32")
                                                                                                                    (M.call_closure (|
                                                                                                                      Ty.path
                                                                                                                        "i32",
                                                                                                                      BinOp.Wrap.add,
                                                                                                                      [
                                                                                                                        M.read (|
                                                                                                                          get_constant (|
                                                                                                                            "openvm_circuit::arch::vm::ExitCode::Success_discriminant",
                                                                                                                            Ty.path
                                                                                                                              "i32"
                                                                                                                          |)
                                                                                                                        |);
                                                                                                                        Value.Integer
                                                                                                                          IntegerKind.I32
                                                                                                                          0
                                                                                                                      ]
                                                                                                                    |))));
                                                                                                              fun
                                                                                                                  γ =>
                                                                                                                ltac:(M.monadic
                                                                                                                  (M.read (|
                                                                                                                    get_constant (|
                                                                                                                      "openvm_circuit::system::connector::DEFAULT_SUSPEND_EXIT_CODE",
                                                                                                                      Ty.path
                                                                                                                        "u32"
                                                                                                                    |)
                                                                                                                  |)))
                                                                                                            ]
                                                                                                          |) in
                                                                                                        M.alloc (|
                                                                                                          Ty.tuple
                                                                                                            [],
                                                                                                          M.match_operator (|
                                                                                                            Ty.tuple
                                                                                                              [],
                                                                                                            M.alloc (|
                                                                                                              Ty.tuple
                                                                                                                [],
                                                                                                              Value.Tuple
                                                                                                                []
                                                                                                            |),
                                                                                                            [
                                                                                                              fun
                                                                                                                  γ =>
                                                                                                                ltac:(M.monadic
                                                                                                                  (let
                                                                                                                        γ :=
                                                                                                                    M.use
                                                                                                                      (M.alloc (|
                                                                                                                        Ty.path
                                                                                                                          "bool",
                                                                                                                        M.call_closure (|
                                                                                                                          Ty.path
                                                                                                                            "bool",
                                                                                                                          M.get_trait_method (|
                                                                                                                            "core::cmp::PartialEq",
                                                                                                                            Ty.associated_in_trait
                                                                                                                              "p3_commit::domain::PolynomialSpace"
                                                                                                                              []
                                                                                                                              []
                                                                                                                              (Ty.associated_in_trait
                                                                                                                                "p3_commit::pcs::Pcs"
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.associated_in_trait
                                                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    SC
                                                                                                                                    "Challenge";
                                                                                                                                  Ty.associated_in_trait
                                                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    SC
                                                                                                                                    "Challenger"
                                                                                                                                ]
                                                                                                                                (Ty.associated_in_trait
                                                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                  []
                                                                                                                                  []
                                                                                                                                  SC
                                                                                                                                  "Pcs")
                                                                                                                                "Domain")
                                                                                                                              "Val",
                                                                                                                            [],
                                                                                                                            [
                                                                                                                              Ty.associated_in_trait
                                                                                                                                "p3_commit::domain::PolynomialSpace"
                                                                                                                                []
                                                                                                                                []
                                                                                                                                (Ty.associated_in_trait
                                                                                                                                  "p3_commit::pcs::Pcs"
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.associated_in_trait
                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      SC
                                                                                                                                      "Challenge";
                                                                                                                                    Ty.associated_in_trait
                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      SC
                                                                                                                                      "Challenger"
                                                                                                                                  ]
                                                                                                                                  (Ty.associated_in_trait
                                                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    SC
                                                                                                                                    "Pcs")
                                                                                                                                  "Domain")
                                                                                                                                "Val"
                                                                                                                            ],
                                                                                                                            "ne",
                                                                                                                            [],
                                                                                                                            []
                                                                                                                          |),
                                                                                                                          [
                                                                                                                            M.borrow (|
                                                                                                                              Pointer.Kind.Ref,
                                                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                                                M.deref (|
                                                                                                                                  M.read (|
                                                                                                                                    pvs
                                                                                                                                  |)
                                                                                                                                |),
                                                                                                                                "openvm_circuit::system::connector::VmConnectorPvs",
                                                                                                                                "exit_code"
                                                                                                                              |)
                                                                                                                            |);
                                                                                                                            M.borrow (|
                                                                                                                              Pointer.Kind.Ref,
                                                                                                                              M.alloc (|
                                                                                                                                Ty.associated_in_trait
                                                                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                                                                  []
                                                                                                                                  []
                                                                                                                                  (Ty.associated_in_trait
                                                                                                                                    "p3_commit::pcs::Pcs"
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      Ty.associated_in_trait
                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        SC
                                                                                                                                        "Challenge";
                                                                                                                                      Ty.associated_in_trait
                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        SC
                                                                                                                                        "Challenger"
                                                                                                                                    ]
                                                                                                                                    (Ty.associated_in_trait
                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      SC
                                                                                                                                      "Pcs")
                                                                                                                                    "Domain")
                                                                                                                                  "Val",
                                                                                                                                M.call_closure (|
                                                                                                                                  Ty.associated_in_trait
                                                                                                                                    "p3_commit::domain::PolynomialSpace"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    (Ty.associated_in_trait
                                                                                                                                      "p3_commit::pcs::Pcs"
                                                                                                                                      []
                                                                                                                                      [
                                                                                                                                        Ty.associated_in_trait
                                                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                          []
                                                                                                                                          []
                                                                                                                                          SC
                                                                                                                                          "Challenge";
                                                                                                                                        Ty.associated_in_trait
                                                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                          []
                                                                                                                                          []
                                                                                                                                          SC
                                                                                                                                          "Challenger"
                                                                                                                                      ]
                                                                                                                                      (Ty.associated_in_trait
                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        SC
                                                                                                                                        "Pcs")
                                                                                                                                      "Domain")
                                                                                                                                    "Val",
                                                                                                                                  M.get_trait_method (|
                                                                                                                                    "p3_field::field::FieldAlgebra",
                                                                                                                                    Ty.associated_in_trait
                                                                                                                                      "p3_commit::domain::PolynomialSpace"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      (Ty.associated_in_trait
                                                                                                                                        "p3_commit::pcs::Pcs"
                                                                                                                                        []
                                                                                                                                        [
                                                                                                                                          Ty.associated_in_trait
                                                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                            []
                                                                                                                                            []
                                                                                                                                            SC
                                                                                                                                            "Challenge";
                                                                                                                                          Ty.associated_in_trait
                                                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                            []
                                                                                                                                            []
                                                                                                                                            SC
                                                                                                                                            "Challenger"
                                                                                                                                        ]
                                                                                                                                        (Ty.associated_in_trait
                                                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                          []
                                                                                                                                          []
                                                                                                                                          SC
                                                                                                                                          "Pcs")
                                                                                                                                        "Domain")
                                                                                                                                      "Val",
                                                                                                                                    [],
                                                                                                                                    [],
                                                                                                                                    "from_canonical_u32",
                                                                                                                                    [],
                                                                                                                                    []
                                                                                                                                  |),
                                                                                                                                  [
                                                                                                                                    M.read (|
                                                                                                                                      expected_exit_code
                                                                                                                                    |)
                                                                                                                                  ]
                                                                                                                                |)
                                                                                                                              |)
                                                                                                                            |)
                                                                                                                          ]
                                                                                                                        |)
                                                                                                                      |)) in
                                                                                                                  let
                                                                                                                        _ :=
                                                                                                                    is_constant_or_break_match (|
                                                                                                                      M.read (|
                                                                                                                        γ
                                                                                                                      |),
                                                                                                                      Value.Bool
                                                                                                                        true
                                                                                                                    |) in
                                                                                                                  M.never_to_any (|
                                                                                                                    M.read (|
                                                                                                                      M.return_ (|
                                                                                                                        Value.StructTuple
                                                                                                                          "core::result::Result::Err"
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "openvm_circuit::arch::vm::VerifiedExecutionPayload")
                                                                                                                              []
                                                                                                                              [
                                                                                                                                Ty.associated_in_trait
                                                                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                                                                  []
                                                                                                                                  []
                                                                                                                                  (Ty.associated_in_trait
                                                                                                                                    "p3_commit::pcs::Pcs"
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      Ty.associated_in_trait
                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        SC
                                                                                                                                        "Challenge";
                                                                                                                                      Ty.associated_in_trait
                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        SC
                                                                                                                                        "Challenger"
                                                                                                                                    ]
                                                                                                                                    (Ty.associated_in_trait
                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      SC
                                                                                                                                      "Pcs")
                                                                                                                                    "Domain")
                                                                                                                                  "Val"
                                                                                                                              ];
                                                                                                                            Ty.path
                                                                                                                              "openvm_circuit::arch::vm::VmVerificationError"
                                                                                                                          ]
                                                                                                                          [
                                                                                                                            Value.mkStructRecord
                                                                                                                              "openvm_circuit::arch::vm::VmVerificationError::ExitCodeMismatch"
                                                                                                                              []
                                                                                                                              []
                                                                                                                              [
                                                                                                                                ("expected",
                                                                                                                                  M.read (|
                                                                                                                                    expected_exit_code
                                                                                                                                  |));
                                                                                                                                ("actual",
                                                                                                                                  M.call_closure (|
                                                                                                                                    Ty.path
                                                                                                                                      "u32",
                                                                                                                                    M.get_trait_method (|
                                                                                                                                      "p3_field::field::PrimeField32",
                                                                                                                                      Ty.associated_in_trait
                                                                                                                                        "p3_commit::domain::PolynomialSpace"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        (Ty.associated_in_trait
                                                                                                                                          "p3_commit::pcs::Pcs"
                                                                                                                                          []
                                                                                                                                          [
                                                                                                                                            Ty.associated_in_trait
                                                                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                              []
                                                                                                                                              []
                                                                                                                                              SC
                                                                                                                                              "Challenge";
                                                                                                                                            Ty.associated_in_trait
                                                                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                              []
                                                                                                                                              []
                                                                                                                                              SC
                                                                                                                                              "Challenger"
                                                                                                                                          ]
                                                                                                                                          (Ty.associated_in_trait
                                                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                            []
                                                                                                                                            []
                                                                                                                                            SC
                                                                                                                                            "Pcs")
                                                                                                                                          "Domain")
                                                                                                                                        "Val",
                                                                                                                                      [],
                                                                                                                                      [],
                                                                                                                                      "as_canonical_u32",
                                                                                                                                      [],
                                                                                                                                      []
                                                                                                                                    |),
                                                                                                                                    [
                                                                                                                                      M.borrow (|
                                                                                                                                        Pointer.Kind.Ref,
                                                                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                                                                          M.deref (|
                                                                                                                                            M.read (|
                                                                                                                                              pvs
                                                                                                                                            |)
                                                                                                                                          |),
                                                                                                                                          "openvm_circuit::system::connector::VmConnectorPvs",
                                                                                                                                          "exit_code"
                                                                                                                                        |)
                                                                                                                                      |)
                                                                                                                                    ]
                                                                                                                                  |))
                                                                                                                              ]
                                                                                                                          ]
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  |)));
                                                                                                              fun
                                                                                                                  γ =>
                                                                                                                ltac:(M.monadic
                                                                                                                  (Value.Tuple
                                                                                                                    []))
                                                                                                            ]
                                                                                                          |)
                                                                                                        |)
                                                                                                      |)));
                                                                                                  fun
                                                                                                      γ =>
                                                                                                    ltac:(M.monadic
                                                                                                      (M.match_operator (|
                                                                                                        Ty.tuple
                                                                                                          [],
                                                                                                        M.alloc (|
                                                                                                          Ty.tuple
                                                                                                            [],
                                                                                                          Value.Tuple
                                                                                                            []
                                                                                                        |),
                                                                                                        [
                                                                                                          fun
                                                                                                              γ =>
                                                                                                            ltac:(M.monadic
                                                                                                              (let
                                                                                                                    γ :=
                                                                                                                M.use
                                                                                                                  (M.alloc (|
                                                                                                                    Ty.path
                                                                                                                      "bool",
                                                                                                                    M.call_closure (|
                                                                                                                      Ty.path
                                                                                                                        "bool",
                                                                                                                      BinOp.eq,
                                                                                                                      [
                                                                                                                        M.read (|
                                                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                                                            M.deref (|
                                                                                                                              M.read (|
                                                                                                                                air_proof_data
                                                                                                                              |)
                                                                                                                            |),
                                                                                                                            "openvm_stark_backend::proof::AirProofData",
                                                                                                                            "air_id"
                                                                                                                          |)
                                                                                                                        |);
                                                                                                                        M.read (|
                                                                                                                          get_constant (|
                                                                                                                            "openvm_circuit::arch::extensions::MERKLE_AIR_ID",
                                                                                                                            Ty.path
                                                                                                                              "usize"
                                                                                                                          |)
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                    |)
                                                                                                                  |)) in
                                                                                                              let
                                                                                                                    _ :=
                                                                                                                is_constant_or_break_match (|
                                                                                                                  M.read (|
                                                                                                                    γ
                                                                                                                  |),
                                                                                                                  Value.Bool
                                                                                                                    true
                                                                                                                |) in
                                                                                                              M.read (|
                                                                                                                let~
                                                                                                                      _ :
                                                                                                                    Ty.tuple
                                                                                                                      [] :=
                                                                                                                  M.write (|
                                                                                                                    merkle_air_present,
                                                                                                                    Value.Bool
                                                                                                                      true
                                                                                                                  |) in
                                                                                                                let~
                                                                                                                      pvs :
                                                                                                                    Ty.apply
                                                                                                                      (Ty.path
                                                                                                                        "&")
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "openvm_circuit::system::memory::merkle::columns::MemoryMerklePvs")
                                                                                                                          [
                                                                                                                            Value.Integer
                                                                                                                              IntegerKind.Usize
                                                                                                                              8
                                                                                                                          ]
                                                                                                                          [
                                                                                                                            Ty.associated_in_trait
                                                                                                                              "p3_commit::domain::PolynomialSpace"
                                                                                                                              []
                                                                                                                              []
                                                                                                                              (Ty.associated_in_trait
                                                                                                                                "p3_commit::pcs::Pcs"
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.associated_in_trait
                                                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    SC
                                                                                                                                    "Challenge";
                                                                                                                                  Ty.associated_in_trait
                                                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    SC
                                                                                                                                    "Challenger"
                                                                                                                                ]
                                                                                                                                (Ty.associated_in_trait
                                                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                  []
                                                                                                                                  []
                                                                                                                                  SC
                                                                                                                                  "Pcs")
                                                                                                                                "Domain")
                                                                                                                              "Val"
                                                                                                                          ]
                                                                                                                      ] :=
                                                                                                                  M.borrow (|
                                                                                                                    Pointer.Kind.Ref,
                                                                                                                    M.deref (|
                                                                                                                      M.call_closure (|
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "&")
                                                                                                                          []
                                                                                                                          [
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "openvm_circuit::system::memory::merkle::columns::MemoryMerklePvs")
                                                                                                                              [
                                                                                                                                Value.Integer
                                                                                                                                  IntegerKind.Usize
                                                                                                                                  8
                                                                                                                              ]
                                                                                                                              [
                                                                                                                                Ty.associated_in_trait
                                                                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                                                                  []
                                                                                                                                  []
                                                                                                                                  (Ty.associated_in_trait
                                                                                                                                    "p3_commit::pcs::Pcs"
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      Ty.associated_in_trait
                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        SC
                                                                                                                                        "Challenge";
                                                                                                                                      Ty.associated_in_trait
                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        SC
                                                                                                                                        "Challenger"
                                                                                                                                    ]
                                                                                                                                    (Ty.associated_in_trait
                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      SC
                                                                                                                                      "Pcs")
                                                                                                                                    "Domain")
                                                                                                                                  "Val"
                                                                                                                              ]
                                                                                                                          ],
                                                                                                                        M.get_trait_method (|
                                                                                                                          "core::borrow::Borrow",
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "slice")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Ty.associated_in_trait
                                                                                                                                "p3_commit::domain::PolynomialSpace"
                                                                                                                                []
                                                                                                                                []
                                                                                                                                (Ty.associated_in_trait
                                                                                                                                  "p3_commit::pcs::Pcs"
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.associated_in_trait
                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      SC
                                                                                                                                      "Challenge";
                                                                                                                                    Ty.associated_in_trait
                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      SC
                                                                                                                                      "Challenger"
                                                                                                                                  ]
                                                                                                                                  (Ty.associated_in_trait
                                                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    SC
                                                                                                                                    "Pcs")
                                                                                                                                  "Domain")
                                                                                                                                "Val"
                                                                                                                            ],
                                                                                                                          [],
                                                                                                                          [
                                                                                                                            Ty.apply
                                                                                                                              (Ty.path
                                                                                                                                "openvm_circuit::system::memory::merkle::columns::MemoryMerklePvs")
                                                                                                                              [
                                                                                                                                Value.Integer
                                                                                                                                  IntegerKind.Usize
                                                                                                                                  8
                                                                                                                              ]
                                                                                                                              [
                                                                                                                                Ty.associated_in_trait
                                                                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                                                                  []
                                                                                                                                  []
                                                                                                                                  (Ty.associated_in_trait
                                                                                                                                    "p3_commit::pcs::Pcs"
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      Ty.associated_in_trait
                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        SC
                                                                                                                                        "Challenge";
                                                                                                                                      Ty.associated_in_trait
                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        SC
                                                                                                                                        "Challenger"
                                                                                                                                    ]
                                                                                                                                    (Ty.associated_in_trait
                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      SC
                                                                                                                                      "Pcs")
                                                                                                                                    "Domain")
                                                                                                                                  "Val"
                                                                                                                              ]
                                                                                                                          ],
                                                                                                                          "borrow",
                                                                                                                          [],
                                                                                                                          []
                                                                                                                        |),
                                                                                                                        [
                                                                                                                          M.borrow (|
                                                                                                                            Pointer.Kind.Ref,
                                                                                                                            M.deref (|
                                                                                                                              M.call_closure (|
                                                                                                                                Ty.apply
                                                                                                                                  (Ty.path
                                                                                                                                    "&")
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "slice")
                                                                                                                                      []
                                                                                                                                      [
                                                                                                                                        Ty.associated_in_trait
                                                                                                                                          "p3_commit::domain::PolynomialSpace"
                                                                                                                                          []
                                                                                                                                          []
                                                                                                                                          (Ty.associated_in_trait
                                                                                                                                            "p3_commit::pcs::Pcs"
                                                                                                                                            []
                                                                                                                                            [
                                                                                                                                              Ty.associated_in_trait
                                                                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                SC
                                                                                                                                                "Challenge";
                                                                                                                                              Ty.associated_in_trait
                                                                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                SC
                                                                                                                                                "Challenger"
                                                                                                                                            ]
                                                                                                                                            (Ty.associated_in_trait
                                                                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                              []
                                                                                                                                              []
                                                                                                                                              SC
                                                                                                                                              "Pcs")
                                                                                                                                            "Domain")
                                                                                                                                          "Val"
                                                                                                                                      ]
                                                                                                                                  ],
                                                                                                                                M.get_associated_function (|
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "alloc::vec::Vec")
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      Ty.associated_in_trait
                                                                                                                                        "p3_commit::domain::PolynomialSpace"
                                                                                                                                        []
                                                                                                                                        []
                                                                                                                                        (Ty.associated_in_trait
                                                                                                                                          "p3_commit::pcs::Pcs"
                                                                                                                                          []
                                                                                                                                          [
                                                                                                                                            Ty.associated_in_trait
                                                                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                              []
                                                                                                                                              []
                                                                                                                                              SC
                                                                                                                                              "Challenge";
                                                                                                                                            Ty.associated_in_trait
                                                                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                              []
                                                                                                                                              []
                                                                                                                                              SC
                                                                                                                                              "Challenger"
                                                                                                                                          ]
                                                                                                                                          (Ty.associated_in_trait
                                                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                            []
                                                                                                                                            []
                                                                                                                                            SC
                                                                                                                                            "Pcs")
                                                                                                                                          "Domain")
                                                                                                                                        "Val";
                                                                                                                                      Ty.path
                                                                                                                                        "alloc::alloc::Global"
                                                                                                                                    ],
                                                                                                                                  "as_slice",
                                                                                                                                  [],
                                                                                                                                  []
                                                                                                                                |),
                                                                                                                                [
                                                                                                                                  M.borrow (|
                                                                                                                                    Pointer.Kind.Ref,
                                                                                                                                    M.deref (|
                                                                                                                                      M.read (|
                                                                                                                                        pvs
                                                                                                                                      |)
                                                                                                                                    |)
                                                                                                                                  |)
                                                                                                                                ]
                                                                                                                              |)
                                                                                                                            |)
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  |) in
                                                                                                                let~
                                                                                                                      _ :
                                                                                                                    Ty.tuple
                                                                                                                      [] :=
                                                                                                                  M.match_operator (|
                                                                                                                    Ty.tuple
                                                                                                                      [],
                                                                                                                    M.alloc (|
                                                                                                                      Ty.tuple
                                                                                                                        [],
                                                                                                                      Value.Tuple
                                                                                                                        []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      fun
                                                                                                                          γ =>
                                                                                                                        ltac:(M.monadic
                                                                                                                          (let
                                                                                                                                γ :=
                                                                                                                            M.use
                                                                                                                              (M.alloc (|
                                                                                                                                Ty.path
                                                                                                                                  "bool",
                                                                                                                                M.call_closure (|
                                                                                                                                  Ty.path
                                                                                                                                    "bool",
                                                                                                                                  BinOp.ne,
                                                                                                                                  [
                                                                                                                                    M.read (|
                                                                                                                                      i
                                                                                                                                    |);
                                                                                                                                    Value.Integer
                                                                                                                                      IntegerKind.Usize
                                                                                                                                      0
                                                                                                                                  ]
                                                                                                                                |)
                                                                                                                              |)) in
                                                                                                                          let
                                                                                                                                _ :=
                                                                                                                            is_constant_or_break_match (|
                                                                                                                              M.read (|
                                                                                                                                γ
                                                                                                                              |),
                                                                                                                              Value.Bool
                                                                                                                                true
                                                                                                                            |) in
                                                                                                                          M.match_operator (|
                                                                                                                            Ty.tuple
                                                                                                                              [],
                                                                                                                            M.alloc (|
                                                                                                                              Ty.tuple
                                                                                                                                [],
                                                                                                                              Value.Tuple
                                                                                                                                []
                                                                                                                            |),
                                                                                                                            [
                                                                                                                              fun
                                                                                                                                  γ =>
                                                                                                                                ltac:(M.monadic
                                                                                                                                  (let
                                                                                                                                        γ :=
                                                                                                                                    M.use
                                                                                                                                      (M.alloc (|
                                                                                                                                        Ty.path
                                                                                                                                          "bool",
                                                                                                                                        M.call_closure (|
                                                                                                                                          Ty.path
                                                                                                                                            "bool",
                                                                                                                                          M.get_trait_method (|
                                                                                                                                            "core::cmp::PartialEq",
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "array")
                                                                                                                                              [
                                                                                                                                                Value.Integer
                                                                                                                                                  IntegerKind.Usize
                                                                                                                                                  8
                                                                                                                                              ]
                                                                                                                                              [
                                                                                                                                                Ty.associated_in_trait
                                                                                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                                                                                  []
                                                                                                                                                  []
                                                                                                                                                  (Ty.associated_in_trait
                                                                                                                                                    "p3_commit::pcs::Pcs"
                                                                                                                                                    []
                                                                                                                                                    [
                                                                                                                                                      Ty.associated_in_trait
                                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                        []
                                                                                                                                                        []
                                                                                                                                                        SC
                                                                                                                                                        "Challenge";
                                                                                                                                                      Ty.associated_in_trait
                                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                        []
                                                                                                                                                        []
                                                                                                                                                        SC
                                                                                                                                                        "Challenger"
                                                                                                                                                    ]
                                                                                                                                                    (Ty.associated_in_trait
                                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                      []
                                                                                                                                                      []
                                                                                                                                                      SC
                                                                                                                                                      "Pcs")
                                                                                                                                                    "Domain")
                                                                                                                                                  "Val"
                                                                                                                                              ],
                                                                                                                                            [],
                                                                                                                                            [
                                                                                                                                              Ty.apply
                                                                                                                                                (Ty.path
                                                                                                                                                  "array")
                                                                                                                                                [
                                                                                                                                                  Value.Integer
                                                                                                                                                    IntegerKind.Usize
                                                                                                                                                    8
                                                                                                                                                ]
                                                                                                                                                [
                                                                                                                                                  Ty.associated_in_trait
                                                                                                                                                    "p3_commit::domain::PolynomialSpace"
                                                                                                                                                    []
                                                                                                                                                    []
                                                                                                                                                    (Ty.associated_in_trait
                                                                                                                                                      "p3_commit::pcs::Pcs"
                                                                                                                                                      []
                                                                                                                                                      [
                                                                                                                                                        Ty.associated_in_trait
                                                                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                          []
                                                                                                                                                          []
                                                                                                                                                          SC
                                                                                                                                                          "Challenge";
                                                                                                                                                        Ty.associated_in_trait
                                                                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                          []
                                                                                                                                                          []
                                                                                                                                                          SC
                                                                                                                                                          "Challenger"
                                                                                                                                                      ]
                                                                                                                                                      (Ty.associated_in_trait
                                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                        []
                                                                                                                                                        []
                                                                                                                                                        SC
                                                                                                                                                        "Pcs")
                                                                                                                                                      "Domain")
                                                                                                                                                    "Val"
                                                                                                                                                ]
                                                                                                                                            ],
                                                                                                                                            "ne",
                                                                                                                                            [],
                                                                                                                                            []
                                                                                                                                          |),
                                                                                                                                          [
                                                                                                                                            M.borrow (|
                                                                                                                                              Pointer.Kind.Ref,
                                                                                                                                              M.SubPointer.get_struct_record_field (|
                                                                                                                                                M.deref (|
                                                                                                                                                  M.read (|
                                                                                                                                                    pvs
                                                                                                                                                  |)
                                                                                                                                                |),
                                                                                                                                                "openvm_circuit::system::memory::merkle::columns::MemoryMerklePvs",
                                                                                                                                                "initial_root"
                                                                                                                                              |)
                                                                                                                                            |);
                                                                                                                                            M.borrow (|
                                                                                                                                              Pointer.Kind.Ref,
                                                                                                                                              M.alloc (|
                                                                                                                                                Ty.apply
                                                                                                                                                  (Ty.path
                                                                                                                                                    "array")
                                                                                                                                                  [
                                                                                                                                                    Value.Integer
                                                                                                                                                      IntegerKind.Usize
                                                                                                                                                      8
                                                                                                                                                  ]
                                                                                                                                                  [
                                                                                                                                                    Ty.associated_in_trait
                                                                                                                                                      "p3_commit::domain::PolynomialSpace"
                                                                                                                                                      []
                                                                                                                                                      []
                                                                                                                                                      (Ty.associated_in_trait
                                                                                                                                                        "p3_commit::pcs::Pcs"
                                                                                                                                                        []
                                                                                                                                                        [
                                                                                                                                                          Ty.associated_in_trait
                                                                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                            []
                                                                                                                                                            []
                                                                                                                                                            SC
                                                                                                                                                            "Challenge";
                                                                                                                                                          Ty.associated_in_trait
                                                                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                            []
                                                                                                                                                            []
                                                                                                                                                            SC
                                                                                                                                                            "Challenger"
                                                                                                                                                        ]
                                                                                                                                                        (Ty.associated_in_trait
                                                                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                          []
                                                                                                                                                          []
                                                                                                                                                          SC
                                                                                                                                                          "Pcs")
                                                                                                                                                        "Domain")
                                                                                                                                                      "Val"
                                                                                                                                                  ],
                                                                                                                                                M.call_closure (|
                                                                                                                                                  Ty.apply
                                                                                                                                                    (Ty.path
                                                                                                                                                      "array")
                                                                                                                                                    [
                                                                                                                                                      Value.Integer
                                                                                                                                                        IntegerKind.Usize
                                                                                                                                                        8
                                                                                                                                                    ]
                                                                                                                                                    [
                                                                                                                                                      Ty.associated_in_trait
                                                                                                                                                        "p3_commit::domain::PolynomialSpace"
                                                                                                                                                        []
                                                                                                                                                        []
                                                                                                                                                        (Ty.associated_in_trait
                                                                                                                                                          "p3_commit::pcs::Pcs"
                                                                                                                                                          []
                                                                                                                                                          [
                                                                                                                                                            Ty.associated_in_trait
                                                                                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                              []
                                                                                                                                                              []
                                                                                                                                                              SC
                                                                                                                                                              "Challenge";
                                                                                                                                                            Ty.associated_in_trait
                                                                                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                              []
                                                                                                                                                              []
                                                                                                                                                              SC
                                                                                                                                                              "Challenger"
                                                                                                                                                          ]
                                                                                                                                                          (Ty.associated_in_trait
                                                                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                            []
                                                                                                                                                            []
                                                                                                                                                            SC
                                                                                                                                                            "Pcs")
                                                                                                                                                          "Domain")
                                                                                                                                                        "Val"
                                                                                                                                                    ],
                                                                                                                                                  M.get_associated_function (|
                                                                                                                                                    Ty.apply
                                                                                                                                                      (Ty.path
                                                                                                                                                        "core::option::Option")
                                                                                                                                                      []
                                                                                                                                                      [
                                                                                                                                                        Ty.apply
                                                                                                                                                          (Ty.path
                                                                                                                                                            "array")
                                                                                                                                                          [
                                                                                                                                                            Value.Integer
                                                                                                                                                              IntegerKind.Usize
                                                                                                                                                              8
                                                                                                                                                          ]
                                                                                                                                                          [
                                                                                                                                                            Ty.associated_in_trait
                                                                                                                                                              "p3_commit::domain::PolynomialSpace"
                                                                                                                                                              []
                                                                                                                                                              []
                                                                                                                                                              (Ty.associated_in_trait
                                                                                                                                                                "p3_commit::pcs::Pcs"
                                                                                                                                                                []
                                                                                                                                                                [
                                                                                                                                                                  Ty.associated_in_trait
                                                                                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                                    []
                                                                                                                                                                    []
                                                                                                                                                                    SC
                                                                                                                                                                    "Challenge";
                                                                                                                                                                  Ty.associated_in_trait
                                                                                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                                    []
                                                                                                                                                                    []
                                                                                                                                                                    SC
                                                                                                                                                                    "Challenger"
                                                                                                                                                                ]
                                                                                                                                                                (Ty.associated_in_trait
                                                                                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                                  []
                                                                                                                                                                  []
                                                                                                                                                                  SC
                                                                                                                                                                  "Pcs")
                                                                                                                                                                "Domain")
                                                                                                                                                              "Val"
                                                                                                                                                          ]
                                                                                                                                                      ],
                                                                                                                                                    "unwrap",
                                                                                                                                                    [],
                                                                                                                                                    []
                                                                                                                                                  |),
                                                                                                                                                  [
                                                                                                                                                    M.read (|
                                                                                                                                                      prev_final_memory_root
                                                                                                                                                    |)
                                                                                                                                                  ]
                                                                                                                                                |)
                                                                                                                                              |)
                                                                                                                                            |)
                                                                                                                                          ]
                                                                                                                                        |)
                                                                                                                                      |)) in
                                                                                                                                  let
                                                                                                                                        _ :=
                                                                                                                                    is_constant_or_break_match (|
                                                                                                                                      M.read (|
                                                                                                                                        γ
                                                                                                                                      |),
                                                                                                                                      Value.Bool
                                                                                                                                        true
                                                                                                                                    |) in
                                                                                                                                  M.never_to_any (|
                                                                                                                                    M.read (|
                                                                                                                                      M.return_ (|
                                                                                                                                        Value.StructTuple
                                                                                                                                          "core::result::Result::Err"
                                                                                                                                          []
                                                                                                                                          [
                                                                                                                                            Ty.apply
                                                                                                                                              (Ty.path
                                                                                                                                                "openvm_circuit::arch::vm::VerifiedExecutionPayload")
                                                                                                                                              []
                                                                                                                                              [
                                                                                                                                                Ty.associated_in_trait
                                                                                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                                                                                  []
                                                                                                                                                  []
                                                                                                                                                  (Ty.associated_in_trait
                                                                                                                                                    "p3_commit::pcs::Pcs"
                                                                                                                                                    []
                                                                                                                                                    [
                                                                                                                                                      Ty.associated_in_trait
                                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                        []
                                                                                                                                                        []
                                                                                                                                                        SC
                                                                                                                                                        "Challenge";
                                                                                                                                                      Ty.associated_in_trait
                                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                        []
                                                                                                                                                        []
                                                                                                                                                        SC
                                                                                                                                                        "Challenger"
                                                                                                                                                    ]
                                                                                                                                                    (Ty.associated_in_trait
                                                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                      []
                                                                                                                                                      []
                                                                                                                                                      SC
                                                                                                                                                      "Pcs")
                                                                                                                                                    "Domain")
                                                                                                                                                  "Val"
                                                                                                                                              ];
                                                                                                                                            Ty.path
                                                                                                                                              "openvm_circuit::arch::vm::VmVerificationError"
                                                                                                                                          ]
                                                                                                                                          [
                                                                                                                                            Value.StructTuple
                                                                                                                                              "openvm_circuit::arch::vm::VmVerificationError::InitialMemoryRootMismatch"
                                                                                                                                              []
                                                                                                                                              []
                                                                                                                                              []
                                                                                                                                          ]
                                                                                                                                      |)
                                                                                                                                    |)
                                                                                                                                  |)));
                                                                                                                              fun
                                                                                                                                  γ =>
                                                                                                                                ltac:(M.monadic
                                                                                                                                  (Value.Tuple
                                                                                                                                    []))
                                                                                                                            ]
                                                                                                                          |)));
                                                                                                                      fun
                                                                                                                          γ =>
                                                                                                                        ltac:(M.monadic
                                                                                                                          (M.read (|
                                                                                                                            let~
                                                                                                                                  _ :
                                                                                                                                Ty.tuple
                                                                                                                                  [] :=
                                                                                                                              M.write (|
                                                                                                                                initial_memory_root,
                                                                                                                                Value.StructTuple
                                                                                                                                  "core::option::Option::Some"
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "array")
                                                                                                                                      [
                                                                                                                                        Value.Integer
                                                                                                                                          IntegerKind.Usize
                                                                                                                                          8
                                                                                                                                      ]
                                                                                                                                      [
                                                                                                                                        Ty.associated_in_trait
                                                                                                                                          "p3_commit::domain::PolynomialSpace"
                                                                                                                                          []
                                                                                                                                          []
                                                                                                                                          (Ty.associated_in_trait
                                                                                                                                            "p3_commit::pcs::Pcs"
                                                                                                                                            []
                                                                                                                                            [
                                                                                                                                              Ty.associated_in_trait
                                                                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                SC
                                                                                                                                                "Challenge";
                                                                                                                                              Ty.associated_in_trait
                                                                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                SC
                                                                                                                                                "Challenger"
                                                                                                                                            ]
                                                                                                                                            (Ty.associated_in_trait
                                                                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                              []
                                                                                                                                              []
                                                                                                                                              SC
                                                                                                                                              "Pcs")
                                                                                                                                            "Domain")
                                                                                                                                          "Val"
                                                                                                                                      ]
                                                                                                                                  ]
                                                                                                                                  [
                                                                                                                                    M.read (|
                                                                                                                                      M.SubPointer.get_struct_record_field (|
                                                                                                                                        M.deref (|
                                                                                                                                          M.read (|
                                                                                                                                            pvs
                                                                                                                                          |)
                                                                                                                                        |),
                                                                                                                                        "openvm_circuit::system::memory::merkle::columns::MemoryMerklePvs",
                                                                                                                                        "initial_root"
                                                                                                                                      |)
                                                                                                                                    |)
                                                                                                                                  ]
                                                                                                                              |) in
                                                                                                                            M.alloc (|
                                                                                                                              Ty.tuple
                                                                                                                                [],
                                                                                                                              Value.Tuple
                                                                                                                                []
                                                                                                                            |)
                                                                                                                          |)))
                                                                                                                    ]
                                                                                                                  |) in
                                                                                                                let~
                                                                                                                      _ :
                                                                                                                    Ty.tuple
                                                                                                                      [] :=
                                                                                                                  M.write (|
                                                                                                                    prev_final_memory_root,
                                                                                                                    Value.StructTuple
                                                                                                                      "core::option::Option::Some"
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.apply
                                                                                                                          (Ty.path
                                                                                                                            "array")
                                                                                                                          [
                                                                                                                            Value.Integer
                                                                                                                              IntegerKind.Usize
                                                                                                                              8
                                                                                                                          ]
                                                                                                                          [
                                                                                                                            Ty.associated_in_trait
                                                                                                                              "p3_commit::domain::PolynomialSpace"
                                                                                                                              []
                                                                                                                              []
                                                                                                                              (Ty.associated_in_trait
                                                                                                                                "p3_commit::pcs::Pcs"
                                                                                                                                []
                                                                                                                                [
                                                                                                                                  Ty.associated_in_trait
                                                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    SC
                                                                                                                                    "Challenge";
                                                                                                                                  Ty.associated_in_trait
                                                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                    []
                                                                                                                                    []
                                                                                                                                    SC
                                                                                                                                    "Challenger"
                                                                                                                                ]
                                                                                                                                (Ty.associated_in_trait
                                                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                  []
                                                                                                                                  []
                                                                                                                                  SC
                                                                                                                                  "Pcs")
                                                                                                                                "Domain")
                                                                                                                              "Val"
                                                                                                                          ]
                                                                                                                      ]
                                                                                                                      [
                                                                                                                        M.read (|
                                                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                                                            M.deref (|
                                                                                                                              M.read (|
                                                                                                                                pvs
                                                                                                                              |)
                                                                                                                            |),
                                                                                                                            "openvm_circuit::system::memory::merkle::columns::MemoryMerklePvs",
                                                                                                                            "final_root"
                                                                                                                          |)
                                                                                                                        |)
                                                                                                                      ]
                                                                                                                  |) in
                                                                                                                M.alloc (|
                                                                                                                  Ty.tuple
                                                                                                                    [],
                                                                                                                  Value.Tuple
                                                                                                                    []
                                                                                                                |)
                                                                                                              |)));
                                                                                                          fun
                                                                                                              γ =>
                                                                                                            ltac:(M.monadic
                                                                                                              (M.read (|
                                                                                                                let~
                                                                                                                      _ :
                                                                                                                    Ty.tuple
                                                                                                                      [] :=
                                                                                                                  M.match_operator (|
                                                                                                                    Ty.tuple
                                                                                                                      [],
                                                                                                                    M.alloc (|
                                                                                                                      Ty.tuple
                                                                                                                        [],
                                                                                                                      Value.Tuple
                                                                                                                        []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      fun
                                                                                                                          γ =>
                                                                                                                        ltac:(M.monadic
                                                                                                                          (let
                                                                                                                                γ :=
                                                                                                                            M.use
                                                                                                                              (M.alloc (|
                                                                                                                                Ty.path
                                                                                                                                  "bool",
                                                                                                                                UnOp.not (|
                                                                                                                                  M.call_closure (|
                                                                                                                                    Ty.path
                                                                                                                                      "bool",
                                                                                                                                    M.get_associated_function (|
                                                                                                                                      Ty.apply
                                                                                                                                        (Ty.path
                                                                                                                                          "alloc::vec::Vec")
                                                                                                                                        []
                                                                                                                                        [
                                                                                                                                          Ty.associated_in_trait
                                                                                                                                            "p3_commit::domain::PolynomialSpace"
                                                                                                                                            []
                                                                                                                                            []
                                                                                                                                            (Ty.associated_in_trait
                                                                                                                                              "p3_commit::pcs::Pcs"
                                                                                                                                              []
                                                                                                                                              [
                                                                                                                                                Ty.associated_in_trait
                                                                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                  []
                                                                                                                                                  []
                                                                                                                                                  SC
                                                                                                                                                  "Challenge";
                                                                                                                                                Ty.associated_in_trait
                                                                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                  []
                                                                                                                                                  []
                                                                                                                                                  SC
                                                                                                                                                  "Challenger"
                                                                                                                                              ]
                                                                                                                                              (Ty.associated_in_trait
                                                                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                SC
                                                                                                                                                "Pcs")
                                                                                                                                              "Domain")
                                                                                                                                            "Val";
                                                                                                                                          Ty.path
                                                                                                                                            "alloc::alloc::Global"
                                                                                                                                        ],
                                                                                                                                      "is_empty",
                                                                                                                                      [],
                                                                                                                                      []
                                                                                                                                    |),
                                                                                                                                    [
                                                                                                                                      M.borrow (|
                                                                                                                                        Pointer.Kind.Ref,
                                                                                                                                        M.deref (|
                                                                                                                                          M.read (|
                                                                                                                                            pvs
                                                                                                                                          |)
                                                                                                                                        |)
                                                                                                                                      |)
                                                                                                                                    ]
                                                                                                                                  |)
                                                                                                                                |)
                                                                                                                              |)) in
                                                                                                                          let
                                                                                                                                _ :=
                                                                                                                            is_constant_or_break_match (|
                                                                                                                              M.read (|
                                                                                                                                γ
                                                                                                                              |),
                                                                                                                              Value.Bool
                                                                                                                                true
                                                                                                                            |) in
                                                                                                                          M.never_to_any (|
                                                                                                                            M.read (|
                                                                                                                              M.return_ (|
                                                                                                                                Value.StructTuple
                                                                                                                                  "core::result::Result::Err"
                                                                                                                                  []
                                                                                                                                  [
                                                                                                                                    Ty.apply
                                                                                                                                      (Ty.path
                                                                                                                                        "openvm_circuit::arch::vm::VerifiedExecutionPayload")
                                                                                                                                      []
                                                                                                                                      [
                                                                                                                                        Ty.associated_in_trait
                                                                                                                                          "p3_commit::domain::PolynomialSpace"
                                                                                                                                          []
                                                                                                                                          []
                                                                                                                                          (Ty.associated_in_trait
                                                                                                                                            "p3_commit::pcs::Pcs"
                                                                                                                                            []
                                                                                                                                            [
                                                                                                                                              Ty.associated_in_trait
                                                                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                SC
                                                                                                                                                "Challenge";
                                                                                                                                              Ty.associated_in_trait
                                                                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                []
                                                                                                                                                []
                                                                                                                                                SC
                                                                                                                                                "Challenger"
                                                                                                                                            ]
                                                                                                                                            (Ty.associated_in_trait
                                                                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                              []
                                                                                                                                              []
                                                                                                                                              SC
                                                                                                                                              "Pcs")
                                                                                                                                            "Domain")
                                                                                                                                          "Val"
                                                                                                                                      ];
                                                                                                                                    Ty.path
                                                                                                                                      "openvm_circuit::arch::vm::VmVerificationError"
                                                                                                                                  ]
                                                                                                                                  [
                                                                                                                                    Value.mkStructRecord
                                                                                                                                      "openvm_circuit::arch::vm::VmVerificationError::UnexpectedPvs"
                                                                                                                                      []
                                                                                                                                      []
                                                                                                                                      [
                                                                                                                                        ("expected",
                                                                                                                                          Value.Integer
                                                                                                                                            IntegerKind.Usize
                                                                                                                                            0);
                                                                                                                                        ("actual",
                                                                                                                                          M.call_closure (|
                                                                                                                                            Ty.path
                                                                                                                                              "usize",
                                                                                                                                            M.get_associated_function (|
                                                                                                                                              Ty.apply
                                                                                                                                                (Ty.path
                                                                                                                                                  "alloc::vec::Vec")
                                                                                                                                                []
                                                                                                                                                [
                                                                                                                                                  Ty.associated_in_trait
                                                                                                                                                    "p3_commit::domain::PolynomialSpace"
                                                                                                                                                    []
                                                                                                                                                    []
                                                                                                                                                    (Ty.associated_in_trait
                                                                                                                                                      "p3_commit::pcs::Pcs"
                                                                                                                                                      []
                                                                                                                                                      [
                                                                                                                                                        Ty.associated_in_trait
                                                                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                          []
                                                                                                                                                          []
                                                                                                                                                          SC
                                                                                                                                                          "Challenge";
                                                                                                                                                        Ty.associated_in_trait
                                                                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                          []
                                                                                                                                                          []
                                                                                                                                                          SC
                                                                                                                                                          "Challenger"
                                                                                                                                                      ]
                                                                                                                                                      (Ty.associated_in_trait
                                                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                                                        []
                                                                                                                                                        []
                                                                                                                                                        SC
                                                                                                                                                        "Pcs")
                                                                                                                                                      "Domain")
                                                                                                                                                    "Val";
                                                                                                                                                  Ty.path
                                                                                                                                                    "alloc::alloc::Global"
                                                                                                                                                ],
                                                                                                                                              "len",
                                                                                                                                              [],
                                                                                                                                              []
                                                                                                                                            |),
                                                                                                                                            [
                                                                                                                                              M.borrow (|
                                                                                                                                                Pointer.Kind.Ref,
                                                                                                                                                M.deref (|
                                                                                                                                                  M.read (|
                                                                                                                                                    pvs
                                                                                                                                                  |)
                                                                                                                                                |)
                                                                                                                                              |)
                                                                                                                                            ]
                                                                                                                                          |))
                                                                                                                                      ]
                                                                                                                                  ]
                                                                                                                              |)
                                                                                                                            |)
                                                                                                                          |)));
                                                                                                                      fun
                                                                                                                          γ =>
                                                                                                                        ltac:(M.monadic
                                                                                                                          (Value.Tuple
                                                                                                                            []))
                                                                                                                    ]
                                                                                                                  |) in
                                                                                                                let~
                                                                                                                      _ :
                                                                                                                    Ty.tuple
                                                                                                                      [] :=
                                                                                                                  M.match_operator (|
                                                                                                                    Ty.tuple
                                                                                                                      [],
                                                                                                                    M.alloc (|
                                                                                                                      Ty.tuple
                                                                                                                        [],
                                                                                                                      Value.Tuple
                                                                                                                        []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      fun
                                                                                                                          γ =>
                                                                                                                        ltac:(M.monadic
                                                                                                                          (let
                                                                                                                                γ :=
                                                                                                                            M.use
                                                                                                                              (M.alloc (|
                                                                                                                                Ty.path
                                                                                                                                  "bool",
                                                                                                                                Value.Bool
                                                                                                                                  true
                                                                                                                              |)) in
                                                                                                                          let
                                                                                                                                _ :=
                                                                                                                            is_constant_or_break_match (|
                                                                                                                              M.read (|
                                                                                                                                γ
                                                                                                                              |),
                                                                                                                              Value.Bool
                                                                                                                                true
                                                                                                                            |) in
                                                                                                                          M.read (|
                                                                                                                            let~
                                                                                                                                  _ :
                                                                                                                                Ty.tuple
                                                                                                                                  [] :=
                                                                                                                              M.match_operator (|
                                                                                                                                Ty.tuple
                                                                                                                                  [],
                                                                                                                                M.alloc (|
                                                                                                                                  Ty.tuple
                                                                                                                                    [
                                                                                                                                      Ty.apply
                                                                                                                                        (Ty.path
                                                                                                                                          "&")
                                                                                                                                        []
                                                                                                                                        [
                                                                                                                                          Ty.path
                                                                                                                                            "usize"
                                                                                                                                        ];
                                                                                                                                      Ty.apply
                                                                                                                                        (Ty.path
                                                                                                                                          "&")
                                                                                                                                        []
                                                                                                                                        [
                                                                                                                                          Ty.path
                                                                                                                                            "usize"
                                                                                                                                        ]
                                                                                                                                    ],
                                                                                                                                  Value.Tuple
                                                                                                                                    [
                                                                                                                                      M.borrow (|
                                                                                                                                        Pointer.Kind.Ref,
                                                                                                                                        M.SubPointer.get_struct_record_field (|
                                                                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                                                                            M.deref (|
                                                                                                                                              M.read (|
                                                                                                                                                air_vk
                                                                                                                                              |)
                                                                                                                                            |),
                                                                                                                                            "openvm_stark_backend::keygen::types::StarkVerifyingKey",
                                                                                                                                            "params"
                                                                                                                                          |),
                                                                                                                                          "openvm_stark_backend::keygen::types::StarkVerifyingParams",
                                                                                                                                          "num_public_values"
                                                                                                                                        |)
                                                                                                                                      |);
                                                                                                                                      M.borrow (|
                                                                                                                                        Pointer.Kind.Ref,
                                                                                                                                        M.alloc (|
                                                                                                                                          Ty.path
                                                                                                                                            "usize",
                                                                                                                                          Value.Integer
                                                                                                                                            IntegerKind.Usize
                                                                                                                                            0
                                                                                                                                        |)
                                                                                                                                      |)
                                                                                                                                    ]
                                                                                                                                |),
                                                                                                                                [
                                                                                                                                  fun
                                                                                                                                      γ =>
                                                                                                                                    ltac:(M.monadic
                                                                                                                                      (let
                                                                                                                                            γ0_0 :=
                                                                                                                                        M.SubPointer.get_tuple_field (|
                                                                                                                                          γ,
                                                                                                                                          0
                                                                                                                                        |) in
                                                                                                                                      let
                                                                                                                                            γ0_1 :=
                                                                                                                                        M.SubPointer.get_tuple_field (|
                                                                                                                                          γ,
                                                                                                                                          1
                                                                                                                                        |) in
                                                                                                                                      let
                                                                                                                                            left_val :=
                                                                                                                                        M.copy (|
                                                                                                                                          Ty.apply
                                                                                                                                            (Ty.path
                                                                                                                                              "&")
                                                                                                                                            []
                                                                                                                                            [
                                                                                                                                              Ty.path
                                                                                                                                                "usize"
                                                                                                                                            ],
                                                                                                                                          γ0_0
                                                                                                                                        |) in
                                                                                                                                      let
                                                                                                                                            right_val :=
                                                                                                                                        M.copy (|
                                                                                                                                          Ty.apply
                                                                                                                                            (Ty.path
                                                                                                                                              "&")
                                                                                                                                            []
                                                                                                                                            [
                                                                                                                                              Ty.path
                                                                                                                                                "usize"
                                                                                                                                            ],
                                                                                                                                          γ0_1
                                                                                                                                        |) in
                                                                                                                                      M.match_operator (|
                                                                                                                                        Ty.tuple
                                                                                                                                          [],
                                                                                                                                        M.alloc (|
                                                                                                                                          Ty.tuple
                                                                                                                                            [],
                                                                                                                                          Value.Tuple
                                                                                                                                            []
                                                                                                                                        |),
                                                                                                                                        [
                                                                                                                                          fun
                                                                                                                                              γ =>
                                                                                                                                            ltac:(M.monadic
                                                                                                                                              (let
                                                                                                                                                    γ :=
                                                                                                                                                M.use
                                                                                                                                                  (M.alloc (|
                                                                                                                                                    Ty.path
                                                                                                                                                      "bool",
                                                                                                                                                    UnOp.not (|
                                                                                                                                                      M.call_closure (|
                                                                                                                                                        Ty.path
                                                                                                                                                          "bool",
                                                                                                                                                        BinOp.eq,
                                                                                                                                                        [
                                                                                                                                                          M.read (|
                                                                                                                                                            M.deref (|
                                                                                                                                                              M.read (|
                                                                                                                                                                left_val
                                                                                                                                                              |)
                                                                                                                                                            |)
                                                                                                                                                          |);
                                                                                                                                                          M.read (|
                                                                                                                                                            M.deref (|
                                                                                                                                                              M.read (|
                                                                                                                                                                right_val
                                                                                                                                                              |)
                                                                                                                                                            |)
                                                                                                                                                          |)
                                                                                                                                                        ]
                                                                                                                                                      |)
                                                                                                                                                    |)
                                                                                                                                                  |)) in
                                                                                                                                              let
                                                                                                                                                    _ :=
                                                                                                                                                is_constant_or_break_match (|
                                                                                                                                                  M.read (|
                                                                                                                                                    γ
                                                                                                                                                  |),
                                                                                                                                                  Value.Bool
                                                                                                                                                    true
                                                                                                                                                |) in
                                                                                                                                              M.never_to_any (|
                                                                                                                                                M.read (|
                                                                                                                                                  let~
                                                                                                                                                        kind :
                                                                                                                                                      Ty.path
                                                                                                                                                        "core::panicking::AssertKind" :=
                                                                                                                                                    Value.StructTuple
                                                                                                                                                      "core::panicking::AssertKind::Eq"
                                                                                                                                                      []
                                                                                                                                                      []
                                                                                                                                                      [] in
                                                                                                                                                  M.alloc (|
                                                                                                                                                    Ty.path
                                                                                                                                                      "never",
                                                                                                                                                    M.call_closure (|
                                                                                                                                                      Ty.path
                                                                                                                                                        "never",
                                                                                                                                                      M.get_function (|
                                                                                                                                                        "core::panicking::assert_failed",
                                                                                                                                                        [],
                                                                                                                                                        [
                                                                                                                                                          Ty.path
                                                                                                                                                            "usize";
                                                                                                                                                          Ty.path
                                                                                                                                                            "usize"
                                                                                                                                                        ]
                                                                                                                                                      |),
                                                                                                                                                      [
                                                                                                                                                        M.read (|
                                                                                                                                                          kind
                                                                                                                                                        |);
                                                                                                                                                        M.borrow (|
                                                                                                                                                          Pointer.Kind.Ref,
                                                                                                                                                          M.deref (|
                                                                                                                                                            M.borrow (|
                                                                                                                                                              Pointer.Kind.Ref,
                                                                                                                                                              M.deref (|
                                                                                                                                                                M.read (|
                                                                                                                                                                  left_val
                                                                                                                                                                |)
                                                                                                                                                              |)
                                                                                                                                                            |)
                                                                                                                                                          |)
                                                                                                                                                        |);
                                                                                                                                                        M.borrow (|
                                                                                                                                                          Pointer.Kind.Ref,
                                                                                                                                                          M.deref (|
                                                                                                                                                            M.borrow (|
                                                                                                                                                              Pointer.Kind.Ref,
                                                                                                                                                              M.deref (|
                                                                                                                                                                M.read (|
                                                                                                                                                                  right_val
                                                                                                                                                                |)
                                                                                                                                                              |)
                                                                                                                                                            |)
                                                                                                                                                          |)
                                                                                                                                                        |);
                                                                                                                                                        Value.StructTuple
                                                                                                                                                          "core::option::Option::None"
                                                                                                                                                          []
                                                                                                                                                          [
                                                                                                                                                            Ty.path
                                                                                                                                                              "core::fmt::Arguments"
                                                                                                                                                          ]
                                                                                                                                                          []
                                                                                                                                                      ]
                                                                                                                                                    |)
                                                                                                                                                  |)
                                                                                                                                                |)
                                                                                                                                              |)));
                                                                                                                                          fun
                                                                                                                                              γ =>
                                                                                                                                            ltac:(M.monadic
                                                                                                                                              (Value.Tuple
                                                                                                                                                []))
                                                                                                                                        ]
                                                                                                                                      |)))
                                                                                                                                ]
                                                                                                                              |) in
                                                                                                                            M.alloc (|
                                                                                                                              Ty.tuple
                                                                                                                                [],
                                                                                                                              Value.Tuple
                                                                                                                                []
                                                                                                                            |)
                                                                                                                          |)));
                                                                                                                      fun
                                                                                                                          γ =>
                                                                                                                        ltac:(M.monadic
                                                                                                                          (Value.Tuple
                                                                                                                            []))
                                                                                                                    ]
                                                                                                                  |) in
                                                                                                                M.alloc (|
                                                                                                                  Ty.tuple
                                                                                                                    [],
                                                                                                                  Value.Tuple
                                                                                                                    []
                                                                                                                |)
                                                                                                              |)))
                                                                                                        ]
                                                                                                      |)))
                                                                                                ]
                                                                                              |)))
                                                                                        ]
                                                                                      |)
                                                                                    |)
                                                                                  |)))
                                                                            ]
                                                                          |) in
                                                                        M.alloc (|
                                                                          Ty.tuple [],
                                                                          Value.Tuple []
                                                                        |)))
                                                                    |)
                                                                  |)))
                                                            ]
                                                          |)
                                                        |))
                                                    |) in
                                                  let~ _ : Ty.tuple [] :=
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  Ty.path "bool",
                                                                  UnOp.not (|
                                                                    M.read (| program_air_present |)
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  Value.StructTuple
                                                                    "core::result::Result::Err"
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_circuit::arch::vm::VerifiedExecutionPayload")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_commit::domain::PolynomialSpace"
                                                                            []
                                                                            []
                                                                            (Ty.associated_in_trait
                                                                              "p3_commit::pcs::Pcs"
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenge";
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenger"
                                                                              ]
                                                                              (Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Pcs")
                                                                              "Domain")
                                                                            "Val"
                                                                        ];
                                                                      Ty.path
                                                                        "openvm_circuit::arch::vm::VmVerificationError"
                                                                    ]
                                                                    [
                                                                      Value.mkStructRecord
                                                                        "openvm_circuit::arch::vm::VmVerificationError::SystemAirMissing"
                                                                        []
                                                                        []
                                                                        [
                                                                          ("air_id",
                                                                            M.read (|
                                                                              get_constant (|
                                                                                "openvm_circuit::arch::extensions::PROGRAM_AIR_ID",
                                                                                Ty.path "usize"
                                                                              |)
                                                                            |))
                                                                        ]
                                                                    ]
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                                      ]
                                                    |) in
                                                  let~ _ : Ty.tuple [] :=
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  Ty.path "bool",
                                                                  UnOp.not (|
                                                                    M.read (|
                                                                      connector_air_present
                                                                    |)
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  Value.StructTuple
                                                                    "core::result::Result::Err"
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_circuit::arch::vm::VerifiedExecutionPayload")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_commit::domain::PolynomialSpace"
                                                                            []
                                                                            []
                                                                            (Ty.associated_in_trait
                                                                              "p3_commit::pcs::Pcs"
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenge";
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenger"
                                                                              ]
                                                                              (Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Pcs")
                                                                              "Domain")
                                                                            "Val"
                                                                        ];
                                                                      Ty.path
                                                                        "openvm_circuit::arch::vm::VmVerificationError"
                                                                    ]
                                                                    [
                                                                      Value.mkStructRecord
                                                                        "openvm_circuit::arch::vm::VmVerificationError::SystemAirMissing"
                                                                        []
                                                                        []
                                                                        [
                                                                          ("air_id",
                                                                            M.read (|
                                                                              get_constant (|
                                                                                "openvm_circuit::arch::extensions::CONNECTOR_AIR_ID",
                                                                                Ty.path "usize"
                                                                              |)
                                                                            |))
                                                                        ]
                                                                    ]
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                                      ]
                                                    |) in
                                                  M.alloc (|
                                                    Ty.tuple [],
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  Ty.path "bool",
                                                                  UnOp.not (|
                                                                    M.read (| merkle_air_present |)
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.never_to_any (|
                                                              M.read (|
                                                                M.return_ (|
                                                                  Value.StructTuple
                                                                    "core::result::Result::Err"
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_circuit::arch::vm::VerifiedExecutionPayload")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_commit::domain::PolynomialSpace"
                                                                            []
                                                                            []
                                                                            (Ty.associated_in_trait
                                                                              "p3_commit::pcs::Pcs"
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenge";
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenger"
                                                                              ]
                                                                              (Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Pcs")
                                                                              "Domain")
                                                                            "Val"
                                                                        ];
                                                                      Ty.path
                                                                        "openvm_circuit::arch::vm::VmVerificationError"
                                                                    ]
                                                                    [
                                                                      Value.mkStructRecord
                                                                        "openvm_circuit::arch::vm::VmVerificationError::SystemAirMissing"
                                                                        []
                                                                        []
                                                                        [
                                                                          ("air_id",
                                                                            M.read (|
                                                                              get_constant (|
                                                                                "openvm_circuit::arch::extensions::MERKLE_AIR_ID",
                                                                                Ty.path "usize"
                                                                              |)
                                                                            |))
                                                                        ]
                                                                    ]
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                                      ]
                                                    |)
                                                  |)
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                  |)
                                |)))
                          ]
                        |)
                      |))
                  |) in
                let~ exe_commit :
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 8 ]
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val"
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 8 ]
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val"
                      ],
                    M.get_function (|
                      "openvm_circuit::system::program::trace::compute_exe_commit",
                      [],
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val"
                      ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::hasher::poseidon2::Poseidon2Hasher")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val"
                                ],
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::arch::hasher::poseidon2::Poseidon2Hasher")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val"
                                  ],
                                M.get_function (|
                                  "openvm_circuit::arch::hasher::poseidon2::vm_poseidon2_hasher",
                                  [],
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val"
                                  ]
                                |),
                                []
                              |)
                            |)
                          |)
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val"
                                  ]
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 8 ]
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val"
                                        ]
                                    ]
                                ],
                              "unwrap",
                              [],
                              []
                            |),
                            [ M.read (| program_commit |) ]
                          |)
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val"
                                  ]
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 8 ]
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val"
                                        ]
                                    ]
                                ],
                              "unwrap",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val"
                                          ]
                                      ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 8 ]
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val"
                                        ]
                                    ],
                                  "as_ref",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, initial_memory_root |) ]
                              |)
                            ]
                          |)
                        |)
                      |);
                      M.call_closure (|
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.associated_in_trait
                                "p3_commit::domain::PolynomialSpace"
                                []
                                []
                                (Ty.associated_in_trait
                                  "p3_commit::pcs::Pcs"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Pcs")
                                  "Domain")
                                "Val"
                            ],
                          "unwrap",
                          [],
                          []
                        |),
                        [ M.read (| start_pc |) ]
                      |)
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::vm::VerifiedExecutionPayload")
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val"
                        ];
                      Ty.path "openvm_circuit::arch::vm::VmVerificationError"
                    ],
                  Value.StructTuple
                    "core::result::Result::Ok"
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::vm::VerifiedExecutionPayload")
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val"
                        ];
                      Ty.path "openvm_circuit::arch::vm::VmVerificationError"
                    ]
                    [
                      Value.mkStructRecord
                        "openvm_circuit::arch::vm::VerifiedExecutionPayload"
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val"
                        ]
                        [
                          ("exe_commit", M.read (| exe_commit |));
                          ("final_memory_root",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 8 ]
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 8 ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val"
                                      ]
                                  ],
                                "unwrap",
                                [],
                                []
                              |),
                              [ M.read (| prev_final_memory_root |) ]
                            |))
                        ]
                    ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_verify_segments :
      M.IsFunction.C "openvm_circuit::arch::vm::verify_segments" verify_segments.
    Admitted.
    Global Typeclasses Opaque verify_segments.
    
    (* StructRecord
      {
        name := "ContinuationVmProof";
        const_params := [];
        ty_params := [ "SC" ];
        fields :=
          [
            ("per_segment",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [
                  Ty.apply (Ty.path "openvm_stark_backend::proof::Proof") [] [ SC ];
                  Ty.path "alloc::alloc::Global"
                ]);
            ("user_public_values",
              Ty.apply
                (Ty.path
                  "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof")
                [
                  M.unevaluated_const
                    (mk_str (|
                      "openvm_circuit_arch_vm_ContinuationVmProof_user_public_values_discriminant"
                    |))
                ]
                [
                  Ty.associated_in_trait
                    "p3_commit::domain::PolynomialSpace"
                    []
                    []
                    (Ty.associated_in_trait
                      "p3_commit::pcs::Pcs"
                      []
                      [
                        Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenge";
                        Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Challenger"
                      ]
                      (Ty.associated_in_trait
                        "openvm_stark_backend::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Pcs")
                      "Domain")
                    "Val"
                ])
          ];
      } *)
    
    Module underscore.
      Module Impl_serde_ser_Serialize_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_serde_ser_Serialize_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Commitment_for_openvm_circuit_arch_vm_ContinuationVmProof_SC.
        Definition Self (SC : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "openvm_circuit::arch::vm::ContinuationVmProof") [] [ SC ].
        
        (* Serialize *)
        Definition serialize
            (SC : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self SC in
          match ε, τ, α with
          | [], [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.apply (Ty.path "openvm_circuit::arch::vm::ContinuationVmProof") [] [ SC ]
                    ],
                  self
                |) in
              let __serializer := M.alloc (| __S, __serializer |) in
              M.catch_return
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                  ]) (|
                ltac:(M.monadic
                  (M.read (|
                    let~ __serde_state :
                        Ty.associated_in_trait
                          "serde::ser::Serializer"
                          []
                          []
                          __S
                          "SerializeStruct" :=
                      M.match_operator (|
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  [],
                                  "serialize_struct",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  mk_str (| "ContinuationVmProof" |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.add,
                                        [
                                          M.cast (Ty.path "usize") (Value.Bool false);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val :=
                                M.copy (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  γ0_0
                                |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "openvm_stark_backend::proof::Proof")
                                          []
                                          [ SC ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "per_segment" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::arch::vm::ContinuationVmProof",
                                          "per_segment"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof")
                                      [ Value.Integer IntegerKind.Usize 8 ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val"
                                      ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "user_public_values" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::arch::vm::ContinuationVmProof",
                                          "user_public_values"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.get_trait_method (|
                          "serde::ser::SerializeStruct",
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          [],
                          [],
                          "end",
                          [],
                          []
                        |),
                        [ M.read (| __serde_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (SC : Ty.t),
          M.IsTraitInstance
            "serde::ser::Serialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self SC)
            (* Instance *) [ ("serialize", InstanceField.Method (serialize SC)) ].
      End Impl_serde_ser_Serialize_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_serde_ser_Serialize_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Commitment_for_openvm_circuit_arch_vm_ContinuationVmProof_SC.
      Module Impl_serde_de_Deserialize_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_serde_de_Deserialize_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Commitment_for_openvm_circuit_arch_vm_ContinuationVmProof_SC.
        Definition Self (SC : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "openvm_circuit::arch::vm::ContinuationVmProof") [] [ SC ].
        
        (* Deserialize *)
        Definition deserialize
            (SC : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self SC in
          match ε, τ, α with
          | [], [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __D, __deserializer |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.apply (Ty.path "openvm_circuit::arch::vm::ContinuationVmProof") [] [ SC ];
                    Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                  ],
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  [],
                  "deserialize_struct",
                  [],
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::vm::_'1::deserialize::__Visitor")
                      []
                      [ SC ]
                  ]
                |),
                [
                  M.read (| __deserializer |);
                  mk_str (| "ContinuationVmProof" |);
                  M.read (|
                    get_constant (|
                      "openvm_circuit::arch::vm::_'1::deserialize::FIELDS",
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ]
                    |)
                  |);
                  Value.mkStructRecord
                    "openvm_circuit::arch::vm::_'1::deserialize::__Visitor"
                    []
                    [ SC ]
                    [
                      ("marker",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::arch::vm::ContinuationVmProof")
                              []
                              [ SC ]
                          ]
                          []);
                      ("lifetime",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                          [])
                    ]
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (SC : Ty.t),
          M.IsTraitInstance
            "serde::de::Deserialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self SC)
            (* Instance *) [ ("deserialize", InstanceField.Method (deserialize SC)) ].
      End Impl_serde_de_Deserialize_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_serde_de_Deserialize_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Commitment_for_openvm_circuit_arch_vm_ContinuationVmProof_SC.
    End underscore.
    
    
    Module Impl_core_clone_Clone_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_core_clone_Clone_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Commitment_for_openvm_circuit_arch_vm_ContinuationVmProof_SC.
      Definition Self (SC : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::arch::vm::ContinuationVmProof") [] [ SC ].
      
      (*
          fn clone(&self) -> Self {
              Self {
                  per_segment: self.per_segment.clone(),
                  user_public_values: self.user_public_values.clone(),
              }
          }
      *)
      Definition clone (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self SC in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::arch::vm::ContinuationVmProof") [] [ SC ] ],
                self
              |) in
            Value.mkStructRecord
              "openvm_circuit::arch::vm::ContinuationVmProof"
              []
              [ SC ]
              [
                ("per_segment",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply (Ty.path "openvm_stark_backend::proof::Proof") [] [ SC ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply (Ty.path "openvm_stark_backend::proof::Proof") [] [ SC ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::arch::vm::ContinuationVmProof",
                          "per_segment"
                        |)
                      |)
                    ]
                  |));
                ("user_public_values",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof")
                      [ Value.Integer IntegerKind.Usize 8 ]
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val"
                      ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val"
                        ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::arch::vm::ContinuationVmProof",
                          "user_public_values"
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (SC : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self SC)
          (* Instance *) [ ("clone", InstanceField.Method (clone SC)) ].
    End Impl_core_clone_Clone_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_core_clone_Clone_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Commitment_for_openvm_circuit_arch_vm_ContinuationVmProof_SC.
  End vm.
End arch.
