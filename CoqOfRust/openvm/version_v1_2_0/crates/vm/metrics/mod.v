(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module metrics.
  (* StructRecord
    {
      name := "VmMetrics";
      const_params := [];
      ty_params := [];
      fields :=
        [
          ("cycle_count", Ty.path "usize");
          ("chip_heights",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [
                Ty.tuple [ Ty.path "alloc::string::String"; Ty.path "usize" ];
                Ty.path "alloc::alloc::Global"
              ]);
          ("counts",
            Ty.apply
              (Ty.path "alloc::collections::btree::map::BTreeMap")
              []
              [
                Ty.tuple
                  [
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.path "alloc::string::String" ];
                    Ty.path "alloc::string::String"
                  ];
                Ty.path "usize";
                Ty.path "alloc::alloc::Global"
              ]);
          ("trace_cells",
            Ty.apply
              (Ty.path "alloc::collections::btree::map::BTreeMap")
              []
              [
                Ty.tuple
                  [
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.path "alloc::string::String" ];
                    Ty.path "alloc::string::String";
                    Ty.path "alloc::string::String"
                  ];
                Ty.path "usize";
                Ty.path "alloc::alloc::Global"
              ]);
          ("cycle_tracker", Ty.path "openvm_circuit::metrics::cycle_tracker::CycleTracker");
          ("fn_bounds",
            Ty.apply
              (Ty.path "alloc::collections::btree::map::BTreeMap")
              []
              [
                Ty.path "u32";
                Ty.path "openvm_instructions::exe::FnBound";
                Ty.path "alloc::alloc::Global"
              ]);
          ("current_fn", Ty.path "openvm_instructions::exe::FnBound");
          ("current_trace_cells",
            Ty.apply
              (Ty.path "alloc::vec::Vec")
              []
              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ])
        ];
    } *)
  
  Module Impl_core_clone_Clone_for_openvm_circuit_metrics_VmMetrics.
    Definition Self : Ty.t := Ty.path "openvm_circuit::metrics::VmMetrics".
    
    (* Clone *)
    Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "openvm_circuit::metrics::VmMetrics" ],
              self
            |) in
          Value.mkStructRecord
            "openvm_circuit::metrics::VmMetrics"
            []
            []
            [
              ("cycle_count",
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "usize",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::metrics::VmMetrics",
                            "cycle_count"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("chip_heights",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.tuple [ Ty.path "alloc::string::String"; Ty.path "usize" ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.tuple [ Ty.path "alloc::string::String"; Ty.path "usize" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::metrics::VmMetrics",
                            "chip_heights"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("counts",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                    []
                    [
                      Ty.tuple
                        [
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.path "alloc::string::String" ];
                          Ty.path "alloc::string::String"
                        ];
                      Ty.path "usize";
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                      []
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.path "alloc::string::String" ];
                            Ty.path "alloc::string::String"
                          ];
                        Ty.path "usize";
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::metrics::VmMetrics",
                            "counts"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("trace_cells",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                    []
                    [
                      Ty.tuple
                        [
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.path "alloc::string::String" ];
                          Ty.path "alloc::string::String";
                          Ty.path "alloc::string::String"
                        ];
                      Ty.path "usize";
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                      []
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.path "alloc::string::String" ];
                            Ty.path "alloc::string::String";
                            Ty.path "alloc::string::String"
                          ];
                        Ty.path "usize";
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::metrics::VmMetrics",
                            "trace_cells"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("cycle_tracker",
                M.call_closure (|
                  Ty.path "openvm_circuit::metrics::cycle_tracker::CycleTracker",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "openvm_circuit::metrics::cycle_tracker::CycleTracker",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::metrics::VmMetrics",
                            "cycle_tracker"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("fn_bounds",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                    []
                    [
                      Ty.path "u32";
                      Ty.path "openvm_instructions::exe::FnBound";
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                      []
                      [
                        Ty.path "u32";
                        Ty.path "openvm_instructions::exe::FnBound";
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::metrics::VmMetrics",
                            "fn_bounds"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("current_fn",
                M.call_closure (|
                  Ty.path "openvm_instructions::exe::FnBound",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.path "openvm_instructions::exe::FnBound",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::metrics::VmMetrics",
                            "current_fn"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("current_trace_cells",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::metrics::VmMetrics",
                            "current_trace_cells"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::clone::Clone"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("clone", InstanceField.Method clone) ].
  End Impl_core_clone_Clone_for_openvm_circuit_metrics_VmMetrics.
  
  Module Impl_core_fmt_Debug_for_openvm_circuit_metrics_VmMetrics.
    Definition Self : Ty.t := Ty.path "openvm_circuit::metrics::VmMetrics".
    
    (* Debug *)
    Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; f ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "openvm_circuit::metrics::VmMetrics" ],
              self
            |) in
          let f :=
            M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
          M.read (|
            let~ names :
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 8 ]
                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                  ] :=
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.alloc (|
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                      Value.Array
                        [
                          mk_str (| "cycle_count" |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "chip_heights" |) |)
                          |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "counts" |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "trace_cells" |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "cycle_tracker" |) |)
                          |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "fn_bounds" |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "current_fn" |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "current_trace_cells" |) |)
                          |)
                        ]
                    |)
                  |)
                |)
              |) in
            let~ values :
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                  ] :=
              M.call_closure (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                  ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 8 ]
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                    ])
                  (Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                    ]),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                            ],
                          Value.Array
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                M.pointer_coercion
                                  M.PointerCoercion.Unsize
                                  (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::metrics::VmMetrics",
                                          "cycle_count"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                M.pointer_coercion
                                  M.PointerCoercion.Unsize
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.tuple
                                            [ Ty.path "alloc::string::String"; Ty.path "usize" ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ])
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::metrics::VmMetrics",
                                          "chip_heights"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                M.pointer_coercion
                                  M.PointerCoercion.Unsize
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                                        []
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.path "alloc::string::String" ];
                                              Ty.path "alloc::string::String"
                                            ];
                                          Ty.path "usize";
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ])
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::metrics::VmMetrics",
                                          "counts"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                M.pointer_coercion
                                  M.PointerCoercion.Unsize
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                                        []
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.path "alloc::string::String" ];
                                              Ty.path "alloc::string::String";
                                              Ty.path "alloc::string::String"
                                            ];
                                          Ty.path "usize";
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ])
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::metrics::VmMetrics",
                                          "trace_cells"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                M.pointer_coercion
                                  M.PointerCoercion.Unsize
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.path "openvm_circuit::metrics::cycle_tracker::CycleTracker"
                                    ])
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::metrics::VmMetrics",
                                          "cycle_tracker"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                M.pointer_coercion
                                  M.PointerCoercion.Unsize
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                                        []
                                        [
                                          Ty.path "u32";
                                          Ty.path "openvm_instructions::exe::FnBound";
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ])
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::metrics::VmMetrics",
                                          "fn_bounds"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                M.pointer_coercion
                                  M.PointerCoercion.Unsize
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.path "openvm_instructions::exe::FnBound" ])
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::metrics::VmMetrics",
                                          "current_fn"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                M.pointer_coercion
                                  M.PointerCoercion.Unsize
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                        ]
                                    ])
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                            ],
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::metrics::VmMetrics",
                                              "current_trace_cells"
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                        |)
                      |)
                    |)
                  |)
                ]
              |) in
            M.alloc (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_fields_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "VmMetrics" |) |) |);
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                      ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ])
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ]),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| names |) |) |) ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| values |) |) |)
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::fmt::Debug"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
  End Impl_core_fmt_Debug_for_openvm_circuit_metrics_VmMetrics.
  
  Module Impl_core_default_Default_for_openvm_circuit_metrics_VmMetrics.
    Definition Self : Ty.t := Ty.path "openvm_circuit::metrics::VmMetrics".
    
    (* Default *)
    Definition default (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [] =>
        ltac:(M.monadic
          (Value.mkStructRecord
            "openvm_circuit::metrics::VmMetrics"
            []
            []
            [
              ("cycle_count",
                M.call_closure (|
                  Ty.path "usize",
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "usize",
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |));
              ("chip_heights",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.tuple [ Ty.path "alloc::string::String"; Ty.path "usize" ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.tuple [ Ty.path "alloc::string::String"; Ty.path "usize" ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |));
              ("counts",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                    []
                    [
                      Ty.tuple
                        [
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.path "alloc::string::String" ];
                          Ty.path "alloc::string::String"
                        ];
                      Ty.path "usize";
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                      []
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.path "alloc::string::String" ];
                            Ty.path "alloc::string::String"
                          ];
                        Ty.path "usize";
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |));
              ("trace_cells",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                    []
                    [
                      Ty.tuple
                        [
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.path "alloc::string::String" ];
                          Ty.path "alloc::string::String";
                          Ty.path "alloc::string::String"
                        ];
                      Ty.path "usize";
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                      []
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.path "alloc::string::String" ];
                            Ty.path "alloc::string::String";
                            Ty.path "alloc::string::String"
                          ];
                        Ty.path "usize";
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |));
              ("cycle_tracker",
                M.call_closure (|
                  Ty.path "openvm_circuit::metrics::cycle_tracker::CycleTracker",
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "openvm_circuit::metrics::cycle_tracker::CycleTracker",
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |));
              ("fn_bounds",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                    []
                    [
                      Ty.path "u32";
                      Ty.path "openvm_instructions::exe::FnBound";
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                      []
                      [
                        Ty.path "u32";
                        Ty.path "openvm_instructions::exe::FnBound";
                        Ty.path "alloc::alloc::Global"
                      ],
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |));
              ("current_fn",
                M.call_closure (|
                  Ty.path "openvm_instructions::exe::FnBound",
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.path "openvm_instructions::exe::FnBound",
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |));
              ("current_trace_cells",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                  M.get_trait_method (|
                    "core::default::Default",
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                    [],
                    [],
                    "default",
                    [],
                    []
                  |),
                  []
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Axiom Implements :
      M.IsTraitInstance
        "core::default::Default"
        (* Trait polymorphic consts *) []
        (* Trait polymorphic types *) []
        Self
        (* Instance *) [ ("default", InstanceField.Method default) ].
  End Impl_core_default_Default_for_openvm_circuit_metrics_VmMetrics.
  
  Module Impl_openvm_circuit_arch_segment_ExecutionSegment_F_VC.
    Definition Self (F VC : Ty.t) : Ty.t :=
      Ty.apply (Ty.path "openvm_circuit::arch::segment::ExecutionSegment") [] [ F; VC ].
    
    (*
        pub fn update_instruction_metrics(
            &mut self,
            pc: u32,
            opcode: VmOpcode,
            dsl_instr: Option<String>,
        ) {
            self.metrics.cycle_count += 1;
    
            if self.system_config().profiling {
                let executor = self.chip_complex.inventory.get_executor(opcode).unwrap();
                let opcode_name = executor.get_opcode_name(opcode.as_usize());
                self.metrics.update_trace_cells(
                    &self.air_names,
                    self.current_trace_cells(),
                    opcode_name,
                    dsl_instr,
                );
    
                #[cfg(feature = "function-span")]
                self.metrics.update_current_fn(pc);
            }
        }
    *)
    Definition update_instruction_metrics
        (F VC : Ty.t)
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      let Self : Ty.t := Self F VC in
      match ε, τ, α with
      | [], [], [ self; pc; opcode; dsl_instr ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply
                (Ty.path "&mut")
                []
                [ Ty.apply (Ty.path "openvm_circuit::arch::segment::ExecutionSegment") [] [ F; VC ]
                ],
              self
            |) in
          let pc := M.alloc (| Ty.path "u32", pc |) in
          let opcode := M.alloc (| Ty.path "openvm_instructions::VmOpcode", opcode |) in
          let dsl_instr :=
            M.alloc (|
              Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "alloc::string::String" ],
              dsl_instr
            |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              let β :=
                M.SubPointer.get_struct_record_field (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::arch::segment::ExecutionSegment",
                    "metrics"
                  |),
                  "openvm_circuit::metrics::VmMetrics",
                  "cycle_count"
                |) in
              M.write (|
                β,
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.add,
                  [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                |)
              |) in
            M.alloc (|
              Ty.tuple [],
              M.match_operator (|
                Ty.tuple [],
                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.SubPointer.get_struct_record_field (|
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.path "openvm_circuit::arch::config::SystemConfig" ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                                    []
                                    [ F; VC ],
                                  "system_config",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                              |)
                            |),
                            "openvm_circuit::arch::config::SystemConfig",
                            "profiling"
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.read (|
                        let~ executor :
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_circuit::arch::config::VmConfig"
                                  []
                                  [ F ]
                                  VC
                                  "Executor"
                              ] :=
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_circuit::arch::config::VmConfig"
                                  []
                                  [ F ]
                                  VC
                                  "Executor"
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_circuit::arch::config::VmConfig"
                                        []
                                        [ F ]
                                        VC
                                        "Executor"
                                    ]
                                ],
                              "unwrap",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_circuit::arch::config::VmConfig"
                                          []
                                          [ F ]
                                          VC
                                          "Executor"
                                      ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::extensions::VmInventory")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_circuit::arch::config::VmConfig"
                                        []
                                        [ F ]
                                        VC
                                        "Executor";
                                      Ty.associated_in_trait
                                        "openvm_circuit::arch::config::VmConfig"
                                        []
                                        [ F ]
                                        VC
                                        "Periphery"
                                    ],
                                  "get_executor",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_circuit::arch::segment::ExecutionSegment",
                                        "chip_complex"
                                      |),
                                      "openvm_circuit::arch::extensions::VmChipComplex",
                                      "inventory"
                                    |)
                                  |);
                                  M.read (| opcode |)
                                ]
                              |)
                            ]
                          |) in
                        let~ opcode_name : Ty.path "alloc::string::String" :=
                          M.call_closure (|
                            Ty.path "alloc::string::String",
                            M.get_trait_method (|
                              "openvm_circuit::arch::execution::InstructionExecutor",
                              Ty.associated_in_trait
                                "openvm_circuit::arch::config::VmConfig"
                                []
                                [ F ]
                                VC
                                "Executor",
                              [],
                              [ F ],
                              "get_opcode_name",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| executor |) |) |);
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_associated_function (|
                                  Ty.path "openvm_instructions::VmOpcode",
                                  "as_usize",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, opcode |) ]
                              |)
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_associated_function (|
                              Ty.path "openvm_circuit::metrics::VmMetrics",
                              "update_trace_cells",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::arch::segment::ExecutionSegment",
                                  "metrics"
                                |)
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [ Ty.path "alloc::string::String" ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.path "alloc::string::String";
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::arch::segment::ExecutionSegment",
                                              "air_names"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::arch::segment::ExecutionSegment")
                                    []
                                    [ F; VC ],
                                  "current_trace_cells",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                              |);
                              M.read (| opcode_name |);
                              M.read (| dsl_instr |)
                            ]
                          |) in
                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                      |)));
                  fun γ => ltac:(M.monadic (Value.Tuple []))
                ]
              |)
            |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_update_instruction_metrics :
      forall (F VC : Ty.t),
      M.IsAssociatedFunction.C
        (Self F VC)
        "update_instruction_metrics"
        (update_instruction_metrics F VC).
    Admitted.
    Global Typeclasses Opaque update_instruction_metrics.
  End Impl_openvm_circuit_arch_segment_ExecutionSegment_F_VC.
  
  Module Impl_openvm_circuit_metrics_VmMetrics.
    Definition Self : Ty.t := Ty.path "openvm_circuit::metrics::VmMetrics".
    
    (*
        fn update_trace_cells(
            &mut self,
            air_names: &[String],
            now_trace_cells: Vec<usize>,
            opcode_name: String,
            dsl_instr: Option<String>,
        ) {
            let key = (dsl_instr, opcode_name);
            self.cycle_tracker.increment_opcode(&key);
            *self.counts.entry(key.clone()).or_insert(0) += 1;
    
            for (air_name, now_value, prev_value) in
                itertools::izip!(air_names, &now_trace_cells, &self.current_trace_cells)
            {
                if prev_value != now_value {
                    let key = (key.0.clone(), key.1.clone(), air_name.to_owned());
                    self.cycle_tracker
                        .increment_cells_used(&key, now_value - prev_value);
                    *self.trace_cells.entry(key).or_insert(0) += now_value - prev_value;
                }
            }
            self.current_trace_cells = now_trace_cells;
        }
    *)
    Definition update_trace_cells (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self; air_names; now_trace_cells; opcode_name; dsl_instr ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&mut") [] [ Ty.path "openvm_circuit::metrics::VmMetrics" ],
              self
            |) in
          let air_names :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "slice") [] [ Ty.path "alloc::string::String" ] ],
              air_names
            |) in
          let now_trace_cells :=
            M.alloc (|
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
              now_trace_cells
            |) in
          let opcode_name := M.alloc (| Ty.path "alloc::string::String", opcode_name |) in
          let dsl_instr :=
            M.alloc (|
              Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "alloc::string::String" ],
              dsl_instr
            |) in
          M.read (|
            let~ key :
                Ty.tuple
                  [
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.path "alloc::string::String" ];
                    Ty.path "alloc::string::String"
                  ] :=
              Value.Tuple [ M.read (| dsl_instr |); M.read (| opcode_name |) ] in
            let~ _ : Ty.tuple [] :=
              M.call_closure (|
                Ty.tuple [],
                M.get_associated_function (|
                  Ty.path "openvm_circuit::metrics::cycle_tracker::CycleTracker",
                  "increment_opcode",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::metrics::VmMetrics",
                      "cycle_tracker"
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| M.borrow (| Pointer.Kind.Ref, key |) |)
                  |)
                ]
              |) in
            let~ _ : Ty.tuple [] :=
              let β :=
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.path "usize" ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::entry::Entry")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.path "alloc::string::String" ];
                              Ty.path "alloc::string::String"
                            ];
                          Ty.path "usize";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "or_insert",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::entry::Entry")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.path "alloc::string::String" ];
                                Ty.path "alloc::string::String"
                              ];
                            Ty.path "usize";
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                            []
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.path "alloc::string::String" ];
                                  Ty.path "alloc::string::String"
                                ];
                              Ty.path "usize";
                              Ty.path "alloc::alloc::Global"
                            ],
                          "entry",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::metrics::VmMetrics",
                              "counts"
                            |)
                          |);
                          M.call_closure (|
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.path "alloc::string::String" ];
                                Ty.path "alloc::string::String"
                              ],
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.path "alloc::string::String" ];
                                  Ty.path "alloc::string::String"
                                ],
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, key |) ]
                          |)
                        ]
                      |);
                      Value.Integer IntegerKind.Usize 0
                    ]
                  |)
                |) in
              M.write (|
                β,
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.add,
                  [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                |)
              |) in
            let~ _ : Ty.tuple [] :=
              M.read (|
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::zip::Zip")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::zip::Zip")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [ Ty.path "alloc::string::String" ];
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [ Ty.path "usize" ]
                                  ];
                                Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ]
                              ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.path "alloc::string::String" ];
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                      ];
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                  ]
                              ]
                              (Ty.tuple
                                [
                                  Ty.apply (Ty.path "&") [] [ Ty.path "alloc::string::String" ];
                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                ])
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::zip::Zip")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [ Ty.path "alloc::string::String" ];
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [ Ty.path "usize" ]
                                    ];
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [ Ty.path "usize" ]
                                ];
                              Ty.function
                                [
                                  Ty.tuple
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.path "alloc::string::String" ];
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                        ];
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                    ]
                                ]
                                (Ty.tuple
                                  [
                                    Ty.apply (Ty.path "&") [] [ Ty.path "alloc::string::String" ];
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                  ])
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::zip::Zip")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [ Ty.path "alloc::string::String" ];
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [ Ty.path "usize" ]
                                      ];
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [ Ty.path "usize" ]
                                  ];
                                Ty.function
                                  [
                                    Ty.tuple
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.path "alloc::string::String" ];
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                          ];
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                      ]
                                  ]
                                  (Ty.tuple
                                    [
                                      Ty.apply (Ty.path "&") [] [ Ty.path "alloc::string::String" ];
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                    ])
                              ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            M.read (|
                              let~ iter :
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [ Ty.path "alloc::string::String" ] :=
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [ Ty.path "alloc::string::String" ],
                                  M.get_trait_method (|
                                    "core::iter::traits::collect::IntoIterator",
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [ Ty.path "alloc::string::String" ]
                                      ],
                                    [],
                                    [],
                                    "into_iter",
                                    [],
                                    []
                                  |),
                                  [ M.read (| air_names |) ]
                                |) in
                              let~ iter :
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [ Ty.path "alloc::string::String" ];
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [ Ty.path "usize" ]
                                    ] :=
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [ Ty.path "alloc::string::String" ];
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [ Ty.path "usize" ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [ Ty.path "alloc::string::String" ],
                                    [],
                                    [],
                                    "zip",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                        ]
                                    ]
                                  |),
                                  [
                                    M.read (| iter |);
                                    M.borrow (| Pointer.Kind.Ref, now_trace_cells |)
                                  ]
                                |) in
                              let~ iter :
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::zip::Zip")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [ Ty.path "alloc::string::String" ];
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [ Ty.path "usize" ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [ Ty.path "usize" ]
                                    ] :=
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::zip::Zip")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::zip::Zip")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [ Ty.path "alloc::string::String" ];
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [ Ty.path "usize" ]
                                        ];
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [ Ty.path "usize" ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [ Ty.path "alloc::string::String" ];
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [ Ty.path "usize" ]
                                      ],
                                    [],
                                    [],
                                    "zip",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                        ]
                                    ]
                                  |),
                                  [
                                    M.read (| iter |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_circuit::metrics::VmMetrics",
                                        "current_trace_cells"
                                      |)
                                    |)
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::map::Map")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [ Ty.path "alloc::string::String" ];
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [ Ty.path "usize" ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [ Ty.path "usize" ]
                                      ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "alloc::string::String" ];
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                              ];
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                          ]
                                      ]
                                      (Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.path "alloc::string::String" ];
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                        ])
                                  ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::map::Map")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::zip::Zip")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::zip::Zip")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                []
                                                [ Ty.path "alloc::string::String" ];
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                []
                                                [ Ty.path "usize" ]
                                            ];
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [ Ty.path "usize" ]
                                        ];
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "alloc::string::String" ];
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                ];
                                              Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                            ]
                                        ]
                                        (Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.path "alloc::string::String" ];
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                          ])
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [ Ty.path "alloc::string::String" ];
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [ Ty.path "usize" ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [ Ty.path "usize" ]
                                      ],
                                    [],
                                    [],
                                    "map",
                                    [],
                                    [
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.path "alloc::string::String" ];
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                        ];
                                      Ty.function
                                        [
                                          Ty.tuple
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "alloc::string::String" ];
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                ];
                                              Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                            ]
                                        ]
                                        (Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.path "alloc::string::String" ];
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                          ])
                                    ]
                                  |),
                                  [
                                    M.read (| iter |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            ltac:(M.monadic
                                              (M.match_operator (|
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [ Ty.path "alloc::string::String" ];
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                  ],
                                                M.alloc (|
                                                  Ty.tuple
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "alloc::string::String" ];
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "usize" ]
                                                        ];
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                    ],
                                                  α0
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                      let γ0_1 :=
                                                        M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                      let γ1_0 :=
                                                        M.SubPointer.get_tuple_field (|
                                                          γ0_0,
                                                          0
                                                        |) in
                                                      let γ1_1 :=
                                                        M.SubPointer.get_tuple_field (|
                                                          γ0_0,
                                                          1
                                                        |) in
                                                      let a :=
                                                        M.copy (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "alloc::string::String" ],
                                                          γ1_0
                                                        |) in
                                                      let b :=
                                                        M.copy (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          γ1_1
                                                        |) in
                                                      let b :=
                                                        M.copy (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          γ0_1
                                                        |) in
                                                      Value.Tuple
                                                        [
                                                          M.read (| a |);
                                                          M.read (| b |);
                                                          M.read (| b |)
                                                        ]))
                                                ]
                                              |)))
                                          | _ => M.impossible "wrong number of arguments"
                                          end))
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::map::Map")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::zip::Zip")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::zip::Zip")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [ Ty.path "alloc::string::String" ];
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [ Ty.path "usize" ]
                                          ];
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [ Ty.path "usize" ]
                                      ];
                                    Ty.function
                                      [
                                        Ty.tuple
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "alloc::string::String" ];
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                              ];
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                          ]
                                      ]
                                      (Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.path "alloc::string::String" ];
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                        ])
                                  ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "alloc::string::String" ];
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                              ]
                                          ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [ Ty.path "alloc::string::String" ];
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::map::Map")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::zip::Zip")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::iter::adapters::zip::Zip")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.path "alloc::string::String" ];
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [ Ty.path "usize" ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [ Ty.path "usize" ]
                                                  ];
                                                Ty.function
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "alloc::string::String" ];
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "usize" ]
                                                          ];
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ]
                                                      ]
                                                  ]
                                                  (Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.path "alloc::string::String" ];
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                    ])
                                              ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let γ1_0 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                            let γ1_1 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                            let γ1_2 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 2 |) in
                                            let air_name :=
                                              M.copy (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "alloc::string::String" ],
                                                γ1_0
                                              |) in
                                            let now_value :=
                                              M.copy (|
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                γ1_1
                                              |) in
                                            let prev_value :=
                                              M.copy (|
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                γ1_2
                                              |) in
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_trait_method (|
                                                              "core::cmp::PartialEq",
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "usize" ],
                                                              [],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.path "usize" ]
                                                              ],
                                                              "ne",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                prev_value
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                now_value
                                                              |)
                                                            ]
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.read (|
                                                      let~ key :
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [ Ty.path "alloc::string::String" ];
                                                              Ty.path "alloc::string::String";
                                                              Ty.path "alloc::string::String"
                                                            ] :=
                                                        Value.Tuple
                                                          [
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [ Ty.path "alloc::string::String" ],
                                                              M.get_trait_method (|
                                                                "core::clone::Clone",
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [ Ty.path "alloc::string::String"
                                                                  ],
                                                                [],
                                                                [],
                                                                "clone",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.SubPointer.get_tuple_field (|
                                                                    key,
                                                                    0
                                                                  |)
                                                                |)
                                                              ]
                                                            |);
                                                            M.call_closure (|
                                                              Ty.path "alloc::string::String",
                                                              M.get_trait_method (|
                                                                "core::clone::Clone",
                                                                Ty.path "alloc::string::String",
                                                                [],
                                                                [],
                                                                "clone",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.SubPointer.get_tuple_field (|
                                                                    key,
                                                                    1
                                                                  |)
                                                                |)
                                                              ]
                                                            |);
                                                            M.call_closure (|
                                                              Ty.path "alloc::string::String",
                                                              M.get_trait_method (|
                                                                "alloc::borrow::ToOwned",
                                                                Ty.path "alloc::string::String",
                                                                [],
                                                                [],
                                                                "to_owned",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| air_name |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          ] in
                                                      let~ _ : Ty.tuple [] :=
                                                        M.call_closure (|
                                                          Ty.tuple [],
                                                          M.get_associated_function (|
                                                            Ty.path
                                                              "openvm_circuit::metrics::cycle_tracker::CycleTracker",
                                                            "increment_cells_used",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (| M.read (| self |) |),
                                                                "openvm_circuit::metrics::VmMetrics",
                                                                "cycle_tracker"
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (| Pointer.Kind.Ref, key |)
                                                              |)
                                                            |);
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              M.get_trait_method (|
                                                                "core::ops::arith::Sub",
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.path "usize" ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [ Ty.path "usize" ]
                                                                ],
                                                                "sub",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.read (| now_value |);
                                                                M.read (| prev_value |)
                                                              ]
                                                            |)
                                                          ]
                                                        |) in
                                                      let~ _ : Ty.tuple [] :=
                                                        let β :=
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&mut")
                                                                []
                                                                [ Ty.path "usize" ],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "alloc::collections::btree::map::entry::Entry")
                                                                  []
                                                                  [
                                                                    Ty.tuple
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "alloc::string::String"
                                                                          ];
                                                                        Ty.path
                                                                          "alloc::string::String";
                                                                        Ty.path
                                                                          "alloc::string::String"
                                                                      ];
                                                                    Ty.path "usize";
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                "or_insert",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "alloc::collections::btree::map::entry::Entry")
                                                                    []
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "core::option::Option")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "alloc::string::String"
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::string::String";
                                                                          Ty.path
                                                                            "alloc::string::String"
                                                                        ];
                                                                      Ty.path "usize";
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "alloc::collections::btree::map::BTreeMap")
                                                                      []
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "core::option::Option")
                                                                              []
                                                                              [
                                                                                Ty.path
                                                                                  "alloc::string::String"
                                                                              ];
                                                                            Ty.path
                                                                              "alloc::string::String";
                                                                            Ty.path
                                                                              "alloc::string::String"
                                                                          ];
                                                                        Ty.path "usize";
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "entry",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.read (| self |)
                                                                        |),
                                                                        "openvm_circuit::metrics::VmMetrics",
                                                                        "trace_cells"
                                                                      |)
                                                                    |);
                                                                    M.read (| key |)
                                                                  ]
                                                                |);
                                                                Value.Integer IntegerKind.Usize 0
                                                              ]
                                                            |)
                                                          |) in
                                                        M.write (|
                                                          β,
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            BinOp.Wrap.add,
                                                            [
                                                              M.read (| β |);
                                                              M.call_closure (|
                                                                Ty.path "usize",
                                                                M.get_trait_method (|
                                                                  "core::ops::arith::Sub",
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [ Ty.path "usize" ],
                                                                  [],
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [ Ty.path "usize" ]
                                                                  ],
                                                                  "sub",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.read (| now_value |);
                                                                  M.read (| prev_value |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |) in
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |) in
            let~ _ : Ty.tuple [] :=
              M.write (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "openvm_circuit::metrics::VmMetrics",
                  "current_trace_cells"
                |),
                M.read (| now_trace_cells |)
              |) in
            M.alloc (| Ty.tuple [], Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_update_trace_cells :
      M.IsAssociatedFunction.C Self "update_trace_cells" update_trace_cells.
    Admitted.
    Global Typeclasses Opaque update_trace_cells.
    
    (*
        pub fn partial_take(&mut self) -> Self {
            Self {
                cycle_tracker: mem::take(&mut self.cycle_tracker),
                fn_bounds: mem::take(&mut self.fn_bounds),
                current_fn: mem::take(&mut self.current_fn),
                ..Default::default()
            }
        }
    *)
    Definition partial_take (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&mut") [] [ Ty.path "openvm_circuit::metrics::VmMetrics" ],
              self
            |) in
          M.struct_record_update
            (M.call_closure (|
              Ty.path "openvm_circuit::metrics::VmMetrics",
              M.get_trait_method (|
                "core::default::Default",
                Ty.path "openvm_circuit::metrics::VmMetrics",
                [],
                [],
                "default",
                [],
                []
              |),
              []
            |))
            [
              ("cycle_tracker",
                M.call_closure (|
                  Ty.path "openvm_circuit::metrics::cycle_tracker::CycleTracker",
                  M.get_function (|
                    "core::mem::take",
                    [],
                    [ Ty.path "openvm_circuit::metrics::cycle_tracker::CycleTracker" ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::metrics::VmMetrics",
                            "cycle_tracker"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("fn_bounds",
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                    []
                    [
                      Ty.path "u32";
                      Ty.path "openvm_instructions::exe::FnBound";
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.get_function (|
                    "core::mem::take",
                    [],
                    [
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        []
                        [
                          Ty.path "u32";
                          Ty.path "openvm_instructions::exe::FnBound";
                          Ty.path "alloc::alloc::Global"
                        ]
                    ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::metrics::VmMetrics",
                            "fn_bounds"
                          |)
                        |)
                      |)
                    |)
                  ]
                |));
              ("current_fn",
                M.call_closure (|
                  Ty.path "openvm_instructions::exe::FnBound",
                  M.get_function (|
                    "core::mem::take",
                    [],
                    [ Ty.path "openvm_instructions::exe::FnBound" ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::metrics::VmMetrics",
                            "current_fn"
                          |)
                        |)
                      |)
                    |)
                  ]
                |))
            ]))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_partial_take :
      M.IsAssociatedFunction.C Self "partial_take" partial_take.
    Admitted.
    Global Typeclasses Opaque partial_take.
    
    (*
        pub fn clear(&mut self) {
            *self = self.partial_take();
        }
    *)
    Definition clear (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&mut") [] [ Ty.path "openvm_circuit::metrics::VmMetrics" ],
              self
            |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.write (|
                M.deref (| M.read (| self |) |),
                M.call_closure (|
                  Ty.path "openvm_circuit::metrics::VmMetrics",
                  M.get_associated_function (|
                    Ty.path "openvm_circuit::metrics::VmMetrics",
                    "partial_take",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                |)
              |) in
            M.alloc (| Ty.tuple [], Value.Tuple [] |)
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_clear : M.IsAssociatedFunction.C Self "clear" clear.
    Admitted.
    Global Typeclasses Opaque clear.
    
    (*
        pub fn emit(&self) {
            for (name, value) in self.chip_heights.iter() {
                let labels = [("chip_name", name.clone())];
                counter!("rows_used", &labels).absolute( *value as u64);
            }
    
            for ((dsl_ir, opcode), value) in self.counts.iter() {
                let labels = [
                    ("dsl_ir", dsl_ir.clone().unwrap_or_else(String::new)),
                    ("opcode", opcode.clone()),
                ];
                counter!("frequency", &labels).absolute( *value as u64);
            }
    
            for ((dsl_ir, opcode, air_name), value) in self.trace_cells.iter() {
                let labels = [
                    ("dsl_ir", dsl_ir.clone().unwrap_or_else(String::new)),
                    ("opcode", opcode.clone()),
                    ("air_name", air_name.clone()),
                ];
                counter!("cells_used", &labels).absolute( *value as u64);
            }
        }
    *)
    Definition emit (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [], [ self ] =>
        ltac:(M.monadic
          (let self :=
            M.alloc (|
              Ty.apply (Ty.path "&") [] [ Ty.path "openvm_circuit::metrics::VmMetrics" ],
              self
            |) in
          M.read (|
            let~ _ : Ty.tuple [] :=
              M.read (|
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [ Ty.tuple [ Ty.path "alloc::string::String"; Ty.path "usize" ] ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [ Ty.tuple [ Ty.path "alloc::string::String"; Ty.path "usize" ] ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.tuple [ Ty.path "alloc::string::String"; Ty.path "usize" ] ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.tuple [ Ty.path "alloc::string::String"; Ty.path "usize" ] ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.tuple [ Ty.path "alloc::string::String"; Ty.path "usize" ] ],
                                "iter",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.tuple
                                                [ Ty.path "alloc::string::String"; Ty.path "usize" ]
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.tuple
                                              [ Ty.path "alloc::string::String"; Ty.path "usize" ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::metrics::VmMetrics",
                                            "chip_heights"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.tuple [ Ty.path "alloc::string::String"; Ty.path "usize" ] ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.tuple
                                                  [ Ty.path "alloc::string::String"; Ty.path "usize"
                                                  ]
                                              ]
                                          ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.path "alloc::string::String";
                                                      Ty.path "usize"
                                                    ]
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [
                                                Ty.tuple
                                                  [ Ty.path "alloc::string::String"; Ty.path "usize"
                                                  ]
                                              ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let γ0_0 := M.read (| γ0_0 |) in
                                            let γ2_0 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                            let γ2_1 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                            let name :=
                                              M.alloc (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "alloc::string::String" ],
                                                γ2_0
                                              |) in
                                            let value :=
                                              M.alloc (|
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                γ2_1
                                              |) in
                                            M.read (|
                                              let~ labels :
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Value.Integer IntegerKind.Usize 1 ]
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "str" ];
                                                          Ty.path "alloc::string::String"
                                                        ]
                                                    ] :=
                                                Value.Array
                                                  [
                                                    Value.Tuple
                                                      [
                                                        mk_str (| "chip_name" |);
                                                        M.call_closure (|
                                                          Ty.path "alloc::string::String",
                                                          M.get_trait_method (|
                                                            "core::clone::Clone",
                                                            Ty.path "alloc::string::String",
                                                            [],
                                                            [],
                                                            "clone",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| name |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                  ] in
                                              let~ _ : Ty.tuple [] :=
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_associated_function (|
                                                    Ty.path "metrics::handles::Counter",
                                                    "absolute",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      let~ metric_key :
                                                          Ty.path "metrics::key::Key" :=
                                                        M.call_closure (|
                                                          Ty.path "metrics::key::Key",
                                                          M.get_associated_function (|
                                                            Ty.path "metrics::key::Key",
                                                            "from_parts",
                                                            [],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "str" ];
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    ]
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Ty.path "str" ];
                                                                          Ty.path
                                                                            "alloc::string::String"
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                          |),
                                                          [
                                                            mk_str (| "rows_used" |);
                                                            M.borrow (| Pointer.Kind.Ref, labels |)
                                                          ]
                                                        |) in
                                                      let~ metadata :
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "metrics::metadata::Metadata"
                                                            ] :=
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.read (|
                                                              get_constant (|
                                                                "openvm_circuit::metrics::emit::METADATA",
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "metrics::metadata::Metadata"
                                                                  ]
                                                              |)
                                                            |)
                                                          |)
                                                        |) in
                                                      M.alloc (|
                                                        Ty.path "metrics::handles::Counter",
                                                        M.call_closure (|
                                                          Ty.path "metrics::handles::Counter",
                                                          M.get_function (|
                                                            "metrics::recorder::with_recorder",
                                                            [],
                                                            [
                                                              Ty.path "metrics::handles::Counter";
                                                              Ty.function
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.dyn
                                                                        [
                                                                          ("metrics::recorder::Recorder::Trait",
                                                                            [])
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.path
                                                                  "metrics::handles::Counter")
                                                            ]
                                                          |),
                                                          [
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    ltac:(M.monadic
                                                                      (M.match_operator (|
                                                                        Ty.path
                                                                          "metrics::handles::Counter",
                                                                        M.alloc (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.dyn
                                                                                [
                                                                                  ("metrics::recorder::Recorder::Trait",
                                                                                    [])
                                                                                ]
                                                                            ],
                                                                          α0
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let recorder :=
                                                                                M.copy (|
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.dyn
                                                                                        [
                                                                                          ("metrics::recorder::Recorder::Trait",
                                                                                            [])
                                                                                        ]
                                                                                    ],
                                                                                  γ
                                                                                |) in
                                                                              M.call_closure (|
                                                                                Ty.path
                                                                                  "metrics::handles::Counter",
                                                                                M.get_trait_method (|
                                                                                  "metrics::recorder::Recorder",
                                                                                  Ty.dyn
                                                                                    [
                                                                                      ("metrics::recorder::Recorder::Trait",
                                                                                        [])
                                                                                    ],
                                                                                  [],
                                                                                  [],
                                                                                  "register_counter",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        recorder
                                                                                      |)
                                                                                    |)
                                                                                  |);
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        metric_key
                                                                                      |)
                                                                                    |)
                                                                                  |);
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        metadata
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)))
                                                                        ]
                                                                      |)))
                                                                  | _ =>
                                                                    M.impossible
                                                                      "wrong number of arguments"
                                                                  end))
                                                          ]
                                                        |)
                                                      |)
                                                    |);
                                                    M.cast
                                                      (Ty.path "u64")
                                                      (M.read (|
                                                        M.deref (| M.read (| value |) |)
                                                      |))
                                                  ]
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |) in
            let~ _ : Ty.tuple [] :=
              M.read (|
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::Iter")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.path "alloc::string::String" ];
                                Ty.path "alloc::string::String"
                              ];
                            Ty.path "usize"
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::collections::btree::map::Iter")
                            []
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.path "alloc::string::String" ];
                                  Ty.path "alloc::string::String"
                                ];
                              Ty.path "usize"
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "alloc::collections::btree::map::Iter")
                              []
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.path "alloc::string::String" ];
                                    Ty.path "alloc::string::String"
                                  ];
                                Ty.path "usize"
                              ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::collections::btree::map::Iter")
                                []
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.path "alloc::string::String" ];
                                      Ty.path "alloc::string::String"
                                    ];
                                  Ty.path "usize"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::collections::btree::map::BTreeMap")
                                  []
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "alloc::string::String" ];
                                        Ty.path "alloc::string::String"
                                      ];
                                    Ty.path "usize";
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "iter",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::metrics::VmMetrics",
                                    "counts"
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "alloc::collections::btree::map::Iter")
                                  []
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "alloc::string::String" ];
                                        Ty.path "alloc::string::String"
                                      ];
                                    Ty.path "usize"
                                  ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [ Ty.path "alloc::string::String" ];
                                                        Ty.path "alloc::string::String"
                                                      ]
                                                  ];
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                              ]
                                          ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [ Ty.path "alloc::string::String" ];
                                                          Ty.path "alloc::string::String"
                                                        ]
                                                    ];
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "alloc::collections::btree::map::Iter")
                                              []
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [ Ty.path "alloc::string::String" ];
                                                    Ty.path "alloc::string::String"
                                                  ];
                                                Ty.path "usize"
                                              ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let γ1_0 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                            let γ1_1 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                            let γ1_0 := M.read (| γ1_0 |) in
                                            let γ3_0 :=
                                              M.SubPointer.get_tuple_field (| γ1_0, 0 |) in
                                            let γ3_1 :=
                                              M.SubPointer.get_tuple_field (| γ1_0, 1 |) in
                                            let dsl_ir :=
                                              M.alloc (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [ Ty.path "alloc::string::String" ]
                                                  ],
                                                γ3_0
                                              |) in
                                            let opcode :=
                                              M.alloc (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.path "alloc::string::String" ],
                                                γ3_1
                                              |) in
                                            let value :=
                                              M.copy (|
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                γ1_1
                                              |) in
                                            M.read (|
                                              let~ labels :
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Value.Integer IntegerKind.Usize 2 ]
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "str" ];
                                                          Ty.path "alloc::string::String"
                                                        ]
                                                    ] :=
                                                Value.Array
                                                  [
                                                    Value.Tuple
                                                      [
                                                        mk_str (| "dsl_ir" |);
                                                        M.call_closure (|
                                                          Ty.path "alloc::string::String",
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [ Ty.path "alloc::string::String" ],
                                                            "unwrap_or_else",
                                                            [],
                                                            [
                                                              Ty.function
                                                                []
                                                                (Ty.path "alloc::string::String")
                                                            ]
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [ Ty.path "alloc::string::String" ],
                                                              M.get_trait_method (|
                                                                "core::clone::Clone",
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [ Ty.path "alloc::string::String"
                                                                  ],
                                                                [],
                                                                [],
                                                                "clone",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| dsl_ir |) |)
                                                                |)
                                                              ]
                                                            |);
                                                            M.get_associated_function (|
                                                              Ty.path "alloc::string::String",
                                                              "new",
                                                              [],
                                                              []
                                                            |)
                                                          ]
                                                        |)
                                                      ];
                                                    Value.Tuple
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| mk_str (| "opcode" |) |)
                                                        |);
                                                        M.call_closure (|
                                                          Ty.path "alloc::string::String",
                                                          M.get_trait_method (|
                                                            "core::clone::Clone",
                                                            Ty.path "alloc::string::String",
                                                            [],
                                                            [],
                                                            "clone",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| opcode |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                  ] in
                                              let~ _ : Ty.tuple [] :=
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_associated_function (|
                                                    Ty.path "metrics::handles::Counter",
                                                    "absolute",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      let~ metric_key :
                                                          Ty.path "metrics::key::Key" :=
                                                        M.call_closure (|
                                                          Ty.path "metrics::key::Key",
                                                          M.get_associated_function (|
                                                            Ty.path "metrics::key::Key",
                                                            "from_parts",
                                                            [],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "str" ];
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        2
                                                                    ]
                                                                    [
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Ty.path "str" ];
                                                                          Ty.path
                                                                            "alloc::string::String"
                                                                        ]
                                                                    ]
                                                                ]
                                                            ]
                                                          |),
                                                          [
                                                            mk_str (| "frequency" |);
                                                            M.borrow (| Pointer.Kind.Ref, labels |)
                                                          ]
                                                        |) in
                                                      let~ metadata :
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "metrics::metadata::Metadata"
                                                            ] :=
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.read (|
                                                              get_constant (|
                                                                "openvm_circuit::metrics::emit::METADATA'1",
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.path
                                                                      "metrics::metadata::Metadata"
                                                                  ]
                                                              |)
                                                            |)
                                                          |)
                                                        |) in
                                                      M.alloc (|
                                                        Ty.path "metrics::handles::Counter",
                                                        M.call_closure (|
                                                          Ty.path "metrics::handles::Counter",
                                                          M.get_function (|
                                                            "metrics::recorder::with_recorder",
                                                            [],
                                                            [
                                                              Ty.path "metrics::handles::Counter";
                                                              Ty.function
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.dyn
                                                                        [
                                                                          ("metrics::recorder::Recorder::Trait",
                                                                            [])
                                                                        ]
                                                                    ]
                                                                ]
                                                                (Ty.path
                                                                  "metrics::handles::Counter")
                                                            ]
                                                          |),
                                                          [
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    ltac:(M.monadic
                                                                      (M.match_operator (|
                                                                        Ty.path
                                                                          "metrics::handles::Counter",
                                                                        M.alloc (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.dyn
                                                                                [
                                                                                  ("metrics::recorder::Recorder::Trait",
                                                                                    [])
                                                                                ]
                                                                            ],
                                                                          α0
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let recorder :=
                                                                                M.copy (|
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.dyn
                                                                                        [
                                                                                          ("metrics::recorder::Recorder::Trait",
                                                                                            [])
                                                                                        ]
                                                                                    ],
                                                                                  γ
                                                                                |) in
                                                                              M.call_closure (|
                                                                                Ty.path
                                                                                  "metrics::handles::Counter",
                                                                                M.get_trait_method (|
                                                                                  "metrics::recorder::Recorder",
                                                                                  Ty.dyn
                                                                                    [
                                                                                      ("metrics::recorder::Recorder::Trait",
                                                                                        [])
                                                                                    ],
                                                                                  [],
                                                                                  [],
                                                                                  "register_counter",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        recorder
                                                                                      |)
                                                                                    |)
                                                                                  |);
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        metric_key
                                                                                      |)
                                                                                    |)
                                                                                  |);
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        metadata
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)))
                                                                        ]
                                                                      |)))
                                                                  | _ =>
                                                                    M.impossible
                                                                      "wrong number of arguments"
                                                                  end))
                                                          ]
                                                        |)
                                                      |)
                                                    |);
                                                    M.cast
                                                      (Ty.path "u64")
                                                      (M.read (|
                                                        M.deref (| M.read (| value |) |)
                                                      |))
                                                  ]
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |) in
            M.use
              (M.alloc (|
                Ty.tuple [],
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (|
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::Iter")
                      []
                      [
                        Ty.tuple
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.path "alloc::string::String" ];
                            Ty.path "alloc::string::String";
                            Ty.path "alloc::string::String"
                          ];
                        Ty.path "usize"
                      ],
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::Iter")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.path "alloc::string::String" ];
                              Ty.path "alloc::string::String";
                              Ty.path "alloc::string::String"
                            ];
                          Ty.path "usize"
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::collect::IntoIterator",
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::Iter")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.path "alloc::string::String" ];
                                Ty.path "alloc::string::String";
                                Ty.path "alloc::string::String"
                              ];
                            Ty.path "usize"
                          ],
                        [],
                        [],
                        "into_iter",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::collections::btree::map::Iter")
                            []
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.path "alloc::string::String" ];
                                  Ty.path "alloc::string::String";
                                  Ty.path "alloc::string::String"
                                ];
                              Ty.path "usize"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::collections::btree::map::BTreeMap")
                              []
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.path "alloc::string::String" ];
                                    Ty.path "alloc::string::String";
                                    Ty.path "alloc::string::String"
                                  ];
                                Ty.path "usize";
                                Ty.path "alloc::alloc::Global"
                              ],
                            "iter",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::metrics::VmMetrics",
                                "trace_cells"
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let iter :=
                          M.copy (|
                            Ty.apply
                              (Ty.path "alloc::collections::btree::map::Iter")
                              []
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.path "alloc::string::String" ];
                                    Ty.path "alloc::string::String";
                                    Ty.path "alloc::string::String"
                                  ];
                                Ty.path "usize"
                              ],
                            γ
                          |) in
                        M.read (|
                          M.loop (|
                            Ty.tuple [],
                            ltac:(M.monadic
                              (let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [ Ty.path "alloc::string::String" ];
                                                    Ty.path "alloc::string::String";
                                                    Ty.path "alloc::string::String"
                                                  ]
                                              ];
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                          ]
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.tuple
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [ Ty.path "alloc::string::String" ];
                                                      Ty.path "alloc::string::String";
                                                      Ty.path "alloc::string::String"
                                                    ]
                                                ];
                                              Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "alloc::collections::btree::map::Iter")
                                          []
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [ Ty.path "alloc::string::String" ];
                                                Ty.path "alloc::string::String";
                                                Ty.path "alloc::string::String"
                                              ];
                                            Ty.path "usize"
                                          ],
                                        [],
                                        [],
                                        "next",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let _ :=
                                          M.is_struct_tuple (| γ, "core::option::Option::None" |) in
                                        M.never_to_any (| M.read (| M.break (||) |) |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                        let γ1_0 := M.read (| γ1_0 |) in
                                        let γ3_0 := M.SubPointer.get_tuple_field (| γ1_0, 0 |) in
                                        let γ3_1 := M.SubPointer.get_tuple_field (| γ1_0, 1 |) in
                                        let γ3_2 := M.SubPointer.get_tuple_field (| γ1_0, 2 |) in
                                        let dsl_ir :=
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [ Ty.path "alloc::string::String" ]
                                              ],
                                            γ3_0
                                          |) in
                                        let opcode :=
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.path "alloc::string::String" ],
                                            γ3_1
                                          |) in
                                        let air_name :=
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.path "alloc::string::String" ],
                                            γ3_2
                                          |) in
                                        let value :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ1_1
                                          |) in
                                        M.read (|
                                          let~ labels :
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 3 ]
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "str" ];
                                                      Ty.path "alloc::string::String"
                                                    ]
                                                ] :=
                                            Value.Array
                                              [
                                                Value.Tuple
                                                  [
                                                    mk_str (| "dsl_ir" |);
                                                    M.call_closure (|
                                                      Ty.path "alloc::string::String",
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [ Ty.path "alloc::string::String" ],
                                                        "unwrap_or_else",
                                                        [],
                                                        [
                                                          Ty.function
                                                            []
                                                            (Ty.path "alloc::string::String")
                                                        ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [ Ty.path "alloc::string::String" ],
                                                          M.get_trait_method (|
                                                            "core::clone::Clone",
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [ Ty.path "alloc::string::String" ],
                                                            [],
                                                            [],
                                                            "clone",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| dsl_ir |) |)
                                                            |)
                                                          ]
                                                        |);
                                                        M.get_associated_function (|
                                                          Ty.path "alloc::string::String",
                                                          "new",
                                                          [],
                                                          []
                                                        |)
                                                      ]
                                                    |)
                                                  ];
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| mk_str (| "opcode" |) |)
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "alloc::string::String",
                                                      M.get_trait_method (|
                                                        "core::clone::Clone",
                                                        Ty.path "alloc::string::String",
                                                        [],
                                                        [],
                                                        "clone",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| opcode |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  ];
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| mk_str (| "air_name" |) |)
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "alloc::string::String",
                                                      M.get_trait_method (|
                                                        "core::clone::Clone",
                                                        Ty.path "alloc::string::String",
                                                        [],
                                                        [],
                                                        "clone",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| air_name |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                              ] in
                                          let~ _ : Ty.tuple [] :=
                                            M.call_closure (|
                                              Ty.tuple [],
                                              M.get_associated_function (|
                                                Ty.path "metrics::handles::Counter",
                                                "absolute",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  let~ metric_key : Ty.path "metrics::key::Key" :=
                                                    M.call_closure (|
                                                      Ty.path "metrics::key::Key",
                                                      M.get_associated_function (|
                                                        Ty.path "metrics::key::Key",
                                                        "from_parts",
                                                        [],
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "str" ];
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ Value.Integer IntegerKind.Usize 3
                                                                ]
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "str" ];
                                                                      Ty.path
                                                                        "alloc::string::String"
                                                                    ]
                                                                ]
                                                            ]
                                                        ]
                                                      |),
                                                      [
                                                        mk_str (| "cells_used" |);
                                                        M.borrow (| Pointer.Kind.Ref, labels |)
                                                      ]
                                                    |) in
                                                  let~ metadata :
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [ Ty.path "metrics::metadata::Metadata" ] :=
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.read (|
                                                          get_constant (|
                                                            "openvm_circuit::metrics::emit::METADATA'2",
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "metrics::metadata::Metadata"
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |) in
                                                  M.alloc (|
                                                    Ty.path "metrics::handles::Counter",
                                                    M.call_closure (|
                                                      Ty.path "metrics::handles::Counter",
                                                      M.get_function (|
                                                        "metrics::recorder::with_recorder",
                                                        [],
                                                        [
                                                          Ty.path "metrics::handles::Counter";
                                                          Ty.function
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.dyn
                                                                    [
                                                                      ("metrics::recorder::Recorder::Trait",
                                                                        [])
                                                                    ]
                                                                ]
                                                            ]
                                                            (Ty.path "metrics::handles::Counter")
                                                        ]
                                                      |),
                                                      [
                                                        M.closure
                                                          (fun γ =>
                                                            ltac:(M.monadic
                                                              match γ with
                                                              | [ α0 ] =>
                                                                ltac:(M.monadic
                                                                  (M.match_operator (|
                                                                    Ty.path
                                                                      "metrics::handles::Counter",
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.dyn
                                                                            [
                                                                              ("metrics::recorder::Recorder::Trait",
                                                                                [])
                                                                            ]
                                                                        ],
                                                                      α0
                                                                    |),
                                                                    [
                                                                      fun γ =>
                                                                        ltac:(M.monadic
                                                                          (let recorder :=
                                                                            M.copy (|
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.dyn
                                                                                    [
                                                                                      ("metrics::recorder::Recorder::Trait",
                                                                                        [])
                                                                                    ]
                                                                                ],
                                                                              γ
                                                                            |) in
                                                                          M.call_closure (|
                                                                            Ty.path
                                                                              "metrics::handles::Counter",
                                                                            M.get_trait_method (|
                                                                              "metrics::recorder::Recorder",
                                                                              Ty.dyn
                                                                                [
                                                                                  ("metrics::recorder::Recorder::Trait",
                                                                                    [])
                                                                                ],
                                                                              [],
                                                                              [],
                                                                              "register_counter",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    recorder
                                                                                  |)
                                                                                |)
                                                                              |);
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    metric_key
                                                                                  |)
                                                                                |)
                                                                              |);
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    metadata
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)))
                                                                    ]
                                                                  |)))
                                                              | _ =>
                                                                M.impossible
                                                                  "wrong number of arguments"
                                                              end))
                                                      ]
                                                    |)
                                                  |)
                                                |);
                                                M.cast
                                                  (Ty.path "u64")
                                                  (M.read (| M.deref (| M.read (| value |) |) |))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                          |)
                        |)))
                  ]
                |)
              |))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance AssociatedFunction_emit : M.IsAssociatedFunction.C Self "emit" emit.
    Admitted.
    Global Typeclasses Opaque emit.
  End Impl_openvm_circuit_metrics_VmMetrics.
End metrics.
