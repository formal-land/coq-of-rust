(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module system.
  Module memory.
    Module adapter.
      Module air.
        (* StructRecord
          {
            name := "AccessAdapterAir";
            const_params := [ "N" ];
            ty_params := [];
            fields :=
              [
                ("memory_bus",
                  Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus");
                ("lt_air", Ty.path "openvm_circuit_primitives::is_less_than::IsLtSubAir")
              ];
          } *)
        
        Module Impl_core_clone_Clone_for_openvm_circuit_system_memory_adapter_air_AccessAdapterAir_N.
          Definition Self (N : Value.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::system::memory::adapter::air::AccessAdapterAir")
              [ N ]
              [].
          
          (* Clone *)
          Definition clone
              (N : Value.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self N in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::adapter::air::AccessAdapterAir")
                          [ N ]
                          []
                      ],
                    self
                  |) in
                Value.mkStructRecord
                  "openvm_circuit::system::memory::adapter::air::AccessAdapterAir"
                  [ N ]
                  []
                  [
                    ("memory_bus",
                      M.call_closure (|
                        Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::adapter::air::AccessAdapterAir",
                                  "memory_bus"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |));
                    ("lt_air",
                      M.call_closure (|
                        Ty.path "openvm_circuit_primitives::is_less_than::IsLtSubAir",
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.path "openvm_circuit_primitives::is_less_than::IsLtSubAir",
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::adapter::air::AccessAdapterAir",
                                  "lt_air"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |))
                  ]))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (N : Value.t),
            M.IsTraitInstance
              "core::clone::Clone"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self N)
              (* Instance *) [ ("clone", InstanceField.Method (clone N)) ].
        End Impl_core_clone_Clone_for_openvm_circuit_system_memory_adapter_air_AccessAdapterAir_N.
        
        Module Impl_core_fmt_Debug_for_openvm_circuit_system_memory_adapter_air_AccessAdapterAir_N.
          Definition Self (N : Value.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::system::memory::adapter::air::AccessAdapterAir")
              [ N ]
              [].
          
          (* Debug *)
          Definition fmt (N : Value.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self N in
            match ε, τ, α with
            | [], [], [ self; f ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::adapter::air::AccessAdapterAir")
                          [ N ]
                          []
                      ],
                    self
                  |) in
                let f :=
                  M.alloc (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ],
                    f
                  |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_field2_finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "AccessAdapterAir" |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "memory_bus" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.path
                              "openvm_circuit::system::memory::offline_checker::bus::MemoryBus"
                          ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::adapter::air::AccessAdapterAir",
                                "memory_bus"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "lt_air" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.path "openvm_circuit_primitives::is_less_than::IsLtSubAir" ]
                          ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.path "openvm_circuit_primitives::is_less_than::IsLtSubAir" ],
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::system::memory::adapter::air::AccessAdapterAir",
                                    "lt_air"
                                  |)
                                |)
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (N : Value.t),
            M.IsTraitInstance
              "core::fmt::Debug"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self N)
              (* Instance *) [ ("fmt", InstanceField.Method (fmt N)) ].
        End Impl_core_fmt_Debug_for_openvm_circuit_system_memory_adapter_air_AccessAdapterAir_N.
        
        Module Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_T_for_openvm_circuit_system_memory_adapter_air_AccessAdapterAir_N.
          Definition Self (N : Value.t) (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::system::memory::adapter::air::AccessAdapterAir")
              [ N ]
              [].
          
          Axiom Implements :
            forall (N : Value.t) (T : Ty.t),
            M.IsTraitInstance
              "openvm_stark_backend::rap::BaseAirWithPublicValues"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) [ T ]
              (Self N T)
              (* Instance *) [].
        End Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_T_for_openvm_circuit_system_memory_adapter_air_AccessAdapterAir_N.
        
        Module Impl_openvm_stark_backend_rap_PartitionedBaseAir_T_for_openvm_circuit_system_memory_adapter_air_AccessAdapterAir_N.
          Definition Self (N : Value.t) (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::system::memory::adapter::air::AccessAdapterAir")
              [ N ]
              [].
          
          Axiom Implements :
            forall (N : Value.t) (T : Ty.t),
            M.IsTraitInstance
              "openvm_stark_backend::rap::PartitionedBaseAir"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) [ T ]
              (Self N T)
              (* Instance *) [].
        End Impl_openvm_stark_backend_rap_PartitionedBaseAir_T_for_openvm_circuit_system_memory_adapter_air_AccessAdapterAir_N.
        
        Module Impl_p3_air_air_BaseAir_T_for_openvm_circuit_system_memory_adapter_air_AccessAdapterAir_N.
          Definition Self (N : Value.t) (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::system::memory::adapter::air::AccessAdapterAir")
              [ N ]
              [].
          
          (*
              fn width(&self) -> usize {
                  size_of::<AccessAdapterCols<u8, N>>()
              }
          *)
          Definition width
              (N : Value.t)
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self N T in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::adapter::air::AccessAdapterAir")
                          [ N ]
                          []
                      ],
                    self
                  |) in
                M.call_closure (|
                  Ty.path "usize",
                  M.get_function (|
                    "core::mem::size_of",
                    [],
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols")
                        [ N ]
                        [ Ty.path "u8" ]
                    ]
                  |),
                  []
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (N : Value.t) (T : Ty.t),
            M.IsTraitInstance
              "p3_air::air::BaseAir"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) [ T ]
              (Self N T)
              (* Instance *) [ ("width", InstanceField.Method (width N T)) ].
        End Impl_p3_air_air_BaseAir_T_for_openvm_circuit_system_memory_adapter_air_AccessAdapterAir_N.
        
        Module Impl_p3_air_air_Air_where_openvm_stark_backend_interaction_InteractionBuilder_AB_AB_for_openvm_circuit_system_memory_adapter_air_AccessAdapterAir_N.
          Definition Self (N : Value.t) (AB : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::system::memory::adapter::air::AccessAdapterAir")
              [ N ]
              [].
          
          (*
              fn eval(&self, builder: &mut AB) {
                  let main = builder.main();
          
                  let local = main.row_slice(0);
                  let local: &AccessAdapterCols<AB::Var, N> = ( *local).borrow();
          
                  builder.assert_bool(local.is_split);
                  builder.assert_bool(local.is_valid);
                  builder.assert_bool(local.is_right_larger);
          
                  // Timestamp constraints:
                  // - if `is_split`, then all timestamps are equal.
                  // - if `is_merge`, then parent_timestamp = max(left_timestamp, right_timestamp)
          
                  builder
                      .when(local.is_split)
                      .assert_eq(local.left_timestamp, local.right_timestamp);
          
                  self.lt_air.eval(
                      builder,
                      (
                          IsLessThanIo {
                              x: local.left_timestamp.into(),
                              y: local.right_timestamp.into(),
                              out: local.is_right_larger.into(),
                              count: local.is_valid.into(),
                          },
                          &local.lt_aux,
                      ),
                  );
          
                  let parent_timestamp = local.is_right_larger * local.right_timestamp
                      + (AB::Expr::ONE - local.is_right_larger) * local.left_timestamp;
          
                  // assuming valid:
                  // Split = 1 => direction = 1 => receive parent with count 1, send left/right with count 1
                  // Split = 0 => direction = -1 => receive parent with count -1, send left/right with count
                  // -1
                  let direction = local.is_valid * (AB::Expr::TWO * local.is_split - AB::Expr::ONE);
          
                  self.memory_bus
                      .receive(local.address, local.values.to_vec(), parent_timestamp)
                      .eval(builder, direction.clone());
          
                  self.memory_bus
                      .send(
                          local.address,
                          local.values[..N / 2].to_vec(),
                          local.left_timestamp,
                      )
                      .eval(builder, direction.clone());
          
                  self.memory_bus
                      .send(
                          MemoryAddress::new(
                              local.address.address_space,
                              local.address.pointer + AB::Expr::from_canonical_usize(N / 2),
                          ),
                          local.values[N / 2..].to_vec(),
                          local.right_timestamp,
                      )
                      .eval(builder, direction.clone());
              }
          *)
          Definition eval
              (N : Value.t)
              (AB : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self N AB in
            match ε, τ, α with
            | [], [], [ self; builder ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::adapter::air::AccessAdapterAir")
                          [ N ]
                          []
                      ],
                    self
                  |) in
                let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
                M.read (|
                  let~ main : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M" :=
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M",
                      M.get_trait_method (|
                        "p3_air::air::AirBuilder",
                        AB,
                        [],
                        [],
                        "main",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| builder |) |) |) ]
                    |) in
                  let~ local :
                      Ty.associated_in_trait
                        "p3_matrix::Matrix"
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                        "{{synthetic}}'2" :=
                    M.call_closure (|
                      Ty.associated_in_trait
                        "p3_matrix::Matrix"
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                        "{{synthetic}}'2",
                      M.get_trait_method (|
                        "p3_matrix::Matrix",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        "row_slice",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, main |); Value.Integer IntegerKind.Usize 0 ]
                    |) in
                  let~ local :
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols")
                            [ N ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ] :=
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols")
                                [ N ]
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                            ],
                          M.get_trait_method (|
                            "core::borrow::Borrow",
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                            [],
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols")
                                [ N ]
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                            ],
                            "borrow",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::ops::deref::Deref",
                                    Ty.associated_in_trait
                                      "p3_matrix::Matrix"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                      (Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "M")
                                      "{{synthetic}}'2",
                                    [],
                                    [],
                                    "deref",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, local |) ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      |)
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_trait_method (|
                        "p3_air::air::AirBuilder",
                        AB,
                        [],
                        [],
                        "assert_bool",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| local |) |),
                            "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                            "is_split"
                          |)
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_trait_method (|
                        "p3_air::air::AirBuilder",
                        AB,
                        [],
                        [],
                        "assert_bool",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| local |) |),
                            "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                            "is_valid"
                          |)
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_trait_method (|
                        "p3_air::air::AirBuilder",
                        AB,
                        [],
                        [],
                        "assert_bool",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| local |) |),
                            "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                            "is_right_larger"
                          |)
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_trait_method (|
                        "p3_air::air::AirBuilder",
                        Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                        [],
                        [],
                        "assert_eq",
                        [],
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                        ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.alloc (|
                            Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                            M.call_closure (|
                              Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                              M.get_trait_method (|
                                "p3_air::air::AirBuilder",
                                AB,
                                [],
                                [],
                                "when",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| builder |) |)
                                |);
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| local |) |),
                                    "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                    "is_split"
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| local |) |),
                            "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                            "left_timestamp"
                          |)
                        |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| local |) |),
                            "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                            "right_timestamp"
                          |)
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_trait_method (|
                        "openvm_circuit_primitives::sub_air::SubAir",
                        Ty.path "openvm_circuit_primitives::is_less_than::IsLtSubAir",
                        [],
                        [ AB ],
                        "eval",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::system::memory::adapter::air::AccessAdapterAir",
                            "lt_air"
                          |)
                        |);
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                        Value.Tuple
                          [
                            Value.mkStructRecord
                              "openvm_circuit_primitives::is_less_than::IsLessThanIo"
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                              [
                                ("x",
                                  M.call_closure (|
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    M.get_trait_method (|
                                      "core::convert::Into",
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var",
                                      [],
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ],
                                      "into",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| local |) |),
                                          "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                          "left_timestamp"
                                        |)
                                      |)
                                    ]
                                  |));
                                ("y",
                                  M.call_closure (|
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    M.get_trait_method (|
                                      "core::convert::Into",
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var",
                                      [],
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ],
                                      "into",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| local |) |),
                                          "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                          "right_timestamp"
                                        |)
                                      |)
                                    ]
                                  |));
                                ("out",
                                  M.call_closure (|
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    M.get_trait_method (|
                                      "core::convert::Into",
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var",
                                      [],
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ],
                                      "into",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| local |) |),
                                          "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                          "is_right_larger"
                                        |)
                                      |)
                                    ]
                                  |));
                                ("count",
                                  M.call_closure (|
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    M.get_trait_method (|
                                      "core::convert::Into",
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var",
                                      [],
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ],
                                      "into",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| local |) |),
                                          "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                          "is_valid"
                                        |)
                                      |)
                                    ]
                                  |))
                              ];
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ]
                                ],
                              M.pointer_coercion
                                M.PointerCoercion.Unsize
                                (Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                  ])
                                (Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                  ]),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| local |) |),
                                        "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                        "lt_aux"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                      ]
                    |) in
                  let~ parent_timestamp :
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::ops::arith::Add",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                        "add",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::ops::arith::Mul",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                            "mul",
                            [],
                            []
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| local |) |),
                                "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                "is_right_larger"
                              |)
                            |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| local |) |),
                                "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                "right_timestamp"
                              |)
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::ops::arith::Mul",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                            "mul",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::ops::arith::Sub",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                                "sub",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  get_constant (|
                                    "p3_field::field::FieldAlgebra::ONE",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  |)
                                |);
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| local |) |),
                                    "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                    "is_right_larger"
                                  |)
                                |)
                              ]
                            |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| local |) |),
                                "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                "left_timestamp"
                              |)
                            |)
                          ]
                        |)
                      ]
                    |) in
                  let~ direction :
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                        "mul",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| local |) |),
                            "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                            "is_valid"
                          |)
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::ops::arith::Sub",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                            "sub",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::ops::arith::Mul",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                                "mul",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  get_constant (|
                                    "p3_field::field::FieldAlgebra::TWO",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  |)
                                |);
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| local |) |),
                                    "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                    "is_split"
                                  |)
                                |)
                              ]
                            |);
                            M.read (|
                              get_constant (|
                                "p3_field::field::FieldAlgebra::ONE",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                              |)
                            |)
                          ]
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                        "eval",
                        [],
                        [ AB; Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                          M.get_associated_function (|
                            Ty.path
                              "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                            "receive",
                            [],
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                            ]
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::adapter::air::AccessAdapterAir",
                                "memory_bus"
                              |)
                            |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| local |) |),
                                "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                "address"
                              |)
                            |);
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ],
                                "to_vec",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ]
                                    ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ N ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ]
                                      ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| local |) |),
                                        "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                        "values"
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |);
                            M.read (| parent_timestamp |)
                          ]
                        |);
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, direction |) ]
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                        "eval",
                        [],
                        [ AB; Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                          M.get_associated_function (|
                            Ty.path
                              "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                            "send",
                            [],
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                            ]
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::adapter::air::AccessAdapterAir",
                                "memory_bus"
                              |)
                            |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| local |) |),
                                "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                "address"
                              |)
                            |);
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ],
                                "to_vec",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Var"
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::index::Index",
                                        Ty.apply
                                          (Ty.path "array")
                                          [ N ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::ops::range::RangeTo")
                                            []
                                            [ Ty.path "usize" ]
                                        ],
                                        "index",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| local |) |),
                                            "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                            "values"
                                          |)
                                        |);
                                        Value.mkStructRecord
                                          "core::ops::range::RangeTo"
                                          []
                                          [ Ty.path "usize" ]
                                          [
                                            ("end_",
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.div,
                                                [ N; Value.Integer IntegerKind.Usize 2 ]
                                              |))
                                          ]
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| local |) |),
                                "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                "left_timestamp"
                              |)
                            |)
                          ]
                        |);
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, direction |) ]
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                        "eval",
                        [],
                        [ AB; Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                          M.get_associated_function (|
                            Ty.path
                              "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                            "send",
                            [],
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                            ]
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::adapter::air::AccessAdapterAir",
                                "memory_bus"
                              |)
                            |);
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                                []
                                [
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                                  []
                                  [
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ],
                                "new",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| local |) |),
                                      "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                      "address"
                                    |),
                                    "openvm_circuit::system::memory::MemoryAddress",
                                    "address_space"
                                  |)
                                |);
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::ops::arith::Add",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                    "add",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| local |) |),
                                          "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                          "address"
                                        |),
                                        "openvm_circuit::system::memory::MemoryAddress",
                                        "pointer"
                                      |)
                                    |);
                                    M.call_closure (|
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr",
                                      M.get_trait_method (|
                                        "p3_field::field::FieldAlgebra",
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr",
                                        [],
                                        [],
                                        "from_canonical_usize",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.div,
                                          [ N; Value.Integer IntegerKind.Usize 2 ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ],
                                "to_vec",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "slice")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Var"
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::index::Index",
                                        Ty.apply
                                          (Ty.path "array")
                                          [ N ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::ops::range::RangeFrom")
                                            []
                                            [ Ty.path "usize" ]
                                        ],
                                        "index",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| local |) |),
                                            "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                            "values"
                                          |)
                                        |);
                                        Value.mkStructRecord
                                          "core::ops::range::RangeFrom"
                                          []
                                          [ Ty.path "usize" ]
                                          [
                                            ("start",
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.div,
                                                [ N; Value.Integer IntegerKind.Usize 2 ]
                                              |))
                                          ]
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| local |) |),
                                "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                "right_timestamp"
                              |)
                            |)
                          ]
                        |);
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, direction |) ]
                        |)
                      ]
                    |) in
                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (N : Value.t) (AB : Ty.t),
            M.IsTraitInstance
              "p3_air::air::Air"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) [ AB ]
              (Self N AB)
              (* Instance *) [ ("eval", InstanceField.Method (eval N AB)) ].
        End Impl_p3_air_air_Air_where_openvm_stark_backend_interaction_InteractionBuilder_AB_AB_for_openvm_circuit_system_memory_adapter_air_AccessAdapterAir_N.
      End air.
    End adapter.
  End memory.
End system.
