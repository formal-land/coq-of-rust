(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module system.
  Module memory.
    Module adapter.
      (* StructRecord
        {
          name := "AccessAdapterInventory";
          const_params := [];
          ty_params := [ "F" ];
          fields :=
            [
              ("chips",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                      []
                      [ F ];
                    Ty.path "alloc::alloc::Global"
                  ]);
              ("air_names",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ])
            ];
        } *)
      
      Module Impl_openvm_circuit_system_memory_adapter_AccessAdapterInventory_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
            []
            [ F ].
        
        (*
            pub fn new(
                range_checker: SharedVariableRangeCheckerChip,
                memory_bus: MemoryBus,
                clk_max_bits: usize,
                max_access_adapter_n: usize,
            ) -> Self {
                let rc = range_checker;
                let mb = memory_bus;
                let cmb = clk_max_bits;
                let maan = max_access_adapter_n;
                assert!(matches!(maan, 2 | 4 | 8 | 16 | 32));
                let chips: Vec<_> = [
                    Self::create_access_adapter_chip::<2>(rc.clone(), mb, cmb, maan),
                    Self::create_access_adapter_chip::<4>(rc.clone(), mb, cmb, maan),
                    Self::create_access_adapter_chip::<8>(rc.clone(), mb, cmb, maan),
                    Self::create_access_adapter_chip::<16>(rc.clone(), mb, cmb, maan),
                    Self::create_access_adapter_chip::<32>(rc.clone(), mb, cmb, maan),
                ]
                .into_iter()
                .flatten()
                .collect();
                let air_names = (0..chips.len()).map(|i| air_name(1 << (i + 1))).collect();
                Self { chips, air_names }
            }
        *)
        Definition new (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ range_checker; memory_bus; clk_max_bits; max_access_adapter_n ] =>
            ltac:(M.monadic
              (let range_checker :=
                M.alloc (|
                  Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                  range_checker
                |) in
              let memory_bus :=
                M.alloc (|
                  Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                  memory_bus
                |) in
              let clk_max_bits := M.alloc (| Ty.path "usize", clk_max_bits |) in
              let max_access_adapter_n := M.alloc (| Ty.path "usize", max_access_adapter_n |) in
              M.read (|
                let~ rc :
                    Ty.path
                      "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip" :=
                  M.read (| range_checker |) in
                let~ mb :
                    Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus" :=
                  M.read (| memory_bus |) in
                let~ cmb : Ty.path "usize" := M.read (| clk_max_bits |) in
                let~ maan : Ty.path "usize" := M.read (| max_access_adapter_n |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                UnOp.not (|
                                  M.match_operator (|
                                    Ty.path "bool",
                                    maan,
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (M.find_or_pattern (Ty.tuple []) (|
                                            γ,
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Integer IntegerKind.Usize 2
                                                    |) in
                                                  Value.Tuple []));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Integer IntegerKind.Usize 4
                                                    |) in
                                                  Value.Tuple []));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Integer IntegerKind.Usize 8
                                                    |) in
                                                  Value.Tuple []));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Integer IntegerKind.Usize 16
                                                    |) in
                                                  Value.Tuple []));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Integer IntegerKind.Usize 32
                                                    |) in
                                                  Value.Tuple []))
                                            ],
                                            fun γ =>
                                              ltac:(M.monadic
                                                match γ with
                                                | [] => ltac:(M.monadic (Value.Bool true))
                                                | _ => M.impossible "wrong number of arguments"
                                                end)
                                          |)));
                                      fun γ => ltac:(M.monadic (Value.Bool false))
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic", [], [] |),
                              [ mk_str (| "assertion failed: matches!(maan, 2 | 4 | 8 | 16 | 32)" |)
                              ]
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ chips :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                          []
                          [ F ];
                        Ty.path "alloc::alloc::Global"
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                          []
                          [ F ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::flatten::Flatten")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::array::iter::IntoIter")
                            [ Value.Integer IntegerKind.Usize 5 ]
                            [
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                    []
                                    [ F ]
                                ]
                            ]
                        ],
                      [],
                      [],
                      "collect",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::flatten::Flatten")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::array::iter::IntoIter")
                              [ Value.Integer IntegerKind.Usize 5 ]
                              [
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                      []
                                      [ F ]
                                  ]
                              ]
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::array::iter::IntoIter")
                            [ Value.Integer IntegerKind.Usize 5 ]
                            [
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                    []
                                    [ F ]
                                ]
                            ],
                          [],
                          [],
                          "flatten",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::array::iter::IntoIter")
                              [ Value.Integer IntegerKind.Usize 5 ]
                              [
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                      []
                                      [ F ]
                                  ]
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 5 ]
                                [
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                        []
                                        [ F ]
                                    ]
                                ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              Value.Array
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                          []
                                          [ F ]
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                                        []
                                        [ F ],
                                      "create_access_adapter_chip",
                                      [ Value.Integer IntegerKind.Usize 2 ],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.path
                                          "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.path
                                            "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, rc |) ]
                                      |);
                                      M.read (| mb |);
                                      M.read (| cmb |);
                                      M.read (| maan |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                          []
                                          [ F ]
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                                        []
                                        [ F ],
                                      "create_access_adapter_chip",
                                      [ Value.Integer IntegerKind.Usize 4 ],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.path
                                          "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.path
                                            "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, rc |) ]
                                      |);
                                      M.read (| mb |);
                                      M.read (| cmb |);
                                      M.read (| maan |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                          []
                                          [ F ]
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                                        []
                                        [ F ],
                                      "create_access_adapter_chip",
                                      [ Value.Integer IntegerKind.Usize 8 ],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.path
                                          "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.path
                                            "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, rc |) ]
                                      |);
                                      M.read (| mb |);
                                      M.read (| cmb |);
                                      M.read (| maan |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                          []
                                          [ F ]
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                                        []
                                        [ F ],
                                      "create_access_adapter_chip",
                                      [ Value.Integer IntegerKind.Usize 16 ],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.path
                                          "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.path
                                            "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, rc |) ]
                                      |);
                                      M.read (| mb |);
                                      M.read (| cmb |);
                                      M.read (| maan |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                          []
                                          [ F ]
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                                        []
                                        [ F ],
                                      "create_access_adapter_chip",
                                      [ Value.Integer IntegerKind.Usize 32 ],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.path
                                          "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                        M.get_trait_method (|
                                          "core::clone::Clone",
                                          Ty.path
                                            "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                          [],
                                          [],
                                          "clone",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, rc |) ]
                                      |);
                                      M.read (| mb |);
                                      M.read (| cmb |);
                                      M.read (| maan |)
                                    ]
                                  |)
                                ]
                            ]
                          |)
                        ]
                      |)
                    ]
                  |) in
                let~ air_names :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                          Ty.function [ Ty.path "usize" ] (Ty.path "alloc::string::String")
                        ],
                      [],
                      [],
                      "collect",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ];
                            Ty.function [ Ty.path "usize" ] (Ty.path "alloc::string::String")
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          [],
                          [],
                          "map",
                          [],
                          [
                            Ty.path "alloc::string::String";
                            Ty.function [ Ty.path "usize" ] (Ty.path "alloc::string::String")
                          ]
                        |),
                        [
                          Value.mkStructRecord
                            "core::ops::range::Range"
                            []
                            [ Ty.path "usize" ]
                            [
                              ("start", Value.Integer IntegerKind.Usize 0);
                              ("end_",
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    "len",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, chips |) ]
                                |))
                            ];
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.path "alloc::string::String",
                                      M.alloc (| Ty.path "usize", α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let i := M.copy (| Ty.path "usize", γ |) in
                                            M.call_closure (|
                                              Ty.path "alloc::string::String",
                                              M.get_function (|
                                                "openvm_circuit::system::memory::adapter::air_name",
                                                [],
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.shl,
                                                  [
                                                    Value.Integer IntegerKind.Usize 1;
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.add,
                                                      [
                                                        M.read (| i |);
                                                        Value.Integer IntegerKind.Usize 1
                                                      ]
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |)
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                    []
                    [ F ],
                  Value.mkStructRecord
                    "openvm_circuit::system::memory::adapter::AccessAdapterInventory"
                    []
                    [ F ]
                    [ ("chips", M.read (| chips |)); ("air_names", M.read (| air_names |)) ]
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_new :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "new" (new F).
        Admitted.
        Global Typeclasses Opaque new.
        
        (*
            pub fn num_access_adapters(&self) -> usize {
                self.chips.len()
            }
        *)
        Definition num_access_adapters
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  "len",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::adapter::AccessAdapterInventory",
                      "chips"
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_num_access_adapters :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "num_access_adapters" (num_access_adapters F).
        Admitted.
        Global Typeclasses Opaque num_access_adapters.
        
        (*
            pub fn set_override_trace_heights(&mut self, overridden_heights: Vec<usize>) {
                assert_eq!(overridden_heights.len(), self.chips.len());
                for (chip, oh) in self.chips.iter_mut().zip(overridden_heights) {
                    chip.set_override_trace_heights(oh);
                }
            }
        *)
        Definition set_override_trace_heights
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; overridden_heights ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let overridden_heights :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                  overridden_heights
                |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                        ],
                      Value.Tuple
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.path "usize",
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                  "len",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, overridden_heights |) ]
                              |)
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.path "usize",
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "len",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::system::memory::adapter::AccessAdapterInventory",
                                      "chips"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let left_val :=
                            M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                          let right_val :=
                            M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_1 |) in
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        Ty.path "bool",
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.eq,
                                            [
                                              M.read (| M.deref (| M.read (| left_val |) |) |);
                                              M.read (| M.deref (| M.read (| right_val |) |) |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.never_to_any (|
                                    M.read (|
                                      let~ kind : Ty.path "core::panicking::AssertKind" :=
                                        Value.StructTuple
                                          "core::panicking::AssertKind::Eq"
                                          []
                                          []
                                          [] in
                                      M.alloc (|
                                        Ty.path "never",
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (|
                                            "core::panicking::assert_failed",
                                            [],
                                            [ Ty.path "usize"; Ty.path "usize" ]
                                          |),
                                          [
                                            M.read (| kind |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| left_val |) |)
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| right_val |) |)
                                                |)
                                              |)
                                            |);
                                            Value.StructTuple
                                              "core::option::Option::None"
                                              []
                                              [ Ty.path "core::fmt::Arguments" ]
                                              []
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (Value.Tuple []))
                            ]
                          |)))
                    ]
                  |) in
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::zip::Zip")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::IterMut")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                  []
                                  [ F ]
                              ];
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::zip::Zip")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::IterMut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                    []
                                    [ F ]
                                ];
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::zip::Zip")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::IterMut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                      []
                                      [ F ]
                                  ];
                                Ty.apply
                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                  []
                                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                              ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::zip::Zip")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::IterMut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                        []
                                        [ F ]
                                    ];
                                  Ty.apply
                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                    []
                                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::slice::iter::IterMut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                      []
                                      [ F ]
                                  ],
                                [],
                                [],
                                "zip",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::slice::iter::IterMut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                        []
                                        [ F ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                          []
                                          [ F ]
                                      ],
                                    "iter_mut",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                                    []
                                                    [ F ]
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::deref::DerefMut",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                                  []
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [],
                                            "deref_mut",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "openvm_circuit::system::memory::adapter::AccessAdapterInventory",
                                                "chips"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.read (| overridden_heights |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::zip::Zip")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::IterMut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                          []
                                          [ F ]
                                      ];
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      []
                                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                  ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path "&mut")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                                      []
                                                      [ F ]
                                                  ];
                                                Ty.path "usize"
                                              ]
                                          ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                                        []
                                                        [ F ]
                                                    ];
                                                  Ty.path "usize"
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::zip::Zip")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::IterMut")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                                      []
                                                      [ F ]
                                                  ];
                                                Ty.apply
                                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                                  []
                                                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global"
                                                  ]
                                              ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let γ1_0 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                            let γ1_1 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                            let chip :=
                                              M.copy (|
                                                Ty.apply
                                                  (Ty.path "&mut")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                                      []
                                                      [ F ]
                                                  ],
                                                γ1_0
                                              |) in
                                            let oh := M.copy (| Ty.path "usize", γ1_1 |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_trait_method (|
                                                    "openvm_circuit::system::memory::adapter::GenericAccessAdapterChipTrait",
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                                      []
                                                      [ F ],
                                                    [],
                                                    [ F ],
                                                    "set_override_trace_heights",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.MutRef,
                                                      M.deref (| M.read (| chip |) |)
                                                    |);
                                                    M.read (| oh |)
                                                  ]
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_set_override_trace_heights :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C
            (Self F)
            "set_override_trace_heights"
            (set_override_trace_heights F).
        Admitted.
        Global Typeclasses Opaque set_override_trace_heights.
        
        (*
            pub fn add_record(&mut self, record: AccessAdapterRecord<F>) {
                let n = record.data.len();
                let idx = log2_strict_usize(n) - 1;
                let chip = &mut self.chips[idx];
                debug_assert!(chip.n() == n);
                chip.add_record(record);
            }
        *)
        Definition add_record
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; record ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let record :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                    []
                    [ F ],
                  record
                |) in
              M.read (|
                let~ n : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                      "len",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          record,
                          "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                          "data"
                        |)
                      |)
                    ]
                  |) in
                let~ idx : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.sub,
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_function (| "p3_util::log2_strict_usize", [], [] |),
                        [ M.read (| n |) ]
                      |);
                      Value.Integer IntegerKind.Usize 1
                    ]
                  |) in
                let~ chip :
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                          []
                          [ F ]
                      ] :=
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                              []
                              [ F ]
                          ],
                        M.get_trait_method (|
                          "core::ops::index::IndexMut",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          [ Ty.path "usize" ],
                          "index_mut",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::adapter::AccessAdapterInventory",
                              "chips"
                            |)
                          |);
                          M.read (| idx |)
                        ]
                      |)
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            Ty.path "bool",
                                            UnOp.not (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.eq,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    M.get_trait_method (|
                                                      "openvm_circuit::system::memory::adapter::GenericAccessAdapterChipTrait",
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                                        []
                                                        [ F ],
                                                      [],
                                                      [ F ],
                                                      "n",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| chip |) |)
                                                      |)
                                                    ]
                                                  |);
                                                  M.read (| n |)
                                                ]
                                              |)
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.never_to_any (|
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (| "core::panicking::panic", [], [] |),
                                          [ mk_str (| "assertion failed: chip.n() == n" |) ]
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "openvm_circuit::system::memory::adapter::GenericAccessAdapterChipTrait",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                        []
                        [ F ],
                      [],
                      [ F ],
                      "add_record",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| chip |) |) |);
                      M.read (| record |)
                    ]
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_add_record :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "add_record" (add_record F).
        Admitted.
        Global Typeclasses Opaque add_record.
        
        (*
            pub fn extend_records(&mut self, records: Vec<AccessAdapterRecord<F>>) {
                for record in records {
                    self.add_record(record);
                }
            }
        *)
        Definition extend_records
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; records ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let records :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  records
                |) in
              M.read (|
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::into_iter::IntoIter")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [ M.read (| records |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                                              []
                                              [ F ]
                                          ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                                                []
                                                [ F ]
                                            ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "alloc::vec::into_iter::IntoIter")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                                                  []
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let record :=
                                              M.copy (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                                                  []
                                                  [ F ],
                                                γ0_0
                                              |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                                                      []
                                                      [ F ],
                                                    "add_record",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.MutRef,
                                                      M.deref (| M.read (| self |) |)
                                                    |);
                                                    M.read (| record |)
                                                  ]
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_extend_records :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "extend_records" (extend_records F).
        Admitted.
        Global Typeclasses Opaque extend_records.
        
        (*
            pub fn get_heights(&self) -> Vec<usize> {
                self.chips
                    .iter()
                    .map(|chip| chip.current_trace_height())
                    .collect()
            }
        *)
        Definition get_heights
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                            []
                            [ F ]
                        ];
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                []
                                [ F ]
                            ]
                        ]
                        (Ty.path "usize")
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                              []
                              [ F ]
                          ];
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                  []
                                  [ F ]
                              ]
                          ]
                          (Ty.path "usize")
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                            []
                            [ F ]
                        ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.path "usize";
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                  []
                                  [ F ]
                              ]
                          ]
                          (Ty.path "usize")
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                              []
                              [ F ]
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                []
                                [ F ]
                            ],
                          "iter",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                          []
                                          [ F ]
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::system::memory::adapter::AccessAdapterInventory",
                                      "chips"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.path "usize",
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                          []
                                          [ F ]
                                      ],
                                    α0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let chip :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                                  []
                                                  [ F ]
                                              ],
                                            γ
                                          |) in
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "openvm_stark_backend::chip::ChipUsageGetter",
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                              []
                                              [ F ],
                                            [],
                                            [],
                                            "current_trace_height",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| chip |) |)
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_get_heights :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "get_heights" (get_heights F).
        Admitted.
        Global Typeclasses Opaque get_heights.
        
        (*
            pub fn get_widths(&self) -> Vec<usize> {
                self.chips.iter().map(|chip| chip.trace_width()).collect()
            }
        *)
        Definition get_widths
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                            []
                            [ F ]
                        ];
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                []
                                [ F ]
                            ]
                        ]
                        (Ty.path "usize")
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                              []
                              [ F ]
                          ];
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                  []
                                  [ F ]
                              ]
                          ]
                          (Ty.path "usize")
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                            []
                            [ F ]
                        ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.path "usize";
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                  []
                                  [ F ]
                              ]
                          ]
                          (Ty.path "usize")
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                              []
                              [ F ]
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                []
                                [ F ]
                            ],
                          "iter",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                          []
                                          [ F ]
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::system::memory::adapter::AccessAdapterInventory",
                                      "chips"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.path "usize",
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                          []
                                          [ F ]
                                      ],
                                    α0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let chip :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                                  []
                                                  [ F ]
                                              ],
                                            γ
                                          |) in
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "openvm_stark_backend::chip::ChipUsageGetter",
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                              []
                                              [ F ],
                                            [],
                                            [],
                                            "trace_width",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| chip |) |)
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_get_widths :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "get_widths" (get_widths F).
        Admitted.
        Global Typeclasses Opaque get_widths.
        
        (*
            pub fn get_cells(&self) -> Vec<usize> {
                self.chips
                    .iter()
                    .map(|chip| chip.current_trace_cells())
                    .collect()
            }
        *)
        Definition get_cells (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                            []
                            [ F ]
                        ];
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                []
                                [ F ]
                            ]
                        ]
                        (Ty.path "usize")
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                              []
                              [ F ]
                          ];
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                  []
                                  [ F ]
                              ]
                          ]
                          (Ty.path "usize")
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                            []
                            [ F ]
                        ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.path "usize";
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                  []
                                  [ F ]
                              ]
                          ]
                          (Ty.path "usize")
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                              []
                              [ F ]
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                []
                                [ F ]
                            ],
                          "iter",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                          []
                                          [ F ]
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::system::memory::adapter::AccessAdapterInventory",
                                      "chips"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.path "usize",
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                          []
                                          [ F ]
                                      ],
                                    α0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let chip :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                                  []
                                                  [ F ]
                                              ],
                                            γ
                                          |) in
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_trait_method (|
                                            "openvm_stark_backend::chip::ChipUsageGetter",
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                              []
                                              [ F ],
                                            [],
                                            [],
                                            "current_trace_cells",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| chip |) |)
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_get_cells :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "get_cells" (get_cells F).
        Admitted.
        Global Typeclasses Opaque get_cells.
        
        (*
            pub fn airs<SC: StarkGenericConfig>(&self) -> Vec<AirRef<SC>>
            where
                F: PrimeField32,
                Domain<SC>: PolynomialSpace<Val = F>,
            {
                self.chips.iter().map(|chip| chip.air()).collect()
            }
        *)
        Definition airs (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [ SC ], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                            []
                            [ F ]
                        ];
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                []
                                [ F ]
                            ]
                        ]
                        (Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                            Ty.path "alloc::alloc::Global"
                          ])
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                              []
                              [ F ]
                          ];
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                  []
                                  [ F ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                            []
                            [ F ]
                        ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                  []
                                  [ F ]
                              ]
                          ]
                          (Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                              []
                              [ F ]
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                []
                                [ F ]
                            ],
                          "iter",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                          []
                                          [ F ]
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                        []
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::system::memory::adapter::AccessAdapterInventory",
                                      "chips"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                          []
                                          [ F ]
                                      ],
                                    α0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let chip :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                                  []
                                                  [ F ]
                                              ],
                                            γ
                                          |) in
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            []
                                            [
                                              Ty.dyn
                                                [ ("openvm_stark_backend::rap::AnyRap::Trait", [])
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          M.get_trait_method (|
                                            "openvm_stark_backend::chip::Chip",
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                              []
                                              [ F ],
                                            [],
                                            [ SC ],
                                            "air",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| chip |) |)
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_airs :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "airs" (airs F).
        Admitted.
        Global Typeclasses Opaque airs.
        
        (*
            pub fn air_names(&self) -> Vec<String> {
                self.air_names.clone()
            }
        *)
        Definition air_names (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ],
                M.get_trait_method (|
                  "core::clone::Clone",
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ],
                  [],
                  [],
                  "clone",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::adapter::AccessAdapterInventory",
                      "air_names"
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_air_names :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "air_names" (air_names F).
        Admitted.
        Global Typeclasses Opaque air_names.
        
        (*
            pub fn generate_air_proof_inputs<SC: StarkGenericConfig>(self) -> Vec<AirProofInput<SC>>
            where
                F: PrimeField32,
                Domain<SC>: PolynomialSpace<Val = F>,
            {
                self.chips
                    .into_iter()
                    .map(|chip| chip.generate_air_proof_input())
                    .collect()
            }
        *)
        Definition generate_air_proof_inputs
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [ SC ], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                    []
                    [ F ],
                  self
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ];
                      Ty.function
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                            []
                            [ F ]
                        ]
                        (Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ])
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                              []
                              [ F ]
                          ]
                          (Ty.apply
                            (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                            []
                            [ SC ])
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "map",
                      [],
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ];
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                              []
                              [ F ]
                          ]
                          (Ty.apply
                            (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                            []
                            [ SC ])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              self,
                              "openvm_circuit::system::memory::adapter::AccessAdapterInventory",
                              "chips"
                            |)
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                                    []
                                    [ SC ],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                      []
                                      [ F ],
                                    α0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let chip :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                              []
                                              [ F ],
                                            γ
                                          |) in
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_stark_backend::prover::types::AirProofInput")
                                            []
                                            [ SC ],
                                          M.get_trait_method (|
                                            "openvm_stark_backend::chip::Chip",
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                              []
                                              [ F ],
                                            [],
                                            [ SC ],
                                            "generate_air_proof_input",
                                            [],
                                            []
                                          |),
                                          [ M.read (| chip |) ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_generate_air_proof_inputs :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C
            (Self F)
            "generate_air_proof_inputs"
            (generate_air_proof_inputs F).
        Admitted.
        Global Typeclasses Opaque generate_air_proof_inputs.
        
        (*
            fn create_access_adapter_chip<const N: usize>(
                range_checker: SharedVariableRangeCheckerChip,
                memory_bus: MemoryBus,
                clk_max_bits: usize,
                max_access_adapter_n: usize,
            ) -> Option<GenericAccessAdapterChip<F>> {
                if N <= max_access_adapter_n {
                    Some(GenericAccessAdapterChip::new::<N>(
                        range_checker,
                        memory_bus,
                        clk_max_bits,
                    ))
                } else {
                    None
                }
            }
        *)
        Definition create_access_adapter_chip
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [ N ], [], [ range_checker; memory_bus; clk_max_bits; max_access_adapter_n ] =>
            ltac:(M.monadic
              (let range_checker :=
                M.alloc (|
                  Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                  range_checker
                |) in
              let memory_bus :=
                M.alloc (|
                  Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                  memory_bus
                |) in
              let clk_max_bits := M.alloc (| Ty.path "usize", clk_max_bits |) in
              let max_access_adapter_n := M.alloc (| Ty.path "usize", max_access_adapter_n |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                      []
                      [ F ]
                  ],
                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            Ty.path "bool",
                            M.call_closure (|
                              Ty.path "bool",
                              BinOp.le,
                              [ N; M.read (| max_access_adapter_n |) ]
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      Value.StructTuple
                        "core::option::Option::Some"
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                            []
                            [ F ]
                        ]
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                              []
                              [ F ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                                []
                                [ F ],
                              "new",
                              [ N ],
                              []
                            |),
                            [
                              M.read (| range_checker |);
                              M.read (| memory_bus |);
                              M.read (| clk_max_bits |)
                            ]
                          |)
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (Value.StructTuple
                        "core::option::Option::None"
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                            []
                            [ F ]
                        ]
                        []))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_create_access_adapter_chip :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C
            (Self F)
            "create_access_adapter_chip"
            (create_access_adapter_chip F).
        Admitted.
        Global Typeclasses Opaque create_access_adapter_chip.
      End Impl_openvm_circuit_system_memory_adapter_AccessAdapterInventory_F.
      
      (*
      Enum AccessAdapterRecordKind
      {
        const_params := [];
        ty_params := [];
        variants :=
          [
            {
              name := "Split";
              item := StructTuple [];
            };
            {
              name := "Merge";
              item :=
                StructRecord
                  [ ("left_timestamp", Ty.path "u32"); ("right_timestamp", Ty.path "u32") ];
            }
          ];
      }
      *)
      
      Axiom IsDiscriminant_AccessAdapterRecordKind_Split :
        M.IsDiscriminant
          "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind::Split"
          0.
      Axiom IsDiscriminant_AccessAdapterRecordKind_Merge :
        M.IsDiscriminant
          "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind::Merge"
          1.
      
      Module Impl_core_fmt_Debug_for_openvm_circuit_system_memory_adapter_AccessAdapterRecordKind.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind".
        
        (* Debug *)
        Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind" ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind::Split"
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "write_str",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Split" |) |) |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind::Merge",
                          "left_timestamp"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind::Merge",
                          "right_timestamp"
                        |) in
                      let __self_0 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ1_0 |) in
                      let __self_1 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ1_1 |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field2_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Merge" |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "left_timestamp" |) |)
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply (Ty.path "&") [] [ Ty.path "u32" ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "right_timestamp" |) |)
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_1 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
      End Impl_core_fmt_Debug_for_openvm_circuit_system_memory_adapter_AccessAdapterRecordKind.
      
      Module Impl_core_clone_Clone_for_openvm_circuit_system_memory_adapter_AccessAdapterRecordKind.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind".
        
        (* Clone *)
        Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind" ],
                  self
                |) in
              M.match_operator (|
                Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind",
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind::Split"
                        |) in
                      Value.StructTuple
                        "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind::Split"
                        []
                        []
                        []));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind::Merge",
                          "left_timestamp"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind::Merge",
                          "right_timestamp"
                        |) in
                      let __self_0 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ1_0 |) in
                      let __self_1 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ1_1 |) in
                      Value.mkStructRecord
                        "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind::Merge"
                        []
                        []
                        [
                          ("left_timestamp",
                            M.call_closure (|
                              Ty.path "u32",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "u32",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |)
                              ]
                            |));
                          ("right_timestamp",
                            M.call_closure (|
                              Ty.path "u32",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "u32",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |)
                              ]
                            |))
                        ]))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("clone", InstanceField.Method clone) ].
      End Impl_core_clone_Clone_for_openvm_circuit_system_memory_adapter_AccessAdapterRecordKind.
      
      Module Impl_core_marker_StructuralPartialEq_for_openvm_circuit_system_memory_adapter_AccessAdapterRecordKind.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind".
        
        Axiom Implements :
          M.IsTraitInstance
            "core::marker::StructuralPartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [].
      End Impl_core_marker_StructuralPartialEq_for_openvm_circuit_system_memory_adapter_AccessAdapterRecordKind.
      
      Module Impl_core_cmp_PartialEq_openvm_circuit_system_memory_adapter_AccessAdapterRecordKind_for_openvm_circuit_system_memory_adapter_AccessAdapterRecordKind.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind".
        
        (* PartialEq *)
        Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self; other ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind" ],
                  self
                |) in
              let other :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind" ],
                  other
                |) in
              M.read (|
                let~ __self_discr : Ty.path "isize" :=
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |) in
                let~ __arg1_discr : Ty.path "isize" :=
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                  |) in
                M.alloc (|
                  Ty.path "bool",
                  LogicalOp.and (|
                    M.call_closure (|
                      Ty.path "bool",
                      BinOp.eq,
                      [ M.read (| __self_discr |); M.read (| __arg1_discr |) ]
                    |),
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.path "bool",
                        M.alloc (|
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.path
                                    "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind"
                                ];
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.path
                                    "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind"
                                ]
                            ],
                          Value.Tuple [ M.read (| self |); M.read (| other |) ]
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.deref (| M.read (| γ0_0 |) |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind::Merge",
                                  "left_timestamp"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind::Merge",
                                  "right_timestamp"
                                |) in
                              let __self_0 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ2_0 |) in
                              let __self_1 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ2_1 |) in
                              let γ0_1 := M.deref (| M.read (| γ0_1 |) |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind::Merge",
                                  "left_timestamp"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind::Merge",
                                  "right_timestamp"
                                |) in
                              let __arg1_0 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ2_0 |) in
                              let __arg1_1 :=
                                M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ2_1 |) in
                              LogicalOp.and (|
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_trait_method (|
                                    "core::cmp::PartialEq",
                                    Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                    [],
                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ],
                                    "eq",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                    M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                                  ]
                                |),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                      [],
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ],
                                      "eq",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.Ref, __self_1 |);
                                      M.borrow (| Pointer.Kind.Ref, __arg1_1 |)
                                    ]
                                  |)))
                              |)));
                          fun γ => ltac:(M.monadic (Value.Bool true))
                        ]
                      |)))
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::cmp::PartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [ Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind" ]
            Self
            (* Instance *) [ ("eq", InstanceField.Method eq) ].
      End Impl_core_cmp_PartialEq_openvm_circuit_system_memory_adapter_AccessAdapterRecordKind_for_openvm_circuit_system_memory_adapter_AccessAdapterRecordKind.
      
      Module Impl_core_cmp_Eq_for_openvm_circuit_system_memory_adapter_AccessAdapterRecordKind.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind".
        
        (* Eq *)
        Definition assert_receiver_is_total_eq
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind" ],
                  self
                |) in
              M.match_operator (|
                Ty.tuple [],
                Value.DeclaredButUndefined,
                [ fun γ => ltac:(M.monadic (Value.Tuple [])) ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::cmp::Eq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *)
            [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
      End Impl_core_cmp_Eq_for_openvm_circuit_system_memory_adapter_AccessAdapterRecordKind.
      
      (* StructRecord
        {
          name := "AccessAdapterRecord";
          const_params := [];
          ty_params := [ "T" ];
          fields :=
            [
              ("timestamp", Ty.path "u32");
              ("address_space", T);
              ("start_index", T);
              ("data",
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ]);
              ("kind", Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind")
            ];
        } *)
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_circuit_system_memory_adapter_AccessAdapterRecord_T.
        Definition Self (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
            []
            [ T ].
        
        (* Debug *)
        Definition fmt (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                        []
                        [ T ]
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field5_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "AccessAdapterRecord" |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "timestamp" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ Ty.path "u32" ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                              "timestamp"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "address_space" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ T ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                              "address_space"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "start_index" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ T ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                              "start_index"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "data" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                              "data"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "kind" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.path
                                "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind"
                            ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.path
                                    "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind"
                                ],
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                                  "kind"
                                |)
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self T)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt T)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_circuit_system_memory_adapter_AccessAdapterRecord_T.
      
      Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_circuit_system_memory_adapter_AccessAdapterRecord_T.
        Definition Self (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
            []
            [ T ].
        
        (* Clone *)
        Definition clone (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                        []
                        [ T ]
                    ],
                  self
                |) in
              Value.mkStructRecord
                "openvm_circuit::system::memory::adapter::AccessAdapterRecord"
                []
                [ T ]
                [
                  ("timestamp",
                    M.call_closure (|
                      Ty.path "u32",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "u32",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                                "timestamp"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("address_space",
                    M.call_closure (|
                      T,
                      M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                                "address_space"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("start_index",
                    M.call_closure (|
                      T,
                      M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                                "start_index"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("data",
                    M.call_closure (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ T; Ty.path "alloc::alloc::Global" ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                                "data"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("kind",
                    M.call_closure (|
                      Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                                "kind"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self T)
            (* Instance *) [ ("clone", InstanceField.Method (clone T)) ].
      End Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_circuit_system_memory_adapter_AccessAdapterRecord_T.
      
      Module Impl_core_marker_StructuralPartialEq_for_openvm_circuit_system_memory_adapter_AccessAdapterRecord_T.
        Definition Self (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
            []
            [ T ].
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "core::marker::StructuralPartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self T)
            (* Instance *) [].
      End Impl_core_marker_StructuralPartialEq_for_openvm_circuit_system_memory_adapter_AccessAdapterRecord_T.
      
      Module Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_T_openvm_circuit_system_memory_adapter_AccessAdapterRecord_T_for_openvm_circuit_system_memory_adapter_AccessAdapterRecord_T.
        Definition Self (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
            []
            [ T ].
        
        (* PartialEq *)
        Definition eq (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self; other ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                        []
                        [ T ]
                    ],
                  self
                |) in
              let other :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                        []
                        [ T ]
                    ],
                  other
                |) in
              LogicalOp.and (|
                LogicalOp.and (|
                  LogicalOp.and (|
                    LogicalOp.and (|
                      M.call_closure (|
                        Ty.path "bool",
                        BinOp.eq,
                        [
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                              "timestamp"
                            |)
                          |);
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| other |) |),
                              "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                              "timestamp"
                            |)
                          |)
                        ]
                      |),
                      ltac:(M.monadic
                        (M.call_closure (|
                          Ty.path "bool",
                          M.get_trait_method (|
                            "core::cmp::PartialEq",
                            T,
                            [],
                            [ T ],
                            "eq",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                                "address_space"
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| other |) |),
                                "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                                "address_space"
                              |)
                            |)
                          ]
                        |)))
                    |),
                    ltac:(M.monadic
                      (M.call_closure (|
                        Ty.path "bool",
                        M.get_trait_method (| "core::cmp::PartialEq", T, [], [ T ], "eq", [], [] |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                              "start_index"
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| other |) |),
                              "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                              "start_index"
                            |)
                          |)
                        ]
                      |)))
                  |),
                  ltac:(M.monadic
                    (M.call_closure (|
                      Ty.path "bool",
                      M.get_trait_method (|
                        "core::cmp::PartialEq",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ T; Ty.path "alloc::alloc::Global" ],
                        [],
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ]
                        ],
                        "eq",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                            "data"
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| other |) |),
                            "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                            "data"
                          |)
                        |)
                      ]
                    |)))
                |),
                ltac:(M.monadic
                  (M.call_closure (|
                    Ty.path "bool",
                    M.get_trait_method (|
                      "core::cmp::PartialEq",
                      Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind",
                      [],
                      [ Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind"
                      ],
                      "eq",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                          "kind"
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| other |) |),
                          "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                          "kind"
                        |)
                      |)
                    ]
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "core::cmp::PartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                []
                [ T ]
            ]
            (Self T)
            (* Instance *) [ ("eq", InstanceField.Method (eq T)) ].
      End Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_T_openvm_circuit_system_memory_adapter_AccessAdapterRecord_T_for_openvm_circuit_system_memory_adapter_AccessAdapterRecord_T.
      
      Module Impl_core_cmp_Eq_where_core_cmp_Eq_T_for_openvm_circuit_system_memory_adapter_AccessAdapterRecord_T.
        Definition Self (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
            []
            [ T ].
        
        (* Eq *)
        Definition assert_receiver_is_total_eq
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                        []
                        [ T ]
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.tuple [],
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.tuple [],
                        Value.DeclaredButUndefined,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.tuple [],
                                Value.DeclaredButUndefined,
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.tuple [],
                                        Value.DeclaredButUndefined,
                                        [ fun γ => ltac:(M.monadic (Value.Tuple [])) ]
                                      |)))
                                ]
                              |)))
                        ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "core::cmp::Eq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self T)
            (* Instance *)
            [ ("assert_receiver_is_total_eq", InstanceField.Method (assert_receiver_is_total_eq T))
            ].
      End Impl_core_cmp_Eq_where_core_cmp_Eq_T_for_openvm_circuit_system_memory_adapter_AccessAdapterRecord_T.
      
      (* Trait *)
      (* Empty module 'GenericAccessAdapterChipTrait' *)
      
      (*
      Enum GenericAccessAdapterChip
      {
        const_params := [];
        ty_params := [ "F" ];
        variants :=
          [
            {
              name := "N2";
              item :=
                StructTuple
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                      [ Value.Integer IntegerKind.Usize 2 ]
                      [ F ]
                  ];
            };
            {
              name := "N4";
              item :=
                StructTuple
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                      [ Value.Integer IntegerKind.Usize 4 ]
                      [ F ]
                  ];
            };
            {
              name := "N8";
              item :=
                StructTuple
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                      [ Value.Integer IntegerKind.Usize 8 ]
                      [ F ]
                  ];
            };
            {
              name := "N16";
              item :=
                StructTuple
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                      [ Value.Integer IntegerKind.Usize 16 ]
                      [ F ]
                  ];
            };
            {
              name := "N32";
              item :=
                StructTuple
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [ F ]
                  ];
            }
          ];
      }
      *)
      
      Axiom IsDiscriminant_GenericAccessAdapterChip_N2 :
        M.IsDiscriminant "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N2" 0.
      Axiom IsDiscriminant_GenericAccessAdapterChip_N4 :
        M.IsDiscriminant "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N4" 1.
      Axiom IsDiscriminant_GenericAccessAdapterChip_N8 :
        M.IsDiscriminant "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N8" 2.
      Axiom IsDiscriminant_GenericAccessAdapterChip_N16 :
        M.IsDiscriminant "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N16" 3.
      Axiom IsDiscriminant_GenericAccessAdapterChip_N32 :
        M.IsDiscriminant "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N32" 4.
      
      Module Impl_core_convert_From_openvm_circuit_system_memory_adapter_AccessAdapterChip_Usize_2_F_for_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
            []
            [ F ].
        
        (* #[enum_dispatch(GenericAccessAdapterChipTrait<F>)] *)
        Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ v ] =>
            ltac:(M.monadic
              (let v :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                    [ Value.Integer IntegerKind.Usize 2 ]
                    [ F ],
                  v
                |) in
              Value.StructTuple
                "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N2"
                []
                [ F ]
                [ M.read (| v |) ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::convert::From"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                [ Value.Integer IntegerKind.Usize 2 ]
                [ F ]
            ]
            (Self F)
            (* Instance *) [ ("from", InstanceField.Method (from F)) ].
      End Impl_core_convert_From_openvm_circuit_system_memory_adapter_AccessAdapterChip_Usize_2_F_for_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
      
      Module Impl_core_convert_From_openvm_circuit_system_memory_adapter_AccessAdapterChip_Usize_4_F_for_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
            []
            [ F ].
        
        (* #[enum_dispatch(GenericAccessAdapterChipTrait<F>)] *)
        Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ v ] =>
            ltac:(M.monadic
              (let v :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                    [ Value.Integer IntegerKind.Usize 4 ]
                    [ F ],
                  v
                |) in
              Value.StructTuple
                "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N4"
                []
                [ F ]
                [ M.read (| v |) ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::convert::From"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                [ Value.Integer IntegerKind.Usize 4 ]
                [ F ]
            ]
            (Self F)
            (* Instance *) [ ("from", InstanceField.Method (from F)) ].
      End Impl_core_convert_From_openvm_circuit_system_memory_adapter_AccessAdapterChip_Usize_4_F_for_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
      
      Module Impl_core_convert_From_openvm_circuit_system_memory_adapter_AccessAdapterChip_Usize_8_F_for_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
            []
            [ F ].
        
        (* #[enum_dispatch(GenericAccessAdapterChipTrait<F>)] *)
        Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ v ] =>
            ltac:(M.monadic
              (let v :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                    [ Value.Integer IntegerKind.Usize 8 ]
                    [ F ],
                  v
                |) in
              Value.StructTuple
                "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N8"
                []
                [ F ]
                [ M.read (| v |) ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::convert::From"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                [ Value.Integer IntegerKind.Usize 8 ]
                [ F ]
            ]
            (Self F)
            (* Instance *) [ ("from", InstanceField.Method (from F)) ].
      End Impl_core_convert_From_openvm_circuit_system_memory_adapter_AccessAdapterChip_Usize_8_F_for_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
      
      Module Impl_core_convert_From_openvm_circuit_system_memory_adapter_AccessAdapterChip_Usize_16_F_for_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
            []
            [ F ].
        
        (* #[enum_dispatch(GenericAccessAdapterChipTrait<F>)] *)
        Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ v ] =>
            ltac:(M.monadic
              (let v :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                    [ Value.Integer IntegerKind.Usize 16 ]
                    [ F ],
                  v
                |) in
              Value.StructTuple
                "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N16"
                []
                [ F ]
                [ M.read (| v |) ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::convert::From"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                [ Value.Integer IntegerKind.Usize 16 ]
                [ F ]
            ]
            (Self F)
            (* Instance *) [ ("from", InstanceField.Method (from F)) ].
      End Impl_core_convert_From_openvm_circuit_system_memory_adapter_AccessAdapterChip_Usize_16_F_for_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
      
      Module Impl_core_convert_From_openvm_circuit_system_memory_adapter_AccessAdapterChip_Usize_32_F_for_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
            []
            [ F ].
        
        (* #[enum_dispatch(GenericAccessAdapterChipTrait<F>)] *)
        Definition from (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ v ] =>
            ltac:(M.monadic
              (let v :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                    [ Value.Integer IntegerKind.Usize 32 ]
                    [ F ],
                  v
                |) in
              Value.StructTuple
                "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N32"
                []
                [ F ]
                [ M.read (| v |) ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::convert::From"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                [ Value.Integer IntegerKind.Usize 32 ]
                [ F ]
            ]
            (Self F)
            (* Instance *) [ ("from", InstanceField.Method (from F)) ].
      End Impl_core_convert_From_openvm_circuit_system_memory_adapter_AccessAdapterChip_Usize_32_F_for_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
      
      Module Impl_core_convert_TryInto_openvm_circuit_system_memory_adapter_AccessAdapterChip_Usize_2_F_for_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
            []
            [ F ].
        
        (* #[enum_dispatch(GenericAccessAdapterChipTrait<F>)] *)
        Definition _Error (F : Ty.t) : Ty.t := Ty.apply (Ty.path "&") [] [ Ty.path "str" ].
        
        (* #[enum_dispatch(GenericAccessAdapterChipTrait<F>)] *)
        Definition try_into (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                    []
                    [ F ],
                  self
                |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                      [ Value.Integer IntegerKind.Usize 2 ]
                      [ F ];
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                  ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N2",
                          0
                        |) in
                      let v :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ F ],
                          γ0_0
                        |) in
                      Value.StructTuple
                        "core::result::Result::Ok"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ F ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                        [ M.read (| v |) ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N4",
                          0
                        |) in
                      let v :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ F ],
                          γ0_0
                        |) in
                      Value.StructTuple
                        "core::result::Result::Err"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ F ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "Tried to convert variant N4 to N2" |) |)
                          |)
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N8",
                          0
                        |) in
                      let v :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ F ],
                          γ0_0
                        |) in
                      Value.StructTuple
                        "core::result::Result::Err"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ F ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "Tried to convert variant N8 to N2" |) |)
                          |)
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N16",
                          0
                        |) in
                      let v :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [ F ],
                          γ0_0
                        |) in
                      Value.StructTuple
                        "core::result::Result::Err"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ F ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "Tried to convert variant N16 to N2" |) |)
                          |)
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N32",
                          0
                        |) in
                      let v :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ F ],
                          γ0_0
                        |) in
                      Value.StructTuple
                        "core::result::Result::Err"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ F ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "Tried to convert variant N32 to N2" |) |)
                          |)
                        ]))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::convert::TryInto"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                [ Value.Integer IntegerKind.Usize 2 ]
                [ F ]
            ]
            (Self F)
            (* Instance *)
            [
              ("Error", InstanceField.Ty (_Error F));
              ("try_into", InstanceField.Method (try_into F))
            ].
      End Impl_core_convert_TryInto_openvm_circuit_system_memory_adapter_AccessAdapterChip_Usize_2_F_for_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
      
      Module Impl_core_convert_TryInto_openvm_circuit_system_memory_adapter_AccessAdapterChip_Usize_4_F_for_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
            []
            [ F ].
        
        (* #[enum_dispatch(GenericAccessAdapterChipTrait<F>)] *)
        Definition _Error (F : Ty.t) : Ty.t := Ty.apply (Ty.path "&") [] [ Ty.path "str" ].
        
        (* #[enum_dispatch(GenericAccessAdapterChipTrait<F>)] *)
        Definition try_into (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                    []
                    [ F ],
                  self
                |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                      [ Value.Integer IntegerKind.Usize 4 ]
                      [ F ];
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                  ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N4",
                          0
                        |) in
                      let v :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ F ],
                          γ0_0
                        |) in
                      Value.StructTuple
                        "core::result::Result::Ok"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ F ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                        [ M.read (| v |) ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N2",
                          0
                        |) in
                      let v :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ F ],
                          γ0_0
                        |) in
                      Value.StructTuple
                        "core::result::Result::Err"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ F ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "Tried to convert variant N2 to N4" |) |)
                          |)
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N8",
                          0
                        |) in
                      let v :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ F ],
                          γ0_0
                        |) in
                      Value.StructTuple
                        "core::result::Result::Err"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ F ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "Tried to convert variant N8 to N4" |) |)
                          |)
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N16",
                          0
                        |) in
                      let v :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [ F ],
                          γ0_0
                        |) in
                      Value.StructTuple
                        "core::result::Result::Err"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ F ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "Tried to convert variant N16 to N4" |) |)
                          |)
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N32",
                          0
                        |) in
                      let v :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ F ],
                          γ0_0
                        |) in
                      Value.StructTuple
                        "core::result::Result::Err"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ F ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "Tried to convert variant N32 to N4" |) |)
                          |)
                        ]))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::convert::TryInto"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                [ Value.Integer IntegerKind.Usize 4 ]
                [ F ]
            ]
            (Self F)
            (* Instance *)
            [
              ("Error", InstanceField.Ty (_Error F));
              ("try_into", InstanceField.Method (try_into F))
            ].
      End Impl_core_convert_TryInto_openvm_circuit_system_memory_adapter_AccessAdapterChip_Usize_4_F_for_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
      
      Module Impl_core_convert_TryInto_openvm_circuit_system_memory_adapter_AccessAdapterChip_Usize_8_F_for_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
            []
            [ F ].
        
        (* #[enum_dispatch(GenericAccessAdapterChipTrait<F>)] *)
        Definition _Error (F : Ty.t) : Ty.t := Ty.apply (Ty.path "&") [] [ Ty.path "str" ].
        
        (* #[enum_dispatch(GenericAccessAdapterChipTrait<F>)] *)
        Definition try_into (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                    []
                    [ F ],
                  self
                |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                      [ Value.Integer IntegerKind.Usize 8 ]
                      [ F ];
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                  ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N8",
                          0
                        |) in
                      let v :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ F ],
                          γ0_0
                        |) in
                      Value.StructTuple
                        "core::result::Result::Ok"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ F ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                        [ M.read (| v |) ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N2",
                          0
                        |) in
                      let v :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ F ],
                          γ0_0
                        |) in
                      Value.StructTuple
                        "core::result::Result::Err"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ F ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "Tried to convert variant N2 to N8" |) |)
                          |)
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N4",
                          0
                        |) in
                      let v :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ F ],
                          γ0_0
                        |) in
                      Value.StructTuple
                        "core::result::Result::Err"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ F ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "Tried to convert variant N4 to N8" |) |)
                          |)
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N16",
                          0
                        |) in
                      let v :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [ F ],
                          γ0_0
                        |) in
                      Value.StructTuple
                        "core::result::Result::Err"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ F ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "Tried to convert variant N16 to N8" |) |)
                          |)
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N32",
                          0
                        |) in
                      let v :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ F ],
                          γ0_0
                        |) in
                      Value.StructTuple
                        "core::result::Result::Err"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ F ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "Tried to convert variant N32 to N8" |) |)
                          |)
                        ]))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::convert::TryInto"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                [ Value.Integer IntegerKind.Usize 8 ]
                [ F ]
            ]
            (Self F)
            (* Instance *)
            [
              ("Error", InstanceField.Ty (_Error F));
              ("try_into", InstanceField.Method (try_into F))
            ].
      End Impl_core_convert_TryInto_openvm_circuit_system_memory_adapter_AccessAdapterChip_Usize_8_F_for_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
      
      Module Impl_core_convert_TryInto_openvm_circuit_system_memory_adapter_AccessAdapterChip_Usize_16_F_for_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
            []
            [ F ].
        
        (* #[enum_dispatch(GenericAccessAdapterChipTrait<F>)] *)
        Definition _Error (F : Ty.t) : Ty.t := Ty.apply (Ty.path "&") [] [ Ty.path "str" ].
        
        (* #[enum_dispatch(GenericAccessAdapterChipTrait<F>)] *)
        Definition try_into (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                    []
                    [ F ],
                  self
                |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                      [ Value.Integer IntegerKind.Usize 16 ]
                      [ F ];
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                  ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N16",
                          0
                        |) in
                      let v :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [ F ],
                          γ0_0
                        |) in
                      Value.StructTuple
                        "core::result::Result::Ok"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [ F ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                        [ M.read (| v |) ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N2",
                          0
                        |) in
                      let v :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ F ],
                          γ0_0
                        |) in
                      Value.StructTuple
                        "core::result::Result::Err"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [ F ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "Tried to convert variant N2 to N16" |) |)
                          |)
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N4",
                          0
                        |) in
                      let v :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ F ],
                          γ0_0
                        |) in
                      Value.StructTuple
                        "core::result::Result::Err"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [ F ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "Tried to convert variant N4 to N16" |) |)
                          |)
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N8",
                          0
                        |) in
                      let v :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ F ],
                          γ0_0
                        |) in
                      Value.StructTuple
                        "core::result::Result::Err"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [ F ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "Tried to convert variant N8 to N16" |) |)
                          |)
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N32",
                          0
                        |) in
                      let v :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ F ],
                          γ0_0
                        |) in
                      Value.StructTuple
                        "core::result::Result::Err"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [ F ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "Tried to convert variant N32 to N16" |) |)
                          |)
                        ]))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::convert::TryInto"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                [ Value.Integer IntegerKind.Usize 16 ]
                [ F ]
            ]
            (Self F)
            (* Instance *)
            [
              ("Error", InstanceField.Ty (_Error F));
              ("try_into", InstanceField.Method (try_into F))
            ].
      End Impl_core_convert_TryInto_openvm_circuit_system_memory_adapter_AccessAdapterChip_Usize_16_F_for_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
      
      Module Impl_core_convert_TryInto_openvm_circuit_system_memory_adapter_AccessAdapterChip_Usize_32_F_for_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
            []
            [ F ].
        
        (* #[enum_dispatch(GenericAccessAdapterChipTrait<F>)] *)
        Definition _Error (F : Ty.t) : Ty.t := Ty.apply (Ty.path "&") [] [ Ty.path "str" ].
        
        (* #[enum_dispatch(GenericAccessAdapterChipTrait<F>)] *)
        Definition try_into (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                    []
                    [ F ],
                  self
                |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                      [ Value.Integer IntegerKind.Usize 32 ]
                      [ F ];
                    Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                  ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N32",
                          0
                        |) in
                      let v :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ F ],
                          γ0_0
                        |) in
                      Value.StructTuple
                        "core::result::Result::Ok"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ F ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                        [ M.read (| v |) ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N2",
                          0
                        |) in
                      let v :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ F ],
                          γ0_0
                        |) in
                      Value.StructTuple
                        "core::result::Result::Err"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ F ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "Tried to convert variant N2 to N32" |) |)
                          |)
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N4",
                          0
                        |) in
                      let v :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ F ],
                          γ0_0
                        |) in
                      Value.StructTuple
                        "core::result::Result::Err"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ F ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "Tried to convert variant N4 to N32" |) |)
                          |)
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N8",
                          0
                        |) in
                      let v :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ F ],
                          γ0_0
                        |) in
                      Value.StructTuple
                        "core::result::Result::Err"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ F ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "Tried to convert variant N8 to N32" |) |)
                          |)
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N16",
                          0
                        |) in
                      let v :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [ F ],
                          γ0_0
                        |) in
                      Value.StructTuple
                        "core::result::Result::Err"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ F ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "str" ]
                        ]
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "Tried to convert variant N16 to N32" |) |)
                          |)
                        ]))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::convert::TryInto"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                [ Value.Integer IntegerKind.Usize 32 ]
                [ F ]
            ]
            (Self F)
            (* Instance *)
            [
              ("Error", InstanceField.Ty (_Error F));
              ("try_into", InstanceField.Method (try_into F))
            ].
      End Impl_core_convert_TryInto_openvm_circuit_system_memory_adapter_AccessAdapterChip_Usize_32_F_for_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
      
      Module Impl_openvm_circuit_system_memory_adapter_GenericAccessAdapterChipTrait_F_for_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
            []
            [ F ].
        
        (* #[enum_dispatch(GenericAccessAdapterChipTrait<F>)] *)
        Definition set_override_trace_heights
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; __enum_dispatch_arg_0 ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let __enum_dispatch_arg_0 := M.alloc (| Ty.path "usize", __enum_dispatch_arg_0 |) in
              M.match_operator (|
                Ty.tuple [],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N2",
                          0
                        |) in
                      let inner :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_trait_method (|
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChipTrait",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ F ],
                          [],
                          [ F ],
                          "set_override_trace_heights",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| inner |) |) |);
                          M.read (| __enum_dispatch_arg_0 |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N4",
                          0
                        |) in
                      let inner :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_trait_method (|
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChipTrait",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ F ],
                          [],
                          [ F ],
                          "set_override_trace_heights",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| inner |) |) |);
                          M.read (| __enum_dispatch_arg_0 |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N8",
                          0
                        |) in
                      let inner :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 8 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_trait_method (|
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChipTrait",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ F ],
                          [],
                          [ F ],
                          "set_override_trace_heights",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| inner |) |) |);
                          M.read (| __enum_dispatch_arg_0 |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N16",
                          0
                        |) in
                      let inner :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 16 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_trait_method (|
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChipTrait",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [ F ],
                          [],
                          [ F ],
                          "set_override_trace_heights",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| inner |) |) |);
                          M.read (| __enum_dispatch_arg_0 |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N32",
                          0
                        |) in
                      let inner :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_trait_method (|
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChipTrait",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ F ],
                          [],
                          [ F ],
                          "set_override_trace_heights",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| inner |) |) |);
                          M.read (| __enum_dispatch_arg_0 |)
                        ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[enum_dispatch(GenericAccessAdapterChipTrait<F>)] *)
        Definition add_record
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; __enum_dispatch_arg_0 ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let __enum_dispatch_arg_0 :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                    []
                    [ F ],
                  __enum_dispatch_arg_0
                |) in
              M.match_operator (|
                Ty.tuple [],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N2",
                          0
                        |) in
                      let inner :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_trait_method (|
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChipTrait",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ F ],
                          [],
                          [ F ],
                          "add_record",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| inner |) |) |);
                          M.read (| __enum_dispatch_arg_0 |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N4",
                          0
                        |) in
                      let inner :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_trait_method (|
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChipTrait",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ F ],
                          [],
                          [ F ],
                          "add_record",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| inner |) |) |);
                          M.read (| __enum_dispatch_arg_0 |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N8",
                          0
                        |) in
                      let inner :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 8 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_trait_method (|
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChipTrait",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ F ],
                          [],
                          [ F ],
                          "add_record",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| inner |) |) |);
                          M.read (| __enum_dispatch_arg_0 |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N16",
                          0
                        |) in
                      let inner :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 16 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_trait_method (|
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChipTrait",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [ F ],
                          [],
                          [ F ],
                          "add_record",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| inner |) |) |);
                          M.read (| __enum_dispatch_arg_0 |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N32",
                          0
                        |) in
                      let inner :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_trait_method (|
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChipTrait",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ F ],
                          [],
                          [ F ],
                          "add_record",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| inner |) |) |);
                          M.read (| __enum_dispatch_arg_0 |)
                        ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[enum_dispatch(GenericAccessAdapterChipTrait<F>)] *)
        Definition n (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.path "usize",
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N2",
                          0
                        |) in
                      let inner :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChipTrait",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ F ],
                          [],
                          [ F ],
                          "n",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| inner |) |) |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N4",
                          0
                        |) in
                      let inner :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChipTrait",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ F ],
                          [],
                          [ F ],
                          "n",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| inner |) |) |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N8",
                          0
                        |) in
                      let inner :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 8 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChipTrait",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ F ],
                          [],
                          [ F ],
                          "n",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| inner |) |) |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N16",
                          0
                        |) in
                      let inner :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 16 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChipTrait",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [ F ],
                          [],
                          [ F ],
                          "n",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| inner |) |) |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N32",
                          0
                        |) in
                      let inner :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChipTrait",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ F ],
                          [],
                          [ F ],
                          "n",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| inner |) |) |) ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* #[enum_dispatch(GenericAccessAdapterChipTrait<F>)] *)
        Definition generate_trace
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                    []
                    [ F ],
                  self
                |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "p3_matrix::dense::DenseMatrix")
                  []
                  [ F; Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                  ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N2",
                          0
                        |) in
                      let inner :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ F ],
                          γ0_0
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ]
                          ],
                        M.get_trait_method (|
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChipTrait",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ F ],
                          [],
                          [ F ],
                          "generate_trace",
                          [],
                          []
                        |),
                        [ M.read (| inner |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N4",
                          0
                        |) in
                      let inner :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ F ],
                          γ0_0
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ]
                          ],
                        M.get_trait_method (|
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChipTrait",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ F ],
                          [],
                          [ F ],
                          "generate_trace",
                          [],
                          []
                        |),
                        [ M.read (| inner |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N8",
                          0
                        |) in
                      let inner :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ F ],
                          γ0_0
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ]
                          ],
                        M.get_trait_method (|
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChipTrait",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ F ],
                          [],
                          [ F ],
                          "generate_trace",
                          [],
                          []
                        |),
                        [ M.read (| inner |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N16",
                          0
                        |) in
                      let inner :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [ F ],
                          γ0_0
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ]
                          ],
                        M.get_trait_method (|
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChipTrait",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [ F ],
                          [],
                          [ F ],
                          "generate_trace",
                          [],
                          []
                        |),
                        [ M.read (| inner |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N32",
                          0
                        |) in
                      let inner :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ F ],
                          γ0_0
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ]
                          ],
                        M.get_trait_method (|
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChipTrait",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ F ],
                          [],
                          [ F ],
                          "generate_trace",
                          [],
                          []
                        |),
                        [ M.read (| inner |) ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "openvm_circuit::system::memory::adapter::GenericAccessAdapterChipTrait"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self F)
            (* Instance *)
            [
              ("set_override_trace_heights", InstanceField.Method (set_override_trace_heights F));
              ("add_record", InstanceField.Method (add_record F));
              ("n", InstanceField.Method (n F));
              ("generate_trace", InstanceField.Method (generate_trace F))
            ].
      End Impl_openvm_circuit_system_memory_adapter_GenericAccessAdapterChipTrait_F_for_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
      
      Module Impl_openvm_stark_backend_chip_Chip_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_commit_domain_PolynomialSpace_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_where_p3_field_field_PrimeField32_F_SC_for_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
        Definition Self (F SC : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
            []
            [ F ].
        
        (* Chip *)
        Definition air (F SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F SC in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ])
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ]),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                          Ty.path "alloc::alloc::Global"
                        ])
                      (Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                          Ty.path "alloc::alloc::Global"
                        ]),
                    [
                      M.match_operator (|
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        self,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.deref (| M.read (| γ |) |) in
                              let γ1_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N2",
                                  0
                                |) in
                              let x :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                        [ Value.Integer IntegerKind.Usize 2 ]
                                        [ F ]
                                    ],
                                  γ1_0
                                |) in
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.pointer_coercion
                                  M.PointerCoercion.Unsize
                                  (Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                      Ty.path "alloc::alloc::Global"
                                    ])
                                  (Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                      Ty.path "alloc::alloc::Global"
                                    ]),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    M.get_trait_method (|
                                      "openvm_stark_backend::chip::Chip",
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                        [ Value.Integer IntegerKind.Usize 2 ]
                                        [ F ],
                                      [],
                                      [ SC ],
                                      "air",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |)
                                    ]
                                  |)
                                ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.deref (| M.read (| γ |) |) in
                              let γ1_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N4",
                                  0
                                |) in
                              let x :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                        [ Value.Integer IntegerKind.Usize 4 ]
                                        [ F ]
                                    ],
                                  γ1_0
                                |) in
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.get_trait_method (|
                                  "openvm_stark_backend::chip::Chip",
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [ F ],
                                  [],
                                  [ SC ],
                                  "air",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.deref (| M.read (| γ |) |) in
                              let γ1_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N8",
                                  0
                                |) in
                              let x :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                        [ Value.Integer IntegerKind.Usize 8 ]
                                        [ F ]
                                    ],
                                  γ1_0
                                |) in
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.get_trait_method (|
                                  "openvm_stark_backend::chip::Chip",
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                    [ Value.Integer IntegerKind.Usize 8 ]
                                    [ F ],
                                  [],
                                  [ SC ],
                                  "air",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.deref (| M.read (| γ |) |) in
                              let γ1_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N16",
                                  0
                                |) in
                              let x :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                        [ Value.Integer IntegerKind.Usize 16 ]
                                        [ F ]
                                    ],
                                  γ1_0
                                |) in
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.get_trait_method (|
                                  "openvm_stark_backend::chip::Chip",
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                    [ Value.Integer IntegerKind.Usize 16 ]
                                    [ F ],
                                  [],
                                  [ SC ],
                                  "air",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.deref (| M.read (| γ |) |) in
                              let γ1_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N32",
                                  0
                                |) in
                              let x :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                        [ Value.Integer IntegerKind.Usize 32 ]
                                        [ F ]
                                    ],
                                  γ1_0
                                |) in
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.get_trait_method (|
                                  "openvm_stark_backend::chip::Chip",
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [ F ],
                                  [],
                                  [ SC ],
                                  "air",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                              |)))
                        ]
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* Chip *)
        Definition generate_air_proof_input
            (F SC : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F SC in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                    []
                    [ F ],
                  self
                |) in
              M.match_operator (|
                Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N2",
                          0
                        |) in
                      let x :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ F ],
                          γ0_0
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ],
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::Chip",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ F ],
                          [],
                          [ SC ],
                          "generate_air_proof_input",
                          [],
                          []
                        |),
                        [ M.read (| x |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N4",
                          0
                        |) in
                      let x :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ F ],
                          γ0_0
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ],
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::Chip",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ F ],
                          [],
                          [ SC ],
                          "generate_air_proof_input",
                          [],
                          []
                        |),
                        [ M.read (| x |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N8",
                          0
                        |) in
                      let x :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ F ],
                          γ0_0
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ],
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::Chip",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ F ],
                          [],
                          [ SC ],
                          "generate_air_proof_input",
                          [],
                          []
                        |),
                        [ M.read (| x |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N16",
                          0
                        |) in
                      let x :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [ F ],
                          γ0_0
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ],
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::Chip",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [ F ],
                          [],
                          [ SC ],
                          "generate_air_proof_input",
                          [],
                          []
                        |),
                        [ M.read (| x |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N32",
                          0
                        |) in
                      let x :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ F ],
                          γ0_0
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ],
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::Chip",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ F ],
                          [],
                          [ SC ],
                          "generate_air_proof_input",
                          [],
                          []
                        |),
                        [ M.read (| x |) ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* Chip *)
        Definition generate_air_proof_input_with_id
            (F SC : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F SC in
          match ε, τ, α with
          | [], [], [ self; air_id ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                    []
                    [ F ],
                  self
                |) in
              let air_id := M.alloc (| Ty.path "usize", air_id |) in
              M.match_operator (|
                Ty.tuple
                  [
                    Ty.path "usize";
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ]
                  ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N2",
                          0
                        |) in
                      let x :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ F ],
                          γ0_0
                        |) in
                      M.call_closure (|
                        Ty.tuple
                          [
                            Ty.path "usize";
                            Ty.apply
                              (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                              []
                              [ SC ]
                          ],
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::Chip",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ F ],
                          [],
                          [ SC ],
                          "generate_air_proof_input_with_id",
                          [],
                          []
                        |),
                        [ M.read (| x |); M.read (| air_id |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N4",
                          0
                        |) in
                      let x :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ F ],
                          γ0_0
                        |) in
                      M.call_closure (|
                        Ty.tuple
                          [
                            Ty.path "usize";
                            Ty.apply
                              (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                              []
                              [ SC ]
                          ],
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::Chip",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ F ],
                          [],
                          [ SC ],
                          "generate_air_proof_input_with_id",
                          [],
                          []
                        |),
                        [ M.read (| x |); M.read (| air_id |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N8",
                          0
                        |) in
                      let x :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ F ],
                          γ0_0
                        |) in
                      M.call_closure (|
                        Ty.tuple
                          [
                            Ty.path "usize";
                            Ty.apply
                              (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                              []
                              [ SC ]
                          ],
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::Chip",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ F ],
                          [],
                          [ SC ],
                          "generate_air_proof_input_with_id",
                          [],
                          []
                        |),
                        [ M.read (| x |); M.read (| air_id |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N16",
                          0
                        |) in
                      let x :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [ F ],
                          γ0_0
                        |) in
                      M.call_closure (|
                        Ty.tuple
                          [
                            Ty.path "usize";
                            Ty.apply
                              (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                              []
                              [ SC ]
                          ],
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::Chip",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [ F ],
                          [],
                          [ SC ],
                          "generate_air_proof_input_with_id",
                          [],
                          []
                        |),
                        [ M.read (| x |); M.read (| air_id |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N32",
                          0
                        |) in
                      let x :=
                        M.copy (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ F ],
                          γ0_0
                        |) in
                      M.call_closure (|
                        Ty.tuple
                          [
                            Ty.path "usize";
                            Ty.apply
                              (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                              []
                              [ SC ]
                          ],
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::Chip",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ F ],
                          [],
                          [ SC ],
                          "generate_air_proof_input_with_id",
                          [],
                          []
                        |),
                        [ M.read (| x |); M.read (| air_id |) ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F SC : Ty.t),
          M.IsTraitInstance
            "openvm_stark_backend::chip::Chip"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ SC ]
            (Self F SC)
            (* Instance *)
            [
              ("air", InstanceField.Method (air F SC));
              ("generate_air_proof_input", InstanceField.Method (generate_air_proof_input F SC));
              ("generate_air_proof_input_with_id",
                InstanceField.Method (generate_air_proof_input_with_id F SC))
            ].
      End Impl_openvm_stark_backend_chip_Chip_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_commit_domain_PolynomialSpace_associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_where_p3_field_field_PrimeField32_F_SC_for_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
      
      Module Impl_openvm_stark_backend_chip_ChipUsageGetter_for_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
            []
            [ F ].
        
        (* ChipUsageGetter *)
        Definition air_name (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.path "alloc::string::String",
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N2",
                          0
                        |) in
                      let x :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.path "alloc::string::String",
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::ChipUsageGetter",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ F ],
                          [],
                          [],
                          "air_name",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N4",
                          0
                        |) in
                      let x :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.path "alloc::string::String",
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::ChipUsageGetter",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ F ],
                          [],
                          [],
                          "air_name",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N8",
                          0
                        |) in
                      let x :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 8 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.path "alloc::string::String",
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::ChipUsageGetter",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ F ],
                          [],
                          [],
                          "air_name",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N16",
                          0
                        |) in
                      let x :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 16 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.path "alloc::string::String",
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::ChipUsageGetter",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [ F ],
                          [],
                          [],
                          "air_name",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N32",
                          0
                        |) in
                      let x :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.path "alloc::string::String",
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::ChipUsageGetter",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ F ],
                          [],
                          [],
                          "air_name",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* ChipUsageGetter *)
        Definition constant_trace_height
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N2",
                          0
                        |) in
                      let x :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::ChipUsageGetter",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ F ],
                          [],
                          [],
                          "constant_trace_height",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N4",
                          0
                        |) in
                      let x :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::ChipUsageGetter",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ F ],
                          [],
                          [],
                          "constant_trace_height",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N8",
                          0
                        |) in
                      let x :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 8 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::ChipUsageGetter",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ F ],
                          [],
                          [],
                          "constant_trace_height",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N16",
                          0
                        |) in
                      let x :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 16 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::ChipUsageGetter",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [ F ],
                          [],
                          [],
                          "constant_trace_height",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N32",
                          0
                        |) in
                      let x :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ],
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::ChipUsageGetter",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ F ],
                          [],
                          [],
                          "constant_trace_height",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* ChipUsageGetter *)
        Definition current_trace_height
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.path "usize",
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N2",
                          0
                        |) in
                      let x :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::ChipUsageGetter",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ F ],
                          [],
                          [],
                          "current_trace_height",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N4",
                          0
                        |) in
                      let x :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::ChipUsageGetter",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ F ],
                          [],
                          [],
                          "current_trace_height",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N8",
                          0
                        |) in
                      let x :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 8 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::ChipUsageGetter",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ F ],
                          [],
                          [],
                          "current_trace_height",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N16",
                          0
                        |) in
                      let x :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 16 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::ChipUsageGetter",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [ F ],
                          [],
                          [],
                          "current_trace_height",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N32",
                          0
                        |) in
                      let x :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::ChipUsageGetter",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ F ],
                          [],
                          [],
                          "current_trace_height",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (* ChipUsageGetter *)
        Definition trace_width
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.path "usize",
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N2",
                          0
                        |) in
                      let x :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::ChipUsageGetter",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ F ],
                          [],
                          [],
                          "trace_width",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N4",
                          0
                        |) in
                      let x :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::ChipUsageGetter",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ F ],
                          [],
                          [],
                          "trace_width",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N8",
                          0
                        |) in
                      let x :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 8 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::ChipUsageGetter",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ F ],
                          [],
                          [],
                          "trace_width",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N16",
                          0
                        |) in
                      let x :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 16 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::ChipUsageGetter",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 16 ]
                            [ F ],
                          [],
                          [],
                          "trace_width",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N32",
                          0
                        |) in
                      let x :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                [ Value.Integer IntegerKind.Usize 32 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_trait_method (|
                          "openvm_stark_backend::chip::ChipUsageGetter",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                            [ Value.Integer IntegerKind.Usize 32 ]
                            [ F ],
                          [],
                          [],
                          "trace_width",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| x |) |) |) ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "openvm_stark_backend::chip::ChipUsageGetter"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *)
            [
              ("air_name", InstanceField.Method (air_name F));
              ("constant_trace_height", InstanceField.Method (constant_trace_height F));
              ("current_trace_height", InstanceField.Method (current_trace_height F));
              ("trace_width", InstanceField.Method (trace_width F))
            ].
      End Impl_openvm_stark_backend_chip_ChipUsageGetter_for_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
      
      Module Impl_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
            []
            [ F ].
        
        (*
            fn new<const N: usize>(
                range_checker: SharedVariableRangeCheckerChip,
                memory_bus: MemoryBus,
                clk_max_bits: usize,
            ) -> Self {
                let rc = range_checker;
                let mb = memory_bus;
                let cmb = clk_max_bits;
                match N {
                    2 => GenericAccessAdapterChip::N2(AccessAdapterChip::new(rc, mb, cmb)),
                    4 => GenericAccessAdapterChip::N4(AccessAdapterChip::new(rc, mb, cmb)),
                    8 => GenericAccessAdapterChip::N8(AccessAdapterChip::new(rc, mb, cmb)),
                    16 => GenericAccessAdapterChip::N16(AccessAdapterChip::new(rc, mb, cmb)),
                    32 => GenericAccessAdapterChip::N32(AccessAdapterChip::new(rc, mb, cmb)),
                    _ => panic!("Only supports N in (2, 4, 8, 16, 32)"),
                }
            }
        *)
        Definition new (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [ N ], [], [ range_checker; memory_bus; clk_max_bits ] =>
            ltac:(M.monadic
              (let range_checker :=
                M.alloc (|
                  Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                  range_checker
                |) in
              let memory_bus :=
                M.alloc (|
                  Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                  memory_bus
                |) in
              let clk_max_bits := M.alloc (| Ty.path "usize", clk_max_bits |) in
              M.read (|
                let~ rc :
                    Ty.path
                      "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip" :=
                  M.read (| range_checker |) in
                let~ mb :
                    Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus" :=
                  M.read (| memory_bus |) in
                let~ cmb : Ty.path "usize" := M.read (| clk_max_bits |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                    []
                    [ F ],
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip")
                      []
                      [ F ],
                    M.alloc (| Ty.path "usize", N |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.Usize 2
                            |) in
                          Value.StructTuple
                            "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N2"
                            []
                            [ F ]
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ F ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ F ],
                                  "new",
                                  [],
                                  []
                                |),
                                [ M.read (| rc |); M.read (| mb |); M.read (| cmb |) ]
                              |)
                            ]));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.Usize 4
                            |) in
                          Value.StructTuple
                            "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N4"
                            []
                            [ F ]
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [ F ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [ F ],
                                  "new",
                                  [],
                                  []
                                |),
                                [ M.read (| rc |); M.read (| mb |); M.read (| cmb |) ]
                              |)
                            ]));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.Usize 8
                            |) in
                          Value.StructTuple
                            "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N8"
                            []
                            [ F ]
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [ F ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                    [ Value.Integer IntegerKind.Usize 8 ]
                                    [ F ],
                                  "new",
                                  [],
                                  []
                                |),
                                [ M.read (| rc |); M.read (| mb |); M.read (| cmb |) ]
                              |)
                            ]));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.Usize 16
                            |) in
                          Value.StructTuple
                            "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N16"
                            []
                            [ F ]
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                  [ Value.Integer IntegerKind.Usize 16 ]
                                  [ F ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                    [ Value.Integer IntegerKind.Usize 16 ]
                                    [ F ],
                                  "new",
                                  [],
                                  []
                                |),
                                [ M.read (| rc |); M.read (| mb |); M.read (| cmb |) ]
                              |)
                            ]));
                      fun γ =>
                        ltac:(M.monadic
                          (let _ :=
                            is_constant_or_break_match (|
                              M.read (| γ |),
                              Value.Integer IntegerKind.Usize 32
                            |) in
                          Value.StructTuple
                            "openvm_circuit::system::memory::adapter::GenericAccessAdapterChip::N32"
                            []
                            [ F ]
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                  [ Value.Integer IntegerKind.Usize 32 ]
                                  [ F ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                                    [ Value.Integer IntegerKind.Usize 32 ]
                                    [ F ],
                                  "new",
                                  [],
                                  []
                                |),
                                [ M.read (| rc |); M.read (| mb |); M.read (| cmb |) ]
                              |)
                            ]));
                      fun γ =>
                        ltac:(M.monadic
                          (M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic_fmt", [], [] |),
                              [
                                M.call_closure (|
                                  Ty.path "core::fmt::Arguments",
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Arguments",
                                    "new_const",
                                    [ Value.Integer IntegerKind.Usize 1 ],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 1 ]
                                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                            Value.Array
                                              [ mk_str (| "Only supports N in (2, 4, 8, 16, 32)" |)
                                              ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |)))
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_new :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "new" (new F).
        Admitted.
        Global Typeclasses Opaque new.
      End Impl_openvm_circuit_system_memory_adapter_GenericAccessAdapterChip_F.
      
      (* StructRecord
        {
          name := "AccessAdapterChip";
          const_params := [ "N" ];
          ty_params := [ "F" ];
          fields :=
            [
              ("air",
                Ty.apply
                  (Ty.path "openvm_circuit::system::memory::adapter::air::AccessAdapterAir")
                  [ N ]
                  []);
              ("range_checker",
                Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip");
              ("records",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                      []
                      [ F ];
                    Ty.path "alloc::alloc::Global"
                  ]);
              ("overridden_height",
                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ])
            ];
        } *)
      
      Module Impl_openvm_circuit_system_memory_adapter_AccessAdapterChip_N_F.
        Definition Self (N : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
            [ N ]
            [ F ].
        
        (*
            pub fn new(
                range_checker: SharedVariableRangeCheckerChip,
                memory_bus: MemoryBus,
                clk_max_bits: usize,
            ) -> Self {
                let lt_air = IsLtSubAir::new(range_checker.bus(), clk_max_bits);
                Self {
                    air: AccessAdapterAir::<N> { memory_bus, lt_air },
                    range_checker,
                    records: vec![],
                    overridden_height: None,
                }
            }
        *)
        Definition new
            (N : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self N F in
          match ε, τ, α with
          | [], [], [ range_checker; memory_bus; clk_max_bits ] =>
            ltac:(M.monadic
              (let range_checker :=
                M.alloc (|
                  Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                  range_checker
                |) in
              let memory_bus :=
                M.alloc (|
                  Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                  memory_bus
                |) in
              let clk_max_bits := M.alloc (| Ty.path "usize", clk_max_bits |) in
              M.read (|
                let~ lt_air : Ty.path "openvm_circuit_primitives::is_less_than::IsLtSubAir" :=
                  M.call_closure (|
                    Ty.path "openvm_circuit_primitives::is_less_than::IsLtSubAir",
                    M.get_associated_function (|
                      Ty.path "openvm_circuit_primitives::is_less_than::IsLtSubAir",
                      "new",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path
                          "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                        M.get_associated_function (|
                          Ty.path
                            "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                          "bus",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, range_checker |) ]
                      |);
                      M.read (| clk_max_bits |)
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                    [ N ]
                    [ F ],
                  Value.mkStructRecord
                    "openvm_circuit::system::memory::adapter::AccessAdapterChip"
                    [ N ]
                    [ F ]
                    [
                      ("air",
                        Value.mkStructRecord
                          "openvm_circuit::system::memory::adapter::air::AccessAdapterAir"
                          [ N ]
                          []
                          [ ("memory_bus", M.read (| memory_bus |)); ("lt_air", M.read (| lt_air |))
                          ]);
                      ("range_checker", M.read (| range_checker |));
                      ("records",
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            [],
                            []
                          |),
                          []
                        |));
                      ("overridden_height",
                        Value.StructTuple "core::option::Option::None" [] [ Ty.path "usize" ] [])
                    ]
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_new :
          forall (N : Value.t) (F : Ty.t),
          M.IsAssociatedFunction.C (Self N F) "new" (new N F).
        Admitted.
        Global Typeclasses Opaque new.
      End Impl_openvm_circuit_system_memory_adapter_AccessAdapterChip_N_F.
      
      Module Impl_openvm_circuit_system_memory_adapter_GenericAccessAdapterChipTrait_F_for_openvm_circuit_system_memory_adapter_AccessAdapterChip_N_F.
        Definition Self (N : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
            [ N ]
            [ F ].
        
        (*
            fn set_override_trace_heights(&mut self, overridden_height: usize) {
                self.overridden_height = Some(overridden_height);
            }
        *)
        Definition set_override_trace_heights
            (N : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self N F in
          match ε, τ, α with
          | [], [], [ self; overridden_height ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                        [ N ]
                        [ F ]
                    ],
                  self
                |) in
              let overridden_height := M.alloc (| Ty.path "usize", overridden_height |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.write (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::adapter::AccessAdapterChip",
                      "overridden_height"
                    |),
                    Value.StructTuple
                      "core::option::Option::Some"
                      []
                      [ Ty.path "usize" ]
                      [ M.read (| overridden_height |) ]
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn add_record(&mut self, record: AccessAdapterRecord<F>) {
                self.records.push(record);
            }
        *)
        Definition add_record
            (N : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self N F in
          match ε, τ, α with
          | [], [], [ self; record ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                        [ N ]
                        [ F ]
                    ],
                  self
                |) in
              let record :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                    []
                    [ F ],
                  record
                |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "push",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::adapter::AccessAdapterChip",
                          "records"
                        |)
                      |);
                      M.read (| record |)
                    ]
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn n(&self) -> usize {
                N
            }
        *)
        Definition n
            (N : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self N F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                        [ N ]
                        [ F ]
                    ],
                  self
                |) in
              N))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn generate_trace(self) -> RowMajorMatrix<F>
            where
                F: PrimeField32,
            {
                let width = BaseAir::<F>::width(&self.air);
                let height = if let Some(oh) = self.overridden_height {
                    assert!(
                        oh >= self.records.len(),
                        "Overridden height is less than the required height"
                    );
                    oh
                } else {
                    self.records.len()
                };
                let height = next_power_of_two_or_zero(height);
                let mut values = F::zero_vec(height * width);
        
                values
                    .par_chunks_mut(width)
                    .zip(self.records.into_par_iter())
                    .for_each(|(row, record)| {
                        let row: &mut AccessAdapterCols<F, N> = row.borrow_mut();
        
                        row.is_valid = F::ONE;
                        row.values = record.data.try_into().unwrap();
                        row.address = MemoryAddress::new(record.address_space, record.start_index);
        
                        let (left_timestamp, right_timestamp) = match record.kind {
                            AccessAdapterRecordKind::Split => (record.timestamp, record.timestamp),
                            AccessAdapterRecordKind::Merge {
                                left_timestamp,
                                right_timestamp,
                            } => (left_timestamp, right_timestamp),
                        };
                        debug_assert_eq!(max(left_timestamp, right_timestamp), record.timestamp);
        
                        row.left_timestamp = F::from_canonical_u32(left_timestamp);
                        row.right_timestamp = F::from_canonical_u32(right_timestamp);
                        row.is_split = F::from_bool(record.kind == AccessAdapterRecordKind::Split);
        
                        self.air.lt_air.generate_subrow(
                            (self.range_checker.as_ref(), left_timestamp, right_timestamp),
                            (&mut row.lt_aux, &mut row.is_right_larger),
                        );
                    });
                RowMajorMatrix::new(values, width)
            }
        *)
        Definition generate_trace
            (N : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self N F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                    [ N ]
                    [ F ],
                  self
                |) in
              M.read (|
                let~ width : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "p3_air::air::BaseAir",
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::air::AccessAdapterAir")
                        [ N ]
                        [],
                      [],
                      [ F ],
                      "width",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              self,
                              "openvm_circuit::system::memory::adapter::AccessAdapterChip",
                              "air"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |) in
                let~ height : Ty.path "usize" :=
                  M.match_operator (|
                    Ty.path "usize",
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.SubPointer.get_struct_record_field (|
                              self,
                              "openvm_circuit::system::memory::adapter::AccessAdapterChip",
                              "overridden_height"
                            |) in
                          let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::option::Option::Some",
                              0
                            |) in
                          let oh := M.copy (| Ty.path "usize", γ0_0 |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            Ty.path "bool",
                                            UnOp.not (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.ge,
                                                [
                                                  M.read (| oh |);
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                                                            []
                                                            [ F ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "len",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.SubPointer.get_struct_record_field (|
                                                          self,
                                                          "openvm_circuit::system::memory::adapter::AccessAdapterChip",
                                                          "records"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.never_to_any (|
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                          [
                                            M.call_closure (|
                                              Ty.path "core::fmt::Arguments",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::Arguments",
                                                "new_const",
                                                [ Value.Integer IntegerKind.Usize 1 ],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Value.Integer IntegerKind.Usize 1 ]
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "str" ]
                                                          ],
                                                        Value.Array
                                                          [
                                                            mk_str (|
                                                              "Overridden height is less than the required height"
                                                            |)
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                ]
                              |) in
                            oh
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.call_closure (|
                            Ty.path "usize",
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "len",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip",
                                  "records"
                                |)
                              |)
                            ]
                          |)))
                    ]
                  |) in
                let~ height : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_function (|
                      "openvm_circuit_primitives::utils::next_power_of_two_or_zero",
                      [],
                      []
                    |),
                    [ M.read (| height |) ]
                  |) in
                let~ values :
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] :=
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "zero_vec",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.mul,
                        [ M.read (| height |); M.read (| width |) ]
                      |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "rayon::iter::ParallelIterator",
                      Ty.apply
                        (Ty.path "rayon::iter::zip::Zip")
                        []
                        [
                          Ty.apply (Ty.path "rayon::slice::chunks::ChunksMut") [] [ F ];
                          Ty.apply
                            (Ty.path "rayon::vec::IntoIter")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                                []
                                [ F ]
                            ]
                        ],
                      [],
                      [],
                      "for_each",
                      [],
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ F ] ];
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                                  []
                                  [ F ]
                              ]
                          ]
                          (Ty.tuple [])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "rayon::iter::zip::Zip")
                          []
                          [
                            Ty.apply (Ty.path "rayon::slice::chunks::ChunksMut") [] [ F ];
                            Ty.apply
                              (Ty.path "rayon::vec::IntoIter")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                                  []
                                  [ F ]
                              ]
                          ],
                        M.get_trait_method (|
                          "rayon::iter::IndexedParallelIterator",
                          Ty.apply (Ty.path "rayon::slice::chunks::ChunksMut") [] [ F ],
                          [],
                          [],
                          "zip",
                          [],
                          [
                            Ty.apply
                              (Ty.path "rayon::vec::IntoIter")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                                  []
                                  [ F ]
                              ]
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "rayon::slice::chunks::ChunksMut") [] [ F ],
                            M.get_trait_method (|
                              "rayon::slice::ParallelSliceMut",
                              Ty.apply (Ty.path "slice") [] [ F ],
                              [],
                              [ F ],
                              "par_chunks_mut",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                    M.get_trait_method (|
                                      "core::ops::deref::DerefMut",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ F; Ty.path "alloc::alloc::Global" ],
                                      [],
                                      [],
                                      "deref_mut",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.MutRef, values |) ]
                                  |)
                                |)
                              |);
                              M.read (| width |)
                            ]
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "rayon::vec::IntoIter")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                                  []
                                  [ F ]
                              ],
                            M.get_trait_method (|
                              "rayon::iter::IntoParallelIterator",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              [],
                              "into_par_iter",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip",
                                  "records"
                                |)
                              |)
                            ]
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [ Ty.apply (Ty.path "slice") [] [ F ] ];
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                                          []
                                          [ F ]
                                      ],
                                    α0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let row :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                            γ0_0
                                          |) in
                                        let record :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                                              []
                                              [ F ],
                                            γ0_1
                                          |) in
                                        M.read (|
                                          let~ row :
                                              Ty.apply
                                                (Ty.path "&mut")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols")
                                                    [ N ]
                                                    [ F ]
                                                ] :=
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols")
                                                        [ N ]
                                                        [ F ]
                                                    ],
                                                  M.get_trait_method (|
                                                    "core::borrow::BorrowMut",
                                                    Ty.apply (Ty.path "slice") [] [ F ],
                                                    [],
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols")
                                                        [ N ]
                                                        [ F ]
                                                    ],
                                                    "borrow_mut",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.MutRef,
                                                      M.deref (| M.read (| row |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |) in
                                          let~ _ : Ty.tuple [] :=
                                            M.write (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| row |) |),
                                                "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                                "is_valid"
                                              |),
                                              M.read (|
                                                get_constant (|
                                                  "p3_field::field::FieldAlgebra::ONE",
                                                  F
                                                |)
                                              |)
                                            |) in
                                          let~ _ : Ty.tuple [] :=
                                            M.write (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| row |) |),
                                                "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                                "values"
                                              |),
                                              M.call_closure (|
                                                Ty.apply (Ty.path "array") [ N ] [ F ],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.apply (Ty.path "array") [ N ] [ F ];
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ F; Ty.path "alloc::alloc::Global" ]
                                                    ],
                                                  "unwrap",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.apply (Ty.path "array") [ N ] [ F ];
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [ F; Ty.path "alloc::alloc::Global" ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::convert::TryInto",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ F; Ty.path "alloc::alloc::Global" ],
                                                      [],
                                                      [ Ty.apply (Ty.path "array") [ N ] [ F ] ],
                                                      "try_into",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          record,
                                                          "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                                                          "data"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          let~ _ : Ty.tuple [] :=
                                            M.write (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| row |) |),
                                                "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                                "address"
                                              |),
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::MemoryAddress")
                                                  []
                                                  [ F; F ],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::memory::MemoryAddress")
                                                    []
                                                    [ F; F ],
                                                  "new",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      record,
                                                      "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                                                      "address_space"
                                                    |)
                                                  |);
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      record,
                                                      "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                                                      "start_index"
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |) in
                                          M.alloc (|
                                            Ty.tuple [],
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (|
                                                Ty.tuple [ Ty.path "u32"; Ty.path "u32" ],
                                                M.match_operator (|
                                                  Ty.tuple [ Ty.path "u32"; Ty.path "u32" ],
                                                  M.SubPointer.get_struct_record_field (|
                                                    record,
                                                    "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                                                    "kind"
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let _ :=
                                                          M.is_struct_tuple (|
                                                            γ,
                                                            "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind::Split"
                                                          |) in
                                                        Value.Tuple
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                record,
                                                                "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                                                                "timestamp"
                                                              |)
                                                            |);
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                record,
                                                                "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                                                                "timestamp"
                                                              |)
                                                            |)
                                                          ]));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_record_field (|
                                                            γ,
                                                            "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind::Merge",
                                                            "left_timestamp"
                                                          |) in
                                                        let γ0_1 :=
                                                          M.SubPointer.get_struct_record_field (|
                                                            γ,
                                                            "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind::Merge",
                                                            "right_timestamp"
                                                          |) in
                                                        let left_timestamp :=
                                                          M.copy (| Ty.path "u32", γ0_0 |) in
                                                        let right_timestamp :=
                                                          M.copy (| Ty.path "u32", γ0_1 |) in
                                                        Value.Tuple
                                                          [
                                                            M.read (| left_timestamp |);
                                                            M.read (| right_timestamp |)
                                                          ]))
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let left_timestamp :=
                                                      M.copy (| Ty.path "u32", γ0_0 |) in
                                                    let right_timestamp :=
                                                      M.copy (| Ty.path "u32", γ0_1 |) in
                                                    M.read (|
                                                      let~ _ : Ty.tuple [] :=
                                                        M.match_operator (|
                                                          Ty.tuple [],
                                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ :=
                                                                  M.use
                                                                    (M.alloc (|
                                                                      Ty.path "bool",
                                                                      Value.Bool true
                                                                    |)) in
                                                                let _ :=
                                                                  is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                M.read (|
                                                                  let~ _ : Ty.tuple [] :=
                                                                    M.match_operator (|
                                                                      Ty.tuple [],
                                                                      M.alloc (|
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [ Ty.path "u32" ];
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [ Ty.path "u32" ]
                                                                          ],
                                                                        Value.Tuple
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.alloc (|
                                                                                Ty.path "u32",
                                                                                M.call_closure (|
                                                                                  Ty.path "u32",
                                                                                  M.get_function (|
                                                                                    "core::cmp::max",
                                                                                    [],
                                                                                    [ Ty.path "u32"
                                                                                    ]
                                                                                  |),
                                                                                  [
                                                                                    M.read (|
                                                                                      left_timestamp
                                                                                    |);
                                                                                    M.read (|
                                                                                      right_timestamp
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |);
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.SubPointer.get_struct_record_field (|
                                                                                record,
                                                                                "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                                                                                "timestamp"
                                                                              |)
                                                                            |)
                                                                          ]
                                                                      |),
                                                                      [
                                                                        fun γ =>
                                                                          ltac:(M.monadic
                                                                            (let γ0_0 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                0
                                                                              |) in
                                                                            let γ0_1 :=
                                                                              M.SubPointer.get_tuple_field (|
                                                                                γ,
                                                                                1
                                                                              |) in
                                                                            let left_val :=
                                                                              M.copy (|
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [ Ty.path "u32" ],
                                                                                γ0_0
                                                                              |) in
                                                                            let right_val :=
                                                                              M.copy (|
                                                                                Ty.apply
                                                                                  (Ty.path "&")
                                                                                  []
                                                                                  [ Ty.path "u32" ],
                                                                                γ0_1
                                                                              |) in
                                                                            M.match_operator (|
                                                                              Ty.tuple [],
                                                                              M.alloc (|
                                                                                Ty.tuple [],
                                                                                Value.Tuple []
                                                                              |),
                                                                              [
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (let γ :=
                                                                                      M.use
                                                                                        (M.alloc (|
                                                                                          Ty.path
                                                                                            "bool",
                                                                                          UnOp.not (|
                                                                                            M.call_closure (|
                                                                                              Ty.path
                                                                                                "bool",
                                                                                              BinOp.eq,
                                                                                              [
                                                                                                M.read (|
                                                                                                  M.deref (|
                                                                                                    M.read (|
                                                                                                      left_val
                                                                                                    |)
                                                                                                  |)
                                                                                                |);
                                                                                                M.read (|
                                                                                                  M.deref (|
                                                                                                    M.read (|
                                                                                                      right_val
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              ]
                                                                                            |)
                                                                                          |)
                                                                                        |)) in
                                                                                    let _ :=
                                                                                      is_constant_or_break_match (|
                                                                                        M.read (|
                                                                                          γ
                                                                                        |),
                                                                                        Value.Bool
                                                                                          true
                                                                                      |) in
                                                                                    M.never_to_any (|
                                                                                      M.read (|
                                                                                        let~ kind :
                                                                                            Ty.path
                                                                                              "core::panicking::AssertKind" :=
                                                                                          Value.StructTuple
                                                                                            "core::panicking::AssertKind::Eq"
                                                                                            []
                                                                                            []
                                                                                            [] in
                                                                                        M.alloc (|
                                                                                          Ty.path
                                                                                            "never",
                                                                                          M.call_closure (|
                                                                                            Ty.path
                                                                                              "never",
                                                                                            M.get_function (|
                                                                                              "core::panicking::assert_failed",
                                                                                              [],
                                                                                              [
                                                                                                Ty.path
                                                                                                  "u32";
                                                                                                Ty.path
                                                                                                  "u32"
                                                                                              ]
                                                                                            |),
                                                                                            [
                                                                                              M.read (|
                                                                                                kind
                                                                                              |);
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.Ref,
                                                                                                M.deref (|
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.deref (|
                                                                                                      M.read (|
                                                                                                        left_val
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              |);
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.Ref,
                                                                                                M.deref (|
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.deref (|
                                                                                                      M.read (|
                                                                                                        right_val
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              |);
                                                                                              Value.StructTuple
                                                                                                "core::option::Option::None"
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "core::fmt::Arguments"
                                                                                                ]
                                                                                                []
                                                                                            ]
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)));
                                                                                fun γ =>
                                                                                  ltac:(M.monadic
                                                                                    (Value.Tuple
                                                                                      []))
                                                                              ]
                                                                            |)))
                                                                      ]
                                                                    |) in
                                                                  M.alloc (|
                                                                    Ty.tuple [],
                                                                    Value.Tuple []
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic (Value.Tuple []))
                                                          ]
                                                        |) in
                                                      let~ _ : Ty.tuple [] :=
                                                        M.write (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| row |) |),
                                                            "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                                            "left_timestamp"
                                                          |),
                                                          M.call_closure (|
                                                            F,
                                                            M.get_trait_method (|
                                                              "p3_field::field::FieldAlgebra",
                                                              F,
                                                              [],
                                                              [],
                                                              "from_canonical_u32",
                                                              [],
                                                              []
                                                            |),
                                                            [ M.read (| left_timestamp |) ]
                                                          |)
                                                        |) in
                                                      let~ _ : Ty.tuple [] :=
                                                        M.write (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| row |) |),
                                                            "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                                            "right_timestamp"
                                                          |),
                                                          M.call_closure (|
                                                            F,
                                                            M.get_trait_method (|
                                                              "p3_field::field::FieldAlgebra",
                                                              F,
                                                              [],
                                                              [],
                                                              "from_canonical_u32",
                                                              [],
                                                              []
                                                            |),
                                                            [ M.read (| right_timestamp |) ]
                                                          |)
                                                        |) in
                                                      let~ _ : Ty.tuple [] :=
                                                        M.write (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| row |) |),
                                                            "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                                            "is_split"
                                                          |),
                                                          M.call_closure (|
                                                            F,
                                                            M.get_trait_method (|
                                                              "p3_field::field::FieldAlgebra",
                                                              F,
                                                              [],
                                                              [],
                                                              "from_bool",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                M.get_trait_method (|
                                                                  "core::cmp::PartialEq",
                                                                  Ty.path
                                                                    "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind",
                                                                  [],
                                                                  [
                                                                    Ty.path
                                                                      "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind"
                                                                  ],
                                                                  "eq",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      record,
                                                                      "openvm_circuit::system::memory::adapter::AccessAdapterRecord",
                                                                      "kind"
                                                                    |)
                                                                  |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.path
                                                                        "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind",
                                                                      Value.StructTuple
                                                                        "openvm_circuit::system::memory::adapter::AccessAdapterRecordKind::Split"
                                                                        []
                                                                        []
                                                                        []
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |) in
                                                      let~ _ : Ty.tuple [] :=
                                                        M.call_closure (|
                                                          Ty.tuple [],
                                                          M.get_trait_method (|
                                                            "openvm_circuit_primitives::sub_air::TraceSubRowGenerator",
                                                            Ty.path
                                                              "openvm_circuit_primitives::is_less_than::IsLtSubAir",
                                                            [],
                                                            [ F ],
                                                            "generate_subrow",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  self,
                                                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip",
                                                                  "air"
                                                                |),
                                                                "openvm_circuit::system::memory::adapter::air::AccessAdapterAir",
                                                                "lt_air"
                                                              |)
                                                            |);
                                                            Value.Tuple
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "openvm_circuit_primitives::var_range::VariableRangeCheckerChip"
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::convert::AsRef",
                                                                        Ty.path
                                                                          "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                                                        [],
                                                                        [
                                                                          Ty.path
                                                                            "openvm_circuit_primitives::var_range::VariableRangeCheckerChip"
                                                                        ],
                                                                        "as_ref",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            self,
                                                                            "openvm_circuit::system::memory::adapter::AccessAdapterChip",
                                                                            "range_checker"
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |);
                                                                M.read (| left_timestamp |);
                                                                M.read (| right_timestamp |)
                                                              ];
                                                            Value.Tuple
                                                              [
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [ F ]
                                                                    ],
                                                                  M.pointer_coercion
                                                                    M.PointerCoercion.Unsize
                                                                    (Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              2
                                                                          ]
                                                                          [ F ]
                                                                      ])
                                                                    (Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ F ]
                                                                      ]),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.MutRef,
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.deref (|
                                                                              M.read (| row |)
                                                                            |),
                                                                            "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                                                            "lt_aux"
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.read (| row |)
                                                                        |),
                                                                        "openvm_circuit::system::memory::adapter::columns::AccessAdapterCols",
                                                                        "is_right_larger"
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                          ]
                                                        |) in
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                    |)))
                                              ]
                                            |)
                                          |)
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "p3_matrix::dense::DenseMatrix")
                    []
                    [
                      F;
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]
                    ],
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        F;
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ]
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          F;
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ]
                        ],
                      "new",
                      [],
                      []
                    |),
                    [ M.read (| values |); M.read (| width |) ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (N : Value.t) (F : Ty.t),
          M.IsTraitInstance
            "openvm_circuit::system::memory::adapter::GenericAccessAdapterChipTrait"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self N F)
            (* Instance *)
            [
              ("set_override_trace_heights", InstanceField.Method (set_override_trace_heights N F));
              ("add_record", InstanceField.Method (add_record N F));
              ("n", InstanceField.Method (n N F));
              ("generate_trace", InstanceField.Method (generate_trace N F))
            ].
      End Impl_openvm_circuit_system_memory_adapter_GenericAccessAdapterChipTrait_F_for_openvm_circuit_system_memory_adapter_AccessAdapterChip_N_F.
      
      Module Impl_openvm_stark_backend_chip_Chip_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_field_field_PrimeField32_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val_SC_for_openvm_circuit_system_memory_adapter_AccessAdapterChip_N_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val.
        Definition Self (N : Value.t) (SC : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
            [ N ]
            [
              Ty.associated_in_trait
                "p3_commit::domain::PolynomialSpace"
                []
                []
                (Ty.associated_in_trait
                  "p3_commit::pcs::Pcs"
                  []
                  [
                    Ty.associated_in_trait
                      "openvm_stark_backend::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenge";
                    Ty.associated_in_trait
                      "openvm_stark_backend::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenger"
                  ]
                  (Ty.associated_in_trait
                    "openvm_stark_backend::config::StarkGenericConfig"
                    []
                    []
                    SC
                    "Pcs")
                  "Domain")
                "Val"
            ].
        
        (*
            fn air(&self) -> AirRef<SC> {
                Arc::new(self.air.clone())
            }
        *)
        Definition air
            (N : Value.t)
            (SC : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self N SC in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                        [ N ]
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val"
                        ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ])
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ]),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::adapter::air::AccessAdapterAir")
                            [ N ]
                            [];
                          Ty.path "alloc::alloc::Global"
                        ])
                      (Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                          Ty.path "alloc::alloc::Global"
                        ]),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::adapter::air::AccessAdapterAir")
                              [ N ]
                              [];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::air::AccessAdapterAir")
                                [ N ]
                                [];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::adapter::air::AccessAdapterAir")
                              [ N ]
                              [],
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::air::AccessAdapterAir")
                                [ N ]
                                [],
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::adapter::AccessAdapterChip",
                                  "air"
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn generate_air_proof_input(self) -> AirProofInput<SC> {
                let trace = self.generate_trace();
                AirProofInput::simple_no_pis(trace)
            }
        *)
        Definition generate_air_proof_input
            (N : Value.t)
            (SC : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self N SC in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                    [ N ]
                    [
                      Ty.associated_in_trait
                        "p3_commit::domain::PolynomialSpace"
                        []
                        []
                        (Ty.associated_in_trait
                          "p3_commit::pcs::Pcs"
                          []
                          [
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge";
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenger"
                          ]
                          (Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Pcs")
                          "Domain")
                        "Val"
                    ],
                  self
                |) in
              M.read (|
                let~ trace :
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val";
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val";
                            Ty.path "alloc::alloc::Global"
                          ]
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val";
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val";
                            Ty.path "alloc::alloc::Global"
                          ]
                      ],
                    M.get_trait_method (|
                      "openvm_circuit::system::memory::adapter::GenericAccessAdapterChipTrait",
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                        [ N ]
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val"
                        ],
                      [],
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val"
                      ],
                      "generate_trace",
                      [],
                      []
                    |),
                    [ M.read (| self |) ]
                  |) in
                M.alloc (|
                  Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ],
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                        []
                        [ SC ],
                      "simple_no_pis",
                      [],
                      []
                    |),
                    [ M.read (| trace |) ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (N : Value.t) (SC : Ty.t),
          M.IsTraitInstance
            "openvm_stark_backend::chip::Chip"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ SC ]
            (Self N SC)
            (* Instance *)
            [
              ("air", InstanceField.Method (air N SC));
              ("generate_air_proof_input", InstanceField.Method (generate_air_proof_input N SC))
            ].
      End Impl_openvm_stark_backend_chip_Chip_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_field_field_PrimeField32_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val_SC_for_openvm_circuit_system_memory_adapter_AccessAdapterChip_N_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val.
      
      Module Impl_openvm_stark_backend_chip_ChipUsageGetter_for_openvm_circuit_system_memory_adapter_AccessAdapterChip_N_F.
        Definition Self (N : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
            [ N ]
            [ F ].
        
        (*
            fn air_name(&self) -> String {
                air_name(N)
            }
        *)
        Definition air_name
            (N : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self N F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                        [ N ]
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.path "alloc::string::String",
                M.get_function (| "openvm_circuit::system::memory::adapter::air_name", [], [] |),
                [ N ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn current_trace_height(&self) -> usize {
                self.records.len()
            }
        *)
        Definition current_trace_height
            (N : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self N F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                        [ N ]
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterRecord")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  "len",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::adapter::AccessAdapterChip",
                      "records"
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn trace_width(&self) -> usize {
                BaseAir::<F>::width(&self.air)
            }
        *)
        Definition trace_width
            (N : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self N F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterChip")
                        [ N ]
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.path "usize",
                M.get_trait_method (|
                  "p3_air::air::BaseAir",
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::adapter::air::AccessAdapterAir")
                    [ N ]
                    [],
                  [],
                  [ F ],
                  "width",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::adapter::AccessAdapterChip",
                          "air"
                        |)
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (N : Value.t) (F : Ty.t),
          M.IsTraitInstance
            "openvm_stark_backend::chip::ChipUsageGetter"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self N F)
            (* Instance *)
            [
              ("air_name", InstanceField.Method (air_name N F));
              ("current_trace_height", InstanceField.Method (current_trace_height N F));
              ("trace_width", InstanceField.Method (trace_width N F))
            ].
      End Impl_openvm_stark_backend_chip_ChipUsageGetter_for_openvm_circuit_system_memory_adapter_AccessAdapterChip_N_F.
      
      (*
      fn air_name(n: usize) -> String {
          format!("AccessAdapter<{}>", n)
      }
      *)
      Definition air_name (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ n ] =>
          ltac:(M.monadic
            (let n := M.alloc (| Ty.path "usize", n |) in
            M.call_closure (|
              Ty.path "alloc::string::String",
              M.get_function (| "core::hint::must_use", [], [ Ty.path "alloc::string::String" ] |),
              [
                M.read (|
                  let~ res : Ty.path "alloc::string::String" :=
                    M.call_closure (|
                      Ty.path "alloc::string::String",
                      M.get_function (| "alloc::fmt::format", [], [] |),
                      [
                        M.call_closure (|
                          Ty.path "core::fmt::Arguments",
                          M.get_associated_function (|
                            Ty.path "core::fmt::Arguments",
                            "new_v1",
                            [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 1
                            ],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                    Value.Array [ mk_str (| "AccessAdapter<" |); mk_str (| ">" |) ]
                                  |)
                                |)
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "core::fmt::rt::Argument" ],
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::rt::Argument",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_display",
                                            [],
                                            [ Ty.path "usize" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.borrow (| Pointer.Kind.Ref, n |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |) in
                  res
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance Instance_IsFunction_air_name :
        M.IsFunction.C "openvm_circuit::system::memory::adapter::air_name" air_name.
      Admitted.
      Global Typeclasses Opaque air_name.
    End adapter.
  End memory.
End system.
