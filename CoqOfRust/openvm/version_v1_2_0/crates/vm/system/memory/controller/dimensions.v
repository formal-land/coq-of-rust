(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module system.
  Module memory.
    Module controller.
      Module dimensions.
        (* StructRecord
          {
            name := "MemoryDimensions";
            const_params := [];
            ty_params := [];
            fields :=
              [
                ("as_height", Ty.path "usize");
                ("address_height", Ty.path "usize");
                ("as_offset", Ty.path "u32")
              ];
          } *)
        
        Module Impl_core_clone_Clone_for_openvm_circuit_system_memory_controller_dimensions_MemoryDimensions.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions".
          
          (* Clone *)
          Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.path
                          "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions"
                      ],
                    self
                  |) in
                M.match_operator (|
                  Ty.path
                    "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                  Value.DeclaredButUndefined,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.path
                            "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                          Value.DeclaredButUndefined,
                          [ fun γ => ltac:(M.monadic (M.read (| M.deref (| M.read (| self |) |) |)))
                          ]
                        |)))
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "core::clone::Clone"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [ ("clone", InstanceField.Method clone) ].
        End Impl_core_clone_Clone_for_openvm_circuit_system_memory_controller_dimensions_MemoryDimensions.
        
        Module Impl_core_marker_Copy_for_openvm_circuit_system_memory_controller_dimensions_MemoryDimensions.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions".
          
          Axiom Implements :
            M.IsTraitInstance
              "core::marker::Copy"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [].
        End Impl_core_marker_Copy_for_openvm_circuit_system_memory_controller_dimensions_MemoryDimensions.
        
        Module Impl_core_fmt_Debug_for_openvm_circuit_system_memory_controller_dimensions_MemoryDimensions.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions".
          
          (* Debug *)
          Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [], [ self; f ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.path
                          "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions"
                      ],
                    self
                  |) in
                let f :=
                  M.alloc (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ],
                    f
                  |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_field3_finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "MemoryDimensions" |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "as_height" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                                "as_height"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "address_height" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                                "address_height"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "as_offset" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                                    "as_offset"
                                  |)
                                |)
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "core::fmt::Debug"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
        End Impl_core_fmt_Debug_for_openvm_circuit_system_memory_controller_dimensions_MemoryDimensions.
        
        Module underscore.
          Module Impl_serde_ser_Serialize_for_openvm_circuit_system_memory_controller_dimensions_MemoryDimensions.
            Definition Self : Ty.t :=
              Ty.path "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions".
            
            (* Serialize *)
            Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
              match ε, τ, α with
              | [], [ __S ], [ self; __serializer ] =>
                ltac:(M.monadic
                  (let self :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.path
                            "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions"
                        ],
                      self
                    |) in
                  let __serializer := M.alloc (| __S, __serializer |) in
                  M.catch_return
                    (Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                      ]) (|
                    ltac:(M.monadic
                      (M.read (|
                        let~ __serde_state :
                            Ty.associated_in_trait
                              "serde::ser::Serializer"
                              []
                              []
                              __S
                              "SerializeStruct" :=
                          M.match_operator (|
                            Ty.associated_in_trait
                              "serde::ser::Serializer"
                              []
                              []
                              __S
                              "SerializeStruct",
                            M.alloc (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct"
                                ],
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::ops::control_flow::ControlFlow")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct"
                                  ],
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "SerializeStruct";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  [],
                                  [],
                                  "branch",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "SerializeStruct";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "serde::ser::Serializer",
                                      __S,
                                      [],
                                      [],
                                      "serialize_struct",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (| __serializer |);
                                      mk_str (| "MemoryDimensions" |);
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.add,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            BinOp.Wrap.add,
                                            [
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.add,
                                                [
                                                  M.cast (Ty.path "usize") (Value.Bool false);
                                                  Value.Integer IntegerKind.Usize 1
                                                ]
                                              |);
                                              Value.Integer IntegerKind.Usize 1
                                            ]
                                          |);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      γ0_0
                                    |) in
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Ok";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.associated_in_trait
                                                    "serde::ser::Serializer"
                                                    []
                                                    []
                                                    __S
                                                    "Error"
                                                ]
                                            ],
                                            "from_residual",
                                            [],
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val :=
                                    M.copy (|
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "SerializeStruct",
                                      γ0_0
                                    |) in
                                  M.read (| val |)))
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.tuple []
                                ],
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::ops::control_flow::ControlFlow")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ];
                                    Ty.tuple []
                                  ],
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  [],
                                  [],
                                  "branch",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.tuple [];
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "serde::ser::SerializeStruct",
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "SerializeStruct",
                                      [],
                                      [],
                                      "serialize_field",
                                      [],
                                      [ Ty.path "usize" ]
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                        |)
                                      |);
                                      mk_str (| "as_height" |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                                              "as_height"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      γ0_0
                                    |) in
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Ok";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.associated_in_trait
                                                    "serde::ser::Serializer"
                                                    []
                                                    []
                                                    __S
                                                    "Error"
                                                ]
                                            ],
                                            "from_residual",
                                            [],
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                  M.read (| val |)))
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.tuple []
                                ],
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::ops::control_flow::ControlFlow")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ];
                                    Ty.tuple []
                                  ],
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  [],
                                  [],
                                  "branch",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.tuple [];
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "serde::ser::SerializeStruct",
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "SerializeStruct",
                                      [],
                                      [],
                                      "serialize_field",
                                      [],
                                      [ Ty.path "usize" ]
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                        |)
                                      |);
                                      mk_str (| "address_height" |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                                              "address_height"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      γ0_0
                                    |) in
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Ok";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.associated_in_trait
                                                    "serde::ser::Serializer"
                                                    []
                                                    []
                                                    __S
                                                    "Error"
                                                ]
                                            ],
                                            "from_residual",
                                            [],
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                  M.read (| val |)))
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.tuple []
                                ],
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::ops::control_flow::ControlFlow")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ];
                                    Ty.tuple []
                                  ],
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  [],
                                  [],
                                  "branch",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.tuple [];
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "serde::ser::SerializeStruct",
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "SerializeStruct",
                                      [],
                                      [],
                                      "serialize_field",
                                      [],
                                      [ Ty.path "u32" ]
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                        |)
                                      |);
                                      mk_str (| "as_offset" |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                                              "as_offset"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      γ0_0
                                    |) in
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Ok";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.associated_in_trait
                                                    "serde::ser::Serializer"
                                                    []
                                                    []
                                                    __S
                                                    "Error"
                                                ]
                                            ],
                                            "from_residual",
                                            [],
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                  M.read (| val |)))
                            ]
                          |) in
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            M.get_trait_method (|
                              "serde::ser::SerializeStruct",
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct",
                              [],
                              [],
                              "end",
                              [],
                              []
                            |),
                            [ M.read (| __serde_state |) ]
                          |)
                        |)
                      |)))
                  |)))
              | _, _, _ => M.impossible "wrong number of arguments"
              end.
            
            Axiom Implements :
              M.IsTraitInstance
                "serde::ser::Serialize"
                (* Trait polymorphic consts *) []
                (* Trait polymorphic types *) []
                Self
                (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
          End Impl_serde_ser_Serialize_for_openvm_circuit_system_memory_controller_dimensions_MemoryDimensions.
          Module Impl_serde_de_Deserialize_for_openvm_circuit_system_memory_controller_dimensions_MemoryDimensions.
            Definition Self : Ty.t :=
              Ty.path "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions".
            
            (* Deserialize *)
            Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
              match ε, τ, α with
              | [], [ __D ], [ __deserializer ] =>
                ltac:(M.monadic
                  (let __deserializer := M.alloc (| __D, __deserializer |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.path
                          "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions";
                        Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                      ],
                    M.get_trait_method (|
                      "serde::de::Deserializer",
                      __D,
                      [],
                      [],
                      "deserialize_struct",
                      [],
                      [
                        Ty.path
                          "openvm_circuit::system::memory::controller::dimensions::_'1::deserialize::__Visitor"
                      ]
                    |),
                    [
                      M.read (| __deserializer |);
                      mk_str (| "MemoryDimensions" |);
                      M.read (|
                        get_constant (|
                          "openvm_circuit::system::memory::controller::dimensions::_'1::deserialize::FIELDS",
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                            ]
                        |)
                      |);
                      Value.mkStructRecord
                        "openvm_circuit::system::memory::controller::dimensions::_'1::deserialize::__Visitor"
                        []
                        []
                        [
                          ("marker",
                            Value.StructTuple
                              "core::marker::PhantomData"
                              []
                              [
                                Ty.path
                                  "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions"
                              ]
                              []);
                          ("lifetime",
                            Value.StructTuple
                              "core::marker::PhantomData"
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                              [])
                        ]
                    ]
                  |)))
              | _, _, _ => M.impossible "wrong number of arguments"
              end.
            
            Axiom Implements :
              M.IsTraitInstance
                "serde::de::Deserialize"
                (* Trait polymorphic consts *) []
                (* Trait polymorphic types *) []
                Self
                (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
          End Impl_serde_de_Deserialize_for_openvm_circuit_system_memory_controller_dimensions_MemoryDimensions.
        End underscore.
        
        
        Module Impl_openvm_circuit_system_memory_controller_dimensions_MemoryDimensions.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions".
          
          (* new *)
          Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [], [ as_height; address_height; as_offset ] =>
              ltac:(M.monadic
                (let as_height := M.alloc (| Ty.path "usize", as_height |) in
                let address_height := M.alloc (| Ty.path "usize", address_height |) in
                let as_offset := M.alloc (| Ty.path "u32", as_offset |) in
                Value.mkStructRecord
                  "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions"
                  []
                  []
                  [
                    ("as_height", M.read (| as_height |));
                    ("address_height", M.read (| address_height |));
                    ("as_offset", M.read (| as_offset |))
                  ]))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
          Admitted.
          Global Typeclasses Opaque new.
          (*
              pub fn overall_height(&self) -> usize {
                  self.as_height + self.address_height
              }
          *)
          Definition overall_height (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.path
                          "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions"
                      ],
                    self
                  |) in
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.add,
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                        "as_height"
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                        "address_height"
                      |)
                    |)
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_overall_height :
            M.IsAssociatedFunction.C Self "overall_height" overall_height.
          Admitted.
          Global Typeclasses Opaque overall_height.
          
          (*
              pub fn label_to_index(&self, (addr_space, block_id): (u32, u32)) -> u64 {
                  debug_assert!(block_id < (1 << self.address_height));
                  (((addr_space - self.as_offset) as u64) << self.address_height) + block_id as u64
              }
          *)
          Definition label_to_index (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [], [ self; β1 ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.path
                          "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions"
                      ],
                    self
                  |) in
                let β1 := M.alloc (| Ty.tuple [ Ty.path "u32"; Ty.path "u32" ], β1 |) in
                M.match_operator (|
                  Ty.path "u64",
                  β1,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let addr_space :=
                          M.copy (|
                            Ty.path
                              "Type for variables in patterns in function parameters is not handled",
                            γ0_0
                          |) in
                        let block_id :=
                          M.copy (|
                            Ty.path
                              "Type for variables in patterns in function parameters is not handled",
                            γ0_1
                          |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.read (|
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.lt,
                                                          [
                                                            M.read (| block_id |);
                                                            M.call_closure (|
                                                              Ty.path "u32",
                                                              BinOp.Wrap.shl,
                                                              [
                                                                Value.Integer IntegerKind.U32 1;
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.deref (| M.read (| self |) |),
                                                                    "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                                                                    "address_height"
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.never_to_any (|
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::panic",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      mk_str (|
                                                        "assertion failed: block_id < (1 << self.address_height)"
                                                      |)
                                                    ]
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          M.alloc (|
                            Ty.path "u64",
                            M.call_closure (|
                              Ty.path "u64",
                              BinOp.Wrap.add,
                              [
                                M.call_closure (|
                                  Ty.path "u64",
                                  BinOp.Wrap.shl,
                                  [
                                    M.cast
                                      (Ty.path "u64")
                                      (M.call_closure (|
                                        Ty.path "u32",
                                        BinOp.Wrap.sub,
                                        [
                                          M.read (| addr_space |);
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                                              "as_offset"
                                            |)
                                          |)
                                        ]
                                      |));
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                                        "address_height"
                                      |)
                                    |)
                                  ]
                                |);
                                M.cast (Ty.path "u64") (M.read (| block_id |))
                              ]
                            |)
                          |)
                        |)))
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_label_to_index :
            M.IsAssociatedFunction.C Self "label_to_index" label_to_index.
          Admitted.
          Global Typeclasses Opaque label_to_index.
        End Impl_openvm_circuit_system_memory_controller_dimensions_MemoryDimensions.
        
        
        Module Impl_openvm_circuit_arch_config_MemoryConfig.
          Definition Self : Ty.t := Ty.path "openvm_circuit::arch::config::MemoryConfig".
          
          (*
              pub fn memory_dimensions(&self) -> MemoryDimensions {
                  MemoryDimensions {
                      as_height: self.as_height,
                      address_height: self.pointer_max_bits - log2_strict_usize(CHUNK),
                      as_offset: self.as_offset,
                  }
              }
          *)
          Definition memory_dimensions (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_circuit::arch::config::MemoryConfig" ],
                    self
                  |) in
                Value.mkStructRecord
                  "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions"
                  []
                  []
                  [
                    ("as_height",
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::arch::config::MemoryConfig",
                          "as_height"
                        |)
                      |));
                    ("address_height",
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.sub,
                        [
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::arch::config::MemoryConfig",
                              "pointer_max_bits"
                            |)
                          |);
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_function (| "p3_util::log2_strict_usize", [], [] |),
                            [
                              M.read (|
                                get_constant (|
                                  "openvm_circuit::system::memory::controller::CHUNK",
                                  Ty.path "usize"
                                |)
                              |)
                            ]
                          |)
                        ]
                      |));
                    ("as_offset",
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::arch::config::MemoryConfig",
                          "as_offset"
                        |)
                      |))
                  ]))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_memory_dimensions :
            M.IsAssociatedFunction.C Self "memory_dimensions" memory_dimensions.
          Admitted.
          Global Typeclasses Opaque memory_dimensions.
        End Impl_openvm_circuit_arch_config_MemoryConfig.
      End dimensions.
    End controller.
  End memory.
End system.
