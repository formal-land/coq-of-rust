(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module system.
  Module memory.
    Module controller.
      Module interface.
        (*
        Enum MemoryInterface
        {
          const_params := [];
          ty_params := [ "F" ];
          variants :=
            [
              {
                name := "Volatile";
                item :=
                  StructRecord
                    [
                      ("boundary_chip",
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
                          []
                          [ F ])
                    ];
              };
              {
                name := "Persistent";
                item :=
                  StructRecord
                    [
                      ("boundary_chip",
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
                          [
                            M.unevaluated_const
                              (mk_str (|
                                "openvm_circuit_system_memory_controller_interface_MemoryInterface_discriminant"
                              |))
                          ]
                          [ F ]);
                      ("merkle_chip",
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                          [
                            M.unevaluated_const
                              (mk_str (|
                                "openvm_circuit_system_memory_controller_interface_MemoryInterface_discriminant"
                              |))
                          ]
                          [ F ]);
                      ("initial_memory",
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                          [
                            M.unevaluated_const
                              (mk_str (|
                                "openvm_circuit_system_memory_controller_MemoryImage_discriminant"
                              |))
                          ]
                          [ F ])
                    ];
              }
            ];
        }
        *)
        
        Axiom IsDiscriminant_MemoryInterface_Volatile :
          M.IsDiscriminant
            "openvm_circuit::system::memory::controller::interface::MemoryInterface::Volatile"
            0.
        Axiom IsDiscriminant_MemoryInterface_Persistent :
          M.IsDiscriminant
            "openvm_circuit::system::memory::controller::interface::MemoryInterface::Persistent"
            1.
        
        Module Impl_openvm_circuit_system_memory_controller_interface_MemoryInterface_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::system::memory::controller::interface::MemoryInterface")
              []
              [ F ].
          
          (*
              pub fn touch_range(&mut self, addr_space: u32, pointer: u32, len: u32) {
                  match self {
                      MemoryInterface::Volatile { .. } => {}
                      MemoryInterface::Persistent {
                          boundary_chip,
                          merkle_chip,
                          ..
                      } => {
                          boundary_chip.touch_range(addr_space, pointer, len);
                          merkle_chip.touch_range(addr_space, pointer, len);
                      }
                  }
              }
          *)
          Definition touch_range
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self F in
            match ε, τ, α with
            | [], [], [ self; addr_space; pointer; len ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::controller::interface::MemoryInterface")
                          []
                          [ F ]
                      ],
                    self
                  |) in
                let addr_space := M.alloc (| Ty.path "u32", addr_space |) in
                let pointer := M.alloc (| Ty.path "u32", pointer |) in
                let len := M.alloc (| Ty.path "u32", len |) in
                M.match_operator (|
                  Ty.tuple [],
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.deref (| M.read (| γ |) |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "openvm_circuit::system::memory::controller::interface::MemoryInterface::Volatile"
                          |) in
                        Value.Tuple []));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.deref (| M.read (| γ |) |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "openvm_circuit::system::memory::controller::interface::MemoryInterface::Persistent",
                            "boundary_chip"
                          |) in
                        let γ1_1 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "openvm_circuit::system::memory::controller::interface::MemoryInterface::Persistent",
                            "merkle_chip"
                          |) in
                        let boundary_chip :=
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [ F ]
                              ],
                            γ1_0
                          |) in
                        let merkle_chip :=
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [ F ]
                              ],
                            γ1_1
                          |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [ F ],
                                "touch_range",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| boundary_chip |) |)
                                |);
                                M.read (| addr_space |);
                                M.read (| pointer |);
                                M.read (| len |)
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [ F ],
                                "touch_range",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| merkle_chip |) |)
                                |);
                                M.read (| addr_space |);
                                M.read (| pointer |);
                                M.read (| len |)
                              ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)))
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_touch_range :
            forall (F : Ty.t),
            M.IsAssociatedFunction.C (Self F) "touch_range" (touch_range F).
          Admitted.
          Global Typeclasses Opaque touch_range.
          
          (*
              pub fn compression_bus(&self) -> Option<PermutationCheckBus> {
                  match self {
                      MemoryInterface::Volatile { .. } => None,
                      MemoryInterface::Persistent { merkle_chip, .. } => {
                          Some(merkle_chip.air.compression_bus)
                      }
                  }
              }
          *)
          Definition compression_bus
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self F in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::controller::interface::MemoryInterface")
                          []
                          [ F ]
                      ],
                    self
                  |) in
                M.match_operator (|
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.path "openvm_stark_backend::interaction::PermutationCheckBus" ],
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.deref (| M.read (| γ |) |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "openvm_circuit::system::memory::controller::interface::MemoryInterface::Volatile"
                          |) in
                        Value.StructTuple
                          "core::option::Option::None"
                          []
                          [ Ty.path "openvm_stark_backend::interaction::PermutationCheckBus" ]
                          []));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.deref (| M.read (| γ |) |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_record_field (|
                            γ,
                            "openvm_circuit::system::memory::controller::interface::MemoryInterface::Persistent",
                            "merkle_chip"
                          |) in
                        let merkle_chip :=
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                                  [ Value.Integer IntegerKind.Usize 8 ]
                                  [ F ]
                              ],
                            γ1_0
                          |) in
                        Value.StructTuple
                          "core::option::Option::Some"
                          []
                          [ Ty.path "openvm_stark_backend::interaction::PermutationCheckBus" ]
                          [
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| merkle_chip |) |),
                                  "openvm_circuit::system::memory::merkle::MemoryMerkleChip",
                                  "air"
                                |),
                                "openvm_circuit::system::memory::merkle::air::MemoryMerkleAir",
                                "compression_bus"
                              |)
                            |)
                          ]))
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_compression_bus :
            forall (F : Ty.t),
            M.IsAssociatedFunction.C (Self F) "compression_bus" (compression_bus F).
          Admitted.
          Global Typeclasses Opaque compression_bus.
        End Impl_openvm_circuit_system_memory_controller_interface_MemoryInterface_F.
      End interface.
    End controller.
  End memory.
End system.
