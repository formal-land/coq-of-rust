(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module system.
  Module memory.
    Module controller.
      Definition value_CHUNK (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 8 |))).
      
      Global Instance Instance_IsConstant_value_CHUNK :
        M.IsFunction.C "openvm_circuit::system::memory::controller::CHUNK" value_CHUNK.
      Admitted.
      Global Typeclasses Opaque value_CHUNK.
      
      Definition value_MERKLE_AIR_OFFSET
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 1 |))).
      
      Global Instance Instance_IsConstant_value_MERKLE_AIR_OFFSET :
        M.IsFunction.C
          "openvm_circuit::system::memory::controller::MERKLE_AIR_OFFSET"
          value_MERKLE_AIR_OFFSET.
      Admitted.
      Global Typeclasses Opaque value_MERKLE_AIR_OFFSET.
      
      Definition value_BOUNDARY_AIR_OFFSET
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 0 |))).
      
      Global Instance Instance_IsConstant_value_BOUNDARY_AIR_OFFSET :
        M.IsFunction.C
          "openvm_circuit::system::memory::controller::BOUNDARY_AIR_OFFSET"
          value_BOUNDARY_AIR_OFFSET.
      Admitted.
      Global Typeclasses Opaque value_BOUNDARY_AIR_OFFSET.
      
      (* StructTuple
        {
          name := "RecordId";
          const_params := [];
          ty_params := [];
          fields := [ Ty.path "usize" ];
        } *)
      
      Module Impl_core_fmt_Debug_for_openvm_circuit_system_memory_controller_RecordId.
        Definition Self : Ty.t := Ty.path "openvm_circuit::system::memory::controller::RecordId".
        
        (* Debug *)
        Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_tuple_field1_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "RecordId" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_tuple_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::controller::RecordId",
                                  0
                                |)
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
      End Impl_core_fmt_Debug_for_openvm_circuit_system_memory_controller_RecordId.
      
      Module Impl_core_clone_Clone_for_openvm_circuit_system_memory_controller_RecordId.
        Definition Self : Ty.t := Ty.path "openvm_circuit::system::memory::controller::RecordId".
        
        (* Clone *)
        Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ],
                  self
                |) in
              M.match_operator (|
                Ty.path "openvm_circuit::system::memory::controller::RecordId",
                Value.DeclaredButUndefined,
                [ fun γ => ltac:(M.monadic (M.read (| M.deref (| M.read (| self |) |) |))) ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("clone", InstanceField.Method clone) ].
      End Impl_core_clone_Clone_for_openvm_circuit_system_memory_controller_RecordId.
      
      Module Impl_core_marker_Copy_for_openvm_circuit_system_memory_controller_RecordId.
        Definition Self : Ty.t := Ty.path "openvm_circuit::system::memory::controller::RecordId".
        
        Axiom Implements :
          M.IsTraitInstance
            "core::marker::Copy"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [].
      End Impl_core_marker_Copy_for_openvm_circuit_system_memory_controller_RecordId.
      
      Module Impl_core_marker_StructuralPartialEq_for_openvm_circuit_system_memory_controller_RecordId.
        Definition Self : Ty.t := Ty.path "openvm_circuit::system::memory::controller::RecordId".
        
        Axiom Implements :
          M.IsTraitInstance
            "core::marker::StructuralPartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [].
      End Impl_core_marker_StructuralPartialEq_for_openvm_circuit_system_memory_controller_RecordId.
      
      Module Impl_core_cmp_PartialEq_openvm_circuit_system_memory_controller_RecordId_for_openvm_circuit_system_memory_controller_RecordId.
        Definition Self : Ty.t := Ty.path "openvm_circuit::system::memory::controller::RecordId".
        
        (* PartialEq *)
        Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self; other ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ],
                  self
                |) in
              let other :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ],
                  other
                |) in
              M.call_closure (|
                Ty.path "bool",
                BinOp.eq,
                [
                  M.read (|
                    M.SubPointer.get_struct_tuple_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::controller::RecordId",
                      0
                    |)
                  |);
                  M.read (|
                    M.SubPointer.get_struct_tuple_field (|
                      M.deref (| M.read (| other |) |),
                      "openvm_circuit::system::memory::controller::RecordId",
                      0
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::cmp::PartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ]
            Self
            (* Instance *) [ ("eq", InstanceField.Method eq) ].
      End Impl_core_cmp_PartialEq_openvm_circuit_system_memory_controller_RecordId_for_openvm_circuit_system_memory_controller_RecordId.
      
      Module Impl_core_cmp_Eq_for_openvm_circuit_system_memory_controller_RecordId.
        Definition Self : Ty.t := Ty.path "openvm_circuit::system::memory::controller::RecordId".
        
        (* Eq *)
        Definition assert_receiver_is_total_eq
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ],
                  self
                |) in
              M.match_operator (|
                Ty.tuple [],
                Value.DeclaredButUndefined,
                [ fun γ => ltac:(M.monadic (Value.Tuple [])) ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::cmp::Eq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *)
            [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
      End Impl_core_cmp_Eq_for_openvm_circuit_system_memory_controller_RecordId.
      
      Module underscore.
        Module Impl_serde_ser_Serialize_for_openvm_circuit_system_memory_controller_RecordId.
          Definition Self : Ty.t := Ty.path "openvm_circuit::system::memory::controller::RecordId".
          
          (* Serialize *)
          Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [ __S ], [ self; __serializer ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ],
                    self
                  |) in
                let __serializer := M.alloc (| __S, __serializer |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                    ],
                  M.get_trait_method (|
                    "serde::ser::Serializer",
                    __S,
                    [],
                    [],
                    "serialize_newtype_struct",
                    [],
                    [ Ty.path "usize" ]
                  |),
                  [
                    M.read (| __serializer |);
                    mk_str (| "RecordId" |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_tuple_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::system::memory::controller::RecordId",
                            0
                          |)
                        |)
                      |)
                    |)
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "serde::ser::Serialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
        End Impl_serde_ser_Serialize_for_openvm_circuit_system_memory_controller_RecordId.
        Module Impl_serde_de_Deserialize_for_openvm_circuit_system_memory_controller_RecordId.
          Definition Self : Ty.t := Ty.path "openvm_circuit::system::memory::controller::RecordId".
          
          (* Deserialize *)
          Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [ __D ], [ __deserializer ] =>
              ltac:(M.monadic
                (let __deserializer := M.alloc (| __D, __deserializer |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.path "openvm_circuit::system::memory::controller::RecordId";
                      Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                    ],
                  M.get_trait_method (|
                    "serde::de::Deserializer",
                    __D,
                    [],
                    [],
                    "deserialize_newtype_struct",
                    [],
                    [
                      Ty.path
                        "openvm_circuit::system::memory::controller::_'1::deserialize::__Visitor"
                    ]
                  |),
                  [
                    M.read (| __deserializer |);
                    mk_str (| "RecordId" |);
                    Value.mkStructRecord
                      "openvm_circuit::system::memory::controller::_'1::deserialize::__Visitor"
                      []
                      []
                      [
                        ("marker",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ]
                            []);
                        ("lifetime",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                            [])
                      ]
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "serde::de::Deserialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
        End Impl_serde_de_Deserialize_for_openvm_circuit_system_memory_controller_RecordId.
        Module Impl_serde_ser_Serialize_for_openvm_circuit_system_memory_controller_MemoryTraceHeights.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights".
          
          (* Serialize *)
          Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [ __S ], [ self; __serializer ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights" ],
                    self
                  |) in
                let __serializer := M.alloc (| __S, __serializer |) in
                M.match_operator (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                    ],
                  M.deref (| M.read (| self |) |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "openvm_circuit::system::memory::controller::MemoryTraceHeights::Volatile",
                            0
                          |) in
                        let __field0 :=
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.path
                                  "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights"
                              ],
                            γ0_0
                          |) in
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                            ],
                          M.get_trait_method (|
                            "serde::ser::Serializer",
                            __S,
                            [],
                            [],
                            "serialize_newtype_variant",
                            [],
                            [
                              Ty.path
                                "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights"
                            ]
                          |),
                          [
                            M.read (| __serializer |);
                            mk_str (| "MemoryTraceHeights" |);
                            Value.Integer IntegerKind.U32 0;
                            mk_str (| "Volatile" |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __field0 |) |) |)
                          ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "openvm_circuit::system::memory::controller::MemoryTraceHeights::Persistent",
                            0
                          |) in
                        let __field0 :=
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.path
                                  "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights"
                              ],
                            γ0_0
                          |) in
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                            ],
                          M.get_trait_method (|
                            "serde::ser::Serializer",
                            __S,
                            [],
                            [],
                            "serialize_newtype_variant",
                            [],
                            [
                              Ty.path
                                "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights"
                            ]
                          |),
                          [
                            M.read (| __serializer |);
                            mk_str (| "MemoryTraceHeights" |);
                            Value.Integer IntegerKind.U32 1;
                            mk_str (| "Persistent" |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __field0 |) |) |)
                          ]
                        |)))
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "serde::ser::Serialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
        End Impl_serde_ser_Serialize_for_openvm_circuit_system_memory_controller_MemoryTraceHeights.
        Module Impl_serde_de_Deserialize_for_openvm_circuit_system_memory_controller_MemoryTraceHeights.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights".
          
          (* Deserialize *)
          Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [ __D ], [ __deserializer ] =>
              ltac:(M.monadic
                (let __deserializer := M.alloc (| __D, __deserializer |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights";
                      Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                    ],
                  M.get_trait_method (|
                    "serde::de::Deserializer",
                    __D,
                    [],
                    [],
                    "deserialize_enum",
                    [],
                    [
                      Ty.path
                        "openvm_circuit::system::memory::controller::_'3::deserialize::__Visitor"
                    ]
                  |),
                  [
                    M.read (| __deserializer |);
                    mk_str (| "MemoryTraceHeights" |);
                    M.read (|
                      get_constant (|
                        "openvm_circuit::system::memory::controller::_'3::deserialize::VARIANTS",
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ]
                      |)
                    |);
                    Value.mkStructRecord
                      "openvm_circuit::system::memory::controller::_'3::deserialize::__Visitor"
                      []
                      []
                      [
                        ("marker",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [
                              Ty.path
                                "openvm_circuit::system::memory::controller::MemoryTraceHeights"
                            ]
                            []);
                        ("lifetime",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                            [])
                      ]
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "serde::de::Deserialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
        End Impl_serde_de_Deserialize_for_openvm_circuit_system_memory_controller_MemoryTraceHeights.
        Module Impl_serde_ser_Serialize_for_openvm_circuit_system_memory_controller_VolatileMemoryTraceHeights.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights".
          
          (* Serialize *)
          Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [ __S ], [ self; __serializer ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.path
                          "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights"
                      ],
                    self
                  |) in
                let __serializer := M.alloc (| __S, __serializer |) in
                M.catch_return
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                    ]) (|
                  ltac:(M.monadic
                    (M.read (|
                      let~ __serde_state :
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct" :=
                        M.match_operator (|
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct"
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "SerializeStruct";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::Serializer",
                                    __S,
                                    [],
                                    [],
                                    "serialize_struct",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (| __serializer |);
                                    mk_str (| "VolatileMemoryTraceHeights" |);
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.add,
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.add,
                                          [
                                            M.cast (Ty.path "usize") (Value.Bool false);
                                            Value.Integer IntegerKind.Usize 1
                                          ]
                                        |);
                                        Value.Integer IntegerKind.Usize 1
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val :=
                                  M.copy (|
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    γ0_0
                                  |) in
                                M.read (| val |)))
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.tuple []
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStruct",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    [],
                                    [],
                                    "serialize_field",
                                    [],
                                    [ Ty.path "usize" ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                      |)
                                    |);
                                    mk_str (| "boundary" |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights",
                                            "boundary"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                M.read (| val |)))
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.tuple []
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStruct",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    [],
                                    [],
                                    "serialize_field",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                    ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                      |)
                                    |);
                                    mk_str (| "access_adapters" |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights",
                                            "access_adapters"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                M.read (| val |)))
                          ]
                        |) in
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                            ],
                          M.get_trait_method (|
                            "serde::ser::SerializeStruct",
                            Ty.associated_in_trait
                              "serde::ser::Serializer"
                              []
                              []
                              __S
                              "SerializeStruct",
                            [],
                            [],
                            "end",
                            [],
                            []
                          |),
                          [ M.read (| __serde_state |) ]
                        |)
                      |)
                    |)))
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "serde::ser::Serialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
        End Impl_serde_ser_Serialize_for_openvm_circuit_system_memory_controller_VolatileMemoryTraceHeights.
        Module Impl_serde_de_Deserialize_for_openvm_circuit_system_memory_controller_VolatileMemoryTraceHeights.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights".
          
          (* Deserialize *)
          Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [ __D ], [ __deserializer ] =>
              ltac:(M.monadic
                (let __deserializer := M.alloc (| __D, __deserializer |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.path
                        "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights";
                      Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                    ],
                  M.get_trait_method (|
                    "serde::de::Deserializer",
                    __D,
                    [],
                    [],
                    "deserialize_struct",
                    [],
                    [
                      Ty.path
                        "openvm_circuit::system::memory::controller::_'5::deserialize::__Visitor"
                    ]
                  |),
                  [
                    M.read (| __deserializer |);
                    mk_str (| "VolatileMemoryTraceHeights" |);
                    M.read (|
                      get_constant (|
                        "openvm_circuit::system::memory::controller::_'5::deserialize::FIELDS",
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ]
                      |)
                    |);
                    Value.mkStructRecord
                      "openvm_circuit::system::memory::controller::_'5::deserialize::__Visitor"
                      []
                      []
                      [
                        ("marker",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [
                              Ty.path
                                "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights"
                            ]
                            []);
                        ("lifetime",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                            [])
                      ]
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "serde::de::Deserialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
        End Impl_serde_de_Deserialize_for_openvm_circuit_system_memory_controller_VolatileMemoryTraceHeights.
        Module Impl_serde_ser_Serialize_for_openvm_circuit_system_memory_controller_PersistentMemoryTraceHeights.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights".
          
          (* Serialize *)
          Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [ __S ], [ self; __serializer ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.path
                          "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights"
                      ],
                    self
                  |) in
                let __serializer := M.alloc (| __S, __serializer |) in
                M.catch_return
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                    ]) (|
                  ltac:(M.monadic
                    (M.read (|
                      let~ __serde_state :
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct" :=
                        M.match_operator (|
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct"
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "SerializeStruct";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::Serializer",
                                    __S,
                                    [],
                                    [],
                                    "serialize_struct",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (| __serializer |);
                                    mk_str (| "PersistentMemoryTraceHeights" |);
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.add,
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.add,
                                          [
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.add,
                                              [
                                                M.cast (Ty.path "usize") (Value.Bool false);
                                                Value.Integer IntegerKind.Usize 1
                                              ]
                                            |);
                                            Value.Integer IntegerKind.Usize 1
                                          ]
                                        |);
                                        Value.Integer IntegerKind.Usize 1
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val :=
                                  M.copy (|
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    γ0_0
                                  |) in
                                M.read (| val |)))
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.tuple []
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStruct",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    [],
                                    [],
                                    "serialize_field",
                                    [],
                                    [ Ty.path "usize" ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                      |)
                                    |);
                                    mk_str (| "boundary" |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                                            "boundary"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                M.read (| val |)))
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.tuple []
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStruct",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    [],
                                    [],
                                    "serialize_field",
                                    [],
                                    [ Ty.path "usize" ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                      |)
                                    |);
                                    mk_str (| "merkle" |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                                            "merkle"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                M.read (| val |)))
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.tuple []
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStruct",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    [],
                                    [],
                                    "serialize_field",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                    ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                      |)
                                    |);
                                    mk_str (| "access_adapters" |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                                            "access_adapters"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                M.read (| val |)))
                          ]
                        |) in
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                            ],
                          M.get_trait_method (|
                            "serde::ser::SerializeStruct",
                            Ty.associated_in_trait
                              "serde::ser::Serializer"
                              []
                              []
                              __S
                              "SerializeStruct",
                            [],
                            [],
                            "end",
                            [],
                            []
                          |),
                          [ M.read (| __serde_state |) ]
                        |)
                      |)
                    |)))
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "serde::ser::Serialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
        End Impl_serde_ser_Serialize_for_openvm_circuit_system_memory_controller_PersistentMemoryTraceHeights.
        Module Impl_serde_de_Deserialize_for_openvm_circuit_system_memory_controller_PersistentMemoryTraceHeights.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights".
          
          (* Deserialize *)
          Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [ __D ], [ __deserializer ] =>
              ltac:(M.monadic
                (let __deserializer := M.alloc (| __D, __deserializer |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.path
                        "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights";
                      Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                    ],
                  M.get_trait_method (|
                    "serde::de::Deserializer",
                    __D,
                    [],
                    [],
                    "deserialize_struct",
                    [],
                    [
                      Ty.path
                        "openvm_circuit::system::memory::controller::_'7::deserialize::__Visitor"
                    ]
                  |),
                  [
                    M.read (| __deserializer |);
                    mk_str (| "PersistentMemoryTraceHeights" |);
                    M.read (|
                      get_constant (|
                        "openvm_circuit::system::memory::controller::_'7::deserialize::FIELDS",
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ]
                      |)
                    |);
                    Value.mkStructRecord
                      "openvm_circuit::system::memory::controller::_'7::deserialize::__Visitor"
                      []
                      []
                      [
                        ("marker",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [
                              Ty.path
                                "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights"
                            ]
                            []);
                        ("lifetime",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                            [])
                      ]
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "serde::de::Deserialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
        End Impl_serde_de_Deserialize_for_openvm_circuit_system_memory_controller_PersistentMemoryTraceHeights.
      End underscore.
      
      
      Axiom MemoryImage :
        forall (F : Ty.t),
        (Ty.apply (Ty.path "openvm_circuit::system::memory::controller::MemoryImage") [] [ F ]) =
          (Ty.apply
            (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
            [
              M.unevaluated_const
                (mk_str (| "openvm_circuit_system_memory_controller_MemoryImage_discriminant" |))
            ]
            [ F ]).
      
      (* StructRecord
        {
          name := "TimestampedValues";
          const_params := [ "N" ];
          ty_params := [ "T" ];
          fields :=
            [ ("timestamp", Ty.path "u32"); ("values", Ty.apply (Ty.path "array") [ N ] [ T ]) ];
        } *)
      
      Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_circuit_system_memory_controller_TimestampedValues_N_T.
        Definition Self (N : Value.t) (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::controller::TimestampedValues")
            [ N ]
            [ T ].
        
        (* Clone *)
        Definition clone
            (N : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self N T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::TimestampedValues")
                        [ N ]
                        [ T ]
                    ],
                  self
                |) in
              Value.mkStructRecord
                "openvm_circuit::system::memory::controller::TimestampedValues"
                [ N ]
                [ T ]
                [
                  ("timestamp",
                    M.call_closure (|
                      Ty.path "u32",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "u32",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::controller::TimestampedValues",
                                "timestamp"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("values",
                    M.call_closure (|
                      Ty.apply (Ty.path "array") [ N ] [ T ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply (Ty.path "array") [ N ] [ T ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::controller::TimestampedValues",
                                "values"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (N : Value.t) (T : Ty.t),
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self N T)
            (* Instance *) [ ("clone", InstanceField.Method (clone N T)) ].
      End Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_circuit_system_memory_controller_TimestampedValues_N_T.
      
      Module Impl_core_marker_Copy_where_core_marker_Copy_T_for_openvm_circuit_system_memory_controller_TimestampedValues_N_T.
        Definition Self (N : Value.t) (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::controller::TimestampedValues")
            [ N ]
            [ T ].
        
        Axiom Implements :
          forall (N : Value.t) (T : Ty.t),
          M.IsTraitInstance
            "core::marker::Copy"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self N T)
            (* Instance *) [].
      End Impl_core_marker_Copy_where_core_marker_Copy_T_for_openvm_circuit_system_memory_controller_TimestampedValues_N_T.
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_circuit_system_memory_controller_TimestampedValues_N_T.
        Definition Self (N : Value.t) (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::controller::TimestampedValues")
            [ N ]
            [ T ].
        
        (* Debug *)
        Definition fmt
            (N : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self N T in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::TimestampedValues")
                        [ N ]
                        [ T ]
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field2_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "TimestampedValues" |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "timestamp" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ Ty.path "u32" ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::controller::TimestampedValues",
                              "timestamp"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "values" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "array") [ N ] [ T ] ] ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "array") [ N ] [ T ] ],
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::controller::TimestampedValues",
                                  "values"
                                |)
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (N : Value.t) (T : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self N T)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt N T)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_circuit_system_memory_controller_TimestampedValues_N_T.
      
      Module Impl_core_marker_StructuralPartialEq_for_openvm_circuit_system_memory_controller_TimestampedValues_N_T.
        Definition Self (N : Value.t) (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::controller::TimestampedValues")
            [ N ]
            [ T ].
        
        Axiom Implements :
          forall (N : Value.t) (T : Ty.t),
          M.IsTraitInstance
            "core::marker::StructuralPartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self N T)
            (* Instance *) [].
      End Impl_core_marker_StructuralPartialEq_for_openvm_circuit_system_memory_controller_TimestampedValues_N_T.
      
      Module Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_T_openvm_circuit_system_memory_controller_TimestampedValues_N_T_for_openvm_circuit_system_memory_controller_TimestampedValues_N_T.
        Definition Self (N : Value.t) (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::controller::TimestampedValues")
            [ N ]
            [ T ].
        
        (* PartialEq *)
        Definition eq
            (N : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self N T in
          match ε, τ, α with
          | [], [], [ self; other ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::TimestampedValues")
                        [ N ]
                        [ T ]
                    ],
                  self
                |) in
              let other :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::TimestampedValues")
                        [ N ]
                        [ T ]
                    ],
                  other
                |) in
              LogicalOp.and (|
                M.call_closure (|
                  Ty.path "bool",
                  BinOp.eq,
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::system::memory::controller::TimestampedValues",
                        "timestamp"
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| other |) |),
                        "openvm_circuit::system::memory::controller::TimestampedValues",
                        "timestamp"
                      |)
                    |)
                  ]
                |),
                ltac:(M.monadic
                  (M.call_closure (|
                    Ty.path "bool",
                    M.get_trait_method (|
                      "core::cmp::PartialEq",
                      Ty.apply (Ty.path "array") [ N ] [ T ],
                      [],
                      [ Ty.apply (Ty.path "array") [ N ] [ T ] ],
                      "eq",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::controller::TimestampedValues",
                          "values"
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| other |) |),
                          "openvm_circuit::system::memory::controller::TimestampedValues",
                          "values"
                        |)
                      |)
                    ]
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (N : Value.t) (T : Ty.t),
          M.IsTraitInstance
            "core::cmp::PartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path "openvm_circuit::system::memory::controller::TimestampedValues")
                [ N ]
                [ T ]
            ]
            (Self N T)
            (* Instance *) [ ("eq", InstanceField.Method (eq N T)) ].
      End Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_T_openvm_circuit_system_memory_controller_TimestampedValues_N_T_for_openvm_circuit_system_memory_controller_TimestampedValues_N_T.
      
      Module Impl_core_cmp_Eq_where_core_cmp_Eq_T_for_openvm_circuit_system_memory_controller_TimestampedValues_N_T.
        Definition Self (N : Value.t) (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::controller::TimestampedValues")
            [ N ]
            [ T ].
        
        (* Eq *)
        Definition assert_receiver_is_total_eq
            (N : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self N T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::TimestampedValues")
                        [ N ]
                        [ T ]
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.tuple [],
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.tuple [],
                        Value.DeclaredButUndefined,
                        [ fun γ => ltac:(M.monadic (Value.Tuple [])) ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (N : Value.t) (T : Ty.t),
          M.IsTraitInstance
            "core::cmp::Eq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self N T)
            (* Instance *)
            [
              ("assert_receiver_is_total_eq",
                InstanceField.Method (assert_receiver_is_total_eq N T))
            ].
      End Impl_core_cmp_Eq_where_core_cmp_Eq_T_for_openvm_circuit_system_memory_controller_TimestampedValues_N_T.
      
      Axiom TimestampedEquipartition :
        forall (N : Value.t) (F : Ty.t),
        (Ty.apply
            (Ty.path "openvm_circuit::system::memory::controller::TimestampedEquipartition")
            [ N ]
            [ F ]) =
          (Ty.apply
            (Ty.path "alloc::collections::btree::map::BTreeMap")
            []
            [
              Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
              Ty.apply
                (Ty.path "openvm_circuit::system::memory::controller::TimestampedValues")
                [ N ]
                [ F ];
              Ty.path "alloc::alloc::Global"
            ]).
      
      Axiom Equipartition :
        forall (N : Value.t) (F : Ty.t),
        (Ty.apply
            (Ty.path "openvm_circuit::system::memory::controller::Equipartition")
            [ N ]
            [ F ]) =
          (Ty.apply
            (Ty.path "alloc::collections::btree::map::BTreeMap")
            []
            [
              Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
              Ty.apply (Ty.path "array") [ N ] [ F ];
              Ty.path "alloc::alloc::Global"
            ]).
      
      (* StructRecord
        {
          name := "MemoryController";
          const_params := [];
          ty_params := [ "F" ];
          fields :=
            [
              ("memory_bus",
                Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus");
              ("interface_chip",
                Ty.apply
                  (Ty.path "openvm_circuit::system::memory::controller::interface::MemoryInterface")
                  []
                  [ F ]);
              ("mem_config", Ty.path "openvm_circuit::arch::config::MemoryConfig");
              ("range_checker",
                Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip");
              ("range_checker_bus",
                Ty.path "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus");
              ("memory",
                Ty.apply (Ty.path "openvm_circuit::system::memory::online::Memory") [] [ F ]);
              ("offline_memory",
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.apply
                      (Ty.path "std::sync::mutex::Mutex")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                          []
                          [ F ]
                      ];
                    Ty.path "alloc::alloc::Global"
                  ]);
              ("access_adapters",
                Ty.apply
                  (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                  []
                  [ F ]);
              ("final_state",
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::FinalState")
                      []
                      [ F ]
                  ])
            ];
        } *)
      
      Module Impl_openvm_circuit_system_memory_controller_MemoryController_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
            []
            [ F ].
        
        (* Getters *)
        Definition mem_config
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::controller::MemoryController",
                      "mem_config"
                    |)
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_mem_config :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "mem_config" (mem_config F).
        Admitted.
        Global Typeclasses Opaque mem_config.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
            []
            [ F ].
        (*
            pub fn continuation_enabled(&self) -> bool {
                match &self.interface_chip {
                    MemoryInterface::Volatile { .. } => false,
                    MemoryInterface::Persistent { .. } => true,
                }
            }
        *)
        Definition continuation_enabled
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.path "bool",
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::controller::interface::MemoryInterface")
                        []
                        [ F ]
                    ],
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::controller::MemoryController",
                      "interface_chip"
                    |)
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_circuit::system::memory::controller::interface::MemoryInterface::Volatile"
                        |) in
                      Value.Bool false));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let _ :=
                        M.is_struct_tuple (|
                          γ,
                          "openvm_circuit::system::memory::controller::interface::MemoryInterface::Persistent"
                        |) in
                      Value.Bool true))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_continuation_enabled :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "continuation_enabled" (continuation_enabled F).
        Admitted.
        Global Typeclasses Opaque continuation_enabled.
        
        (*
            pub fn with_volatile_memory(
                memory_bus: MemoryBus,
                mem_config: MemoryConfig,
                range_checker: SharedVariableRangeCheckerChip,
            ) -> Self {
                let range_checker_bus = range_checker.bus();
                let initial_memory = AddressMap::from_mem_config(&mem_config);
                assert!(mem_config.pointer_max_bits <= F::bits() - 2);
                assert!(mem_config.as_height < F::bits() - 2);
                let addr_space_max_bits = log2_ceil_usize(
                    (mem_config.as_offset + 2u32.pow(mem_config.as_height as u32)) as usize,
                );
                Self {
                    memory_bus,
                    mem_config,
                    interface_chip: MemoryInterface::Volatile {
                        boundary_chip: VolatileBoundaryChip::new(
                            memory_bus,
                            addr_space_max_bits,
                            mem_config.pointer_max_bits,
                            range_checker.clone(),
                        ),
                    },
                    memory: Memory::new(&mem_config),
                    offline_memory: Arc::new(Mutex::new(OfflineMemory::new(
                        initial_memory,
                        1,
                        memory_bus,
                        range_checker.clone(),
                        mem_config,
                    ))),
                    access_adapters: AccessAdapterInventory::new(
                        range_checker.clone(),
                        memory_bus,
                        mem_config.clk_max_bits,
                        mem_config.max_access_adapter_n,
                    ),
                    range_checker,
                    range_checker_bus,
                    final_state: None,
                }
            }
        *)
        Definition with_volatile_memory
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ memory_bus; mem_config; range_checker ] =>
            ltac:(M.monadic
              (let memory_bus :=
                M.alloc (|
                  Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                  memory_bus
                |) in
              let mem_config :=
                M.alloc (| Ty.path "openvm_circuit::arch::config::MemoryConfig", mem_config |) in
              let range_checker :=
                M.alloc (|
                  Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                  range_checker
                |) in
              M.read (|
                let~ range_checker_bus :
                    Ty.path "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus" :=
                  M.call_closure (|
                    Ty.path "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                    M.get_associated_function (|
                      Ty.path
                        "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                      "bus",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, range_checker |) ]
                  |) in
                let~ initial_memory :
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                      [ Value.Integer IntegerKind.Usize 4096 ]
                      [ F ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                      [ Value.Integer IntegerKind.Usize 4096 ]
                      [ F ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                        [ Value.Integer IntegerKind.Usize 4096 ]
                        [ F ],
                      "from_mem_config",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| M.borrow (| Pointer.Kind.Ref, mem_config |) |)
                      |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.le,
                                    [
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          mem_config,
                                          "openvm_circuit::arch::config::MemoryConfig",
                                          "pointer_max_bits"
                                        |)
                                      |);
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.sub,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "p3_field::field::Field",
                                              F,
                                              [],
                                              [],
                                              "bits",
                                              [],
                                              []
                                            |),
                                            []
                                          |);
                                          Value.Integer IntegerKind.Usize 2
                                        ]
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic", [], [] |),
                              [
                                mk_str (|
                                  "assertion failed: mem_config.pointer_max_bits <= F::bits() - 2"
                                |)
                              ]
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.lt,
                                    [
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          mem_config,
                                          "openvm_circuit::arch::config::MemoryConfig",
                                          "as_height"
                                        |)
                                      |);
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.sub,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "p3_field::field::Field",
                                              F,
                                              [],
                                              [],
                                              "bits",
                                              [],
                                              []
                                            |),
                                            []
                                          |);
                                          Value.Integer IntegerKind.Usize 2
                                        ]
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic", [], [] |),
                              [
                                mk_str (|
                                  "assertion failed: mem_config.as_height < F::bits() - 2"
                                |)
                              ]
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ addr_space_max_bits : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_function (| "p3_util::log2_ceil_usize", [], [] |),
                    [
                      M.cast
                        (Ty.path "usize")
                        (M.call_closure (|
                          Ty.path "u32",
                          BinOp.Wrap.add,
                          [
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                mem_config,
                                "openvm_circuit::arch::config::MemoryConfig",
                                "as_offset"
                              |)
                            |);
                            M.call_closure (|
                              Ty.path "u32",
                              M.get_associated_function (| Ty.path "u32", "pow", [], [] |),
                              [
                                Value.Integer IntegerKind.U32 2;
                                M.cast
                                  (Ty.path "u32")
                                  (M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      mem_config,
                                      "openvm_circuit::arch::config::MemoryConfig",
                                      "as_height"
                                    |)
                                  |))
                              ]
                            |)
                          ]
                        |))
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                    []
                    [ F ],
                  Value.mkStructRecord
                    "openvm_circuit::system::memory::controller::MemoryController"
                    []
                    [ F ]
                    [
                      ("memory_bus", M.read (| memory_bus |));
                      ("mem_config", M.read (| mem_config |));
                      ("interface_chip",
                        Value.mkStructRecord
                          "openvm_circuit::system::memory::controller::interface::MemoryInterface::Volatile"
                          []
                          [ F ]
                          [
                            ("boundary_chip",
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
                                  []
                                  [ F ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
                                    []
                                    [ F ],
                                  "new",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| memory_bus |);
                                  M.read (| addr_space_max_bits |);
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      mem_config,
                                      "openvm_circuit::arch::config::MemoryConfig",
                                      "pointer_max_bits"
                                    |)
                                  |);
                                  M.call_closure (|
                                    Ty.path
                                      "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                    M.get_trait_method (|
                                      "core::clone::Clone",
                                      Ty.path
                                        "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                      [],
                                      [],
                                      "clone",
                                      [],
                                      []
                                    |),
                                    [ M.borrow (| Pointer.Kind.Ref, range_checker |) ]
                                  |)
                                ]
                              |))
                          ]);
                      ("memory",
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::online::Memory")
                            []
                            [ F ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::online::Memory")
                              []
                              [ F ],
                            "new",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, mem_config |) |)
                            |)
                          ]
                        |));
                      ("offline_memory",
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.apply
                                (Ty.path "std::sync::mutex::Mutex")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::offline::OfflineMemory")
                                    []
                                    [ F ]
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.apply
                                  (Ty.path "std::sync::mutex::Mutex")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::offline::OfflineMemory")
                                      []
                                      [ F ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "std::sync::mutex::Mutex")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::offline::OfflineMemory")
                                    []
                                    [ F ]
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "std::sync::mutex::Mutex")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::offline::OfflineMemory")
                                      []
                                      [ F ]
                                  ],
                                "new",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::offline::OfflineMemory")
                                    []
                                    [ F ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::offline::OfflineMemory")
                                      []
                                      [ F ],
                                    "new",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (| initial_memory |);
                                    Value.Integer IntegerKind.Usize 1;
                                    M.read (| memory_bus |);
                                    M.call_closure (|
                                      Ty.path
                                        "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                      M.get_trait_method (|
                                        "core::clone::Clone",
                                        Ty.path
                                          "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                        [],
                                        [],
                                        "clone",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, range_checker |) ]
                                    |);
                                    M.read (| mem_config |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |));
                      ("access_adapters",
                        M.call_closure (|
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                            []
                            [ F ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                              []
                              [ F ],
                            "new",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.path
                                "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path
                                  "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, range_checker |) ]
                            |);
                            M.read (| memory_bus |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                mem_config,
                                "openvm_circuit::arch::config::MemoryConfig",
                                "clk_max_bits"
                              |)
                            |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                mem_config,
                                "openvm_circuit::arch::config::MemoryConfig",
                                "max_access_adapter_n"
                              |)
                            |)
                          ]
                        |));
                      ("range_checker", M.read (| range_checker |));
                      ("range_checker_bus", M.read (| range_checker_bus |));
                      ("final_state",
                        Value.StructTuple
                          "core::option::Option::None"
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::controller::FinalState")
                              []
                              [ F ]
                          ]
                          [])
                    ]
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_with_volatile_memory :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "with_volatile_memory" (with_volatile_memory F).
        Admitted.
        Global Typeclasses Opaque with_volatile_memory.
        
        (*
            pub fn with_persistent_memory(
                memory_bus: MemoryBus,
                mem_config: MemoryConfig,
                range_checker: SharedVariableRangeCheckerChip,
                merkle_bus: PermutationCheckBus,
                compression_bus: PermutationCheckBus,
            ) -> Self {
                assert_eq!(mem_config.as_offset, 1);
                let memory_dims = MemoryDimensions {
                    as_height: mem_config.as_height,
                    address_height: mem_config.pointer_max_bits - log2_strict_usize(CHUNK),
                    as_offset: 1,
                };
                let range_checker_bus = range_checker.bus();
                let interface_chip = MemoryInterface::Persistent {
                    boundary_chip: PersistentBoundaryChip::new(
                        memory_dims,
                        memory_bus,
                        merkle_bus,
                        compression_bus,
                    ),
                    merkle_chip: MemoryMerkleChip::new(memory_dims, merkle_bus, compression_bus),
                    initial_memory: AddressMap::from_mem_config(&mem_config),
                };
                Self {
                    memory_bus,
                    mem_config,
                    interface_chip,
                    memory: Memory::new(&mem_config), // it is expected that the memory will be set later
                    offline_memory: Arc::new(Mutex::new(OfflineMemory::new(
                        AddressMap::from_mem_config(&mem_config),
                        CHUNK,
                        memory_bus,
                        range_checker.clone(),
                        mem_config,
                    ))),
                    access_adapters: AccessAdapterInventory::new(
                        range_checker.clone(),
                        memory_bus,
                        mem_config.clk_max_bits,
                        mem_config.max_access_adapter_n,
                    ),
                    range_checker,
                    range_checker_bus,
                    final_state: None,
                }
            }
        *)
        Definition with_persistent_memory
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ memory_bus; mem_config; range_checker; merkle_bus; compression_bus ] =>
            ltac:(M.monadic
              (let memory_bus :=
                M.alloc (|
                  Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                  memory_bus
                |) in
              let mem_config :=
                M.alloc (| Ty.path "openvm_circuit::arch::config::MemoryConfig", mem_config |) in
              let range_checker :=
                M.alloc (|
                  Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                  range_checker
                |) in
              let merkle_bus :=
                M.alloc (|
                  Ty.path "openvm_stark_backend::interaction::PermutationCheckBus",
                  merkle_bus
                |) in
              let compression_bus :=
                M.alloc (|
                  Ty.path "openvm_stark_backend::interaction::PermutationCheckBus",
                  compression_bus
                |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "&") [] [ Ty.path "u32" ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "u32" ]
                        ],
                      Value.Tuple
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              mem_config,
                              "openvm_circuit::arch::config::MemoryConfig",
                              "as_offset"
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (| Ty.path "u32", Value.Integer IntegerKind.U32 1 |)
                          |)
                        ]
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let left_val :=
                            M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ0_0 |) in
                          let right_val :=
                            M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ0_1 |) in
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        Ty.path "bool",
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.eq,
                                            [
                                              M.read (| M.deref (| M.read (| left_val |) |) |);
                                              M.read (| M.deref (| M.read (| right_val |) |) |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.never_to_any (|
                                    M.read (|
                                      let~ kind : Ty.path "core::panicking::AssertKind" :=
                                        Value.StructTuple
                                          "core::panicking::AssertKind::Eq"
                                          []
                                          []
                                          [] in
                                      M.alloc (|
                                        Ty.path "never",
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (|
                                            "core::panicking::assert_failed",
                                            [],
                                            [ Ty.path "u32"; Ty.path "u32" ]
                                          |),
                                          [
                                            M.read (| kind |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| left_val |) |)
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| right_val |) |)
                                                |)
                                              |)
                                            |);
                                            Value.StructTuple
                                              "core::option::Option::None"
                                              []
                                              [ Ty.path "core::fmt::Arguments" ]
                                              []
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (Value.Tuple []))
                            ]
                          |)))
                    ]
                  |) in
                let~ memory_dims :
                    Ty.path
                      "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions" :=
                  Value.mkStructRecord
                    "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions"
                    []
                    []
                    [
                      ("as_height",
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            mem_config,
                            "openvm_circuit::arch::config::MemoryConfig",
                            "as_height"
                          |)
                        |));
                      ("address_height",
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.sub,
                          [
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                mem_config,
                                "openvm_circuit::arch::config::MemoryConfig",
                                "pointer_max_bits"
                              |)
                            |);
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_function (| "p3_util::log2_strict_usize", [], [] |),
                              [
                                M.read (|
                                  get_constant (|
                                    "openvm_circuit::system::memory::controller::CHUNK",
                                    Ty.path "usize"
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |));
                      ("as_offset", Value.Integer IntegerKind.U32 1)
                    ] in
                let~ range_checker_bus :
                    Ty.path "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus" :=
                  M.call_closure (|
                    Ty.path "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                    M.get_associated_function (|
                      Ty.path
                        "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                      "bus",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, range_checker |) ]
                  |) in
                let~ interface_chip :
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::memory::controller::interface::MemoryInterface")
                      []
                      [ F ] :=
                  Value.mkStructRecord
                    "openvm_circuit::system::memory::controller::interface::MemoryInterface::Persistent"
                    []
                    [ F ]
                    [
                      ("boundary_chip",
                        M.call_closure (|
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ F ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
                              [ Value.Integer IntegerKind.Usize 8 ]
                              [ F ],
                            "new",
                            [],
                            []
                          |),
                          [
                            M.read (| memory_dims |);
                            M.read (| memory_bus |);
                            M.read (| merkle_bus |);
                            M.read (| compression_bus |)
                          ]
                        |));
                      ("merkle_chip",
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                            [ Value.Integer IntegerKind.Usize 8 ]
                            [ F ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                              [ Value.Integer IntegerKind.Usize 8 ]
                              [ F ],
                            "new",
                            [],
                            []
                          |),
                          [
                            M.read (| memory_dims |);
                            M.read (| merkle_bus |);
                            M.read (| compression_bus |)
                          ]
                        |));
                      ("initial_memory",
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                            [ Value.Integer IntegerKind.Usize 4096 ]
                            [ F ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                              [ Value.Integer IntegerKind.Usize 4096 ]
                              [ F ],
                            "from_mem_config",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, mem_config |) |)
                            |)
                          ]
                        |))
                    ] in
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                    []
                    [ F ],
                  Value.mkStructRecord
                    "openvm_circuit::system::memory::controller::MemoryController"
                    []
                    [ F ]
                    [
                      ("memory_bus", M.read (| memory_bus |));
                      ("mem_config", M.read (| mem_config |));
                      ("interface_chip", M.read (| interface_chip |));
                      ("memory",
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::online::Memory")
                            []
                            [ F ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::online::Memory")
                              []
                              [ F ],
                            "new",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.borrow (| Pointer.Kind.Ref, mem_config |) |)
                            |)
                          ]
                        |));
                      ("offline_memory",
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.apply
                                (Ty.path "std::sync::mutex::Mutex")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::offline::OfflineMemory")
                                    []
                                    [ F ]
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.apply
                                  (Ty.path "std::sync::mutex::Mutex")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::offline::OfflineMemory")
                                      []
                                      [ F ]
                                  ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "std::sync::mutex::Mutex")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::offline::OfflineMemory")
                                    []
                                    [ F ]
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "std::sync::mutex::Mutex")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::offline::OfflineMemory")
                                      []
                                      [ F ]
                                  ],
                                "new",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::offline::OfflineMemory")
                                    []
                                    [ F ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::offline::OfflineMemory")
                                      []
                                      [ F ],
                                    "new",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::paged_vec::AddressMap")
                                        [ Value.Integer IntegerKind.Usize 4096 ]
                                        [ F ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::paged_vec::AddressMap")
                                          [ Value.Integer IntegerKind.Usize 4096 ]
                                          [ F ],
                                        "from_mem_config",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.borrow (| Pointer.Kind.Ref, mem_config |) |)
                                        |)
                                      ]
                                    |);
                                    M.read (|
                                      get_constant (|
                                        "openvm_circuit::system::memory::controller::CHUNK",
                                        Ty.path "usize"
                                      |)
                                    |);
                                    M.read (| memory_bus |);
                                    M.call_closure (|
                                      Ty.path
                                        "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                      M.get_trait_method (|
                                        "core::clone::Clone",
                                        Ty.path
                                          "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                        [],
                                        [],
                                        "clone",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, range_checker |) ]
                                    |);
                                    M.read (| mem_config |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |));
                      ("access_adapters",
                        M.call_closure (|
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                            []
                            [ F ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                              []
                              [ F ],
                            "new",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.path
                                "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path
                                  "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, range_checker |) ]
                            |);
                            M.read (| memory_bus |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                mem_config,
                                "openvm_circuit::arch::config::MemoryConfig",
                                "clk_max_bits"
                              |)
                            |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                mem_config,
                                "openvm_circuit::arch::config::MemoryConfig",
                                "max_access_adapter_n"
                              |)
                            |)
                          ]
                        |));
                      ("range_checker", M.read (| range_checker |));
                      ("range_checker_bus", M.read (| range_checker_bus |));
                      ("final_state",
                        Value.StructTuple
                          "core::option::Option::None"
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::controller::FinalState")
                              []
                              [ F ]
                          ]
                          [])
                    ]
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_with_persistent_memory :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "with_persistent_memory" (with_persistent_memory F).
        Admitted.
        Global Typeclasses Opaque with_persistent_memory.
        
        (*
            pub fn memory_image(&self) -> &MemoryImage<F> {
                &self.memory.data
            }
        *)
        Definition memory_image
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::system::memory::controller::MemoryController",
                        "memory"
                      |),
                      "openvm_circuit::system::memory::online::Memory",
                      "data"
                    |)
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_memory_image :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "memory_image" (memory_image F).
        Admitted.
        Global Typeclasses Opaque memory_image.
        
        (*
            pub fn set_override_trace_heights(&mut self, overridden_heights: MemoryTraceHeights) {
                match &mut self.interface_chip {
                    MemoryInterface::Volatile { boundary_chip } => match overridden_heights {
                        MemoryTraceHeights::Volatile(oh) => {
                            boundary_chip.set_overridden_height(oh.boundary);
                            self.access_adapters
                                .set_override_trace_heights(oh.access_adapters);
                        }
                        _ => panic!("Expect overridden_heights to be MemoryTraceHeights::Volatile"),
                    },
                    MemoryInterface::Persistent {
                        boundary_chip,
                        merkle_chip,
                        ..
                    } => match overridden_heights {
                        MemoryTraceHeights::Persistent(oh) => {
                            boundary_chip.set_overridden_height(oh.boundary);
                            merkle_chip.set_overridden_height(oh.merkle);
                            self.access_adapters
                                .set_override_trace_heights(oh.access_adapters);
                        }
                        _ => panic!("Expect overridden_heights to be MemoryTraceHeights::Persistent"),
                    },
                }
            }
        *)
        Definition set_override_trace_heights
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; overridden_heights ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let overridden_heights :=
                M.alloc (|
                  Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights",
                  overridden_heights
                |) in
              M.match_operator (|
                Ty.tuple [],
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::controller::interface::MemoryInterface")
                        []
                        [ F ]
                    ],
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::controller::MemoryController",
                      "interface_chip"
                    |)
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::controller::interface::MemoryInterface::Volatile",
                          "boundary_chip"
                        |) in
                      let boundary_chip :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
                                []
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.match_operator (|
                        Ty.tuple [],
                        overridden_heights,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "openvm_circuit::system::memory::controller::MemoryTraceHeights::Volatile",
                                  0
                                |) in
                              let oh :=
                                M.copy (|
                                  Ty.path
                                    "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights",
                                  γ0_0
                                |) in
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
                                        []
                                        [ F ],
                                      "set_overridden_height",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| boundary_chip |) |)
                                      |);
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          oh,
                                          "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights",
                                          "boundary"
                                        |)
                                      |)
                                    ]
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                                        []
                                        [ F ],
                                      "set_override_trace_heights",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::system::memory::controller::MemoryController",
                                          "access_adapters"
                                        |)
                                      |);
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          oh,
                                          "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights",
                                          "access_adapters"
                                        |)
                                      |)
                                    ]
                                  |) in
                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.never_to_any (|
                                M.call_closure (|
                                  Ty.path "never",
                                  M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                  [
                                    M.call_closure (|
                                      Ty.path "core::fmt::Arguments",
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::Arguments",
                                        "new_const",
                                        [ Value.Integer IntegerKind.Usize 1 ],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 1 ]
                                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                                Value.Array
                                                  [
                                                    mk_str (|
                                                      "Expect overridden_heights to be MemoryTraceHeights::Volatile"
                                                    |)
                                                  ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |)))
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::controller::interface::MemoryInterface::Persistent",
                          "boundary_chip"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::controller::interface::MemoryInterface::Persistent",
                          "merkle_chip"
                        |) in
                      let boundary_chip :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
                                [ Value.Integer IntegerKind.Usize 8 ]
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      let merkle_chip :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                                [ Value.Integer IntegerKind.Usize 8 ]
                                [ F ]
                            ],
                          γ1_1
                        |) in
                      M.match_operator (|
                        Ty.tuple [],
                        overridden_heights,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "openvm_circuit::system::memory::controller::MemoryTraceHeights::Persistent",
                                  0
                                |) in
                              let oh :=
                                M.copy (|
                                  Ty.path
                                    "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                                  γ0_0
                                |) in
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
                                        [ Value.Integer IntegerKind.Usize 8 ]
                                        [ F ],
                                      "set_overridden_height",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| boundary_chip |) |)
                                      |);
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          oh,
                                          "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                                          "boundary"
                                        |)
                                      |)
                                    ]
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                                        [ Value.Integer IntegerKind.Usize 8 ]
                                        [ F ],
                                      "set_overridden_height",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| merkle_chip |) |)
                                      |);
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          oh,
                                          "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                                          "merkle"
                                        |)
                                      |)
                                    ]
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                                        []
                                        [ F ],
                                      "set_override_trace_heights",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::system::memory::controller::MemoryController",
                                          "access_adapters"
                                        |)
                                      |);
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          oh,
                                          "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                                          "access_adapters"
                                        |)
                                      |)
                                    ]
                                  |) in
                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.never_to_any (|
                                M.call_closure (|
                                  Ty.path "never",
                                  M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                  [
                                    M.call_closure (|
                                      Ty.path "core::fmt::Arguments",
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::Arguments",
                                        "new_const",
                                        [ Value.Integer IntegerKind.Usize 1 ],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 1 ]
                                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                                Value.Array
                                                  [
                                                    mk_str (|
                                                      "Expect overridden_heights to be MemoryTraceHeights::Persistent"
                                                    |)
                                                  ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |)))
                        ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_set_override_trace_heights :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C
            (Self F)
            "set_override_trace_heights"
            (set_override_trace_heights F).
        Admitted.
        Global Typeclasses Opaque set_override_trace_heights.
        
        (*
            pub fn set_initial_memory(&mut self, memory: MemoryImage<F>) {
                if self.timestamp() > INITIAL_TIMESTAMP + 1 {
                    panic!("Cannot set initial memory after first timestamp");
                }
                let mut offline_memory = self.offline_memory.lock().unwrap();
                offline_memory.set_initial_memory(memory.clone(), self.mem_config);
        
                self.memory = Memory::from_image(memory.clone(), self.mem_config.access_capacity);
        
                match &mut self.interface_chip {
                    MemoryInterface::Volatile { .. } => {
                        assert!(
                            memory.is_empty(),
                            "Cannot set initial memory for volatile memory"
                        );
                    }
                    MemoryInterface::Persistent { initial_memory, .. } => {
                        *initial_memory = memory;
                    }
                }
            }
        *)
        Definition set_initial_memory
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; memory ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let memory :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                    [
                      M.unevaluated_const
                        (mk_str (|
                          "openvm_circuit_system_memory_controller_MemoryImage_discriminant"
                        |))
                    ]
                    [ F ],
                  memory
                |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.gt,
                                  [
                                    M.call_closure (|
                                      Ty.path "u32",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::controller::MemoryController")
                                          []
                                          [ F ],
                                        "timestamp",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| self |) |)
                                        |)
                                      ]
                                    |);
                                    M.call_closure (|
                                      Ty.path "u32",
                                      BinOp.Wrap.add,
                                      [
                                        M.read (|
                                          get_constant (|
                                            "openvm_circuit::system::memory::offline::INITIAL_TIMESTAMP",
                                            Ty.path "u32"
                                          |)
                                        |);
                                        Value.Integer IntegerKind.U32 1
                                      ]
                                    |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic_fmt", [], [] |),
                              [
                                M.call_closure (|
                                  Ty.path "core::fmt::Arguments",
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Arguments",
                                    "new_const",
                                    [ Value.Integer IntegerKind.Usize 1 ],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 1 ]
                                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                            Value.Array
                                              [
                                                mk_str (|
                                                  "Cannot set initial memory after first timestamp"
                                                |)
                                              ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ offline_memory :
                    Ty.apply
                      (Ty.path "std::sync::mutex::MutexGuard")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                          []
                          [ F ]
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "std::sync::mutex::MutexGuard")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                          []
                          [ F ]
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.apply
                            (Ty.path "std::sync::mutex::MutexGuard")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                                []
                                [ F ]
                            ];
                          Ty.apply
                            (Ty.path "std::sync::poison::PoisonError")
                            []
                            [
                              Ty.apply
                                (Ty.path "std::sync::mutex::MutexGuard")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::offline::OfflineMemory")
                                    []
                                    [ F ]
                                ]
                            ]
                        ],
                      "unwrap",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.apply
                              (Ty.path "std::sync::mutex::MutexGuard")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                                  []
                                  [ F ]
                              ];
                            Ty.apply
                              (Ty.path "std::sync::poison::PoisonError")
                              []
                              [
                                Ty.apply
                                  (Ty.path "std::sync::mutex::MutexGuard")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::offline::OfflineMemory")
                                      []
                                      [ F ]
                                  ]
                              ]
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "std::sync::mutex::Mutex")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                                []
                                [ F ]
                            ],
                          "lock",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "std::sync::mutex::Mutex")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::offline::OfflineMemory")
                                          []
                                          [ F ]
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::Mutex")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::offline::OfflineMemory")
                                            []
                                            [ F ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::system::memory::controller::MemoryController",
                                      "offline_memory"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                        []
                        [ F ],
                      "set_initial_memory",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                                  []
                                  [ F ]
                              ],
                            M.get_trait_method (|
                              "core::ops::deref::DerefMut",
                              Ty.apply
                                (Ty.path "std::sync::mutex::MutexGuard")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::offline::OfflineMemory")
                                    []
                                    [ F ]
                                ],
                              [],
                              [],
                              "deref_mut",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.MutRef, offline_memory |) ]
                          |)
                        |)
                      |);
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                          [ Value.Integer IntegerKind.Usize 4096 ]
                          [ F ],
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                            [ Value.Integer IntegerKind.Usize 4096 ]
                            [ F ],
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, memory |) ]
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::controller::MemoryController",
                          "mem_config"
                        |)
                      |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.write (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::controller::MemoryController",
                      "memory"
                    |),
                    M.call_closure (|
                      Ty.apply (Ty.path "openvm_circuit::system::memory::online::Memory") [] [ F ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::online::Memory")
                          []
                          [ F ],
                        "from_image",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                            [ Value.Integer IntegerKind.Usize 4096 ]
                            [ F ],
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                              [ Value.Integer IntegerKind.Usize 4096 ]
                              [ F ],
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, memory |) ]
                        |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::controller::MemoryController",
                              "mem_config"
                            |),
                            "openvm_circuit::arch::config::MemoryConfig",
                            "access_capacity"
                          |)
                        |)
                      ]
                    |)
                  |) in
                M.alloc (|
                  Ty.tuple [],
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::controller::interface::MemoryInterface")
                            []
                            [ F ]
                        ],
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::controller::MemoryController",
                          "interface_chip"
                        |)
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "openvm_circuit::system::memory::controller::interface::MemoryInterface::Volatile"
                            |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            Ty.path "bool",
                                            UnOp.not (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::memory::paged_vec::AddressMap")
                                                    [ Value.Integer IntegerKind.Usize 4096 ]
                                                    [ F ],
                                                  "is_empty",
                                                  [],
                                                  []
                                                |),
                                                [ M.borrow (| Pointer.Kind.Ref, memory |) ]
                                              |)
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.never_to_any (|
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                          [
                                            M.call_closure (|
                                              Ty.path "core::fmt::Arguments",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::Arguments",
                                                "new_const",
                                                [ Value.Integer IntegerKind.Usize 1 ],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Value.Integer IntegerKind.Usize 1 ]
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "str" ]
                                                          ],
                                                        Value.Array
                                                          [
                                                            mk_str (|
                                                              "Cannot set initial memory for volatile memory"
                                                            |)
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::system::memory::controller::interface::MemoryInterface::Persistent",
                              "initial_memory"
                            |) in
                          let initial_memory :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::paged_vec::AddressMap")
                                    [ Value.Integer IntegerKind.Usize 4096 ]
                                    [ F ]
                                ],
                              γ1_0
                            |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.write (|
                                M.deref (| M.read (| initial_memory |) |),
                                M.read (| memory |)
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)))
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_set_initial_memory :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "set_initial_memory" (set_initial_memory F).
        Admitted.
        Global Typeclasses Opaque set_initial_memory.
        
        (*
            pub fn memory_bridge(&self) -> MemoryBridge {
                MemoryBridge::new(
                    self.memory_bus,
                    self.mem_config.clk_max_bits,
                    self.range_checker_bus,
                )
            }
        *)
        Definition memory_bridge
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                M.get_associated_function (|
                  Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                  "new",
                  [],
                  []
                |),
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::controller::MemoryController",
                      "memory_bus"
                    |)
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::system::memory::controller::MemoryController",
                        "mem_config"
                      |),
                      "openvm_circuit::arch::config::MemoryConfig",
                      "clk_max_bits"
                    |)
                  |);
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::controller::MemoryController",
                      "range_checker_bus"
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_memory_bridge :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "memory_bridge" (memory_bridge F).
        Admitted.
        Global Typeclasses Opaque memory_bridge.
        
        (*
            pub fn read_cell(&mut self, address_space: F, pointer: F) -> (RecordId, F) {
                let (record_id, [data]) = self.read(address_space, pointer);
                (record_id, data)
            }
        *)
        Definition read_cell (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; address_space; pointer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let address_space := M.alloc (| F, address_space |) in
              let pointer := M.alloc (| F, pointer |) in
              M.match_operator (|
                Ty.tuple [ Ty.path "openvm_circuit::system::memory::controller::RecordId"; F ],
                M.alloc (|
                  Ty.tuple
                    [
                      Ty.path "openvm_circuit::system::memory::controller::RecordId";
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 1 ] [ F ]
                    ],
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "openvm_circuit::system::memory::controller::RecordId";
                        Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 1 ] [ F ]
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ],
                      "read",
                      [ Value.Integer IntegerKind.Usize 1 ],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                      M.read (| address_space |);
                      M.read (| pointer |)
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let record_id :=
                        M.copy (|
                          Ty.path "openvm_circuit::system::memory::controller::RecordId",
                          γ0_0
                        |) in
                      let γ1_0 := M.SubPointer.get_slice_index (| γ0_1, 0 |) in
                      let data := M.copy (| F, γ1_0 |) in
                      Value.Tuple [ M.read (| record_id |); M.read (| data |) ]))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_read_cell :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "read_cell" (read_cell F).
        Admitted.
        Global Typeclasses Opaque read_cell.
        
        (*
            pub fn read<const N: usize>(&mut self, address_space: F, pointer: F) -> (RecordId, [F; N]) {
                let address_space_u32 = address_space.as_canonical_u32();
                let ptr_u32 = pointer.as_canonical_u32();
                assert!(
                    address_space == F::ZERO || ptr_u32 < (1 << self.mem_config.pointer_max_bits),
                    "memory out of bounds: {ptr_u32:?}",
                );
        
                let (record_id, values) = self.memory.read::<N>(address_space_u32, ptr_u32);
        
                (record_id, values)
            }
        *)
        Definition read (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [ N ], [], [ self; address_space; pointer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let address_space := M.alloc (| F, address_space |) in
              let pointer := M.alloc (| F, pointer |) in
              M.read (|
                let~ address_space_u32 : Ty.path "u32" :=
                  M.call_closure (|
                    Ty.path "u32",
                    M.get_trait_method (|
                      "p3_field::field::PrimeField32",
                      F,
                      [],
                      [],
                      "as_canonical_u32",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, address_space |) ]
                  |) in
                let~ ptr_u32 : Ty.path "u32" :=
                  M.call_closure (|
                    Ty.path "u32",
                    M.get_trait_method (|
                      "p3_field::field::PrimeField32",
                      F,
                      [],
                      [],
                      "as_canonical_u32",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, pointer |) ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                UnOp.not (|
                                  LogicalOp.or (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        F,
                                        [],
                                        [ F ],
                                        "eq",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (| Pointer.Kind.Ref, address_space |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          get_constant (|
                                            "p3_field::field::FieldAlgebra::ZERO",
                                            F
                                          |)
                                        |)
                                      ]
                                    |),
                                    ltac:(M.monadic
                                      (M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.lt,
                                        [
                                          M.read (| ptr_u32 |);
                                          M.call_closure (|
                                            Ty.path "u32",
                                            BinOp.Wrap.shl,
                                            [
                                              Value.Integer IntegerKind.U32 1;
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "openvm_circuit::system::memory::controller::MemoryController",
                                                    "mem_config"
                                                  |),
                                                  "openvm_circuit::arch::config::MemoryConfig",
                                                  "pointer_max_bits"
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)))
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic_fmt", [], [] |),
                              [
                                M.call_closure (|
                                  Ty.path "core::fmt::Arguments",
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Arguments",
                                    "new_v1",
                                    [
                                      Value.Integer IntegerKind.Usize 1;
                                      Value.Integer IntegerKind.Usize 1
                                    ],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 1 ]
                                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                            Value.Array [ mk_str (| "memory out of bounds: " |) ]
                                          |)
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 1 ]
                                              [ Ty.path "core::fmt::rt::Argument" ],
                                            Value.Array
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::rt::Argument",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::rt::Argument",
                                                    "new_debug",
                                                    [],
                                                    [ Ty.path "u32" ]
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (| Pointer.Kind.Ref, ptr_u32 |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                M.alloc (|
                  Ty.tuple
                    [
                      Ty.path "openvm_circuit::system::memory::controller::RecordId";
                      Ty.apply (Ty.path "array") [ N ] [ F ]
                    ],
                  M.match_operator (|
                    Ty.tuple
                      [
                        Ty.path "openvm_circuit::system::memory::controller::RecordId";
                        Ty.apply (Ty.path "array") [ N ] [ F ]
                      ],
                    M.alloc (|
                      Ty.tuple
                        [
                          Ty.path "openvm_circuit::system::memory::controller::RecordId";
                          Ty.apply (Ty.path "array") [ N ] [ F ]
                        ],
                      M.call_closure (|
                        Ty.tuple
                          [
                            Ty.path "openvm_circuit::system::memory::controller::RecordId";
                            Ty.apply (Ty.path "array") [ N ] [ F ]
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::online::Memory")
                            []
                            [ F ],
                          "read",
                          [ N ],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::controller::MemoryController",
                              "memory"
                            |)
                          |);
                          M.read (| address_space_u32 |);
                          M.read (| ptr_u32 |)
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let record_id :=
                            M.copy (|
                              Ty.path "openvm_circuit::system::memory::controller::RecordId",
                              γ0_0
                            |) in
                          let values := M.copy (| Ty.apply (Ty.path "array") [ N ] [ F ], γ0_1 |) in
                          Value.Tuple [ M.read (| record_id |); M.read (| values |) ]))
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_read :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "read" (read F).
        Admitted.
        Global Typeclasses Opaque read.
        
        (*
            pub fn unsafe_read_cell(&self, addr_space: F, ptr: F) -> F {
                self.unsafe_read::<1>(addr_space, ptr)[0]
            }
        *)
        Definition unsafe_read_cell
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; addr_space; ptr ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let addr_space := M.alloc (| F, addr_space |) in
              let ptr := M.alloc (| F, ptr |) in
              M.read (|
                M.SubPointer.get_array_field (|
                  M.alloc (|
                    Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 1 ] [ F ],
                    M.call_closure (|
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 1 ] [ F ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                          []
                          [ F ],
                        "unsafe_read",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                        M.read (| addr_space |);
                        M.read (| ptr |)
                      ]
                    |)
                  |),
                  Value.Integer IntegerKind.Usize 0
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_unsafe_read_cell :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "unsafe_read_cell" (unsafe_read_cell F).
        Admitted.
        Global Typeclasses Opaque unsafe_read_cell.
        
        (*
            pub fn unsafe_read<const N: usize>(&self, addr_space: F, ptr: F) -> [F; N] {
                let addr_space = addr_space.as_canonical_u32();
                let ptr = ptr.as_canonical_u32();
                array::from_fn(|i| self.memory.get(addr_space, ptr + i as u32))
            }
        *)
        Definition unsafe_read
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [ N ], [], [ self; addr_space; ptr ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let addr_space := M.alloc (| F, addr_space |) in
              let ptr := M.alloc (| F, ptr |) in
              M.read (|
                let~ addr_space : Ty.path "u32" :=
                  M.call_closure (|
                    Ty.path "u32",
                    M.get_trait_method (|
                      "p3_field::field::PrimeField32",
                      F,
                      [],
                      [],
                      "as_canonical_u32",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, addr_space |) ]
                  |) in
                let~ ptr : Ty.path "u32" :=
                  M.call_closure (|
                    Ty.path "u32",
                    M.get_trait_method (|
                      "p3_field::field::PrimeField32",
                      F,
                      [],
                      [],
                      "as_canonical_u32",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, ptr |) ]
                  |) in
                M.alloc (|
                  Ty.apply (Ty.path "array") [ N ] [ F ],
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ N ] [ F ],
                    M.get_function (|
                      "core::array::from_fn",
                      [ N ],
                      [ F; Ty.function [ Ty.path "usize" ] F ]
                    |),
                    [
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  F,
                                  M.alloc (| Ty.path "usize", α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let i := M.copy (| Ty.path "usize", γ |) in
                                        M.call_closure (|
                                          F,
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::online::Memory")
                                              []
                                              [ F ],
                                            "get",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "openvm_circuit::system::memory::controller::MemoryController",
                                                "memory"
                                              |)
                                            |);
                                            M.read (| addr_space |);
                                            M.call_closure (|
                                              Ty.path "u32",
                                              BinOp.Wrap.add,
                                              [
                                                M.read (| ptr |);
                                                M.cast (Ty.path "u32") (M.read (| i |))
                                              ]
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_unsafe_read :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "unsafe_read" (unsafe_read F).
        Admitted.
        Global Typeclasses Opaque unsafe_read.
        
        (*
            pub fn write_cell(&mut self, address_space: F, pointer: F, data: F) -> (RecordId, F) {
                let (record_id, [data]) = self.write(address_space, pointer, [data]);
                (record_id, data)
            }
        *)
        Definition write_cell
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; address_space; pointer; data ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let address_space := M.alloc (| F, address_space |) in
              let pointer := M.alloc (| F, pointer |) in
              let data := M.alloc (| F, data |) in
              M.match_operator (|
                Ty.tuple [ Ty.path "openvm_circuit::system::memory::controller::RecordId"; F ],
                M.alloc (|
                  Ty.tuple
                    [
                      Ty.path "openvm_circuit::system::memory::controller::RecordId";
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 1 ] [ F ]
                    ],
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "openvm_circuit::system::memory::controller::RecordId";
                        Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 1 ] [ F ]
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ],
                      "write",
                      [ Value.Integer IntegerKind.Usize 1 ],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                      M.read (| address_space |);
                      M.read (| pointer |);
                      Value.Array [ M.read (| data |) ]
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let record_id :=
                        M.copy (|
                          Ty.path "openvm_circuit::system::memory::controller::RecordId",
                          γ0_0
                        |) in
                      let γ1_0 := M.SubPointer.get_slice_index (| γ0_1, 0 |) in
                      let data := M.copy (| F, γ1_0 |) in
                      Value.Tuple [ M.read (| record_id |); M.read (| data |) ]))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_write_cell :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "write_cell" (write_cell F).
        Admitted.
        Global Typeclasses Opaque write_cell.
        
        (*
            pub fn write<const N: usize>(
                &mut self,
                address_space: F,
                pointer: F,
                data: [F; N],
            ) -> (RecordId, [F; N]) {
                assert_ne!(address_space, F::ZERO);
                let address_space_u32 = address_space.as_canonical_u32();
                let ptr_u32 = pointer.as_canonical_u32();
                assert!(
                    ptr_u32 < (1 << self.mem_config.pointer_max_bits),
                    "memory out of bounds: {ptr_u32:?}",
                );
        
                self.memory.write(address_space_u32, ptr_u32, data)
            }
        *)
        Definition write (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [ N ], [], [ self; address_space; pointer; data ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let address_space := M.alloc (| F, address_space |) in
              let pointer := M.alloc (| F, pointer |) in
              let data := M.alloc (| Ty.apply (Ty.path "array") [ N ] [ F ], data |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.tuple [ Ty.apply (Ty.path "&") [] [ F ]; Ty.apply (Ty.path "&") [] [ F ] ],
                      Value.Tuple
                        [
                          M.borrow (| Pointer.Kind.Ref, address_space |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            get_constant (| "p3_field::field::FieldAlgebra::ZERO", F |)
                          |)
                        ]
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let left_val := M.copy (| Ty.apply (Ty.path "&") [] [ F ], γ0_0 |) in
                          let right_val := M.copy (| Ty.apply (Ty.path "&") [] [ F ], γ0_1 |) in
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        Ty.path "bool",
                                        M.call_closure (|
                                          Ty.path "bool",
                                          M.get_trait_method (|
                                            "core::cmp::PartialEq",
                                            F,
                                            [],
                                            [ F ],
                                            "eq",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| left_val |) |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| right_val |) |)
                                            |)
                                          ]
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.never_to_any (|
                                    M.read (|
                                      let~ kind : Ty.path "core::panicking::AssertKind" :=
                                        Value.StructTuple
                                          "core::panicking::AssertKind::Ne"
                                          []
                                          []
                                          [] in
                                      M.alloc (|
                                        Ty.path "never",
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (|
                                            "core::panicking::assert_failed",
                                            [],
                                            [ F; F ]
                                          |),
                                          [
                                            M.read (| kind |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| left_val |) |)
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| right_val |) |)
                                                |)
                                              |)
                                            |);
                                            Value.StructTuple
                                              "core::option::Option::None"
                                              []
                                              [ Ty.path "core::fmt::Arguments" ]
                                              []
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (Value.Tuple []))
                            ]
                          |)))
                    ]
                  |) in
                let~ address_space_u32 : Ty.path "u32" :=
                  M.call_closure (|
                    Ty.path "u32",
                    M.get_trait_method (|
                      "p3_field::field::PrimeField32",
                      F,
                      [],
                      [],
                      "as_canonical_u32",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, address_space |) ]
                  |) in
                let~ ptr_u32 : Ty.path "u32" :=
                  M.call_closure (|
                    Ty.path "u32",
                    M.get_trait_method (|
                      "p3_field::field::PrimeField32",
                      F,
                      [],
                      [],
                      "as_canonical_u32",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, pointer |) ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.lt,
                                    [
                                      M.read (| ptr_u32 |);
                                      M.call_closure (|
                                        Ty.path "u32",
                                        BinOp.Wrap.shl,
                                        [
                                          Value.Integer IntegerKind.U32 1;
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "openvm_circuit::system::memory::controller::MemoryController",
                                                "mem_config"
                                              |),
                                              "openvm_circuit::arch::config::MemoryConfig",
                                              "pointer_max_bits"
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic_fmt", [], [] |),
                              [
                                M.call_closure (|
                                  Ty.path "core::fmt::Arguments",
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Arguments",
                                    "new_v1",
                                    [
                                      Value.Integer IntegerKind.Usize 1;
                                      Value.Integer IntegerKind.Usize 1
                                    ],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 1 ]
                                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                            Value.Array [ mk_str (| "memory out of bounds: " |) ]
                                          |)
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 1 ]
                                              [ Ty.path "core::fmt::rt::Argument" ],
                                            Value.Array
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::rt::Argument",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::rt::Argument",
                                                    "new_debug",
                                                    [],
                                                    [ Ty.path "u32" ]
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (| Pointer.Kind.Ref, ptr_u32 |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                M.alloc (|
                  Ty.tuple
                    [
                      Ty.path "openvm_circuit::system::memory::controller::RecordId";
                      Ty.apply (Ty.path "array") [ N ] [ F ]
                    ],
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.path "openvm_circuit::system::memory::controller::RecordId";
                        Ty.apply (Ty.path "array") [ N ] [ F ]
                      ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "openvm_circuit::system::memory::online::Memory") [] [ F ],
                      "write",
                      [ N ],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::controller::MemoryController",
                          "memory"
                        |)
                      |);
                      M.read (| address_space_u32 |);
                      M.read (| ptr_u32 |);
                      M.read (| data |)
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_write :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "write" (write F).
        Admitted.
        Global Typeclasses Opaque write.
        
        (*
            pub fn aux_cols_factory(&self) -> MemoryAuxColsFactory<F> {
                let range_bus = self.range_checker.bus();
                MemoryAuxColsFactory {
                    range_checker: self.range_checker.clone(),
                    timestamp_lt_air: AssertLtSubAir::new(range_bus, self.mem_config.clk_max_bits),
                    _marker: Default::default(),
                }
            }
        *)
        Definition aux_cols_factory
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.read (|
                let~ range_bus :
                    Ty.path "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus" :=
                  M.call_closure (|
                    Ty.path "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                    M.get_associated_function (|
                      Ty.path
                        "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                      "bus",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::controller::MemoryController",
                          "range_checker"
                        |)
                      |)
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                    []
                    [ F ],
                  Value.mkStructRecord
                    "openvm_circuit::system::memory::controller::MemoryAuxColsFactory"
                    []
                    [ F ]
                    [
                      ("range_checker",
                        M.call_closure (|
                          Ty.path
                            "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.path
                              "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::controller::MemoryController",
                                "range_checker"
                              |)
                            |)
                          ]
                        |));
                      ("timestamp_lt_air",
                        M.call_closure (|
                          Ty.path "openvm_circuit_primitives::assert_less_than::AssertLtSubAir",
                          M.get_associated_function (|
                            Ty.path "openvm_circuit_primitives::assert_less_than::AssertLtSubAir",
                            "new",
                            [],
                            []
                          |),
                          [
                            M.read (| range_bus |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::controller::MemoryController",
                                  "mem_config"
                                |),
                                "openvm_circuit::arch::config::MemoryConfig",
                                "clk_max_bits"
                              |)
                            |)
                          ]
                        |));
                      ("_marker",
                        M.call_closure (|
                          Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ],
                          M.get_trait_method (|
                            "core::default::Default",
                            Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ],
                            [],
                            [],
                            "default",
                            [],
                            []
                          |),
                          []
                        |))
                    ]
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_aux_cols_factory :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "aux_cols_factory" (aux_cols_factory F).
        Admitted.
        Global Typeclasses Opaque aux_cols_factory.
        
        (*
            pub fn increment_timestamp(&mut self) {
                self.memory.increment_timestamp_by(1);
            }
        *)
        Definition increment_timestamp
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "openvm_circuit::system::memory::online::Memory") [] [ F ],
                      "increment_timestamp_by",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::controller::MemoryController",
                          "memory"
                        |)
                      |);
                      Value.Integer IntegerKind.U32 1
                    ]
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_increment_timestamp :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "increment_timestamp" (increment_timestamp F).
        Admitted.
        Global Typeclasses Opaque increment_timestamp.
        
        (*
            pub fn increment_timestamp_by(&mut self, change: u32) {
                self.memory.increment_timestamp_by(change);
            }
        *)
        Definition increment_timestamp_by
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; change ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let change := M.alloc (| Ty.path "u32", change |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "openvm_circuit::system::memory::online::Memory") [] [ F ],
                      "increment_timestamp_by",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::controller::MemoryController",
                          "memory"
                        |)
                      |);
                      M.read (| change |)
                    ]
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_increment_timestamp_by :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "increment_timestamp_by" (increment_timestamp_by F).
        Admitted.
        Global Typeclasses Opaque increment_timestamp_by.
        
        (*
            pub fn timestamp(&self) -> u32 {
                self.memory.timestamp()
            }
        *)
        Definition timestamp (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.path "u32",
                M.get_associated_function (|
                  Ty.apply (Ty.path "openvm_circuit::system::memory::online::Memory") [] [ F ],
                  "timestamp",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::controller::MemoryController",
                      "memory"
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_timestamp :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "timestamp" (timestamp F).
        Admitted.
        Global Typeclasses Opaque timestamp.
        
        (*
            fn replay_access_log(&mut self) {
                let log = mem::take(&mut self.memory.log);
                if log.is_empty() {
                    // Online memory logs may be empty, but offline memory may be replayed from external
                    // sources. In these cases, we skip the calls to replay access logs because
                    // `set_log_capacity` would panic.
                    tracing::debug!("skipping replay_access_log");
                    return;
                }
        
                let mut offline_memory = self.offline_memory.lock().unwrap();
                offline_memory.set_log_capacity(log.len());
        
                for entry in log {
                    Self::replay_access(
                        entry,
                        &mut offline_memory,
                        &mut self.interface_chip,
                        &mut self.access_adapters,
                    );
                }
            }
        *)
        Definition replay_access_log
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.catch_return (Ty.tuple []) (|
                ltac:(M.monadic
                  (M.read (|
                    let~ log :
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ] :=
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_function (|
                          "core::mem::take",
                          [],
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ]
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.SubPointer.get_struct_record_field (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::system::memory::controller::MemoryController",
                                    "memory"
                                  |),
                                  "openvm_circuit::system::memory::online::Memory",
                                  "log"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    Ty.path "bool",
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::online::MemoryLogEntry")
                                              []
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        "is_empty",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, log |) ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.never_to_any (|
                                M.read (|
                                  let~ _ : Ty.tuple [] :=
                                    M.read (|
                                      let~ enabled : Ty.path "bool" :=
                                        LogicalOp.and (|
                                          LogicalOp.and (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              M.get_trait_method (|
                                                "core::cmp::PartialOrd",
                                                Ty.path "tracing_core::metadata::Level",
                                                [],
                                                [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                                "le",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  get_associated_constant (|
                                                    Ty.path "tracing_core::metadata::Level",
                                                    "DEBUG",
                                                    Ty.path "tracing_core::metadata::Level"
                                                  |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  get_constant (|
                                                    "tracing::level_filters::STATIC_MAX_LEVEL",
                                                    Ty.path "tracing_core::metadata::LevelFilter"
                                                  |)
                                                |)
                                              ]
                                            |),
                                            ltac:(M.monadic
                                              (M.call_closure (|
                                                Ty.path "bool",
                                                M.get_trait_method (|
                                                  "core::cmp::PartialOrd",
                                                  Ty.path "tracing_core::metadata::Level",
                                                  [],
                                                  [ Ty.path "tracing_core::metadata::LevelFilter" ],
                                                  "le",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    get_associated_constant (|
                                                      Ty.path "tracing_core::metadata::Level",
                                                      "DEBUG",
                                                      Ty.path "tracing_core::metadata::Level"
                                                    |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.path "tracing_core::metadata::LevelFilter",
                                                      M.call_closure (|
                                                        Ty.path
                                                          "tracing_core::metadata::LevelFilter",
                                                        M.get_associated_function (|
                                                          Ty.path
                                                            "tracing_core::metadata::LevelFilter",
                                                          "current",
                                                          [],
                                                          []
                                                        |),
                                                        []
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)))
                                          |),
                                          ltac:(M.monadic
                                            (M.read (|
                                              let~ interest :
                                                  Ty.path "tracing_core::subscriber::Interest" :=
                                                M.call_closure (|
                                                  Ty.path "tracing_core::subscriber::Interest",
                                                  M.get_associated_function (|
                                                    Ty.path
                                                      "tracing_core::callsite::DefaultCallsite",
                                                    "interest",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.read (|
                                                          get_constant (|
                                                            "openvm_circuit::system::memory::controller::replay_access_log::__CALLSITE",
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite"
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |) in
                                              M.alloc (|
                                                Ty.path "bool",
                                                LogicalOp.and (|
                                                  UnOp.not (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_associated_function (|
                                                        Ty.path
                                                          "tracing_core::subscriber::Interest",
                                                        "is_never",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.borrow (| Pointer.Kind.Ref, interest |) ]
                                                    |)
                                                  |),
                                                  ltac:(M.monadic
                                                    (M.call_closure (|
                                                      Ty.path "bool",
                                                      M.get_function (|
                                                        "tracing::__macro_support::__is_enabled",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.path
                                                                    "tracing_core::metadata::Metadata"
                                                                ],
                                                              M.get_trait_method (|
                                                                "tracing_core::callsite::Callsite",
                                                                Ty.path
                                                                  "tracing_core::callsite::DefaultCallsite",
                                                                [],
                                                                [],
                                                                "metadata",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "openvm_circuit::system::memory::controller::replay_access_log::__CALLSITE",
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "tracing_core::callsite::DefaultCallsite"
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |);
                                                        M.read (| interest |)
                                                      ]
                                                    |)))
                                                |)
                                              |)
                                            |)))
                                        |) in
                                      M.alloc (|
                                        Ty.tuple [],
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ := M.use enabled in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.read (|
                                                  let~ _ : Ty.tuple [] :=
                                                    M.call_closure (|
                                                      Ty.tuple [],
                                                      M.get_trait_method (|
                                                        "core::ops::function::Fn",
                                                        Ty.function
                                                          [ Ty.path "tracing_core::field::ValueSet"
                                                          ]
                                                          (Ty.tuple []),
                                                        [],
                                                        [
                                                          Ty.tuple
                                                            [
                                                              Ty.path
                                                                "tracing_core::field::ValueSet"
                                                            ]
                                                        ],
                                                        "call",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.function
                                                              [
                                                                Ty.path
                                                                  "tracing_core::field::ValueSet"
                                                              ]
                                                              (Ty.tuple []),
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    ltac:(M.monadic
                                                                      (M.match_operator (|
                                                                        Ty.tuple [],
                                                                        M.alloc (|
                                                                          Ty.path
                                                                            "tracing_core::field::ValueSet",
                                                                          α0
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let value_set :=
                                                                                M.copy (|
                                                                                  Ty.path
                                                                                    "tracing_core::field::ValueSet",
                                                                                  γ
                                                                                |) in
                                                                              M.read (|
                                                                                let~ meta :
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "tracing_core::metadata::Metadata"
                                                                                      ] :=
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "tracing_core::metadata::Metadata"
                                                                                      ],
                                                                                    M.get_trait_method (|
                                                                                      "tracing_core::callsite::Callsite",
                                                                                      Ty.path
                                                                                        "tracing_core::callsite::DefaultCallsite",
                                                                                      [],
                                                                                      [],
                                                                                      "metadata",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            get_constant (|
                                                                                              "openvm_circuit::system::memory::controller::replay_access_log::__CALLSITE",
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "tracing_core::callsite::DefaultCallsite"
                                                                                                ]
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |) in
                                                                                let~ _ :
                                                                                    Ty.tuple [] :=
                                                                                  M.call_closure (|
                                                                                    Ty.tuple [],
                                                                                    M.get_associated_function (|
                                                                                      Ty.path
                                                                                        "tracing_core::event::Event",
                                                                                      "dispatch",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.deref (|
                                                                                          M.read (|
                                                                                            meta
                                                                                          |)
                                                                                        |)
                                                                                      |);
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.deref (|
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            value_set
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Ty.tuple [],
                                                                                  Value.Tuple []
                                                                                |)
                                                                              |)))
                                                                        ]
                                                                      |)))
                                                                  | _ =>
                                                                    M.impossible
                                                                      "wrong number of arguments"
                                                                  end))
                                                          |)
                                                        |);
                                                        Value.Tuple
                                                          [
                                                            M.read (|
                                                              let~ iter :
                                                                  Ty.path
                                                                    "tracing_core::field::Iter" :=
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "tracing_core::field::Iter",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "tracing_core::field::FieldSet",
                                                                    "iter",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::field::FieldSet"
                                                                            ],
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "tracing_core::metadata::Metadata",
                                                                            "fields",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "tracing_core::metadata::Metadata"
                                                                                    ],
                                                                                  M.get_trait_method (|
                                                                                    "tracing_core::callsite::Callsite",
                                                                                    Ty.path
                                                                                      "tracing_core::callsite::DefaultCallsite",
                                                                                    [],
                                                                                    [],
                                                                                    "metadata",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          get_constant (|
                                                                                            "openvm_circuit::system::memory::controller::replay_access_log::__CALLSITE",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "tracing_core::callsite::DefaultCallsite"
                                                                                              ]
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |) in
                                                              M.alloc (|
                                                                Ty.path
                                                                  "tracing_core::field::ValueSet",
                                                                M.call_closure (|
                                                                  Ty.path
                                                                    "tracing_core::field::ValueSet",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "tracing_core::field::FieldSet",
                                                                    "value_set",
                                                                    [],
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.path
                                                                                    "tracing_core::field::Field"
                                                                                ];
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "core::option::Option")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.dyn
                                                                                        [
                                                                                          ("tracing_core::field::Value::Trait",
                                                                                            [])
                                                                                        ]
                                                                                    ]
                                                                                ]
                                                                            ]
                                                                        ]
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "tracing_core::field::FieldSet"
                                                                            ],
                                                                          M.get_associated_function (|
                                                                            Ty.path
                                                                              "tracing_core::metadata::Metadata",
                                                                            "fields",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.path
                                                                                        "tracing_core::metadata::Metadata"
                                                                                    ],
                                                                                  M.get_trait_method (|
                                                                                    "tracing_core::callsite::Callsite",
                                                                                    Ty.path
                                                                                      "tracing_core::callsite::DefaultCallsite",
                                                                                    [],
                                                                                    [],
                                                                                    "metadata",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          get_constant (|
                                                                                            "openvm_circuit::system::memory::controller::replay_access_log::__CALLSITE",
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "tracing_core::callsite::DefaultCallsite"
                                                                                              ]
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |);
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.alloc (|
                                                                            Ty.apply
                                                                              (Ty.path "array")
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  1
                                                                              ]
                                                                              [
                                                                                Ty.tuple
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.path
                                                                                          "tracing_core::field::Field"
                                                                                      ];
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "core::option::Option")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Ty.dyn
                                                                                              [
                                                                                                ("tracing_core::field::Value::Trait",
                                                                                                  [])
                                                                                              ]
                                                                                          ]
                                                                                      ]
                                                                                  ]
                                                                              ],
                                                                            Value.Array
                                                                              [
                                                                                Value.Tuple
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.alloc (|
                                                                                        Ty.path
                                                                                          "tracing_core::field::Field",
                                                                                        M.call_closure (|
                                                                                          Ty.path
                                                                                            "tracing_core::field::Field",
                                                                                          M.get_associated_function (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "core::option::Option")
                                                                                              []
                                                                                              [
                                                                                                Ty.path
                                                                                                  "tracing_core::field::Field"
                                                                                              ],
                                                                                            "expect",
                                                                                            [],
                                                                                            []
                                                                                          |),
                                                                                          [
                                                                                            M.call_closure (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "core::option::Option")
                                                                                                []
                                                                                                [
                                                                                                  Ty.path
                                                                                                    "tracing_core::field::Field"
                                                                                                ],
                                                                                              M.get_trait_method (|
                                                                                                "core::iter::traits::iterator::Iterator",
                                                                                                Ty.path
                                                                                                  "tracing_core::field::Iter",
                                                                                                [],
                                                                                                [],
                                                                                                "next",
                                                                                                [],
                                                                                                []
                                                                                              |),
                                                                                              [
                                                                                                M.borrow (|
                                                                                                  Pointer.Kind.MutRef,
                                                                                                  M.deref (|
                                                                                                    M.borrow (|
                                                                                                      Pointer.Kind.MutRef,
                                                                                                      iter
                                                                                                    |)
                                                                                                  |)
                                                                                                |)
                                                                                              ]
                                                                                            |);
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.Ref,
                                                                                              M.deref (|
                                                                                                mk_str (|
                                                                                                  "FieldSet corrupted (this is a bug)"
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                        |)
                                                                                      |)
                                                                                    |);
                                                                                    Value.StructTuple
                                                                                      "core::option::Option::Some"
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "&")
                                                                                          []
                                                                                          [
                                                                                            Ty.dyn
                                                                                              [
                                                                                                ("tracing_core::field::Value::Trait",
                                                                                                  [])
                                                                                              ]
                                                                                          ]
                                                                                      ]
                                                                                      [
                                                                                        M.read (|
                                                                                          M.use
                                                                                            (M.alloc (|
                                                                                              Ty.apply
                                                                                                (Ty.path
                                                                                                  "&")
                                                                                                []
                                                                                                [
                                                                                                  Ty.dyn
                                                                                                    [
                                                                                                      ("tracing_core::field::Value::Trait",
                                                                                                        [])
                                                                                                    ]
                                                                                                ],
                                                                                              M.call_closure (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.dyn
                                                                                                      [
                                                                                                        ("tracing_core::field::Value::Trait",
                                                                                                          [])
                                                                                                      ]
                                                                                                  ],
                                                                                                M.pointer_coercion
                                                                                                  M.PointerCoercion.Unsize
                                                                                                  (Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "core::fmt::Arguments"
                                                                                                    ])
                                                                                                  (Ty.apply
                                                                                                    (Ty.path
                                                                                                      "&")
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.dyn
                                                                                                        [
                                                                                                          ("tracing_core::field::Value::Trait",
                                                                                                            [])
                                                                                                        ]
                                                                                                    ]),
                                                                                                [
                                                                                                  M.borrow (|
                                                                                                    Pointer.Kind.Ref,
                                                                                                    M.deref (|
                                                                                                      M.borrow (|
                                                                                                        Pointer.Kind.Ref,
                                                                                                        M.alloc (|
                                                                                                          Ty.path
                                                                                                            "core::fmt::Arguments",
                                                                                                          M.call_closure (|
                                                                                                            Ty.path
                                                                                                              "core::fmt::Arguments",
                                                                                                            M.get_associated_function (|
                                                                                                              Ty.path
                                                                                                                "core::fmt::Arguments",
                                                                                                              "new_const",
                                                                                                              [
                                                                                                                Value.Integer
                                                                                                                  IntegerKind.Usize
                                                                                                                  1
                                                                                                              ],
                                                                                                              []
                                                                                                            |),
                                                                                                            [
                                                                                                              M.borrow (|
                                                                                                                Pointer.Kind.Ref,
                                                                                                                M.deref (|
                                                                                                                  M.borrow (|
                                                                                                                    Pointer.Kind.Ref,
                                                                                                                    M.alloc (|
                                                                                                                      Ty.apply
                                                                                                                        (Ty.path
                                                                                                                          "array")
                                                                                                                        [
                                                                                                                          Value.Integer
                                                                                                                            IntegerKind.Usize
                                                                                                                            1
                                                                                                                        ]
                                                                                                                        [
                                                                                                                          Ty.apply
                                                                                                                            (Ty.path
                                                                                                                              "&")
                                                                                                                            []
                                                                                                                            [
                                                                                                                              Ty.path
                                                                                                                                "str"
                                                                                                                            ]
                                                                                                                        ],
                                                                                                                      Value.Array
                                                                                                                        [
                                                                                                                          mk_str (|
                                                                                                                            "skipping replay_access_log"
                                                                                                                          |)
                                                                                                                        ]
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                |)
                                                                                                              |)
                                                                                                            ]
                                                                                                          |)
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)
                                                                                                  |)
                                                                                                ]
                                                                                              |)
                                                                                            |))
                                                                                        |)
                                                                                      ]
                                                                                  ]
                                                                              ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                      ]
                                                    |) in
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |)
                                      |)
                                    |) in
                                  M.return_ (| Value.Tuple [] |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (Value.Tuple []))
                        ]
                      |) in
                    let~ offline_memory :
                        Ty.apply
                          (Ty.path "std::sync::mutex::MutexGuard")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                              []
                              [ F ]
                          ] :=
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "std::sync::mutex::MutexGuard")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                              []
                              [ F ]
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.apply
                                (Ty.path "std::sync::mutex::MutexGuard")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::offline::OfflineMemory")
                                    []
                                    [ F ]
                                ];
                              Ty.apply
                                (Ty.path "std::sync::poison::PoisonError")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::MutexGuard")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::offline::OfflineMemory")
                                        []
                                        [ F ]
                                    ]
                                ]
                            ],
                          "unwrap",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply
                                  (Ty.path "std::sync::mutex::MutexGuard")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::offline::OfflineMemory")
                                      []
                                      [ F ]
                                  ];
                                Ty.apply
                                  (Ty.path "std::sync::poison::PoisonError")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "std::sync::mutex::MutexGuard")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::offline::OfflineMemory")
                                          []
                                          [ F ]
                                      ]
                                  ]
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "std::sync::mutex::Mutex")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::offline::OfflineMemory")
                                    []
                                    [ F ]
                                ],
                              "lock",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::Mutex")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::offline::OfflineMemory")
                                              []
                                              [ F ]
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::Mutex")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::offline::OfflineMemory")
                                                []
                                                [ F ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::system::memory::controller::MemoryController",
                                          "offline_memory"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                            []
                            [ F ],
                          "set_log_capacity",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::offline::OfflineMemory")
                                      []
                                      [ F ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::deref::DerefMut",
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::MutexGuard")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::offline::OfflineMemory")
                                        []
                                        [ F ]
                                    ],
                                  [],
                                  [],
                                  "deref_mut",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.MutRef, offline_memory |) ]
                              |)
                            |)
                          |);
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::online::MemoryLogEntry")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "len",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, log |) ]
                          |)
                        ]
                      |) in
                    M.use
                      (M.alloc (|
                        Ty.tuple [],
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry")
                                  []
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::online::MemoryLogEntry")
                                    []
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::online::MemoryLogEntry")
                                      []
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "into_iter",
                                [],
                                []
                              |),
                              [ M.read (| log |) ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::online::MemoryLogEntry")
                                          []
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    γ
                                  |) in
                                M.read (|
                                  M.loop (|
                                    Ty.tuple [],
                                    ltac:(M.monadic
                                      (let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::online::MemoryLogEntry")
                                                  []
                                                  [ F ]
                                              ],
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::memory::online::MemoryLogEntry")
                                                    []
                                                    [ F ]
                                                ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::online::MemoryLogEntry")
                                                      []
                                                      [ F ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                [],
                                                "next",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (|
                                                    M.borrow (| Pointer.Kind.MutRef, iter |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let _ :=
                                                  M.is_struct_tuple (|
                                                    γ,
                                                    "core::option::Option::None"
                                                  |) in
                                                M.never_to_any (| M.read (| M.break (||) |) |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let entry :=
                                                  M.copy (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::online::MemoryLogEntry")
                                                      []
                                                      [ F ],
                                                    γ0_0
                                                  |) in
                                                M.read (|
                                                  let~ _ : Ty.tuple [] :=
                                                    M.call_closure (|
                                                      Ty.tuple [],
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::system::memory::controller::MemoryController")
                                                          []
                                                          [ F ],
                                                        "replay_access",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.read (| entry |);
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&mut")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_circuit::system::memory::offline::OfflineMemory")
                                                                    []
                                                                    [ F ]
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::ops::deref::DerefMut",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "std::sync::mutex::MutexGuard")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit::system::memory::offline::OfflineMemory")
                                                                      []
                                                                      [ F ]
                                                                  ],
                                                                [],
                                                                [],
                                                                "deref_mut",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      offline_memory
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (| M.read (| self |) |),
                                                                "openvm_circuit::system::memory::controller::MemoryController",
                                                                "interface_chip"
                                                              |)
                                                            |)
                                                          |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (| M.read (| self |) |),
                                                                "openvm_circuit::system::memory::controller::MemoryController",
                                                                "access_adapters"
                                                              |)
                                                            |)
                                                          |)
                                                        |)
                                                      ]
                                                    |) in
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                  |)
                                |)))
                          ]
                        |)
                      |))
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_replay_access_log :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "replay_access_log" (replay_access_log F).
        Admitted.
        Global Typeclasses Opaque replay_access_log.
        
        (*
            pub fn replay_access(
                entry: MemoryLogEntry<F>,
                offline_memory: &mut OfflineMemory<F>,
                interface_chip: &mut MemoryInterface<F>,
                adapter_records: &mut AccessAdapterInventory<F>,
            ) {
                match entry {
                    MemoryLogEntry::Read {
                        address_space,
                        pointer,
                        len,
                    } => {
                        if address_space != 0 {
                            interface_chip.touch_range(address_space, pointer, len as u32);
                        }
                        offline_memory.read(address_space, pointer, len, adapter_records);
                    }
                    MemoryLogEntry::Write {
                        address_space,
                        pointer,
                        data,
                    } => {
                        if address_space != 0 {
                            interface_chip.touch_range(address_space, pointer, data.len() as u32);
                        }
                        offline_memory.write(address_space, pointer, data, adapter_records);
                    }
                    MemoryLogEntry::IncrementTimestampBy(amount) => {
                        offline_memory.increment_timestamp_by(amount);
                    }
                };
            }
        *)
        Definition replay_access
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ entry; offline_memory; interface_chip; adapter_records ] =>
            ltac:(M.monadic
              (let entry :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry")
                    []
                    [ F ],
                  entry
                |) in
              let offline_memory :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                        []
                        [ F ]
                    ],
                  offline_memory
                |) in
              let interface_chip :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::controller::interface::MemoryInterface")
                        []
                        [ F ]
                    ],
                  interface_chip
                |) in
              let adapter_records :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                        []
                        [ F ]
                    ],
                  adapter_records
                |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    entry,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::system::memory::online::MemoryLogEntry::Read",
                              "address_space"
                            |) in
                          let γ0_1 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::system::memory::online::MemoryLogEntry::Read",
                              "pointer"
                            |) in
                          let γ0_2 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::system::memory::online::MemoryLogEntry::Read",
                              "len"
                            |) in
                          let address_space := M.copy (| Ty.path "u32", γ0_0 |) in
                          let pointer := M.copy (| Ty.path "u32", γ0_1 |) in
                          let len := M.copy (| Ty.path "usize", γ0_2 |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            Ty.path "bool",
                                            M.call_closure (|
                                              Ty.path "bool",
                                              BinOp.ne,
                                              [
                                                M.read (| address_space |);
                                                Value.Integer IntegerKind.U32 0
                                              ]
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::controller::interface::MemoryInterface")
                                                []
                                                [ F ],
                                              "touch_range",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| interface_chip |) |)
                                              |);
                                              M.read (| address_space |);
                                              M.read (| pointer |);
                                              M.cast (Ty.path "u32") (M.read (| len |))
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                      |)));
                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::offline::OfflineMemory")
                                    []
                                    [ F ],
                                  "read",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.read (| offline_memory |) |)
                                  |);
                                  M.read (| address_space |);
                                  M.read (| pointer |);
                                  M.read (| len |);
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.read (| adapter_records |) |)
                                  |)
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::system::memory::online::MemoryLogEntry::Write",
                              "address_space"
                            |) in
                          let γ0_1 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::system::memory::online::MemoryLogEntry::Write",
                              "pointer"
                            |) in
                          let γ0_2 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::system::memory::online::MemoryLogEntry::Write",
                              "data"
                            |) in
                          let address_space := M.copy (| Ty.path "u32", γ0_0 |) in
                          let pointer := M.copy (| Ty.path "u32", γ0_1 |) in
                          let data :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ],
                              γ0_2
                            |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            Ty.path "bool",
                                            M.call_closure (|
                                              Ty.path "bool",
                                              BinOp.ne,
                                              [
                                                M.read (| address_space |);
                                                Value.Integer IntegerKind.U32 0
                                              ]
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::controller::interface::MemoryInterface")
                                                []
                                                [ F ],
                                              "touch_range",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| interface_chip |) |)
                                              |);
                                              M.read (| address_space |);
                                              M.read (| pointer |);
                                              M.cast
                                                (Ty.path "u32")
                                                (M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ F; Ty.path "alloc::alloc::Global" ],
                                                    "len",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.borrow (| Pointer.Kind.Ref, data |) ]
                                                |))
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                      |)));
                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::offline::OfflineMemory")
                                    []
                                    [ F ],
                                  "write",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.read (| offline_memory |) |)
                                  |);
                                  M.read (| address_space |);
                                  M.read (| pointer |);
                                  M.read (| data |);
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.read (| adapter_records |) |)
                                  |)
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "openvm_circuit::system::memory::online::MemoryLogEntry::IncrementTimestampBy",
                              0
                            |) in
                          let amount := M.copy (| Ty.path "u32", γ0_0 |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::offline::OfflineMemory")
                                    []
                                    [ F ],
                                  "increment_timestamp_by",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.read (| offline_memory |) |)
                                  |);
                                  M.read (| amount |)
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)))
                    ]
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_replay_access :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "replay_access" (replay_access F).
        Admitted.
        Global Typeclasses Opaque replay_access.
        
        (*
            pub fn finalize<H>(&mut self, hasher: Option<&mut H>)
            where
                H: HasherChip<CHUNK, F> + Sync + for<'a> SerialReceiver<&'a [F]>,
            {
                if self.final_state.is_some() {
                    return;
                }
        
                self.replay_access_log();
                let mut offline_memory = self.offline_memory.lock().unwrap();
        
                match &mut self.interface_chip {
                    MemoryInterface::Volatile { boundary_chip } => {
                        let final_memory = offline_memory.finalize::<1>(&mut self.access_adapters);
                        boundary_chip.finalize(final_memory);
                        self.final_state = Some(FinalState::Volatile(VolatileFinalState::default()));
                    }
                    MemoryInterface::Persistent {
                        merkle_chip,
                        boundary_chip,
                        initial_memory,
                    } => {
                        let hasher = hasher.unwrap();
                        let final_partition = offline_memory.finalize::<CHUNK>(&mut self.access_adapters);
        
                        boundary_chip.finalize(initial_memory, &final_partition, hasher);
                        let final_memory_values = final_partition
                            .into_par_iter()
                            .map(|(key, value)| (key, value.values))
                            .collect();
                        let initial_node = MemoryNode::tree_from_memory(
                            merkle_chip.air.memory_dimensions,
                            initial_memory,
                            hasher,
                        );
                        merkle_chip.finalize(&initial_node, &final_memory_values, hasher);
                        self.final_state = Some(FinalState::Persistent(PersistentFinalState {
                            final_memory: final_memory_values.clone(),
                        }));
                    }
                };
            }
        *)
        Definition finalize (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [ H ], [ self; hasher ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let hasher :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.apply (Ty.path "&mut") [] [ H ] ],
                  hasher
                |) in
              M.catch_return (Ty.tuple []) (|
                ltac:(M.monadic
                  (M.read (|
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    Ty.path "bool",
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::controller::FinalState")
                                              []
                                              [ F ]
                                          ],
                                        "is_some",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::system::memory::controller::MemoryController",
                                            "final_state"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.never_to_any (| M.read (| M.return_ (| Value.Tuple [] |) |) |)));
                          fun γ => ltac:(M.monadic (Value.Tuple []))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                            []
                            [ F ],
                          "replay_access_log",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                      |) in
                    let~ offline_memory :
                        Ty.apply
                          (Ty.path "std::sync::mutex::MutexGuard")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                              []
                              [ F ]
                          ] :=
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "std::sync::mutex::MutexGuard")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                              []
                              [ F ]
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.apply
                                (Ty.path "std::sync::mutex::MutexGuard")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::offline::OfflineMemory")
                                    []
                                    [ F ]
                                ];
                              Ty.apply
                                (Ty.path "std::sync::poison::PoisonError")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "std::sync::mutex::MutexGuard")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::offline::OfflineMemory")
                                        []
                                        [ F ]
                                    ]
                                ]
                            ],
                          "unwrap",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply
                                  (Ty.path "std::sync::mutex::MutexGuard")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::offline::OfflineMemory")
                                      []
                                      [ F ]
                                  ];
                                Ty.apply
                                  (Ty.path "std::sync::poison::PoisonError")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "std::sync::mutex::MutexGuard")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::offline::OfflineMemory")
                                          []
                                          [ F ]
                                      ]
                                  ]
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "std::sync::mutex::Mutex")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::offline::OfflineMemory")
                                    []
                                    [ F ]
                                ],
                              "lock",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::Mutex")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::offline::OfflineMemory")
                                              []
                                              [ F ]
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::Mutex")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::offline::OfflineMemory")
                                                []
                                                [ F ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::system::memory::controller::MemoryController",
                                          "offline_memory"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::controller::interface::MemoryInterface")
                                []
                                [ F ]
                            ],
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::controller::MemoryController",
                              "interface_chip"
                            |)
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.deref (| M.read (| γ |) |) in
                              let γ1_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "openvm_circuit::system::memory::controller::interface::MemoryInterface::Volatile",
                                  "boundary_chip"
                                |) in
                              let boundary_chip :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
                                        []
                                        [ F ]
                                    ],
                                  γ1_0
                                |) in
                              M.read (|
                                let~ final_memory :
                                    Ty.apply
                                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                                      []
                                      [
                                        Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::controller::TimestampedValues")
                                          [ Value.Integer IntegerKind.Usize 1 ]
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ] :=
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                                      []
                                      [
                                        Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::controller::TimestampedValues")
                                          [ Value.Integer IntegerKind.Usize 1 ]
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::offline::OfflineMemory")
                                        []
                                        [ F ],
                                      "finalize",
                                      [ Value.Integer IntegerKind.Usize 1 ],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::offline::OfflineMemory")
                                                  []
                                                  [ F ]
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::deref::DerefMut",
                                              Ty.apply
                                                (Ty.path "std::sync::mutex::MutexGuard")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::memory::offline::OfflineMemory")
                                                    []
                                                    [ F ]
                                                ],
                                              [],
                                              [],
                                              "deref_mut",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.MutRef, offline_memory |) ]
                                          |)
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::controller::MemoryController",
                                              "access_adapters"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
                                        []
                                        [ F ],
                                      "finalize",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| boundary_chip |) |)
                                      |);
                                      M.read (| final_memory |)
                                    ]
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.write (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::system::memory::controller::MemoryController",
                                      "final_state"
                                    |),
                                    Value.StructTuple
                                      "core::option::Option::Some"
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::controller::FinalState")
                                          []
                                          [ F ]
                                      ]
                                      [
                                        Value.StructTuple
                                          "openvm_circuit::system::memory::controller::FinalState::Volatile"
                                          []
                                          [ F ]
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::controller::VolatileFinalState")
                                                []
                                                [ F ],
                                              M.get_trait_method (|
                                                "core::default::Default",
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::controller::VolatileFinalState")
                                                  []
                                                  [ F ],
                                                [],
                                                [],
                                                "default",
                                                [],
                                                []
                                              |),
                                              []
                                            |)
                                          ]
                                      ]
                                  |) in
                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.deref (| M.read (| γ |) |) in
                              let γ1_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "openvm_circuit::system::memory::controller::interface::MemoryInterface::Persistent",
                                  "merkle_chip"
                                |) in
                              let γ1_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "openvm_circuit::system::memory::controller::interface::MemoryInterface::Persistent",
                                  "boundary_chip"
                                |) in
                              let γ1_2 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ,
                                  "openvm_circuit::system::memory::controller::interface::MemoryInterface::Persistent",
                                  "initial_memory"
                                |) in
                              let merkle_chip :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                                        [ Value.Integer IntegerKind.Usize 8 ]
                                        [ F ]
                                    ],
                                  γ1_0
                                |) in
                              let boundary_chip :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
                                        [ Value.Integer IntegerKind.Usize 8 ]
                                        [ F ]
                                    ],
                                  γ1_1
                                |) in
                              let initial_memory :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::paged_vec::AddressMap")
                                        [ Value.Integer IntegerKind.Usize 4096 ]
                                        [ F ]
                                    ],
                                  γ1_2
                                |) in
                              M.read (|
                                let~ hasher : Ty.apply (Ty.path "&mut") [] [ H ] :=
                                  M.call_closure (|
                                    Ty.apply (Ty.path "&mut") [] [ H ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.apply (Ty.path "&mut") [] [ H ] ],
                                      "unwrap",
                                      [],
                                      []
                                    |),
                                    [ M.read (| hasher |) ]
                                  |) in
                                let~ final_partition :
                                    Ty.apply
                                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                                      []
                                      [
                                        Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::controller::TimestampedValues")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ] :=
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                                      []
                                      [
                                        Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::controller::TimestampedValues")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::offline::OfflineMemory")
                                        []
                                        [ F ],
                                      "finalize",
                                      [ Value.Integer IntegerKind.Usize 8 ],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::offline::OfflineMemory")
                                                  []
                                                  [ F ]
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::deref::DerefMut",
                                              Ty.apply
                                                (Ty.path "std::sync::mutex::MutexGuard")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::memory::offline::OfflineMemory")
                                                    []
                                                    [ F ]
                                                ],
                                              [],
                                              [],
                                              "deref_mut",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.MutRef, offline_memory |) ]
                                          |)
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::controller::MemoryController",
                                              "access_adapters"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
                                        [ Value.Integer IntegerKind.Usize 8 ]
                                        [ F ],
                                      "finalize",
                                      [],
                                      [ H ]
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| boundary_chip |) |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| initial_memory |) |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (| Pointer.Kind.Ref, final_partition |)
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| hasher |) |)
                                      |)
                                    ]
                                  |) in
                                let~ final_memory_values :
                                    Ty.apply
                                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                                      []
                                      [
                                        Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ] :=
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                                      []
                                      [
                                        Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    M.get_trait_method (|
                                      "rayon::iter::ParallelIterator",
                                      Ty.apply
                                        (Ty.path "rayon::iter::map::Map")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "rayon::collections::btree_map::IntoIter")
                                            []
                                            [
                                              Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::controller::TimestampedValues")
                                                [ Value.Integer IntegerKind.Usize 8 ]
                                                [ F ]
                                            ];
                                          Ty.function
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::memory::controller::TimestampedValues")
                                                    [ Value.Integer IntegerKind.Usize 8 ]
                                                    [ F ]
                                                ]
                                            ]
                                            (Ty.tuple
                                              [
                                                Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 8 ]
                                                  [ F ]
                                              ])
                                        ],
                                      [],
                                      [],
                                      "collect",
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                                          []
                                          [
                                            Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 8 ]
                                              [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "rayon::iter::map::Map")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "rayon::collections::btree_map::IntoIter")
                                              []
                                              [
                                                Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::controller::TimestampedValues")
                                                  [ Value.Integer IntegerKind.Usize 8 ]
                                                  [ F ]
                                              ];
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::controller::TimestampedValues")
                                                      [ Value.Integer IntegerKind.Usize 8 ]
                                                      [ F ]
                                                  ]
                                              ]
                                              (Ty.tuple
                                                [
                                                  Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Value.Integer IntegerKind.Usize 8 ]
                                                    [ F ]
                                                ])
                                          ],
                                        M.get_trait_method (|
                                          "rayon::iter::ParallelIterator",
                                          Ty.apply
                                            (Ty.path "rayon::collections::btree_map::IntoIter")
                                            []
                                            [
                                              Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::controller::TimestampedValues")
                                                [ Value.Integer IntegerKind.Usize 8 ]
                                                [ F ]
                                            ],
                                          [],
                                          [],
                                          "map",
                                          [],
                                          [
                                            Ty.function
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::controller::TimestampedValues")
                                                      [ Value.Integer IntegerKind.Usize 8 ]
                                                      [ F ]
                                                  ]
                                              ]
                                              (Ty.tuple
                                                [
                                                  Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Value.Integer IntegerKind.Usize 8 ]
                                                    [ F ]
                                                ]);
                                            Ty.tuple
                                              [
                                                Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 8 ]
                                                  [ F ]
                                              ]
                                          ]
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "rayon::collections::btree_map::IntoIter")
                                              []
                                              [
                                                Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::controller::TimestampedValues")
                                                  [ Value.Integer IntegerKind.Usize 8 ]
                                                  [ F ]
                                              ],
                                            M.get_trait_method (|
                                              "rayon::iter::IntoParallelIterator",
                                              Ty.apply
                                                (Ty.path "alloc::collections::btree::map::BTreeMap")
                                                []
                                                [
                                                  Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::memory::controller::TimestampedValues")
                                                    [ Value.Integer IntegerKind.Usize 8 ]
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              [],
                                              "into_par_iter",
                                              [],
                                              []
                                            |),
                                            [ M.read (| final_partition |) ]
                                          |);
                                          M.closure
                                            (fun γ =>
                                              ltac:(M.monadic
                                                match γ with
                                                | [ α0 ] =>
                                                  ltac:(M.monadic
                                                    (M.match_operator (|
                                                      Ty.tuple
                                                        [
                                                          Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Value.Integer IntegerKind.Usize 8 ]
                                                            [ F ]
                                                        ],
                                                      M.alloc (|
                                                        Ty.tuple
                                                          [
                                                            Ty.tuple
                                                              [ Ty.path "u32"; Ty.path "u32" ];
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_circuit::system::memory::controller::TimestampedValues")
                                                              [ Value.Integer IntegerKind.Usize 8 ]
                                                              [ F ]
                                                          ],
                                                        α0
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ,
                                                                0
                                                              |) in
                                                            let γ0_1 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ,
                                                                1
                                                              |) in
                                                            let key :=
                                                              M.copy (|
                                                                Ty.tuple
                                                                  [ Ty.path "u32"; Ty.path "u32" ],
                                                                γ0_0
                                                              |) in
                                                            let value :=
                                                              M.copy (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit::system::memory::controller::TimestampedValues")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      8
                                                                  ]
                                                                  [ F ],
                                                                γ0_1
                                                              |) in
                                                            Value.Tuple
                                                              [
                                                                M.read (| key |);
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    value,
                                                                    "openvm_circuit::system::memory::controller::TimestampedValues",
                                                                    "values"
                                                                  |)
                                                                |)
                                                              ]))
                                                      ]
                                                    |)))
                                                | _ => M.impossible "wrong number of arguments"
                                                end))
                                        ]
                                      |)
                                    ]
                                  |) in
                                let~ initial_node :
                                    Ty.apply
                                      (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                      [ Value.Integer IntegerKind.Usize 8 ]
                                      [ F ] :=
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                      [ Value.Integer IntegerKind.Usize 8 ]
                                      [ F ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                        [ Value.Integer IntegerKind.Usize 8 ]
                                        [ F ],
                                      "tree_from_memory",
                                      [],
                                      [ H ]
                                    |),
                                    [
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| merkle_chip |) |),
                                            "openvm_circuit::system::memory::merkle::MemoryMerkleChip",
                                            "air"
                                          |),
                                          "openvm_circuit::system::memory::merkle::air::MemoryMerkleAir",
                                          "memory_dimensions"
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| initial_memory |) |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| hasher |) |)
                                      |)
                                    ]
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                                        [ Value.Integer IntegerKind.Usize 8 ]
                                        [ F ],
                                      "finalize",
                                      [],
                                      [ H ]
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| merkle_chip |) |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.borrow (| Pointer.Kind.Ref, initial_node |) |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (| Pointer.Kind.Ref, final_memory_values |)
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| hasher |) |)
                                      |)
                                    ]
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.write (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::system::memory::controller::MemoryController",
                                      "final_state"
                                    |),
                                    Value.StructTuple
                                      "core::option::Option::Some"
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::controller::FinalState")
                                          []
                                          [ F ]
                                      ]
                                      [
                                        Value.StructTuple
                                          "openvm_circuit::system::memory::controller::FinalState::Persistent"
                                          []
                                          [ F ]
                                          [
                                            Value.mkStructRecord
                                              "openvm_circuit::system::memory::controller::PersistentFinalState"
                                              []
                                              [ F ]
                                              [
                                                ("final_memory",
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "alloc::collections::btree::map::BTreeMap")
                                                      []
                                                      [
                                                        Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Value.Integer IntegerKind.Usize 8 ]
                                                          [ F ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::clone::Clone",
                                                      Ty.apply
                                                        (Ty.path
                                                          "alloc::collections::btree::map::BTreeMap")
                                                        []
                                                        [
                                                          Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ Value.Integer IntegerKind.Usize 8 ]
                                                            [ F ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      [],
                                                      "clone",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        final_memory_values
                                                      |)
                                                    ]
                                                  |))
                                              ]
                                          ]
                                      ]
                                  |) in
                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                              |)))
                        ]
                      |) in
                    M.alloc (| Ty.tuple [], Value.Tuple [] |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_finalize :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "finalize" (finalize F).
        Admitted.
        Global Typeclasses Opaque finalize.
        
        (*
            pub fn generate_air_proof_inputs<SC: StarkGenericConfig>(self) -> Vec<AirProofInput<SC>>
            where
                Domain<SC>: PolynomialSpace<Val = F>,
            {
                let mut ret = Vec::new();
        
                let Self {
                    interface_chip,
                    access_adapters,
                    ..
                } = self;
                match interface_chip {
                    MemoryInterface::Volatile { boundary_chip } => {
                        ret.push(boundary_chip.generate_air_proof_input());
                    }
                    MemoryInterface::Persistent {
                        merkle_chip,
                        boundary_chip,
                        ..
                    } => {
                        debug_assert_eq!(ret.len(), BOUNDARY_AIR_OFFSET);
                        ret.push(boundary_chip.generate_air_proof_input());
                        debug_assert_eq!(ret.len(), MERKLE_AIR_OFFSET);
                        ret.push(merkle_chip.generate_air_proof_input());
                    }
                }
                ret.extend(access_adapters.generate_air_proof_inputs());
                ret
            }
        *)
        Definition generate_air_proof_inputs
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [ SC ], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                    []
                    [ F ],
                  self
                |) in
              M.read (|
                let~ ret :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ];
                        Ty.path "alloc::alloc::Global"
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                            []
                            [ SC ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      [],
                      []
                    |),
                    []
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                        []
                        [ SC ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                          []
                          [ SC ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    self,
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::system::memory::controller::MemoryController",
                              "interface_chip"
                            |) in
                          let γ0_1 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::system::memory::controller::MemoryController",
                              "access_adapters"
                            |) in
                          let interface_chip :=
                            M.copy (|
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::controller::interface::MemoryInterface")
                                []
                                [ F ],
                              γ0_0
                            |) in
                          let access_adapters :=
                            M.copy (|
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                                []
                                [ F ],
                              γ0_1
                            |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                interface_chip,
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_record_field (|
                                          γ,
                                          "openvm_circuit::system::memory::controller::interface::MemoryInterface::Volatile",
                                          "boundary_chip"
                                        |) in
                                      let boundary_chip :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
                                            []
                                            [ F ],
                                          γ0_0
                                        |) in
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::prover::types::AirProofInput")
                                                    []
                                                    [ SC ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              "push",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.MutRef, ret |);
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::prover::types::AirProofInput")
                                                  []
                                                  [ SC ],
                                                M.get_trait_method (|
                                                  "openvm_stark_backend::chip::Chip",
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
                                                    []
                                                    [ F ],
                                                  [],
                                                  [ SC ],
                                                  "generate_air_proof_input",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| boundary_chip |) ]
                                              |)
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 :=
                                        M.SubPointer.get_struct_record_field (|
                                          γ,
                                          "openvm_circuit::system::memory::controller::interface::MemoryInterface::Persistent",
                                          "merkle_chip"
                                        |) in
                                      let γ0_1 :=
                                        M.SubPointer.get_struct_record_field (|
                                          γ,
                                          "openvm_circuit::system::memory::controller::interface::MemoryInterface::Persistent",
                                          "boundary_chip"
                                        |) in
                                      let merkle_chip :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            [ F ],
                                          γ0_0
                                        |) in
                                      let boundary_chip :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            [ F ],
                                          γ0_1
                                        |) in
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        Ty.path "bool",
                                                        Value.Bool true
                                                      |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.read (|
                                                    let~ _ : Ty.tuple [] :=
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (|
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "usize" ];
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "usize" ]
                                                            ],
                                                          Value.Tuple
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Ty.path "usize",
                                                                  M.call_closure (|
                                                                    Ty.path "usize",
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_stark_backend::prover::types::AirProofInput")
                                                                            []
                                                                            [ SC ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      "len",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        ret
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                get_constant (|
                                                                  "openvm_circuit::system::memory::controller::BOUNDARY_AIR_OFFSET",
                                                                  Ty.path "usize"
                                                                |)
                                                              |)
                                                            ]
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ,
                                                                  0
                                                                |) in
                                                              let γ0_1 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ,
                                                                  1
                                                                |) in
                                                              let left_val :=
                                                                M.copy (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [ Ty.path "usize" ],
                                                                  γ0_0
                                                                |) in
                                                              let right_val :=
                                                                M.copy (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [ Ty.path "usize" ],
                                                                  γ0_1
                                                                |) in
                                                              M.match_operator (|
                                                                Ty.tuple [],
                                                                M.alloc (|
                                                                  Ty.tuple [],
                                                                  Value.Tuple []
                                                                |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ :=
                                                                        M.use
                                                                          (M.alloc (|
                                                                            Ty.path "bool",
                                                                            UnOp.not (|
                                                                              M.call_closure (|
                                                                                Ty.path "bool",
                                                                                BinOp.eq,
                                                                                [
                                                                                  M.read (|
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        left_val
                                                                                      |)
                                                                                    |)
                                                                                  |);
                                                                                  M.read (|
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        right_val
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |)) in
                                                                      let _ :=
                                                                        is_constant_or_break_match (|
                                                                          M.read (| γ |),
                                                                          Value.Bool true
                                                                        |) in
                                                                      M.never_to_any (|
                                                                        M.read (|
                                                                          let~ kind :
                                                                              Ty.path
                                                                                "core::panicking::AssertKind" :=
                                                                            Value.StructTuple
                                                                              "core::panicking::AssertKind::Eq"
                                                                              []
                                                                              []
                                                                              [] in
                                                                          M.alloc (|
                                                                            Ty.path "never",
                                                                            M.call_closure (|
                                                                              Ty.path "never",
                                                                              M.get_function (|
                                                                                "core::panicking::assert_failed",
                                                                                [],
                                                                                [
                                                                                  Ty.path "usize";
                                                                                  Ty.path "usize"
                                                                                ]
                                                                              |),
                                                                              [
                                                                                M.read (| kind |);
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          left_val
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                |);
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          right_val
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                |);
                                                                                Value.StructTuple
                                                                                  "core::option::Option::None"
                                                                                  []
                                                                                  [
                                                                                    Ty.path
                                                                                      "core::fmt::Arguments"
                                                                                  ]
                                                                                  []
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |)));
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (Value.Tuple []))
                                                                ]
                                                              |)))
                                                        ]
                                                      |) in
                                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                  |)));
                                              fun γ => ltac:(M.monadic (Value.Tuple []))
                                            ]
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::prover::types::AirProofInput")
                                                    []
                                                    [ SC ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              "push",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.MutRef, ret |);
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::prover::types::AirProofInput")
                                                  []
                                                  [ SC ],
                                                M.get_trait_method (|
                                                  "openvm_stark_backend::chip::Chip",
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
                                                    [ Value.Integer IntegerKind.Usize 8 ]
                                                    [ F ],
                                                  [],
                                                  [ SC ],
                                                  "generate_air_proof_input",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| boundary_chip |) ]
                                              |)
                                            ]
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        Ty.path "bool",
                                                        Value.Bool true
                                                      |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.read (|
                                                    let~ _ : Ty.tuple [] :=
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (|
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "usize" ];
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "usize" ]
                                                            ],
                                                          Value.Tuple
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Ty.path "usize",
                                                                  M.call_closure (|
                                                                    Ty.path "usize",
                                                                    M.get_associated_function (|
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_stark_backend::prover::types::AirProofInput")
                                                                            []
                                                                            [ SC ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      "len",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        ret
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                get_constant (|
                                                                  "openvm_circuit::system::memory::controller::MERKLE_AIR_OFFSET",
                                                                  Ty.path "usize"
                                                                |)
                                                              |)
                                                            ]
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ,
                                                                  0
                                                                |) in
                                                              let γ0_1 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ,
                                                                  1
                                                                |) in
                                                              let left_val :=
                                                                M.copy (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [ Ty.path "usize" ],
                                                                  γ0_0
                                                                |) in
                                                              let right_val :=
                                                                M.copy (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [ Ty.path "usize" ],
                                                                  γ0_1
                                                                |) in
                                                              M.match_operator (|
                                                                Ty.tuple [],
                                                                M.alloc (|
                                                                  Ty.tuple [],
                                                                  Value.Tuple []
                                                                |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ :=
                                                                        M.use
                                                                          (M.alloc (|
                                                                            Ty.path "bool",
                                                                            UnOp.not (|
                                                                              M.call_closure (|
                                                                                Ty.path "bool",
                                                                                BinOp.eq,
                                                                                [
                                                                                  M.read (|
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        left_val
                                                                                      |)
                                                                                    |)
                                                                                  |);
                                                                                  M.read (|
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        right_val
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |)) in
                                                                      let _ :=
                                                                        is_constant_or_break_match (|
                                                                          M.read (| γ |),
                                                                          Value.Bool true
                                                                        |) in
                                                                      M.never_to_any (|
                                                                        M.read (|
                                                                          let~ kind :
                                                                              Ty.path
                                                                                "core::panicking::AssertKind" :=
                                                                            Value.StructTuple
                                                                              "core::panicking::AssertKind::Eq"
                                                                              []
                                                                              []
                                                                              [] in
                                                                          M.alloc (|
                                                                            Ty.path "never",
                                                                            M.call_closure (|
                                                                              Ty.path "never",
                                                                              M.get_function (|
                                                                                "core::panicking::assert_failed",
                                                                                [],
                                                                                [
                                                                                  Ty.path "usize";
                                                                                  Ty.path "usize"
                                                                                ]
                                                                              |),
                                                                              [
                                                                                M.read (| kind |);
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          left_val
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                |);
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          right_val
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                |);
                                                                                Value.StructTuple
                                                                                  "core::option::Option::None"
                                                                                  []
                                                                                  [
                                                                                    Ty.path
                                                                                      "core::fmt::Arguments"
                                                                                  ]
                                                                                  []
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |)));
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (Value.Tuple []))
                                                                ]
                                                              |)))
                                                        ]
                                                      |) in
                                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                  |)));
                                              fun γ => ltac:(M.monadic (Value.Tuple []))
                                            ]
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_stark_backend::prover::types::AirProofInput")
                                                    []
                                                    [ SC ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              "push",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.MutRef, ret |);
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_stark_backend::prover::types::AirProofInput")
                                                  []
                                                  [ SC ],
                                                M.get_trait_method (|
                                                  "openvm_stark_backend::chip::Chip",
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                                                    [ Value.Integer IntegerKind.Usize 8 ]
                                                    [ F ],
                                                  [],
                                                  [ SC ],
                                                  "generate_air_proof_input",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| merkle_chip |) ]
                                              |)
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                      |)))
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_trait_method (|
                                  "core::iter::traits::collect::Extend",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_stark_backend::prover::types::AirProofInput")
                                        []
                                        [ SC ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                                      []
                                      [ SC ]
                                  ],
                                  "extend",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::prover::types::AirProofInput")
                                          []
                                          [ SC ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ]
                                |),
                                [
                                  M.borrow (| Pointer.Kind.MutRef, ret |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_stark_backend::prover::types::AirProofInput")
                                          []
                                          [ SC ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                                        []
                                        [ F ],
                                      "generate_air_proof_inputs",
                                      [],
                                      [ SC ]
                                    |),
                                    [ M.read (| access_adapters |) ]
                                  |)
                                ]
                              |) in
                            ret
                          |)))
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_generate_air_proof_inputs :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C
            (Self F)
            "generate_air_proof_inputs"
            (generate_air_proof_inputs F).
        Admitted.
        Global Typeclasses Opaque generate_air_proof_inputs.
        
        (*
            pub fn airs<SC: StarkGenericConfig>(&self) -> Vec<AirRef<SC>>
            where
                Domain<SC>: PolynomialSpace<Val = F>,
            {
                let mut airs = Vec::<AirRef<SC>>::new();
        
                match &self.interface_chip {
                    MemoryInterface::Volatile { boundary_chip } => {
                        debug_assert_eq!(airs.len(), BOUNDARY_AIR_OFFSET);
                        airs.push(boundary_chip.air())
                    }
                    MemoryInterface::Persistent {
                        boundary_chip,
                        merkle_chip,
                        ..
                    } => {
                        debug_assert_eq!(airs.len(), BOUNDARY_AIR_OFFSET);
                        airs.push(boundary_chip.air());
                        debug_assert_eq!(airs.len(), MERKLE_AIR_OFFSET);
                        airs.push(merkle_chip.air());
                    }
                }
                airs.extend(self.access_adapters.airs());
        
                airs
            }
        *)
        Definition airs (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [ SC ], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.read (|
                let~ airs :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      [],
                      []
                    |),
                    []
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::controller::interface::MemoryInterface")
                            []
                            [ F ]
                        ],
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::controller::MemoryController",
                          "interface_chip"
                        |)
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::system::memory::controller::interface::MemoryInterface::Volatile",
                              "boundary_chip"
                            |) in
                          let boundary_chip :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
                                    []
                                    [ F ]
                                ],
                              γ1_0
                            |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              Ty.tuple
                                                [
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                ],
                                              Value.Tuple
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.path "usize",
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::sync::Arc")
                                                                []
                                                                [
                                                                  Ty.dyn
                                                                    [
                                                                      ("openvm_stark_backend::rap::AnyRap::Trait",
                                                                        [])
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          "len",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.borrow (| Pointer.Kind.Ref, airs |) ]
                                                      |)
                                                    |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    get_constant (|
                                                      "openvm_circuit::system::memory::controller::BOUNDARY_AIR_OFFSET",
                                                      Ty.path "usize"
                                                    |)
                                                  |)
                                                ]
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                  let γ0_1 :=
                                                    M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                  let left_val :=
                                                    M.copy (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                      γ0_0
                                                    |) in
                                                  let right_val :=
                                                    M.copy (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                      γ0_1
                                                    |) in
                                                  M.match_operator (|
                                                    Ty.tuple [],
                                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                Ty.path "bool",
                                                                UnOp.not (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.eq,
                                                                    [
                                                                      M.read (|
                                                                        M.deref (|
                                                                          M.read (| left_val |)
                                                                        |)
                                                                      |);
                                                                      M.read (|
                                                                        M.deref (|
                                                                          M.read (| right_val |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.never_to_any (|
                                                            M.read (|
                                                              let~ kind :
                                                                  Ty.path
                                                                    "core::panicking::AssertKind" :=
                                                                Value.StructTuple
                                                                  "core::panicking::AssertKind::Eq"
                                                                  []
                                                                  []
                                                                  [] in
                                                              M.alloc (|
                                                                Ty.path "never",
                                                                M.call_closure (|
                                                                  Ty.path "never",
                                                                  M.get_function (|
                                                                    "core::panicking::assert_failed",
                                                                    [],
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.path "usize"
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.read (| kind |);
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| left_val |)
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |);
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| right_val |)
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |);
                                                                    Value.StructTuple
                                                                      "core::option::Option::None"
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "core::fmt::Arguments"
                                                                      ]
                                                                      []
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ => ltac:(M.monadic (Value.Tuple []))
                                                    ]
                                                  |)))
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                      |)));
                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                ]
                              |) in
                            M.alloc (|
                              Ty.tuple [],
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.dyn
                                            [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "push",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.MutRef, airs |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.dyn
                                            [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                          Ty.path "alloc::alloc::Global"
                                        ])
                                      (Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.dyn
                                            [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                          Ty.path "alloc::alloc::Global"
                                        ]),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          []
                                          [
                                            Ty.dyn
                                              [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        M.get_trait_method (|
                                          "openvm_stark_backend::chip::Chip",
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
                                            []
                                            [ F ],
                                          [],
                                          [ SC ],
                                          "air",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| boundary_chip |) |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::system::memory::controller::interface::MemoryInterface::Persistent",
                              "boundary_chip"
                            |) in
                          let γ1_1 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::system::memory::controller::interface::MemoryInterface::Persistent",
                              "merkle_chip"
                            |) in
                          let boundary_chip :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
                                    [ Value.Integer IntegerKind.Usize 8 ]
                                    [ F ]
                                ],
                              γ1_0
                            |) in
                          let merkle_chip :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                                    [ Value.Integer IntegerKind.Usize 8 ]
                                    [ F ]
                                ],
                              γ1_1
                            |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              Ty.tuple
                                                [
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                ],
                                              Value.Tuple
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.path "usize",
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::sync::Arc")
                                                                []
                                                                [
                                                                  Ty.dyn
                                                                    [
                                                                      ("openvm_stark_backend::rap::AnyRap::Trait",
                                                                        [])
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          "len",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.borrow (| Pointer.Kind.Ref, airs |) ]
                                                      |)
                                                    |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    get_constant (|
                                                      "openvm_circuit::system::memory::controller::BOUNDARY_AIR_OFFSET",
                                                      Ty.path "usize"
                                                    |)
                                                  |)
                                                ]
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                  let γ0_1 :=
                                                    M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                  let left_val :=
                                                    M.copy (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                      γ0_0
                                                    |) in
                                                  let right_val :=
                                                    M.copy (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                      γ0_1
                                                    |) in
                                                  M.match_operator (|
                                                    Ty.tuple [],
                                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                Ty.path "bool",
                                                                UnOp.not (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.eq,
                                                                    [
                                                                      M.read (|
                                                                        M.deref (|
                                                                          M.read (| left_val |)
                                                                        |)
                                                                      |);
                                                                      M.read (|
                                                                        M.deref (|
                                                                          M.read (| right_val |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.never_to_any (|
                                                            M.read (|
                                                              let~ kind :
                                                                  Ty.path
                                                                    "core::panicking::AssertKind" :=
                                                                Value.StructTuple
                                                                  "core::panicking::AssertKind::Eq"
                                                                  []
                                                                  []
                                                                  [] in
                                                              M.alloc (|
                                                                Ty.path "never",
                                                                M.call_closure (|
                                                                  Ty.path "never",
                                                                  M.get_function (|
                                                                    "core::panicking::assert_failed",
                                                                    [],
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.path "usize"
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.read (| kind |);
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| left_val |)
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |);
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| right_val |)
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |);
                                                                    Value.StructTuple
                                                                      "core::option::Option::None"
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "core::fmt::Arguments"
                                                                      ]
                                                                      []
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ => ltac:(M.monadic (Value.Tuple []))
                                                    ]
                                                  |)))
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                      |)));
                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.dyn
                                            [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "push",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.MutRef, airs |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.dyn
                                            [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                          Ty.path "alloc::alloc::Global"
                                        ])
                                      (Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.dyn
                                            [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                          Ty.path "alloc::alloc::Global"
                                        ]),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          []
                                          [
                                            Ty.dyn
                                              [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        M.get_trait_method (|
                                          "openvm_stark_backend::chip::Chip",
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            [ F ],
                                          [],
                                          [ SC ],
                                          "air",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| boundary_chip |) |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              Ty.tuple
                                                [
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                ],
                                              Value.Tuple
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.path "usize",
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::sync::Arc")
                                                                []
                                                                [
                                                                  Ty.dyn
                                                                    [
                                                                      ("openvm_stark_backend::rap::AnyRap::Trait",
                                                                        [])
                                                                    ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          "len",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.borrow (| Pointer.Kind.Ref, airs |) ]
                                                      |)
                                                    |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    get_constant (|
                                                      "openvm_circuit::system::memory::controller::MERKLE_AIR_OFFSET",
                                                      Ty.path "usize"
                                                    |)
                                                  |)
                                                ]
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                  let γ0_1 :=
                                                    M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                  let left_val :=
                                                    M.copy (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                      γ0_0
                                                    |) in
                                                  let right_val :=
                                                    M.copy (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                      γ0_1
                                                    |) in
                                                  M.match_operator (|
                                                    Ty.tuple [],
                                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                Ty.path "bool",
                                                                UnOp.not (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.eq,
                                                                    [
                                                                      M.read (|
                                                                        M.deref (|
                                                                          M.read (| left_val |)
                                                                        |)
                                                                      |);
                                                                      M.read (|
                                                                        M.deref (|
                                                                          M.read (| right_val |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.never_to_any (|
                                                            M.read (|
                                                              let~ kind :
                                                                  Ty.path
                                                                    "core::panicking::AssertKind" :=
                                                                Value.StructTuple
                                                                  "core::panicking::AssertKind::Eq"
                                                                  []
                                                                  []
                                                                  [] in
                                                              M.alloc (|
                                                                Ty.path "never",
                                                                M.call_closure (|
                                                                  Ty.path "never",
                                                                  M.get_function (|
                                                                    "core::panicking::assert_failed",
                                                                    [],
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.path "usize"
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.read (| kind |);
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| left_val |)
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |);
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| right_val |)
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |);
                                                                    Value.StructTuple
                                                                      "core::option::Option::None"
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "core::fmt::Arguments"
                                                                      ]
                                                                      []
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ => ltac:(M.monadic (Value.Tuple []))
                                                    ]
                                                  |)))
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                      |)));
                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.dyn
                                            [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                          Ty.path "alloc::alloc::Global"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "push",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.MutRef, airs |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.dyn
                                            [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                          Ty.path "alloc::alloc::Global"
                                        ])
                                      (Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.dyn
                                            [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                          Ty.path "alloc::alloc::Global"
                                        ]),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          []
                                          [
                                            Ty.dyn
                                              [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        M.get_trait_method (|
                                          "openvm_stark_backend::chip::Chip",
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                                            [ Value.Integer IntegerKind.Usize 8 ]
                                            [ F ],
                                          [],
                                          [ SC ],
                                          "air",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| merkle_chip |) |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::iter::traits::collect::Extend",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                              Ty.path "alloc::alloc::Global"
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ],
                      "extend",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ]
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, airs |);
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                Ty.path "alloc::alloc::Global"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                            []
                            [ F ],
                          "airs",
                          [],
                          [ SC ]
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::controller::MemoryController",
                              "access_adapters"
                            |)
                          |)
                        ]
                      |)
                    ]
                  |) in
                airs
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_airs :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "airs" (airs F).
        Admitted.
        Global Typeclasses Opaque airs.
        
        (*
            pub fn num_airs(&self) -> usize {
                let mut num_airs = 1;
                if self.continuation_enabled() {
                    num_airs += 1;
                }
                num_airs += self.access_adapters.num_access_adapters();
                num_airs
            }
        *)
        Definition num_airs (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.read (|
                let~ num_airs : Ty.path "usize" := Value.Integer IntegerKind.Usize 1 in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::controller::MemoryController")
                                      []
                                      [ F ],
                                    "continuation_enabled",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              let β := num_airs in
                              M.write (|
                                β,
                                M.call_closure (|
                                  Ty.path "usize",
                                  BinOp.Wrap.add,
                                  [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                                |)
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  let β := num_airs in
                  M.write (|
                    β,
                    M.call_closure (|
                      Ty.path "usize",
                      BinOp.Wrap.add,
                      [
                        M.read (| β |);
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                              []
                              [ F ],
                            "num_access_adapters",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::controller::MemoryController",
                                "access_adapters"
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)
                  |) in
                num_airs
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_num_airs :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "num_airs" (num_airs F).
        Admitted.
        Global Typeclasses Opaque num_airs.
        
        (*
            pub fn air_names(&self) -> Vec<String> {
                let mut air_names = vec!["Boundary".to_string()];
                if self.continuation_enabled() {
                    air_names.push("Merkle".to_string());
                }
                air_names.extend(self.access_adapters.air_names());
                air_names
            }
        *)
        Definition air_names (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.read (|
                let~ air_names :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ Ty.path "alloc::string::String" ],
                      "into_vec",
                      [],
                      [ Ty.path "alloc::alloc::Global" ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::boxed::Box")
                          []
                          [
                            Ty.apply (Ty.path "slice") [] [ Ty.path "alloc::string::String" ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.pointer_coercion
                          M.PointerCoercion.Unsize
                          (Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [ Ty.path "alloc::string::String" ];
                              Ty.path "alloc::alloc::Global"
                            ])
                          (Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            []
                            [
                              Ty.apply (Ty.path "slice") [] [ Ty.path "alloc::string::String" ];
                              Ty.path "alloc::alloc::Global"
                            ]),
                        [
                          M.read (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::boxed::Box")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 1 ]
                                    [ Ty.path "alloc::string::String" ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "alloc::string::String" ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                [],
                                []
                              |),
                              [
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 1 ]
                                    [ Ty.path "alloc::string::String" ],
                                  Value.Array
                                    [
                                      M.call_closure (|
                                        Ty.path "alloc::string::String",
                                        M.get_trait_method (|
                                          "alloc::string::ToString",
                                          Ty.path "str",
                                          [],
                                          [],
                                          "to_string",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| mk_str (| "Boundary" |) |)
                                          |)
                                        ]
                                      |)
                                    ]
                                |)
                              ]
                            |)
                          |)
                        ]
                      |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                M.call_closure (|
                                  Ty.path "bool",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::controller::MemoryController")
                                      []
                                      [ F ],
                                    "continuation_enabled",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |)
                                  ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.path "alloc::string::String";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  "push",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.MutRef, air_names |);
                                  M.call_closure (|
                                    Ty.path "alloc::string::String",
                                    M.get_trait_method (|
                                      "alloc::string::ToString",
                                      Ty.path "str",
                                      [],
                                      [],
                                      "to_string",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| mk_str (| "Merkle" |) |)
                                      |)
                                    ]
                                  |)
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::iter::traits::collect::Extend",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ],
                      [],
                      [ Ty.path "alloc::string::String" ],
                      "extend",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ]
                      ]
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, air_names |);
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "alloc::string::String"; Ty.path "alloc::alloc::Global" ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                            []
                            [ F ],
                          "air_names",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::controller::MemoryController",
                              "access_adapters"
                            |)
                          |)
                        ]
                      |)
                    ]
                  |) in
                air_names
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_air_names :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "air_names" (air_names F).
        Admitted.
        Global Typeclasses Opaque air_names.
        
        (*
            pub fn current_trace_heights(&self) -> Vec<usize> {
                self.get_memory_trace_heights().flatten()
            }
        *)
        Definition current_trace_heights
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                M.get_associated_function (|
                  Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights",
                  "flatten",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.alloc (|
                      Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights",
                      M.call_closure (|
                        Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                            []
                            [ F ],
                          "get_memory_trace_heights",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_current_trace_heights :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "current_trace_heights" (current_trace_heights F).
        Admitted.
        Global Typeclasses Opaque current_trace_heights.
        
        (*
            pub fn get_memory_trace_heights(&self) -> MemoryTraceHeights {
                let access_adapters = self.access_adapters.get_heights();
                match &self.interface_chip {
                    MemoryInterface::Volatile { boundary_chip } => {
                        MemoryTraceHeights::Volatile(VolatileMemoryTraceHeights {
                            boundary: boundary_chip.current_trace_height(),
                            access_adapters,
                        })
                    }
                    MemoryInterface::Persistent {
                        boundary_chip,
                        merkle_chip,
                        ..
                    } => MemoryTraceHeights::Persistent(PersistentMemoryTraceHeights {
                        boundary: boundary_chip.current_trace_height(),
                        merkle: merkle_chip.current_trace_height(),
                        access_adapters,
                    }),
                }
            }
        *)
        Definition get_memory_trace_heights
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.read (|
                let~ access_adapters :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                        []
                        [ F ],
                      "get_heights",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::controller::MemoryController",
                          "access_adapters"
                        |)
                      |)
                    ]
                  |) in
                M.alloc (|
                  Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights",
                  M.match_operator (|
                    Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights",
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::controller::interface::MemoryInterface")
                            []
                            [ F ]
                        ],
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::controller::MemoryController",
                          "interface_chip"
                        |)
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::system::memory::controller::interface::MemoryInterface::Volatile",
                              "boundary_chip"
                            |) in
                          let boundary_chip :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
                                    []
                                    [ F ]
                                ],
                              γ1_0
                            |) in
                          Value.StructTuple
                            "openvm_circuit::system::memory::controller::MemoryTraceHeights::Volatile"
                            []
                            []
                            [
                              Value.mkStructRecord
                                "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights"
                                []
                                []
                                [
                                  ("boundary",
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_trait_method (|
                                        "openvm_stark_backend::chip::ChipUsageGetter",
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
                                          []
                                          [ F ],
                                        [],
                                        [],
                                        "current_trace_height",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| boundary_chip |) |)
                                        |)
                                      ]
                                    |));
                                  ("access_adapters", M.read (| access_adapters |))
                                ]
                            ]));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::system::memory::controller::interface::MemoryInterface::Persistent",
                              "boundary_chip"
                            |) in
                          let γ1_1 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::system::memory::controller::interface::MemoryInterface::Persistent",
                              "merkle_chip"
                            |) in
                          let boundary_chip :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
                                    [ Value.Integer IntegerKind.Usize 8 ]
                                    [ F ]
                                ],
                              γ1_0
                            |) in
                          let merkle_chip :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                                    [ Value.Integer IntegerKind.Usize 8 ]
                                    [ F ]
                                ],
                              γ1_1
                            |) in
                          Value.StructTuple
                            "openvm_circuit::system::memory::controller::MemoryTraceHeights::Persistent"
                            []
                            []
                            [
                              Value.mkStructRecord
                                "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights"
                                []
                                []
                                [
                                  ("boundary",
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_trait_method (|
                                        "openvm_stark_backend::chip::ChipUsageGetter",
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [ F ],
                                        [],
                                        [],
                                        "current_trace_height",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| boundary_chip |) |)
                                        |)
                                      ]
                                    |));
                                  ("merkle",
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_trait_method (|
                                        "openvm_stark_backend::chip::ChipUsageGetter",
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                                          [ Value.Integer IntegerKind.Usize 8 ]
                                          [ F ],
                                        [],
                                        [],
                                        "current_trace_height",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| merkle_chip |) |)
                                        |)
                                      ]
                                    |));
                                  ("access_adapters", M.read (| access_adapters |))
                                ]
                            ]))
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_get_memory_trace_heights :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "get_memory_trace_heights" (get_memory_trace_heights F).
        Admitted.
        Global Typeclasses Opaque get_memory_trace_heights.
        
        (*
            pub fn get_dummy_memory_trace_heights(&self) -> MemoryTraceHeights {
                let access_adapters = vec![1; self.access_adapters.num_access_adapters()];
                match &self.interface_chip {
                    MemoryInterface::Volatile { .. } => {
                        MemoryTraceHeights::Volatile(VolatileMemoryTraceHeights {
                            boundary: 1,
                            access_adapters,
                        })
                    }
                    MemoryInterface::Persistent { .. } => {
                        MemoryTraceHeights::Persistent(PersistentMemoryTraceHeights {
                            boundary: 1,
                            merkle: 1,
                            access_adapters,
                        })
                    }
                }
            }
        *)
        Definition get_dummy_memory_trace_heights
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.read (|
                let~ access_adapters :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                    M.get_function (| "alloc::vec::from_elem", [], [ Ty.path "usize" ] |),
                    [
                      Value.Integer IntegerKind.Usize 1;
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                            []
                            [ F ],
                          "num_access_adapters",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::controller::MemoryController",
                              "access_adapters"
                            |)
                          |)
                        ]
                      |)
                    ]
                  |) in
                M.alloc (|
                  Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights",
                  M.match_operator (|
                    Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights",
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::controller::interface::MemoryInterface")
                            []
                            [ F ]
                        ],
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::controller::MemoryController",
                          "interface_chip"
                        |)
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "openvm_circuit::system::memory::controller::interface::MemoryInterface::Volatile"
                            |) in
                          Value.StructTuple
                            "openvm_circuit::system::memory::controller::MemoryTraceHeights::Volatile"
                            []
                            []
                            [
                              Value.mkStructRecord
                                "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights"
                                []
                                []
                                [
                                  ("boundary", Value.Integer IntegerKind.Usize 1);
                                  ("access_adapters", M.read (| access_adapters |))
                                ]
                            ]));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let _ :=
                            M.is_struct_tuple (|
                              γ,
                              "openvm_circuit::system::memory::controller::interface::MemoryInterface::Persistent"
                            |) in
                          Value.StructTuple
                            "openvm_circuit::system::memory::controller::MemoryTraceHeights::Persistent"
                            []
                            []
                            [
                              Value.mkStructRecord
                                "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights"
                                []
                                []
                                [
                                  ("boundary", Value.Integer IntegerKind.Usize 1);
                                  ("merkle", Value.Integer IntegerKind.Usize 1);
                                  ("access_adapters", M.read (| access_adapters |))
                                ]
                            ]))
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_get_dummy_memory_trace_heights :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C
            (Self F)
            "get_dummy_memory_trace_heights"
            (get_dummy_memory_trace_heights F).
        Admitted.
        Global Typeclasses Opaque get_dummy_memory_trace_heights.
        
        (*
            pub fn current_trace_cells(&self) -> Vec<usize> {
                let mut ret = Vec::new();
                match &self.interface_chip {
                    MemoryInterface::Volatile { boundary_chip } => {
                        ret.push(boundary_chip.current_trace_cells())
                    }
                    MemoryInterface::Persistent {
                        boundary_chip,
                        merkle_chip,
                        ..
                    } => {
                        ret.push(boundary_chip.current_trace_cells());
                        ret.push(merkle_chip.current_trace_cells());
                    }
                }
                ret.extend(self.access_adapters.get_cells());
                ret
            }
        *)
        Definition current_trace_cells
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.read (|
                let~ ret :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                      "new",
                      [],
                      []
                    |),
                    []
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::controller::interface::MemoryInterface")
                            []
                            [ F ]
                        ],
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::controller::MemoryController",
                          "interface_chip"
                        |)
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::system::memory::controller::interface::MemoryInterface::Volatile",
                              "boundary_chip"
                            |) in
                          let boundary_chip :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
                                    []
                                    [ F ]
                                ],
                              γ1_0
                            |) in
                          M.call_closure (|
                            Ty.tuple [],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                              "push",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, ret |);
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_trait_method (|
                                  "openvm_stark_backend::chip::ChipUsageGetter",
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
                                    []
                                    [ F ],
                                  [],
                                  [],
                                  "current_trace_cells",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (| M.read (| boundary_chip |) |)
                                  |)
                                ]
                              |)
                            ]
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.deref (| M.read (| γ |) |) in
                          let γ1_0 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::system::memory::controller::interface::MemoryInterface::Persistent",
                              "boundary_chip"
                            |) in
                          let γ1_1 :=
                            M.SubPointer.get_struct_record_field (|
                              γ,
                              "openvm_circuit::system::memory::controller::interface::MemoryInterface::Persistent",
                              "merkle_chip"
                            |) in
                          let boundary_chip :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
                                    [ Value.Integer IntegerKind.Usize 8 ]
                                    [ F ]
                                ],
                              γ1_0
                            |) in
                          let merkle_chip :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                                    [ Value.Integer IntegerKind.Usize 8 ]
                                    [ F ]
                                ],
                              γ1_1
                            |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                  "push",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.MutRef, ret |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_trait_method (|
                                      "openvm_stark_backend::chip::ChipUsageGetter",
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
                                        [ Value.Integer IntegerKind.Usize 8 ]
                                        [ F ],
                                      [],
                                      [],
                                      "current_trace_cells",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| boundary_chip |) |)
                                      |)
                                    ]
                                  |)
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                  "push",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.MutRef, ret |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_trait_method (|
                                      "openvm_stark_backend::chip::ChipUsageGetter",
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                                        [ Value.Integer IntegerKind.Usize 8 ]
                                        [ F ],
                                      [],
                                      [],
                                      "current_trace_cells",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| merkle_chip |) |)
                                      |)
                                    ]
                                  |)
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::iter::traits::collect::Extend",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                      [],
                      [ Ty.path "usize" ],
                      "extend",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                      ]
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, ret |);
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::adapter::AccessAdapterInventory")
                            []
                            [ F ],
                          "get_cells",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::controller::MemoryController",
                              "access_adapters"
                            |)
                          |)
                        ]
                      |)
                    ]
                  |) in
                ret
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_current_trace_cells :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "current_trace_cells" (current_trace_cells F).
        Admitted.
        Global Typeclasses Opaque current_trace_cells.
        
        (*
            pub fn offline_memory(&self) -> Arc<Mutex<OfflineMemory<F>>> {
                self.offline_memory.clone()
            }
        *)
        Definition offline_memory
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.apply
                      (Ty.path "std::sync::mutex::Mutex")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                          []
                          [ F ]
                      ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_trait_method (|
                  "core::clone::Clone",
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.apply
                        (Ty.path "std::sync::mutex::Mutex")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                            []
                            [ F ]
                        ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  [],
                  [],
                  "clone",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::controller::MemoryController",
                      "offline_memory"
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_offline_memory :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "offline_memory" (offline_memory F).
        Admitted.
        Global Typeclasses Opaque offline_memory.
        
        (*
            pub fn get_memory_logs(&self) -> &Vec<MemoryLogEntry<F>> {
                &self.memory.log
            }
        *)
        Definition get_memory_logs
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::system::memory::controller::MemoryController",
                        "memory"
                      |),
                      "openvm_circuit::system::memory::online::Memory",
                      "log"
                    |)
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_get_memory_logs :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "get_memory_logs" (get_memory_logs F).
        Admitted.
        Global Typeclasses Opaque get_memory_logs.
        
        (*
            pub fn set_memory_logs(&mut self, logs: Vec<MemoryLogEntry<F>>) {
                self.memory.log = logs;
            }
        *)
        Definition set_memory_logs
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; logs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let logs :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry")
                        []
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  logs
                |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.write (|
                    M.SubPointer.get_struct_record_field (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::system::memory::controller::MemoryController",
                        "memory"
                      |),
                      "openvm_circuit::system::memory::online::Memory",
                      "log"
                    |),
                    M.read (| logs |)
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_set_memory_logs :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "set_memory_logs" (set_memory_logs F).
        Admitted.
        Global Typeclasses Opaque set_memory_logs.
        
        (*
            pub fn take_memory_logs(&mut self) -> Vec<MemoryLogEntry<F>> {
                std::mem::take(&mut self.memory.log)
            }
        *)
        Definition take_memory_logs
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry")
                      []
                      [ F ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_function (|
                  "core::mem::take",
                  [],
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry")
                          []
                          [ F ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::system::memory::controller::MemoryController",
                            "memory"
                          |),
                          "openvm_circuit::system::memory::online::Memory",
                          "log"
                        |)
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_take_memory_logs :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "take_memory_logs" (take_memory_logs F).
        Admitted.
        Global Typeclasses Opaque take_memory_logs.
      End Impl_openvm_circuit_system_memory_controller_MemoryController_F.
      
      
      (*
      Enum FinalState
      {
        const_params := [];
        ty_params := [ "F" ];
        variants :=
          [
            {
              name := "Volatile";
              item :=
                StructTuple
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::VolatileFinalState")
                      []
                      [ F ]
                  ];
            };
            {
              name := "Persistent";
              item :=
                StructTuple
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::PersistentFinalState")
                      []
                      [ F ]
                  ];
            }
          ];
      }
      *)
      
      Axiom IsDiscriminant_FinalState_Volatile :
        M.IsDiscriminant "openvm_circuit::system::memory::controller::FinalState::Volatile" 0.
      Axiom IsDiscriminant_FinalState_Persistent :
        M.IsDiscriminant "openvm_circuit::system::memory::controller::FinalState::Persistent" 1.
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_circuit_system_memory_controller_FinalState_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "openvm_circuit::system::memory::controller::FinalState") [] [ F ].
        
        (* Debug *)
        Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::FinalState")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::controller::FinalState::Volatile",
                          0
                        |) in
                      let __self_0 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::controller::VolatileFinalState")
                                []
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Volatile" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::controller::VolatileFinalState")
                                        []
                                        [ F ]
                                    ]
                                ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::controller::FinalState::Persistent",
                          0
                        |) in
                      let __self_0 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::controller::PersistentFinalState")
                                []
                                [ F ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Persistent" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::controller::PersistentFinalState")
                                        []
                                        [ F ]
                                    ]
                                ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_circuit_system_memory_controller_FinalState_F.
      
      (* StructRecord
        {
          name := "VolatileFinalState";
          const_params := [];
          ty_params := [ "F" ];
          fields := [ ("_marker", Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ]) ];
        } *)
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_circuit_system_memory_controller_VolatileFinalState_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::controller::VolatileFinalState")
            []
            [ F ].
        
        (* Debug *)
        Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::VolatileFinalState")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field1_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "VolatileFinalState" |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "_marker" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ] ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ] ],
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::controller::VolatileFinalState",
                                  "_marker"
                                |)
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_circuit_system_memory_controller_VolatileFinalState_F.
      
      Module Impl_core_default_Default_where_core_default_Default_F_for_openvm_circuit_system_memory_controller_VolatileFinalState_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::controller::VolatileFinalState")
            []
            [ F ].
        
        (* Default *)
        Definition default (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [] =>
            ltac:(M.monadic
              (Value.mkStructRecord
                "openvm_circuit::system::memory::controller::VolatileFinalState"
                []
                [ F ]
                [
                  ("_marker",
                    M.call_closure (|
                      Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ],
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ],
                        [],
                        [],
                        "default",
                        [],
                        []
                      |),
                      []
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::default::Default"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [ ("default", InstanceField.Method (default F)) ].
      End Impl_core_default_Default_where_core_default_Default_F_for_openvm_circuit_system_memory_controller_VolatileFinalState_F.
      
      (* StructRecord
        {
          name := "PersistentFinalState";
          const_params := [];
          ty_params := [ "F" ];
          fields :=
            [
              ("final_memory",
                Ty.apply
                  (Ty.path "alloc::collections::btree::map::BTreeMap")
                  []
                  [
                    Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                    Ty.apply
                      (Ty.path "array")
                      [
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_circuit_system_memory_controller_PersistentFinalState_discriminant"
                          |))
                      ]
                      [ F ];
                    Ty.path "alloc::alloc::Global"
                  ])
            ];
        } *)
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_circuit_system_memory_controller_PersistentFinalState_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::controller::PersistentFinalState")
            []
            [ F ].
        
        (* Debug *)
        Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::PersistentFinalState")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field1_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| mk_str (| "PersistentFinalState" |) |)
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "final_memory" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::collections::btree::map::BTreeMap")
                                []
                                [
                                  Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 8 ]
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                                    []
                                    [
                                      Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 8 ]
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::controller::PersistentFinalState",
                                  "final_memory"
                                |)
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_circuit_system_memory_controller_PersistentFinalState_F.
      
      (*
      Enum MemoryTraceHeights
      {
        const_params := [];
        ty_params := [];
        variants :=
          [
            {
              name := "Volatile";
              item :=
                StructTuple
                  [ Ty.path "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights"
                  ];
            };
            {
              name := "Persistent";
              item :=
                StructTuple
                  [
                    Ty.path
                      "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights"
                  ];
            }
          ];
      }
      *)
      
      Axiom IsDiscriminant_MemoryTraceHeights_Volatile :
        M.IsDiscriminant
          "openvm_circuit::system::memory::controller::MemoryTraceHeights::Volatile"
          0.
      Axiom IsDiscriminant_MemoryTraceHeights_Persistent :
        M.IsDiscriminant
          "openvm_circuit::system::memory::controller::MemoryTraceHeights::Persistent"
          1.
      
      Module Impl_core_fmt_Debug_for_openvm_circuit_system_memory_controller_MemoryTraceHeights.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights".
        
        (* Debug *)
        Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights" ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::controller::MemoryTraceHeights::Volatile",
                          0
                        |) in
                      let __self_0 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.path
                                "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights"
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Volatile" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.path
                                        "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights"
                                    ]
                                ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::controller::MemoryTraceHeights::Persistent",
                          0
                        |) in
                      let __self_0 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.path
                                "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights"
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Persistent" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.path
                                        "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights"
                                    ]
                                ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
      End Impl_core_fmt_Debug_for_openvm_circuit_system_memory_controller_MemoryTraceHeights.
      
      Module Impl_core_clone_Clone_for_openvm_circuit_system_memory_controller_MemoryTraceHeights.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights".
        
        (* Clone *)
        Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights" ],
                  self
                |) in
              M.match_operator (|
                Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights",
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::controller::MemoryTraceHeights::Volatile",
                          0
                        |) in
                      let __self_0 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.path
                                "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights"
                            ],
                          γ1_0
                        |) in
                      Value.StructTuple
                        "openvm_circuit::system::memory::controller::MemoryTraceHeights::Volatile"
                        []
                        []
                        [
                          M.call_closure (|
                            Ty.path
                              "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights",
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.path
                                "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights",
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                          |)
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::controller::MemoryTraceHeights::Persistent",
                          0
                        |) in
                      let __self_0 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.path
                                "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights"
                            ],
                          γ1_0
                        |) in
                      Value.StructTuple
                        "openvm_circuit::system::memory::controller::MemoryTraceHeights::Persistent"
                        []
                        []
                        [
                          M.call_closure (|
                            Ty.path
                              "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.path
                                "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                          |)
                        ]))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("clone", InstanceField.Method clone) ].
      End Impl_core_clone_Clone_for_openvm_circuit_system_memory_controller_MemoryTraceHeights.
      
      
      
      Module Impl_core_marker_StructuralPartialEq_for_openvm_circuit_system_memory_controller_MemoryTraceHeights.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights".
        
        Axiom Implements :
          M.IsTraitInstance
            "core::marker::StructuralPartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [].
      End Impl_core_marker_StructuralPartialEq_for_openvm_circuit_system_memory_controller_MemoryTraceHeights.
      
      Module Impl_core_cmp_PartialEq_openvm_circuit_system_memory_controller_MemoryTraceHeights_for_openvm_circuit_system_memory_controller_MemoryTraceHeights.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights".
        
        (* PartialEq *)
        Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self; other ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights" ],
                  self
                |) in
              let other :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights" ],
                  other
                |) in
              M.read (|
                let~ __self_discr : Ty.path "isize" :=
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |) in
                let~ __arg1_discr : Ty.path "isize" :=
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [ Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights" ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                  |) in
                M.alloc (|
                  Ty.path "bool",
                  LogicalOp.and (|
                    M.call_closure (|
                      Ty.path "bool",
                      BinOp.eq,
                      [ M.read (| __self_discr |); M.read (| __arg1_discr |) ]
                    |),
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.path "bool",
                        M.alloc (|
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.path
                                    "openvm_circuit::system::memory::controller::MemoryTraceHeights"
                                ];
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.path
                                    "openvm_circuit::system::memory::controller::MemoryTraceHeights"
                                ]
                            ],
                          Value.Tuple [ M.read (| self |); M.read (| other |) ]
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.deref (| M.read (| γ0_0 |) |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "openvm_circuit::system::memory::controller::MemoryTraceHeights::Volatile",
                                  0
                                |) in
                              let __self_0 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.path
                                        "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights"
                                    ],
                                  γ2_0
                                |) in
                              let γ0_1 := M.deref (| M.read (| γ0_1 |) |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "openvm_circuit::system::memory::controller::MemoryTraceHeights::Volatile",
                                  0
                                |) in
                              let __arg1_0 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.path
                                        "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights"
                                    ],
                                  γ2_0
                                |) in
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.path
                                        "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights"
                                    ],
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.path
                                          "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights"
                                      ]
                                  ],
                                  "eq",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                  M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                                ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.deref (| M.read (| γ0_0 |) |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_0,
                                  "openvm_circuit::system::memory::controller::MemoryTraceHeights::Persistent",
                                  0
                                |) in
                              let __self_0 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.path
                                        "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights"
                                    ],
                                  γ2_0
                                |) in
                              let γ0_1 := M.deref (| M.read (| γ0_1 |) |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ0_1,
                                  "openvm_circuit::system::memory::controller::MemoryTraceHeights::Persistent",
                                  0
                                |) in
                              let __arg1_0 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.path
                                        "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights"
                                    ],
                                  γ2_0
                                |) in
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.path
                                        "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights"
                                    ],
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.path
                                          "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights"
                                      ]
                                  ],
                                  "eq",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                  M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                                ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.never_to_any (|
                                M.call_closure (|
                                  Ty.path "never",
                                  M.get_function (| "core::intrinsics::unreachable", [], [] |),
                                  []
                                |)
                              |)))
                        ]
                      |)))
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::cmp::PartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [ Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights" ]
            Self
            (* Instance *) [ ("eq", InstanceField.Method eq) ].
      End Impl_core_cmp_PartialEq_openvm_circuit_system_memory_controller_MemoryTraceHeights_for_openvm_circuit_system_memory_controller_MemoryTraceHeights.
      
      Module Impl_core_cmp_Eq_for_openvm_circuit_system_memory_controller_MemoryTraceHeights.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights".
        
        (* Eq *)
        Definition assert_receiver_is_total_eq
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights" ],
                  self
                |) in
              M.match_operator (|
                Ty.tuple [],
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.tuple [],
                        Value.DeclaredButUndefined,
                        [ fun γ => ltac:(M.monadic (Value.Tuple [])) ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::cmp::Eq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *)
            [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
      End Impl_core_cmp_Eq_for_openvm_circuit_system_memory_controller_MemoryTraceHeights.
      
      Module Impl_openvm_circuit_system_memory_controller_MemoryTraceHeights.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights".
        
        (*
            fn flatten(&self) -> Vec<usize> {
                match self {
                    MemoryTraceHeights::Volatile(oh) => oh.flatten(),
                    MemoryTraceHeights::Persistent(oh) => oh.flatten(),
                }
            }
        *)
        Definition flatten (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights" ],
                  self
                |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::controller::MemoryTraceHeights::Volatile",
                          0
                        |) in
                      let oh :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.path
                                "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights"
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                        M.get_associated_function (|
                          Ty.path
                            "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights",
                          "flatten",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| oh |) |) |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::controller::MemoryTraceHeights::Persistent",
                          0
                        |) in
                      let oh :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.path
                                "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights"
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                        M.get_associated_function (|
                          Ty.path
                            "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                          "flatten",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| oh |) |) |) ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_flatten :
          M.IsAssociatedFunction.C Self "flatten" flatten.
        Admitted.
        Global Typeclasses Opaque flatten.
        
        (*
            pub fn round_to_next_power_of_two(&mut self) {
                match self {
                    MemoryTraceHeights::Volatile(oh) => oh.round_to_next_power_of_two(),
                    MemoryTraceHeights::Persistent(oh) => oh.round_to_next_power_of_two(),
                }
            }
        *)
        Definition round_to_next_power_of_two
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [ Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights" ],
                  self
                |) in
              M.match_operator (|
                Ty.tuple [],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::controller::MemoryTraceHeights::Volatile",
                          0
                        |) in
                      let oh :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.path
                                "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights"
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_associated_function (|
                          Ty.path
                            "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights",
                          "round_to_next_power_of_two",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| oh |) |) |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::controller::MemoryTraceHeights::Persistent",
                          0
                        |) in
                      let oh :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.path
                                "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights"
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_associated_function (|
                          Ty.path
                            "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                          "round_to_next_power_of_two",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| oh |) |) |) ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_round_to_next_power_of_two :
          M.IsAssociatedFunction.C Self "round_to_next_power_of_two" round_to_next_power_of_two.
        Admitted.
        Global Typeclasses Opaque round_to_next_power_of_two.
        
        (*
            pub fn round_to_next_power_of_two_or_zero(&mut self) {
                match self {
                    MemoryTraceHeights::Volatile(oh) => oh.round_to_next_power_of_two_or_zero(),
                    MemoryTraceHeights::Persistent(oh) => oh.round_to_next_power_of_two_or_zero(),
                }
            }
        *)
        Definition round_to_next_power_of_two_or_zero
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [ Ty.path "openvm_circuit::system::memory::controller::MemoryTraceHeights" ],
                  self
                |) in
              M.match_operator (|
                Ty.tuple [],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::controller::MemoryTraceHeights::Volatile",
                          0
                        |) in
                      let oh :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.path
                                "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights"
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_associated_function (|
                          Ty.path
                            "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights",
                          "round_to_next_power_of_two_or_zero",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| oh |) |) |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::controller::MemoryTraceHeights::Persistent",
                          0
                        |) in
                      let oh :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.path
                                "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights"
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_associated_function (|
                          Ty.path
                            "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                          "round_to_next_power_of_two_or_zero",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| oh |) |) |) ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_round_to_next_power_of_two_or_zero :
          M.IsAssociatedFunction.C
            Self
            "round_to_next_power_of_two_or_zero"
            round_to_next_power_of_two_or_zero.
        Admitted.
        Global Typeclasses Opaque round_to_next_power_of_two_or_zero.
      End Impl_openvm_circuit_system_memory_controller_MemoryTraceHeights.
      
      (* StructRecord
        {
          name := "VolatileMemoryTraceHeights";
          const_params := [];
          ty_params := [];
          fields :=
            [
              ("boundary", Ty.path "usize");
              ("access_adapters",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ])
            ];
        } *)
      
      Module Impl_core_fmt_Debug_for_openvm_circuit_system_memory_controller_VolatileMemoryTraceHeights.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights".
        
        (* Debug *)
        Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.path
                        "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights"
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field2_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| mk_str (| "VolatileMemoryTraceHeights" |) |)
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "boundary" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights",
                              "boundary"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "access_adapters" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                            ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                ],
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights",
                                  "access_adapters"
                                |)
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
      End Impl_core_fmt_Debug_for_openvm_circuit_system_memory_controller_VolatileMemoryTraceHeights.
      
      Module Impl_core_clone_Clone_for_openvm_circuit_system_memory_controller_VolatileMemoryTraceHeights.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights".
        
        (* Clone *)
        Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.path
                        "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights"
                    ],
                  self
                |) in
              Value.mkStructRecord
                "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights"
                []
                []
                [
                  ("boundary",
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "usize",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights",
                                "boundary"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("access_adapters",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights",
                                "access_adapters"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("clone", InstanceField.Method clone) ].
      End Impl_core_clone_Clone_for_openvm_circuit_system_memory_controller_VolatileMemoryTraceHeights.
      
      
      
      Module Impl_core_marker_StructuralPartialEq_for_openvm_circuit_system_memory_controller_VolatileMemoryTraceHeights.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights".
        
        Axiom Implements :
          M.IsTraitInstance
            "core::marker::StructuralPartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [].
      End Impl_core_marker_StructuralPartialEq_for_openvm_circuit_system_memory_controller_VolatileMemoryTraceHeights.
      
      Module Impl_core_cmp_PartialEq_openvm_circuit_system_memory_controller_VolatileMemoryTraceHeights_for_openvm_circuit_system_memory_controller_VolatileMemoryTraceHeights.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights".
        
        (* PartialEq *)
        Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self; other ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.path
                        "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights"
                    ],
                  self
                |) in
              let other :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.path
                        "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights"
                    ],
                  other
                |) in
              LogicalOp.and (|
                M.call_closure (|
                  Ty.path "bool",
                  BinOp.eq,
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights",
                        "boundary"
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| other |) |),
                        "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights",
                        "boundary"
                      |)
                    |)
                  ]
                |),
                ltac:(M.monadic
                  (M.call_closure (|
                    Ty.path "bool",
                    M.get_trait_method (|
                      "core::cmp::PartialEq",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                      ],
                      "eq",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights",
                          "access_adapters"
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| other |) |),
                          "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights",
                          "access_adapters"
                        |)
                      |)
                    ]
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::cmp::PartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [ Ty.path "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights" ]
            Self
            (* Instance *) [ ("eq", InstanceField.Method eq) ].
      End Impl_core_cmp_PartialEq_openvm_circuit_system_memory_controller_VolatileMemoryTraceHeights_for_openvm_circuit_system_memory_controller_VolatileMemoryTraceHeights.
      
      Module Impl_core_cmp_Eq_for_openvm_circuit_system_memory_controller_VolatileMemoryTraceHeights.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights".
        
        (* Eq *)
        Definition assert_receiver_is_total_eq
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.path
                        "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights"
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.tuple [],
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.tuple [],
                        Value.DeclaredButUndefined,
                        [ fun γ => ltac:(M.monadic (Value.Tuple [])) ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::cmp::Eq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *)
            [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
      End Impl_core_cmp_Eq_for_openvm_circuit_system_memory_controller_VolatileMemoryTraceHeights.
      
      Module Impl_openvm_circuit_system_memory_controller_VolatileMemoryTraceHeights.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights".
        
        (*
            pub fn flatten(&self) -> Vec<usize> {
                iter::once(self.boundary)
                    .chain(self.access_adapters.iter().copied())
                    .collect()
            }
        *)
        Definition flatten (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.path
                        "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights"
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::chain::Chain")
                    []
                    [
                      Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ Ty.path "usize" ];
                      Ty.apply
                        (Ty.path "core::iter::adapters::copied::Copied")
                        []
                        [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ] ]
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::chain::Chain")
                      []
                      [
                        Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ Ty.path "usize" ];
                        Ty.apply
                          (Ty.path "core::iter::adapters::copied::Copied")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ] ]
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "chain",
                      [],
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::copied::Copied")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ] ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ Ty.path "usize" ],
                        M.get_function (|
                          "core::iter::sources::once::once",
                          [],
                          [ Ty.path "usize" ]
                        |),
                        [
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights",
                              "boundary"
                            |)
                          |)
                        ]
                      |);
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::copied::Copied")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ] ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ],
                          [],
                          [],
                          "copied",
                          [],
                          [ Ty.path "usize" ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ],
                              "iter",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights",
                                          "access_adapters"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_flatten :
          M.IsAssociatedFunction.C Self "flatten" flatten.
        Admitted.
        Global Typeclasses Opaque flatten.
        
        (*
            fn round_to_next_power_of_two(&mut self) {
                self.boundary = self.boundary.next_power_of_two();
                self.access_adapters
                    .iter_mut()
                    .for_each(|v| *v = v.next_power_of_two());
            }
        *)
        Definition round_to_next_power_of_two
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.path
                        "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights"
                    ],
                  self
                |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.write (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights",
                      "boundary"
                    |),
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (| Ty.path "usize", "next_power_of_two", [], [] |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights",
                            "boundary"
                          |)
                        |)
                      ]
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "for_each",
                      [],
                      [
                        Ty.function
                          [ Ty.apply (Ty.path "&mut") [] [ Ty.path "usize" ] ]
                          (Ty.tuple [])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "usize" ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ],
                          "iter_mut",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
                                M.get_trait_method (|
                                  "core::ops::deref::DerefMut",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                  [],
                                  [],
                                  "deref_mut",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights",
                                      "access_adapters"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply (Ty.path "&mut") [] [ Ty.path "usize" ],
                                    α0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let v :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&mut") [] [ Ty.path "usize" ],
                                            γ
                                          |) in
                                        M.write (|
                                          M.deref (| M.read (| v |) |),
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_associated_function (|
                                              Ty.path "usize",
                                              "next_power_of_two",
                                              [],
                                              []
                                            |),
                                            [ M.read (| M.deref (| M.read (| v |) |) |) ]
                                          |)
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_round_to_next_power_of_two :
          M.IsAssociatedFunction.C Self "round_to_next_power_of_two" round_to_next_power_of_two.
        Admitted.
        Global Typeclasses Opaque round_to_next_power_of_two.
        
        (*
            fn round_to_next_power_of_two_or_zero(&mut self) {
                self.boundary = next_power_of_two_or_zero(self.boundary);
                self.access_adapters
                    .iter_mut()
                    .for_each(|v| *v = next_power_of_two_or_zero( *v));
            }
        *)
        Definition round_to_next_power_of_two_or_zero
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.path
                        "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights"
                    ],
                  self
                |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.write (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights",
                      "boundary"
                    |),
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_function (|
                        "openvm_circuit_primitives::utils::next_power_of_two_or_zero",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights",
                            "boundary"
                          |)
                        |)
                      ]
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "for_each",
                      [],
                      [
                        Ty.function
                          [ Ty.apply (Ty.path "&mut") [] [ Ty.path "usize" ] ]
                          (Ty.tuple [])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "usize" ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ],
                          "iter_mut",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
                                M.get_trait_method (|
                                  "core::ops::deref::DerefMut",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                  [],
                                  [],
                                  "deref_mut",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::system::memory::controller::VolatileMemoryTraceHeights",
                                      "access_adapters"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply (Ty.path "&mut") [] [ Ty.path "usize" ],
                                    α0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let v :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&mut") [] [ Ty.path "usize" ],
                                            γ
                                          |) in
                                        M.write (|
                                          M.deref (| M.read (| v |) |),
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_function (|
                                              "openvm_circuit_primitives::utils::next_power_of_two_or_zero",
                                              [],
                                              []
                                            |),
                                            [ M.read (| M.deref (| M.read (| v |) |) |) ]
                                          |)
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_round_to_next_power_of_two_or_zero :
          M.IsAssociatedFunction.C
            Self
            "round_to_next_power_of_two_or_zero"
            round_to_next_power_of_two_or_zero.
        Admitted.
        Global Typeclasses Opaque round_to_next_power_of_two_or_zero.
      End Impl_openvm_circuit_system_memory_controller_VolatileMemoryTraceHeights.
      
      (* StructRecord
        {
          name := "PersistentMemoryTraceHeights";
          const_params := [];
          ty_params := [];
          fields :=
            [
              ("boundary", Ty.path "usize");
              ("merkle", Ty.path "usize");
              ("access_adapters",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ])
            ];
        } *)
      
      Module Impl_core_fmt_Debug_for_openvm_circuit_system_memory_controller_PersistentMemoryTraceHeights.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights".
        
        (* Debug *)
        Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.path
                        "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights"
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field3_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| mk_str (| "PersistentMemoryTraceHeights" |) |)
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "boundary" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                              "boundary"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "merkle" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                              "merkle"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "access_adapters" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                            ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                                ],
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                                  "access_adapters"
                                |)
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
      End Impl_core_fmt_Debug_for_openvm_circuit_system_memory_controller_PersistentMemoryTraceHeights.
      
      Module Impl_core_clone_Clone_for_openvm_circuit_system_memory_controller_PersistentMemoryTraceHeights.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights".
        
        (* Clone *)
        Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.path
                        "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights"
                    ],
                  self
                |) in
              Value.mkStructRecord
                "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights"
                []
                []
                [
                  ("boundary",
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "usize",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                                "boundary"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("merkle",
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "usize",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                                "merkle"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("access_adapters",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                                "access_adapters"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("clone", InstanceField.Method clone) ].
      End Impl_core_clone_Clone_for_openvm_circuit_system_memory_controller_PersistentMemoryTraceHeights.
      
      
      
      Module Impl_core_marker_StructuralPartialEq_for_openvm_circuit_system_memory_controller_PersistentMemoryTraceHeights.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights".
        
        Axiom Implements :
          M.IsTraitInstance
            "core::marker::StructuralPartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [].
      End Impl_core_marker_StructuralPartialEq_for_openvm_circuit_system_memory_controller_PersistentMemoryTraceHeights.
      
      Module Impl_core_cmp_PartialEq_openvm_circuit_system_memory_controller_PersistentMemoryTraceHeights_for_openvm_circuit_system_memory_controller_PersistentMemoryTraceHeights.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights".
        
        (* PartialEq *)
        Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self; other ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.path
                        "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights"
                    ],
                  self
                |) in
              let other :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.path
                        "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights"
                    ],
                  other
                |) in
              LogicalOp.and (|
                LogicalOp.and (|
                  M.call_closure (|
                    Ty.path "bool",
                    BinOp.eq,
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                          "boundary"
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| other |) |),
                          "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                          "boundary"
                        |)
                      |)
                    ]
                  |),
                  ltac:(M.monadic
                    (M.call_closure (|
                      Ty.path "bool",
                      BinOp.eq,
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                            "merkle"
                          |)
                        |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| other |) |),
                            "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                            "merkle"
                          |)
                        |)
                      ]
                    |)))
                |),
                ltac:(M.monadic
                  (M.call_closure (|
                    Ty.path "bool",
                    M.get_trait_method (|
                      "core::cmp::PartialEq",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                      ],
                      "eq",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                          "access_adapters"
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| other |) |),
                          "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                          "access_adapters"
                        |)
                      |)
                    ]
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::cmp::PartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [ Ty.path "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights" ]
            Self
            (* Instance *) [ ("eq", InstanceField.Method eq) ].
      End Impl_core_cmp_PartialEq_openvm_circuit_system_memory_controller_PersistentMemoryTraceHeights_for_openvm_circuit_system_memory_controller_PersistentMemoryTraceHeights.
      
      Module Impl_core_cmp_Eq_for_openvm_circuit_system_memory_controller_PersistentMemoryTraceHeights.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights".
        
        (* Eq *)
        Definition assert_receiver_is_total_eq
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.path
                        "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights"
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.tuple [],
                Value.DeclaredButUndefined,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.tuple [],
                        Value.DeclaredButUndefined,
                        [ fun γ => ltac:(M.monadic (Value.Tuple [])) ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::cmp::Eq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *)
            [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
      End Impl_core_cmp_Eq_for_openvm_circuit_system_memory_controller_PersistentMemoryTraceHeights.
      
      Module Impl_openvm_circuit_system_memory_controller_PersistentMemoryTraceHeights.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights".
        
        (*
            pub fn flatten(&self) -> Vec<usize> {
                vec![self.boundary, self.merkle]
                    .into_iter()
                    .chain(self.access_adapters.iter().copied())
                    .collect()
            }
        *)
        Definition flatten (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.path
                        "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights"
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::chain::Chain")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ];
                      Ty.apply
                        (Ty.path "core::iter::adapters::copied::Copied")
                        []
                        [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ] ]
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::chain::Chain")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ];
                        Ty.apply
                          (Ty.path "core::iter::adapters::copied::Copied")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ] ]
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                      [],
                      [],
                      "chain",
                      [],
                      [
                        Ty.apply
                          (Ty.path "core::iter::adapters::copied::Copied")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ] ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ],
                              "into_vec",
                              [],
                              [ Ty.path "alloc::alloc::Global" ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  []
                                  [
                                    Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                M.pointer_coercion
                                  M.PointerCoercion.Unsize
                                  (Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 2 ]
                                        [ Ty.path "usize" ];
                                      Ty.path "alloc::alloc::Global"
                                    ])
                                  (Ty.apply
                                    (Ty.path "alloc::boxed::Box")
                                    []
                                    [
                                      Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ];
                                      Ty.path "alloc::alloc::Global"
                                    ]),
                                [
                                  M.read (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "alloc::boxed::Box")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 2 ]
                                            [ Ty.path "usize" ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "alloc::boxed::Box")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [ Ty.path "usize" ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        "new",
                                        [],
                                        []
                                      |),
                                      [
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 2 ]
                                            [ Ty.path "usize" ],
                                          Value.Array
                                            [
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                                                  "boundary"
                                                |)
                                              |);
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                                                  "merkle"
                                                |)
                                              |)
                                            ]
                                        |)
                                      ]
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |);
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::copied::Copied")
                          []
                          [ Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ] ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ],
                          [],
                          [],
                          "copied",
                          [],
                          [ Ty.path "usize" ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "core::slice::iter::Iter") [] [ Ty.path "usize" ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ],
                              "iter",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                                          "access_adapters"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_flatten :
          M.IsAssociatedFunction.C Self "flatten" flatten.
        Admitted.
        Global Typeclasses Opaque flatten.
        
        (*
            fn round_to_next_power_of_two(&mut self) {
                self.boundary = self.boundary.next_power_of_two();
                self.merkle = self.merkle.next_power_of_two();
                self.access_adapters
                    .iter_mut()
                    .for_each(|v| *v = v.next_power_of_two());
            }
        *)
        Definition round_to_next_power_of_two
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.path
                        "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights"
                    ],
                  self
                |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.write (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                      "boundary"
                    |),
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (| Ty.path "usize", "next_power_of_two", [], [] |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                            "boundary"
                          |)
                        |)
                      ]
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.write (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                      "merkle"
                    |),
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_associated_function (| Ty.path "usize", "next_power_of_two", [], [] |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                            "merkle"
                          |)
                        |)
                      ]
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "for_each",
                      [],
                      [
                        Ty.function
                          [ Ty.apply (Ty.path "&mut") [] [ Ty.path "usize" ] ]
                          (Ty.tuple [])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "usize" ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ],
                          "iter_mut",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
                                M.get_trait_method (|
                                  "core::ops::deref::DerefMut",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                  [],
                                  [],
                                  "deref_mut",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                                      "access_adapters"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply (Ty.path "&mut") [] [ Ty.path "usize" ],
                                    α0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let v :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&mut") [] [ Ty.path "usize" ],
                                            γ
                                          |) in
                                        M.write (|
                                          M.deref (| M.read (| v |) |),
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_associated_function (|
                                              Ty.path "usize",
                                              "next_power_of_two",
                                              [],
                                              []
                                            |),
                                            [ M.read (| M.deref (| M.read (| v |) |) |) ]
                                          |)
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_round_to_next_power_of_two :
          M.IsAssociatedFunction.C Self "round_to_next_power_of_two" round_to_next_power_of_two.
        Admitted.
        Global Typeclasses Opaque round_to_next_power_of_two.
        
        (*
            fn round_to_next_power_of_two_or_zero(&mut self) {
                self.boundary = next_power_of_two_or_zero(self.boundary);
                self.merkle = next_power_of_two_or_zero(self.merkle);
                self.access_adapters
                    .iter_mut()
                    .for_each(|v| *v = next_power_of_two_or_zero( *v));
            }
        *)
        Definition round_to_next_power_of_two_or_zero
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.path
                        "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights"
                    ],
                  self
                |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.write (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                      "boundary"
                    |),
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_function (|
                        "openvm_circuit_primitives::utils::next_power_of_two_or_zero",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                            "boundary"
                          |)
                        |)
                      ]
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.write (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                      "merkle"
                    |),
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_function (|
                        "openvm_circuit_primitives::utils::next_power_of_two_or_zero",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                            "merkle"
                          |)
                        |)
                      ]
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "usize" ],
                      [],
                      [],
                      "for_each",
                      [],
                      [
                        Ty.function
                          [ Ty.apply (Ty.path "&mut") [] [ Ty.path "usize" ] ]
                          (Ty.tuple [])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "usize" ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ],
                          "iter_mut",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ Ty.path "usize" ] ],
                                M.get_trait_method (|
                                  "core::ops::deref::DerefMut",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                                  [],
                                  [],
                                  "deref_mut",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::system::memory::controller::PersistentMemoryTraceHeights",
                                      "access_adapters"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply (Ty.path "&mut") [] [ Ty.path "usize" ],
                                    α0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let v :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&mut") [] [ Ty.path "usize" ],
                                            γ
                                          |) in
                                        M.write (|
                                          M.deref (| M.read (| v |) |),
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_function (|
                                              "openvm_circuit_primitives::utils::next_power_of_two_or_zero",
                                              [],
                                              []
                                            |),
                                            [ M.read (| M.deref (| M.read (| v |) |) |) ]
                                          |)
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_round_to_next_power_of_two_or_zero :
          M.IsAssociatedFunction.C
            Self
            "round_to_next_power_of_two_or_zero"
            round_to_next_power_of_two_or_zero.
        Admitted.
        Global Typeclasses Opaque round_to_next_power_of_two_or_zero.
      End Impl_openvm_circuit_system_memory_controller_PersistentMemoryTraceHeights.
      
      
      (* StructRecord
        {
          name := "MemoryAuxColsFactory";
          const_params := [];
          ty_params := [ "T" ];
          fields :=
            [
              ("range_checker",
                Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip");
              ("timestamp_lt_air",
                Ty.path "openvm_circuit_primitives::assert_less_than::AssertLtSubAir");
              ("_marker", Ty.apply (Ty.path "core::marker::PhantomData") [] [ T ])
            ];
        } *)
      
      Module Impl_openvm_circuit_system_memory_controller_MemoryAuxColsFactory_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
            []
            [ F ].
        
        (*
            pub fn generate_read_aux(&self, read: &MemoryRecord<F>, buffer: &mut MemoryReadAuxCols<F>) {
                assert!(
                    !read.address_space.is_zero(),
                    "cannot make `MemoryReadAuxCols` for address space 0"
                );
                self.generate_base_aux(read, &mut buffer.base);
            }
        *)
        Definition generate_read_aux
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; read; buffer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let read :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::offline::MemoryRecord")
                        []
                        [ F ]
                    ],
                  read
                |) in
              let buffer :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                        []
                        [ F ]
                    ],
                  buffer
                |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                UnOp.not (|
                                  UnOp.not (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "p3_field::field::Field",
                                        F,
                                        [],
                                        [],
                                        "is_zero",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| read |) |),
                                            "openvm_circuit::system::memory::offline::MemoryRecord",
                                            "address_space"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic_fmt", [], [] |),
                              [
                                M.call_closure (|
                                  Ty.path "core::fmt::Arguments",
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Arguments",
                                    "new_const",
                                    [ Value.Integer IntegerKind.Usize 1 ],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 1 ]
                                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                            Value.Array
                                              [
                                                mk_str (|
                                                  "cannot make `MemoryReadAuxCols` for address space 0"
                                                |)
                                              ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                        []
                        [ F ],
                      "generate_base_aux",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| read |) |) |);
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| buffer |) |),
                              "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols",
                              "base"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_generate_read_aux :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "generate_read_aux" (generate_read_aux F).
        Admitted.
        Global Typeclasses Opaque generate_read_aux.
        
        (*
            pub fn generate_read_or_immediate_aux(
                &self,
                read: &MemoryRecord<F>,
                buffer: &mut MemoryReadOrImmediateAuxCols<F>,
            ) {
                IsZeroSubAir.generate_subrow(
                    read.address_space,
                    (&mut buffer.is_zero_aux, &mut buffer.is_immediate),
                );
                self.generate_base_aux(read, &mut buffer.base);
            }
        *)
        Definition generate_read_or_immediate_aux
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; read; buffer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let read :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::offline::MemoryRecord")
                        []
                        [ F ]
                    ],
                  read
                |) in
              let buffer :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
                        []
                        [ F ]
                    ],
                  buffer
                |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "openvm_circuit_primitives::sub_air::TraceSubRowGenerator",
                      Ty.path "openvm_circuit_primitives::is_zero::IsZeroSubAir",
                      [],
                      [ F ],
                      "generate_subrow",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Ty.path "openvm_circuit_primitives::is_zero::IsZeroSubAir",
                          Value.StructTuple
                            "openvm_circuit_primitives::is_zero::IsZeroSubAir"
                            []
                            []
                            []
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| read |) |),
                          "openvm_circuit::system::memory::offline::MemoryRecord",
                          "address_space"
                        |)
                      |);
                      Value.Tuple
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| buffer |) |),
                                  "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols",
                                  "is_zero_aux"
                                |)
                              |)
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| buffer |) |),
                                  "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols",
                                  "is_immediate"
                                |)
                              |)
                            |)
                          |)
                        ]
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                        []
                        [ F ],
                      "generate_base_aux",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| read |) |) |);
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| buffer |) |),
                              "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols",
                              "base"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_generate_read_or_immediate_aux :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C
            (Self F)
            "generate_read_or_immediate_aux"
            (generate_read_or_immediate_aux F).
        Admitted.
        Global Typeclasses Opaque generate_read_or_immediate_aux.
        
        (*
            pub fn generate_write_aux<const N: usize>(
                &self,
                write: &MemoryRecord<F>,
                buffer: &mut MemoryWriteAuxCols<F, N>,
            ) {
                buffer
                    .prev_data
                    .copy_from_slice(write.prev_data_slice().unwrap());
                self.generate_base_aux(write, &mut buffer.base);
            }
        *)
        Definition generate_write_aux
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [ N ], [], [ self; write; buffer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let write :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::offline::MemoryRecord")
                        []
                        [ F ]
                    ],
                  write
                |) in
              let buffer :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                        [ N ]
                        [ F ]
                    ],
                  buffer
                |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ F ],
                      "copy_from_slice",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                        M.pointer_coercion
                          M.PointerCoercion.Unsize
                          (Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "array") [ N ] [ F ] ])
                          (Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ]),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| buffer |) |),
                              "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols",
                              "prev_data"
                            |)
                          |)
                        ]
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                ],
                              "unwrap",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ F ] ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::offline::MemoryRecord")
                                    []
                                    [ F ],
                                  "prev_data_slice",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| write |) |) |)
                                ]
                              |)
                            ]
                          |)
                        |)
                      |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                        []
                        [ F ],
                      "generate_base_aux",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| write |) |) |);
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| buffer |) |),
                              "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols",
                              "base"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_generate_write_aux :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "generate_write_aux" (generate_write_aux F).
        Admitted.
        Global Typeclasses Opaque generate_write_aux.
        
        (*
            pub fn generate_base_aux(&self, record: &MemoryRecord<F>, buffer: &mut MemoryBaseAuxCols<F>) {
                buffer.prev_timestamp = F::from_canonical_u32(record.prev_timestamp);
                self.generate_timestamp_lt(
                    record.prev_timestamp,
                    record.timestamp,
                    &mut buffer.timestamp_lt_aux,
                );
            }
        *)
        Definition generate_base_aux
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; record; buffer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let record :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::offline::MemoryRecord")
                        []
                        [ F ]
                    ],
                  record
                |) in
              let buffer :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                        []
                        [ F ]
                    ],
                  buffer
                |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.write (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| buffer |) |),
                      "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols",
                      "prev_timestamp"
                    |),
                    M.call_closure (|
                      F,
                      M.get_trait_method (|
                        "p3_field::field::FieldAlgebra",
                        F,
                        [],
                        [],
                        "from_canonical_u32",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| record |) |),
                            "openvm_circuit::system::memory::offline::MemoryRecord",
                            "prev_timestamp"
                          |)
                        |)
                      ]
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                        []
                        [ F ],
                      "generate_timestamp_lt",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| record |) |),
                          "openvm_circuit::system::memory::offline::MemoryRecord",
                          "prev_timestamp"
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| record |) |),
                          "openvm_circuit::system::memory::offline::MemoryRecord",
                          "timestamp"
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| buffer |) |),
                              "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols",
                              "timestamp_lt_aux"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_generate_base_aux :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "generate_base_aux" (generate_base_aux F).
        Admitted.
        Global Typeclasses Opaque generate_base_aux.
        
        (*
            fn generate_timestamp_lt(
                &self,
                prev_timestamp: u32,
                timestamp: u32,
                buffer: &mut LessThanAuxCols<F, AUX_LEN>,
            ) {
                debug_assert!(prev_timestamp < timestamp);
                self.timestamp_lt_air.generate_subrow(
                    (self.range_checker.as_ref(), prev_timestamp, timestamp),
                    &mut buffer.lower_decomp,
                );
            }
        *)
        Definition generate_timestamp_lt
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; prev_timestamp; timestamp; buffer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let prev_timestamp := M.alloc (| Ty.path "u32", prev_timestamp |) in
              let timestamp := M.alloc (| Ty.path "u32", timestamp |) in
              let buffer :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit_primitives::assert_less_than::LessThanAuxCols")
                        [
                          M.unevaluated_const
                            (mk_str (|
                              "openvm_circuit_system_memory_controller_generate_timestamp_lt_discriminant"
                            |))
                        ]
                        [ F ]
                    ],
                  buffer
                |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            Ty.path "bool",
                                            UnOp.not (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.lt,
                                                [
                                                  M.read (| prev_timestamp |);
                                                  M.read (| timestamp |)
                                                ]
                                              |)
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.never_to_any (|
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (| "core::panicking::panic", [], [] |),
                                          [
                                            mk_str (|
                                              "assertion failed: prev_timestamp < timestamp"
                                            |)
                                          ]
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "openvm_circuit_primitives::sub_air::TraceSubRowGenerator",
                      Ty.path "openvm_circuit_primitives::assert_less_than::AssertLtSubAir",
                      [],
                      [ F ],
                      "generate_subrow",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::controller::MemoryAuxColsFactory",
                          "timestamp_lt_air"
                        |)
                      |);
                      Value.Tuple
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.path
                                      "openvm_circuit_primitives::var_range::VariableRangeCheckerChip"
                                  ],
                                M.get_trait_method (|
                                  "core::convert::AsRef",
                                  Ty.path
                                    "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                  [],
                                  [
                                    Ty.path
                                      "openvm_circuit_primitives::var_range::VariableRangeCheckerChip"
                                  ],
                                  "as_ref",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::system::memory::controller::MemoryAuxColsFactory",
                                      "range_checker"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |);
                          M.read (| prev_timestamp |);
                          M.read (| timestamp |)
                        ];
                      M.call_closure (|
                        Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                        M.pointer_coercion
                          M.PointerCoercion.Unsize
                          (Ty.apply
                            (Ty.path "&mut")
                            []
                            [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ]
                            ])
                          (Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ]),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| buffer |) |),
                                  "openvm_circuit_primitives::assert_less_than::LessThanAuxCols",
                                  "lower_decomp"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    ]
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_generate_timestamp_lt :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "generate_timestamp_lt" (generate_timestamp_lt F).
        Admitted.
        Global Typeclasses Opaque generate_timestamp_lt.
        
        (*
            pub fn make_read_aux_cols(&self, read: &MemoryRecord<F>) -> MemoryReadAuxCols<F> {
                assert!(
                    !read.address_space.is_zero(),
                    "cannot make `MemoryReadAuxCols` for address space 0"
                );
                MemoryReadAuxCols::new(
                    read.prev_timestamp,
                    self.generate_timestamp_lt_cols(read.prev_timestamp, read.timestamp),
                )
            }
        *)
        Definition make_read_aux_cols
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; read ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let read :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::offline::MemoryRecord")
                        []
                        [ F ]
                    ],
                  read
                |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                UnOp.not (|
                                  UnOp.not (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "p3_field::field::Field",
                                        F,
                                        [],
                                        [],
                                        "is_zero",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| read |) |),
                                            "openvm_circuit::system::memory::offline::MemoryRecord",
                                            "address_space"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic_fmt", [], [] |),
                              [
                                M.call_closure (|
                                  Ty.path "core::fmt::Arguments",
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Arguments",
                                    "new_const",
                                    [ Value.Integer IntegerKind.Usize 1 ],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 1 ]
                                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                            Value.Array
                                              [
                                                mk_str (|
                                                  "cannot make `MemoryReadAuxCols` for address space 0"
                                                |)
                                              ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                    []
                    [ F ],
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                      []
                      [ F ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                        []
                        [ F ],
                      "new",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| read |) |),
                          "openvm_circuit::system::memory::offline::MemoryRecord",
                          "prev_timestamp"
                        |)
                      |);
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_circuit_primitives::assert_less_than::LessThanAuxCols")
                          [ Value.Integer IntegerKind.Usize 2 ]
                          [ F ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                            []
                            [ F ],
                          "generate_timestamp_lt_cols",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| read |) |),
                              "openvm_circuit::system::memory::offline::MemoryRecord",
                              "prev_timestamp"
                            |)
                          |);
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| read |) |),
                              "openvm_circuit::system::memory::offline::MemoryRecord",
                              "timestamp"
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_make_read_aux_cols :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "make_read_aux_cols" (make_read_aux_cols F).
        Admitted.
        Global Typeclasses Opaque make_read_aux_cols.
        
        (*
            pub fn make_write_aux_cols<const N: usize>(
                &self,
                write: &MemoryRecord<F>,
            ) -> MemoryWriteAuxCols<F, N> {
                let prev_data = write.prev_data_slice().unwrap();
                MemoryWriteAuxCols::new(
                    prev_data.try_into().unwrap(),
                    F::from_canonical_u32(write.prev_timestamp),
                    self.generate_timestamp_lt_cols(write.prev_timestamp, write.timestamp),
                )
            }
        *)
        Definition make_write_aux_cols
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [ N ], [], [ self; write ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let write :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::offline::MemoryRecord")
                        []
                        [ F ]
                    ],
                  write
                |) in
              M.read (|
                let~ prev_data :
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ] :=
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ] ],
                      "unwrap",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ] ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::offline::MemoryRecord")
                            []
                            [ F ],
                          "prev_data_slice",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| write |) |) |) ]
                      |)
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                    [ N ]
                    [ F ],
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                      [ N ]
                      [ F ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                        [ N ]
                        [ F ],
                      "new",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "array") [ N ] [ F ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.apply (Ty.path "array") [ N ] [ F ];
                              Ty.path "core::array::TryFromSliceError"
                            ],
                          "unwrap",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.apply (Ty.path "array") [ N ] [ F ];
                                Ty.path "core::array::TryFromSliceError"
                              ],
                            M.get_trait_method (|
                              "core::convert::TryInto",
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                              [],
                              [ Ty.apply (Ty.path "array") [ N ] [ F ] ],
                              "try_into",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| prev_data |) |) |)
                            ]
                          |)
                        ]
                      |);
                      M.call_closure (|
                        F,
                        M.get_trait_method (|
                          "p3_field::field::FieldAlgebra",
                          F,
                          [],
                          [],
                          "from_canonical_u32",
                          [],
                          []
                        |),
                        [
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| write |) |),
                              "openvm_circuit::system::memory::offline::MemoryRecord",
                              "prev_timestamp"
                            |)
                          |)
                        ]
                      |);
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_circuit_primitives::assert_less_than::LessThanAuxCols")
                          [ Value.Integer IntegerKind.Usize 2 ]
                          [ F ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                            []
                            [ F ],
                          "generate_timestamp_lt_cols",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| write |) |),
                              "openvm_circuit::system::memory::offline::MemoryRecord",
                              "prev_timestamp"
                            |)
                          |);
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| write |) |),
                              "openvm_circuit::system::memory::offline::MemoryRecord",
                              "timestamp"
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_make_write_aux_cols :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "make_write_aux_cols" (make_write_aux_cols F).
        Admitted.
        Global Typeclasses Opaque make_write_aux_cols.
        
        (*
            fn generate_timestamp_lt_cols(
                &self,
                prev_timestamp: u32,
                timestamp: u32,
            ) -> LessThanAuxCols<F, AUX_LEN> {
                debug_assert!(prev_timestamp < timestamp);
                let mut decomp = [F::ZERO; AUX_LEN];
                self.timestamp_lt_air.generate_subrow(
                    (self.range_checker.as_ref(), prev_timestamp, timestamp),
                    &mut decomp,
                );
                LessThanAuxCols::new(decomp)
            }
        *)
        Definition generate_timestamp_lt_cols
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; prev_timestamp; timestamp ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let prev_timestamp := M.alloc (| Ty.path "u32", prev_timestamp |) in
              let timestamp := M.alloc (| Ty.path "u32", timestamp |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            Ty.path "bool",
                                            UnOp.not (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.lt,
                                                [
                                                  M.read (| prev_timestamp |);
                                                  M.read (| timestamp |)
                                                ]
                                              |)
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.never_to_any (|
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (| "core::panicking::panic", [], [] |),
                                          [
                                            mk_str (|
                                              "assertion failed: prev_timestamp < timestamp"
                                            |)
                                          ]
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ decomp :
                    Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ] :=
                  lib.repeat (|
                    M.read (| get_constant (| "p3_field::field::FieldAlgebra::ZERO", F |) |),
                    Value.Integer IntegerKind.Usize 2
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "openvm_circuit_primitives::sub_air::TraceSubRowGenerator",
                      Ty.path "openvm_circuit_primitives::assert_less_than::AssertLtSubAir",
                      [],
                      [ F ],
                      "generate_subrow",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::controller::MemoryAuxColsFactory",
                          "timestamp_lt_air"
                        |)
                      |);
                      Value.Tuple
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.path
                                      "openvm_circuit_primitives::var_range::VariableRangeCheckerChip"
                                  ],
                                M.get_trait_method (|
                                  "core::convert::AsRef",
                                  Ty.path
                                    "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                  [],
                                  [
                                    Ty.path
                                      "openvm_circuit_primitives::var_range::VariableRangeCheckerChip"
                                  ],
                                  "as_ref",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::system::memory::controller::MemoryAuxColsFactory",
                                      "range_checker"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |);
                          M.read (| prev_timestamp |);
                          M.read (| timestamp |)
                        ];
                      M.call_closure (|
                        Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                        M.pointer_coercion
                          M.PointerCoercion.Unsize
                          (Ty.apply
                            (Ty.path "&mut")
                            []
                            [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ F ]
                            ])
                          (Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ]),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (| M.borrow (| Pointer.Kind.MutRef, decomp |) |)
                          |)
                        ]
                      |)
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit_primitives::assert_less_than::LessThanAuxCols")
                    [ Value.Integer IntegerKind.Usize 2 ]
                    [ F ],
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_circuit_primitives::assert_less_than::LessThanAuxCols")
                      [ Value.Integer IntegerKind.Usize 2 ]
                      [ F ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit_primitives::assert_less_than::LessThanAuxCols")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [ F ],
                      "new",
                      [],
                      []
                    |),
                    [ M.read (| decomp |) ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_generate_timestamp_lt_cols :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C
            (Self F)
            "generate_timestamp_lt_cols"
            (generate_timestamp_lt_cols F).
        Admitted.
        Global Typeclasses Opaque generate_timestamp_lt_cols.
      End Impl_openvm_circuit_system_memory_controller_MemoryAuxColsFactory_F.
    End controller.
  End memory.
End system.
