(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module system.
  Module memory.
    Module merkle.
      (* StructRecord
        {
          name := "MemoryMerkleChip";
          const_params := [ "CHUNK" ];
          ty_params := [ "F" ];
          fields :=
            [
              ("air",
                Ty.apply
                  (Ty.path "openvm_circuit::system::memory::merkle::air::MemoryMerkleAir")
                  [ CHUNK ]
                  []);
              ("touched_nodes",
                Ty.apply
                  (Ty.path "std::collections::hash::set::HashSet")
                  []
                  [
                    Ty.tuple [ Ty.path "usize"; Ty.path "u32"; Ty.path "u32" ];
                    Ty.path "rustc_hash::FxBuildHasher"
                  ]);
              ("num_touched_nonleaves", Ty.path "usize");
              ("final_state",
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::merkle::FinalState")
                      [ CHUNK ]
                      [ F ]
                  ]);
              ("overridden_height",
                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ])
            ];
        } *)
      
      (* StructRecord
        {
          name := "FinalState";
          const_params := [ "CHUNK" ];
          ty_params := [ "F" ];
          fields :=
            [
              ("rows",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                      [ CHUNK ]
                      [ F ];
                    Ty.path "alloc::alloc::Global"
                  ]);
              ("init_root", Ty.apply (Ty.path "array") [ CHUNK ] [ F ]);
              ("final_root", Ty.apply (Ty.path "array") [ CHUNK ] [ F ])
            ];
        } *)
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_circuit_system_memory_merkle_FinalState_CHUNK_F.
        Definition Self (CHUNK : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "openvm_circuit::system::memory::merkle::FinalState") [ CHUNK ] [ F ].
        
        (* Debug *)
        Definition fmt
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::merkle::FinalState")
                        [ CHUNK ]
                        [ F ]
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field3_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "FinalState" |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "rows" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                                [ CHUNK ]
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::merkle::FinalState",
                              "rows"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "init_root" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::merkle::FinalState",
                              "init_root"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "final_root" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ],
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::merkle::FinalState",
                                  "final_root"
                                |)
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self CHUNK F)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt CHUNK F)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_circuit_system_memory_merkle_FinalState_CHUNK_F.
      
      Module Impl_openvm_circuit_system_memory_merkle_MemoryMerkleChip_CHUNK_F.
        Definition Self (CHUNK : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
            [ CHUNK ]
            [ F ].
        
        (*
            pub fn new(
                memory_dimensions: MemoryDimensions,
                merkle_bus: PermutationCheckBus,
                compression_bus: PermutationCheckBus,
            ) -> Self {
                assert!(memory_dimensions.as_height > 0);
                assert!(memory_dimensions.address_height > 0);
                let mut touched_nodes = FxHashSet::default();
                touched_nodes.insert((memory_dimensions.overall_height(), 0, 0));
                Self {
                    air: MemoryMerkleAir {
                        memory_dimensions,
                        merkle_bus,
                        compression_bus,
                    },
                    touched_nodes,
                    num_touched_nonleaves: 1,
                    final_state: None,
                    overridden_height: None,
                }
            }
        *)
        Definition new
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [], [], [ memory_dimensions; merkle_bus; compression_bus ] =>
            ltac:(M.monadic
              (let memory_dimensions :=
                M.alloc (|
                  Ty.path
                    "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                  memory_dimensions
                |) in
              let merkle_bus :=
                M.alloc (|
                  Ty.path "openvm_stark_backend::interaction::PermutationCheckBus",
                  merkle_bus
                |) in
              let compression_bus :=
                M.alloc (|
                  Ty.path "openvm_stark_backend::interaction::PermutationCheckBus",
                  compression_bus
                |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.gt,
                                    [
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          memory_dimensions,
                                          "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                                          "as_height"
                                        |)
                                      |);
                                      Value.Integer IntegerKind.Usize 0
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic", [], [] |),
                              [ mk_str (| "assertion failed: memory_dimensions.as_height > 0" |) ]
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.gt,
                                    [
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          memory_dimensions,
                                          "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                                          "address_height"
                                        |)
                                      |);
                                      Value.Integer IntegerKind.Usize 0
                                    ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic", [], [] |),
                              [
                                mk_str (|
                                  "assertion failed: memory_dimensions.address_height > 0"
                                |)
                              ]
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ touched_nodes :
                    Ty.apply
                      (Ty.path "std::collections::hash::set::HashSet")
                      []
                      [
                        Ty.tuple [ Ty.path "usize"; Ty.path "u32"; Ty.path "u32" ];
                        Ty.path "rustc_hash::FxBuildHasher"
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "std::collections::hash::set::HashSet")
                      []
                      [
                        Ty.tuple [ Ty.path "usize"; Ty.path "u32"; Ty.path "u32" ];
                        Ty.path "rustc_hash::FxBuildHasher"
                      ],
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply
                        (Ty.path "std::collections::hash::set::HashSet")
                        []
                        [
                          Ty.tuple [ Ty.path "usize"; Ty.path "u32"; Ty.path "u32" ];
                          Ty.path "rustc_hash::FxBuildHasher"
                        ],
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |) in
                let~ _ : Ty.path "bool" :=
                  M.call_closure (|
                    Ty.path "bool",
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "std::collections::hash::set::HashSet")
                        []
                        [
                          Ty.tuple [ Ty.path "usize"; Ty.path "u32"; Ty.path "u32" ];
                          Ty.path "rustc_hash::FxBuildHasher"
                        ],
                      "insert",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, touched_nodes |);
                      Value.Tuple
                        [
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_associated_function (|
                              Ty.path
                                "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                              "overall_height",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, memory_dimensions |) ]
                          |);
                          Value.Integer IntegerKind.U32 0;
                          Value.Integer IntegerKind.U32 0
                        ]
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                    [ CHUNK ]
                    [ F ],
                  Value.mkStructRecord
                    "openvm_circuit::system::memory::merkle::MemoryMerkleChip"
                    [ CHUNK ]
                    [ F ]
                    [
                      ("air",
                        Value.mkStructRecord
                          "openvm_circuit::system::memory::merkle::air::MemoryMerkleAir"
                          [ CHUNK ]
                          []
                          [
                            ("memory_dimensions", M.read (| memory_dimensions |));
                            ("merkle_bus", M.read (| merkle_bus |));
                            ("compression_bus", M.read (| compression_bus |))
                          ]);
                      ("touched_nodes", M.read (| touched_nodes |));
                      ("num_touched_nonleaves", Value.Integer IntegerKind.Usize 1);
                      ("final_state",
                        Value.StructTuple
                          "core::option::Option::None"
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::merkle::FinalState")
                              [ CHUNK ]
                              [ F ]
                          ]
                          []);
                      ("overridden_height",
                        Value.StructTuple "core::option::Option::None" [] [ Ty.path "usize" ] [])
                    ]
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_new :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsAssociatedFunction.C (Self CHUNK F) "new" (new CHUNK F).
        Admitted.
        Global Typeclasses Opaque new.
        
        (*
            pub fn set_overridden_height(&mut self, override_height: usize) {
                self.overridden_height = Some(override_height);
            }
        *)
        Definition set_overridden_height
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [], [], [ self; override_height ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                        [ CHUNK ]
                        [ F ]
                    ],
                  self
                |) in
              let override_height := M.alloc (| Ty.path "usize", override_height |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.write (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::merkle::MemoryMerkleChip",
                      "overridden_height"
                    |),
                    Value.StructTuple
                      "core::option::Option::Some"
                      []
                      [ Ty.path "usize" ]
                      [ M.read (| override_height |) ]
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_set_overridden_height :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsAssociatedFunction.C
            (Self CHUNK F)
            "set_overridden_height"
            (set_overridden_height CHUNK F).
        Admitted.
        Global Typeclasses Opaque set_overridden_height.
        
        (*
            fn touch_node(&mut self, height: usize, as_label: u32, address_label: u32) {
                if self.touched_nodes.insert((height, as_label, address_label)) {
                    assert_ne!(height, self.air.memory_dimensions.overall_height());
                    if height != 0 {
                        self.num_touched_nonleaves += 1;
                    }
                    if height >= self.air.memory_dimensions.address_height {
                        self.touch_node(height + 1, as_label / 2, address_label);
                    } else {
                        self.touch_node(height + 1, as_label, address_label / 2);
                    }
                }
            }
        *)
        Definition touch_node
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [], [], [ self; height; as_label; address_label ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                        [ CHUNK ]
                        [ F ]
                    ],
                  self
                |) in
              let height := M.alloc (| Ty.path "usize", height |) in
              let as_label := M.alloc (| Ty.path "u32", as_label |) in
              let address_label := M.alloc (| Ty.path "u32", address_label |) in
              M.match_operator (|
                Ty.tuple [],
                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            Ty.path "bool",
                            M.call_closure (|
                              Ty.path "bool",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "std::collections::hash::set::HashSet")
                                  []
                                  [
                                    Ty.tuple [ Ty.path "usize"; Ty.path "u32"; Ty.path "u32" ];
                                    Ty.path "rustc_hash::FxBuildHasher"
                                  ],
                                "insert",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::system::memory::merkle::MemoryMerkleChip",
                                    "touched_nodes"
                                  |)
                                |);
                                Value.Tuple
                                  [
                                    M.read (| height |);
                                    M.read (| as_label |);
                                    M.read (| address_label |)
                                  ]
                              ]
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.read (|
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (|
                              Ty.tuple
                                [
                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                ],
                              Value.Tuple
                                [
                                  M.borrow (| Pointer.Kind.Ref, height |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Ty.path "usize",
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_associated_function (|
                                          Ty.path
                                            "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                                          "overall_height",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "openvm_circuit::system::memory::merkle::MemoryMerkleChip",
                                                "air"
                                              |),
                                              "openvm_circuit::system::memory::merkle::air::MemoryMerkleAir",
                                              "memory_dimensions"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)
                                ]
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                  let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                  let left_val :=
                                    M.copy (|
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                      γ0_0
                                    |) in
                                  let right_val :=
                                    M.copy (|
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                      γ0_1
                                    |) in
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                Ty.path "bool",
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.eq,
                                                  [
                                                    M.read (|
                                                      M.deref (| M.read (| left_val |) |)
                                                    |);
                                                    M.read (|
                                                      M.deref (| M.read (| right_val |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.never_to_any (|
                                            M.read (|
                                              let~ kind : Ty.path "core::panicking::AssertKind" :=
                                                Value.StructTuple
                                                  "core::panicking::AssertKind::Ne"
                                                  []
                                                  []
                                                  [] in
                                              M.alloc (|
                                                Ty.path "never",
                                                M.call_closure (|
                                                  Ty.path "never",
                                                  M.get_function (|
                                                    "core::panicking::assert_failed",
                                                    [],
                                                    [ Ty.path "usize"; Ty.path "usize" ]
                                                  |),
                                                  [
                                                    M.read (| kind |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| left_val |) |)
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| right_val |) |)
                                                        |)
                                                      |)
                                                    |);
                                                    Value.StructTuple
                                                      "core::option::Option::None"
                                                      []
                                                      [ Ty.path "core::fmt::Arguments" ]
                                                      []
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (Value.Tuple []))
                                    ]
                                  |)))
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        Ty.path "bool",
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.ne,
                                          [ M.read (| height |); Value.Integer IntegerKind.Usize 0 ]
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.read (|
                                    let~ _ : Ty.tuple [] :=
                                      let β :=
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::system::memory::merkle::MemoryMerkleChip",
                                          "num_touched_nonleaves"
                                        |) in
                                      M.write (|
                                        β,
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.add,
                                          [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                                        |)
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                  |)));
                              fun γ => ltac:(M.monadic (Value.Tuple []))
                            ]
                          |) in
                        M.alloc (|
                          Ty.tuple [],
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        Ty.path "bool",
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.ge,
                                          [
                                            M.read (| height |);
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "openvm_circuit::system::memory::merkle::MemoryMerkleChip",
                                                    "air"
                                                  |),
                                                  "openvm_circuit::system::memory::merkle::air::MemoryMerkleAir",
                                                  "memory_dimensions"
                                                |),
                                                "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                                                "address_height"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.read (|
                                    let~ _ : Ty.tuple [] :=
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                                            [ CHUNK ]
                                            [ F ],
                                          "touch_node",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.read (| self |) |)
                                          |);
                                          M.call_closure (|
                                            Ty.path "usize",
                                            BinOp.Wrap.add,
                                            [ M.read (| height |); Value.Integer IntegerKind.Usize 1
                                            ]
                                          |);
                                          M.call_closure (|
                                            Ty.path "u32",
                                            BinOp.Wrap.div,
                                            [ M.read (| as_label |); Value.Integer IntegerKind.U32 2
                                            ]
                                          |);
                                          M.read (| address_label |)
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (M.read (|
                                    let~ _ : Ty.tuple [] :=
                                      M.call_closure (|
                                        Ty.tuple [],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                                            [ CHUNK ]
                                            [ F ],
                                          "touch_node",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.read (| self |) |)
                                          |);
                                          M.call_closure (|
                                            Ty.path "usize",
                                            BinOp.Wrap.add,
                                            [ M.read (| height |); Value.Integer IntegerKind.Usize 1
                                            ]
                                          |);
                                          M.read (| as_label |);
                                          M.call_closure (|
                                            Ty.path "u32",
                                            BinOp.Wrap.div,
                                            [
                                              M.read (| address_label |);
                                              Value.Integer IntegerKind.U32 2
                                            ]
                                          |)
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                  |)))
                            ]
                          |)
                        |)
                      |)));
                  fun γ => ltac:(M.monadic (Value.Tuple []))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_touch_node :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsAssociatedFunction.C (Self CHUNK F) "touch_node" (touch_node CHUNK F).
        Admitted.
        Global Typeclasses Opaque touch_node.
        
        (*
            pub fn touch_range(&mut self, address_space: u32, address: u32, len: u32) {
                let as_label = address_space - self.air.memory_dimensions.as_offset;
                let first_address_label = address / CHUNK as u32;
                let last_address_label = (address + len - 1) / CHUNK as u32;
                for address_label in first_address_label..=last_address_label {
                    self.touch_node(0, as_label, address_label);
                }
            }
        *)
        Definition touch_range
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [], [], [ self; address_space; address; len ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                        [ CHUNK ]
                        [ F ]
                    ],
                  self
                |) in
              let address_space := M.alloc (| Ty.path "u32", address_space |) in
              let address := M.alloc (| Ty.path "u32", address |) in
              let len := M.alloc (| Ty.path "u32", len |) in
              M.read (|
                let~ as_label : Ty.path "u32" :=
                  M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.sub,
                    [
                      M.read (| address_space |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::merkle::MemoryMerkleChip",
                              "air"
                            |),
                            "openvm_circuit::system::memory::merkle::air::MemoryMerkleAir",
                            "memory_dimensions"
                          |),
                          "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                          "as_offset"
                        |)
                      |)
                    ]
                  |) in
                let~ first_address_label : Ty.path "u32" :=
                  M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.div,
                    [ M.read (| address |); M.cast (Ty.path "u32") CHUNK ]
                  |) in
                let~ last_address_label : Ty.path "u32" :=
                  M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.div,
                    [
                      M.call_closure (|
                        Ty.path "u32",
                        BinOp.Wrap.sub,
                        [
                          M.call_closure (|
                            Ty.path "u32",
                            BinOp.Wrap.add,
                            [ M.read (| address |); M.read (| len |) ]
                          |);
                          Value.Integer IntegerKind.U32 1
                        ]
                      |);
                      M.cast (Ty.path "u32") CHUNK
                    ]
                  |) in
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply (Ty.path "core::ops::range::RangeInclusive") [] [ Ty.path "u32" ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::range::RangeInclusive")
                            []
                            [ Ty.path "u32" ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "core::ops::range::RangeInclusive")
                              []
                              [ Ty.path "u32" ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::range::RangeInclusive")
                                []
                                [ Ty.path "u32" ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::ops::range::RangeInclusive")
                                  []
                                  [ Ty.path "u32" ],
                                "new",
                                [],
                                []
                              |),
                              [ M.read (| first_address_label |); M.read (| last_address_label |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::ops::range::RangeInclusive")
                                  []
                                  [ Ty.path "u32" ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "u32" ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "u32" ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeInclusive")
                                              []
                                              [ Ty.path "u32" ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let address_label := M.copy (| Ty.path "u32", γ0_0 |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                                                      [ CHUNK ]
                                                      [ F ],
                                                    "touch_node",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.MutRef,
                                                      M.deref (| M.read (| self |) |)
                                                    |);
                                                    Value.Integer IntegerKind.Usize 0;
                                                    M.read (| as_label |);
                                                    M.read (| address_label |)
                                                  ]
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_touch_range :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsAssociatedFunction.C (Self CHUNK F) "touch_range" (touch_range CHUNK F).
        Admitted.
        Global Typeclasses Opaque touch_range.
      End Impl_openvm_circuit_system_memory_merkle_MemoryMerkleChip_CHUNK_F.
    End merkle.
  End memory.
End system.
