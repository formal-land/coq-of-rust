(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module system.
  Module memory.
    Module merkle.
      Module trace.
        Module Impl_openvm_circuit_system_memory_merkle_MemoryMerkleChip_CHUNK_F.
          Definition Self (CHUNK : Value.t) (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
              [ CHUNK ]
              [ F ].
          
          (*
              pub fn finalize(
                  &mut self,
                  initial_tree: &MemoryNode<CHUNK, F>,
                  final_memory: &Equipartition<F, CHUNK>,
                  hasher: &mut impl HasherChip<CHUNK, F>,
              ) {
                  assert!(self.final_state.is_none(), "Merkle chip already finalized");
                  // there needs to be a touched node with `height_section` = 0
                  // shouldn't be a leaf because
                  // trace generation will expect an interaction from MemoryInterfaceChip in that case
                  if self.touched_nodes.len() == 1 {
                      self.touch_node(1, 0, 0);
                  }
          
                  let mut rows = vec![];
                  let mut tree_helper = TreeHelper {
                      memory_dimensions: self.air.memory_dimensions,
                      final_memory,
                      touched_nodes: &self.touched_nodes,
                      trace_rows: &mut rows,
                  };
                  let final_tree = tree_helper.recur(
                      self.air.memory_dimensions.overall_height(),
                      initial_tree,
                      0,
                      0,
                      hasher,
                  );
                  self.final_state = Some(FinalState {
                      rows,
                      init_root: initial_tree.hash(),
                      final_root: final_tree.hash(),
                  });
              }
          *)
          Definition finalize
              (CHUNK : Value.t)
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self CHUNK F in
            match ε, τ, α with
            | [], [ impl_HasherChip_CHUNK__F_ ], [ self; initial_tree; final_memory; hasher ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                          [ CHUNK ]
                          [ F ]
                      ],
                    self
                  |) in
                let initial_tree :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                          [ CHUNK ]
                          [ F ]
                      ],
                    initial_tree
                  |) in
                let final_memory :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          []
                          [
                            Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                            Ty.apply (Ty.path "array") [ CHUNK ] [ F ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ],
                    final_memory
                  |) in
                let hasher :=
                  M.alloc (|
                    Ty.apply (Ty.path "&mut") [] [ impl_HasherChip_CHUNK__F_ ],
                    hasher
                  |) in
                M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  UnOp.not (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::merkle::FinalState")
                                              [ CHUNK ]
                                              [ F ]
                                          ],
                                        "is_none",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::system::memory::merkle::MemoryMerkleChip",
                                            "final_state"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (|
                              M.call_closure (|
                                Ty.path "never",
                                M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                [
                                  M.call_closure (|
                                    Ty.path "core::fmt::Arguments",
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::Arguments",
                                      "new_const",
                                      [ Value.Integer IntegerKind.Usize 1 ],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 1 ]
                                                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                              Value.Array
                                                [ mk_str (| "Merkle chip already finalized" |) ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  M.call_closure (|
                                    Ty.path "bool",
                                    BinOp.eq,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "std::collections::hash::set::HashSet")
                                            []
                                            [
                                              Ty.tuple
                                                [ Ty.path "usize"; Ty.path "u32"; Ty.path "u32" ];
                                              Ty.path "rustc_hash::FxBuildHasher"
                                            ],
                                          "len",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::merkle::MemoryMerkleChip",
                                              "touched_nodes"
                                            |)
                                          |)
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.call_closure (|
                                  Ty.tuple [],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                                      [ CHUNK ]
                                      [ F ],
                                    "touch_node",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| self |) |)
                                    |);
                                    Value.Integer IntegerKind.Usize 1;
                                    Value.Integer IntegerKind.U32 0;
                                    Value.Integer IntegerKind.U32 0
                                  ]
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  let~ rows :
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                            [ CHUNK ]
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                            [ CHUNK ]
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                              [ CHUNK ]
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "new",
                        [],
                        []
                      |),
                      []
                    |) in
                  let~ tree_helper :
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::merkle::trace::TreeHelper")
                        [ CHUNK ]
                        [ F ] :=
                    Value.mkStructRecord
                      "openvm_circuit::system::memory::merkle::trace::TreeHelper"
                      [ CHUNK ]
                      [ F ]
                      [
                        ("memory_dimensions",
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::merkle::MemoryMerkleChip",
                                "air"
                              |),
                              "openvm_circuit::system::memory::merkle::air::MemoryMerkleAir",
                              "memory_dimensions"
                            |)
                          |));
                        ("final_memory",
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| final_memory |) |) |));
                        ("touched_nodes",
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::merkle::MemoryMerkleChip",
                                  "touched_nodes"
                                |)
                              |)
                            |)
                          |));
                        ("trace_rows",
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (| M.borrow (| Pointer.Kind.MutRef, rows |) |)
                          |))
                      ] in
                  let~ final_tree :
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                        [ CHUNK ]
                        [ F ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                        [ CHUNK ]
                        [ F ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::merkle::trace::TreeHelper")
                          [ CHUNK ]
                          [ F ],
                        "recur",
                        [],
                        [ impl_HasherChip_CHUNK__F_ ]
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, tree_helper |);
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_associated_function (|
                            Ty.path
                              "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                            "overall_height",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::merkle::MemoryMerkleChip",
                                  "air"
                                |),
                                "openvm_circuit::system::memory::merkle::air::MemoryMerkleAir",
                                "memory_dimensions"
                              |)
                            |)
                          ]
                        |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| initial_tree |) |) |);
                        Value.Integer IntegerKind.U32 0;
                        Value.Integer IntegerKind.U32 0;
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| hasher |) |) |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.write (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::system::memory::merkle::MemoryMerkleChip",
                        "final_state"
                      |),
                      Value.StructTuple
                        "core::option::Option::Some"
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::merkle::FinalState")
                            [ CHUNK ]
                            [ F ]
                        ]
                        [
                          Value.mkStructRecord
                            "openvm_circuit::system::memory::merkle::FinalState"
                            [ CHUNK ]
                            [ F ]
                            [
                              ("rows", M.read (| rows |));
                              ("init_root",
                                M.call_closure (|
                                  Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                      [ CHUNK ]
                                      [ F ],
                                    "hash",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| initial_tree |) |)
                                    |)
                                  ]
                                |));
                              ("final_root",
                                M.call_closure (|
                                  Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                      [ CHUNK ]
                                      [ F ],
                                    "hash",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, final_tree |) ]
                                |))
                            ]
                        ]
                    |) in
                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_finalize :
            forall (CHUNK : Value.t) (F : Ty.t),
            M.IsAssociatedFunction.C (Self CHUNK F) "finalize" (finalize CHUNK F).
          Admitted.
          Global Typeclasses Opaque finalize.
        End Impl_openvm_circuit_system_memory_merkle_MemoryMerkleChip_CHUNK_F.
        
        Module Impl_openvm_stark_backend_chip_Chip_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_field_field_PrimeField32_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val_SC_for_openvm_circuit_system_memory_merkle_MemoryMerkleChip_CHUNK_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val.
          Definition Self (CHUNK : Value.t) (SC : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
              [ CHUNK ]
              [
                Ty.associated_in_trait
                  "p3_commit::domain::PolynomialSpace"
                  []
                  []
                  (Ty.associated_in_trait
                    "p3_commit::pcs::Pcs"
                    []
                    [
                      Ty.associated_in_trait
                        "openvm_stark_backend::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Challenge";
                      Ty.associated_in_trait
                        "openvm_stark_backend::config::StarkGenericConfig"
                        []
                        []
                        SC
                        "Challenger"
                    ]
                    (Ty.associated_in_trait
                      "openvm_stark_backend::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Pcs")
                    "Domain")
                  "Val"
              ].
          
          (*
              fn air(&self) -> AirRef<SC> {
                  Arc::new(self.air.clone())
              }
          *)
          Definition air
              (CHUNK : Value.t)
              (SC : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self CHUNK SC in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                          [ CHUNK ]
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val"
                          ]
                      ],
                    self
                  |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ])
                    (Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ]),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::merkle::air::MemoryMerkleAir")
                              [ CHUNK ]
                              [];
                            Ty.path "alloc::alloc::Global"
                          ])
                        (Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                            Ty.path "alloc::alloc::Global"
                          ]),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::merkle::air::MemoryMerkleAir")
                                [ CHUNK ]
                                [];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::merkle::air::MemoryMerkleAir")
                                  [ CHUNK ]
                                  [];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::merkle::air::MemoryMerkleAir")
                                [ CHUNK ]
                                [],
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::merkle::air::MemoryMerkleAir")
                                  [ CHUNK ]
                                  [],
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::system::memory::merkle::MemoryMerkleChip",
                                    "air"
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          (*
              fn generate_air_proof_input(self) -> AirProofInput<SC> {
                  assert!(
                      self.final_state.is_some(),
                      "Merkle chip must finalize before trace generation"
                  );
                  let FinalState {
                      mut rows,
                      init_root,
                      final_root,
                  } = self.final_state.unwrap();
                  // important that this sort be stable,
                  // because we need the initial root to be first and the final root to be second
                  rows.sort_by_key(|row| Reverse(row.parent_height));
          
                  let width = MemoryMerkleCols::<Val<SC>, CHUNK>::width();
                  let mut height = rows.len().next_power_of_two();
                  if let Some(mut oh) = self.overridden_height {
                      oh = oh.next_power_of_two();
                      assert!(
                          oh >= height,
                          "Overridden height {oh} is less than the required height {height}"
                      );
                      height = oh;
                  }
                  let mut trace = Val::<SC>::zero_vec(width * height);
          
                  for (trace_row, row) in trace.chunks_exact_mut(width).zip(rows) {
                      *trace_row.borrow_mut() = row;
                  }
          
                  let trace = RowMajorMatrix::new(trace, width);
                  let pvs = init_root.into_iter().chain(final_root).collect();
                  AirProofInput::simple(trace, pvs)
              }
          *)
          Definition generate_air_proof_input
              (CHUNK : Value.t)
              (SC : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self CHUNK SC in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                      [ CHUNK ]
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val"
                      ],
                    self
                  |) in
                M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  UnOp.not (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::merkle::FinalState")
                                              [ CHUNK ]
                                              [
                                                Ty.associated_in_trait
                                                  "p3_commit::domain::PolynomialSpace"
                                                  []
                                                  []
                                                  (Ty.associated_in_trait
                                                    "p3_commit::pcs::Pcs"
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenge";
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenger"
                                                    ]
                                                    (Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Pcs")
                                                    "Domain")
                                                  "Val"
                                              ]
                                          ],
                                        "is_some",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            self,
                                            "openvm_circuit::system::memory::merkle::MemoryMerkleChip",
                                            "final_state"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (|
                              M.call_closure (|
                                Ty.path "never",
                                M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                [
                                  M.call_closure (|
                                    Ty.path "core::fmt::Arguments",
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::Arguments",
                                      "new_const",
                                      [ Value.Integer IntegerKind.Usize 1 ],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 1 ]
                                                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                              Value.Array
                                                [
                                                  mk_str (|
                                                    "Merkle chip must finalize before trace generation"
                                                  |)
                                                ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                        []
                        [ SC ],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::merkle::FinalState")
                          [ CHUNK ]
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val"
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::merkle::FinalState")
                            [ CHUNK ]
                            [
                              Ty.associated_in_trait
                                "p3_commit::domain::PolynomialSpace"
                                []
                                []
                                (Ty.associated_in_trait
                                  "p3_commit::pcs::Pcs"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Pcs")
                                  "Domain")
                                "Val"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::memory::merkle::FinalState")
                                  [ CHUNK ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val"
                                  ]
                              ],
                            "unwrap",
                            [],
                            []
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                self,
                                "openvm_circuit::system::memory::merkle::MemoryMerkleChip",
                                "final_state"
                              |)
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_circuit::system::memory::merkle::FinalState",
                                "rows"
                              |) in
                            let γ0_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_circuit::system::memory::merkle::FinalState",
                                "init_root"
                              |) in
                            let γ0_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_circuit::system::memory::merkle::FinalState",
                                "final_root"
                              |) in
                            let rows :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                                      [ CHUNK ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val"
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                γ0_0
                              |) in
                            let init_root :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "array")
                                  [ CHUNK ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val"
                                  ],
                                γ0_1
                              |) in
                            let final_root :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "array")
                                  [ CHUNK ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val"
                                  ],
                                γ0_2
                              |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.call_closure (|
                                  Ty.tuple [],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                                          [ CHUNK ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val"
                                          ]
                                      ],
                                    "sort_by_key",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::cmp::Reverse")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val"
                                        ];
                                      Ty.function
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                                                [ CHUNK ]
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_commit::domain::PolynomialSpace"
                                                    []
                                                    []
                                                    (Ty.associated_in_trait
                                                      "p3_commit::pcs::Pcs"
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenge";
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenger"
                                                      ]
                                                      (Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Pcs")
                                                      "Domain")
                                                    "Val"
                                                ]
                                            ]
                                        ]
                                        (Ty.apply
                                          (Ty.path "core::cmp::Reverse")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val"
                                          ])
                                    ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                                                    [ CHUNK ]
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_commit::domain::PolynomialSpace"
                                                        []
                                                        []
                                                        (Ty.associated_in_trait
                                                          "p3_commit::pcs::Pcs"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenge";
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenger"
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Pcs")
                                                          "Domain")
                                                        "Val"
                                                    ]
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::deref::DerefMut",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                                                  [ CHUNK ]
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_commit::domain::PolynomialSpace"
                                                      []
                                                      []
                                                      (Ty.associated_in_trait
                                                        "p3_commit::pcs::Pcs"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenge";
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenger"
                                                        ]
                                                        (Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Pcs")
                                                        "Domain")
                                                      "Val"
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [],
                                            "deref_mut",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.MutRef, rows |) ]
                                        |)
                                      |)
                                    |);
                                    M.closure
                                      (fun γ =>
                                        ltac:(M.monadic
                                          match γ with
                                          | [ α0 ] =>
                                            ltac:(M.monadic
                                              (M.match_operator (|
                                                Ty.apply
                                                  (Ty.path "core::cmp::Reverse")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_commit::domain::PolynomialSpace"
                                                      []
                                                      []
                                                      (Ty.associated_in_trait
                                                        "p3_commit::pcs::Pcs"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenge";
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenger"
                                                        ]
                                                        (Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Pcs")
                                                        "Domain")
                                                      "Val"
                                                  ],
                                                M.alloc (|
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                                                        [ CHUNK ]
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_commit::domain::PolynomialSpace"
                                                            []
                                                            []
                                                            (Ty.associated_in_trait
                                                              "p3_commit::pcs::Pcs"
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenge";
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenger"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Pcs")
                                                              "Domain")
                                                            "Val"
                                                        ]
                                                    ],
                                                  α0
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let row :=
                                                        M.copy (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                                                                [ CHUNK ]
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::domain::PolynomialSpace"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "p3_commit::pcs::Pcs"
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenger"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Pcs")
                                                                      "Domain")
                                                                    "Val"
                                                                ]
                                                            ],
                                                          γ
                                                        |) in
                                                      Value.StructTuple
                                                        "core::cmp::Reverse"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_commit::domain::PolynomialSpace"
                                                            []
                                                            []
                                                            (Ty.associated_in_trait
                                                              "p3_commit::pcs::Pcs"
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenge";
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenger"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Pcs")
                                                              "Domain")
                                                            "Val"
                                                        ]
                                                        [
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (| M.read (| row |) |),
                                                              "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols",
                                                              "parent_height"
                                                            |)
                                                          |)
                                                        ]))
                                                ]
                                              |)))
                                          | _ => M.impossible "wrong number of arguments"
                                          end))
                                  ]
                                |) in
                              let~ width : Ty.path "usize" :=
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                                      [ CHUNK ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val"
                                      ],
                                    "width",
                                    [],
                                    []
                                  |),
                                  []
                                |) in
                              let~ height : Ty.path "usize" :=
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.path "usize",
                                    "next_power_of_two",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                                              [ CHUNK ]
                                              [
                                                Ty.associated_in_trait
                                                  "p3_commit::domain::PolynomialSpace"
                                                  []
                                                  []
                                                  (Ty.associated_in_trait
                                                    "p3_commit::pcs::Pcs"
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenge";
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenger"
                                                    ]
                                                    (Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Pcs")
                                                    "Domain")
                                                  "Val"
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        "len",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, rows |) ]
                                    |)
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.SubPointer.get_struct_record_field (|
                                            self,
                                            "openvm_circuit::system::memory::merkle::MemoryMerkleChip",
                                            "overridden_height"
                                          |) in
                                        let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::option::Option::Some",
                                            0
                                          |) in
                                        let oh := M.copy (| Ty.path "usize", γ0_0 |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.write (|
                                              oh,
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_associated_function (|
                                                  Ty.path "usize",
                                                  "next_power_of_two",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| oh |) ]
                                              |)
                                            |) in
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.ge,
                                                              [ M.read (| oh |); M.read (| height |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.never_to_any (|
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::panic_fmt",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::Arguments",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::Arguments",
                                                              "new_v1",
                                                              [
                                                                Value.Integer IntegerKind.Usize 2;
                                                                Value.Integer IntegerKind.Usize 2
                                                              ],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            2
                                                                        ]
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Ty.path "str" ]
                                                                        ],
                                                                      Value.Array
                                                                        [
                                                                          mk_str (|
                                                                            "Overridden height "
                                                                          |);
                                                                          mk_str (|
                                                                            " is less than the required height "
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            2
                                                                        ]
                                                                        [
                                                                          Ty.path
                                                                            "core::fmt::rt::Argument"
                                                                        ],
                                                                      Value.Array
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path
                                                                              "core::fmt::rt::Argument",
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "core::fmt::rt::Argument",
                                                                              "new_display",
                                                                              [],
                                                                              [ Ty.path "usize" ]
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    oh
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |);
                                                                          M.call_closure (|
                                                                            Ty.path
                                                                              "core::fmt::rt::Argument",
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "core::fmt::rt::Argument",
                                                                              "new_display",
                                                                              [],
                                                                              [ Ty.path "usize" ]
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    height
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |) in
                                          let~ _ : Ty.tuple [] :=
                                            M.write (| height, M.read (| oh |) |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              let~ trace :
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val";
                                      Ty.path "alloc::alloc::Global"
                                    ] :=
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  M.get_trait_method (|
                                    "p3_field::field::FieldAlgebra",
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val",
                                    [],
                                    [],
                                    "zero_vec",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.mul,
                                      [ M.read (| width |); M.read (| height |) ]
                                    |)
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.read (|
                                  M.use
                                    (M.alloc (|
                                      Ty.tuple [],
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::zip::Zip")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::ChunksExactMut")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_commit::domain::PolynomialSpace"
                                                    []
                                                    []
                                                    (Ty.associated_in_trait
                                                      "p3_commit::pcs::Pcs"
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenge";
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenger"
                                                      ]
                                                      (Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Pcs")
                                                      "Domain")
                                                    "Val"
                                                ];
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                                                    [ CHUNK ]
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_commit::domain::PolynomialSpace"
                                                        []
                                                        []
                                                        (Ty.associated_in_trait
                                                          "p3_commit::pcs::Pcs"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenge";
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenger"
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Pcs")
                                                          "Domain")
                                                        "Val"
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::zip::Zip")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::ChunksExactMut")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_commit::domain::PolynomialSpace"
                                                      []
                                                      []
                                                      (Ty.associated_in_trait
                                                        "p3_commit::pcs::Pcs"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenge";
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenger"
                                                        ]
                                                        (Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Pcs")
                                                        "Domain")
                                                      "Val"
                                                  ];
                                                Ty.apply
                                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                                                      [ CHUNK ]
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::domain::PolynomialSpace"
                                                          []
                                                          []
                                                          (Ty.associated_in_trait
                                                            "p3_commit::pcs::Pcs"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenge";
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenger"
                                                            ]
                                                            (Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Pcs")
                                                            "Domain")
                                                          "Val"
                                                      ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ],
                                            M.get_trait_method (|
                                              "core::iter::traits::collect::IntoIterator",
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::zip::Zip")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::ChunksExactMut")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_commit::domain::PolynomialSpace"
                                                        []
                                                        []
                                                        (Ty.associated_in_trait
                                                          "p3_commit::pcs::Pcs"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenge";
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenger"
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Pcs")
                                                          "Domain")
                                                        "Val"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::into_iter::IntoIter")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                                                        [ CHUNK ]
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_commit::domain::PolynomialSpace"
                                                            []
                                                            []
                                                            (Ty.associated_in_trait
                                                              "p3_commit::pcs::Pcs"
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenge";
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenger"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Pcs")
                                                              "Domain")
                                                            "Val"
                                                        ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ]
                                                ],
                                              [],
                                              [],
                                              "into_iter",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::iter::adapters::zip::Zip")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::ChunksExactMut")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::domain::PolynomialSpace"
                                                          []
                                                          []
                                                          (Ty.associated_in_trait
                                                            "p3_commit::pcs::Pcs"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenge";
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenger"
                                                            ]
                                                            (Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Pcs")
                                                            "Domain")
                                                          "Val"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                                                          [ CHUNK ]
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_commit::domain::PolynomialSpace"
                                                              []
                                                              []
                                                              (Ty.associated_in_trait
                                                                "p3_commit::pcs::Pcs"
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenge";
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenger"
                                                                ]
                                                                (Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Pcs")
                                                                "Domain")
                                                              "Val"
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::iter::traits::iterator::Iterator",
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::ChunksExactMut")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_commit::domain::PolynomialSpace"
                                                        []
                                                        []
                                                        (Ty.associated_in_trait
                                                          "p3_commit::pcs::Pcs"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenge";
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenger"
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Pcs")
                                                          "Domain")
                                                        "Val"
                                                    ],
                                                  [],
                                                  [],
                                                  "zip",
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                                                          [ CHUNK ]
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_commit::domain::PolynomialSpace"
                                                              []
                                                              []
                                                              (Ty.associated_in_trait
                                                                "p3_commit::pcs::Pcs"
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenge";
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenger"
                                                                ]
                                                                (Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Pcs")
                                                                "Domain")
                                                              "Val"
                                                          ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ]
                                                  ]
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::ChunksExactMut")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::domain::PolynomialSpace"
                                                          []
                                                          []
                                                          (Ty.associated_in_trait
                                                            "p3_commit::pcs::Pcs"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenge";
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenger"
                                                            ]
                                                            (Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Pcs")
                                                            "Domain")
                                                          "Val"
                                                      ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "slice")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_commit::domain::PolynomialSpace"
                                                            []
                                                            []
                                                            (Ty.associated_in_trait
                                                              "p3_commit::pcs::Pcs"
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenge";
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenger"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Pcs")
                                                              "Domain")
                                                            "Val"
                                                        ],
                                                      "chunks_exact_mut",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::domain::PolynomialSpace"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain")
                                                                      "Val"
                                                                  ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::ops::deref::DerefMut",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::domain::PolynomialSpace"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "p3_commit::pcs::Pcs"
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenger"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Pcs")
                                                                      "Domain")
                                                                    "Val";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [],
                                                              [],
                                                              "deref_mut",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                trace
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |);
                                                      M.read (| width |)
                                                    ]
                                                  |);
                                                  M.read (| rows |)
                                                ]
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let iter :=
                                                M.copy (|
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::zip::Zip")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::slice::iter::ChunksExactMut")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_commit::domain::PolynomialSpace"
                                                            []
                                                            []
                                                            (Ty.associated_in_trait
                                                              "p3_commit::pcs::Pcs"
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenge";
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenger"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Pcs")
                                                              "Domain")
                                                            "Val"
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::into_iter::IntoIter")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                                                            [ CHUNK ]
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_commit::domain::PolynomialSpace"
                                                                []
                                                                []
                                                                (Ty.associated_in_trait
                                                                  "p3_commit::pcs::Pcs"
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenge";
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenger"
                                                                  ]
                                                                  (Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Pcs")
                                                                  "Domain")
                                                                "Val"
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ]
                                                    ],
                                                  γ
                                                |) in
                                              M.read (|
                                                M.loop (|
                                                  Ty.tuple [],
                                                  ltac:(M.monadic
                                                    (let~ _ : Ty.tuple [] :=
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_commit::domain::PolynomialSpace"
                                                                            []
                                                                            []
                                                                            (Ty.associated_in_trait
                                                                              "p3_commit::pcs::Pcs"
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenge";
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenger"
                                                                              ]
                                                                              (Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Pcs")
                                                                              "Domain")
                                                                            "Val"
                                                                        ]
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                                                                    [ CHUNK ]
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_commit::domain::PolynomialSpace"
                                                                        []
                                                                        []
                                                                        (Ty.associated_in_trait
                                                                          "p3_commit::pcs::Pcs"
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenge";
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenger"
                                                                          ]
                                                                          (Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Pcs")
                                                                          "Domain")
                                                                        "Val"
                                                                    ]
                                                                ]
                                                            ],
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "&mut")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_commit::domain::PolynomialSpace"
                                                                              []
                                                                              []
                                                                              (Ty.associated_in_trait
                                                                                "p3_commit::pcs::Pcs"
                                                                                []
                                                                                [
                                                                                  Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Challenge";
                                                                                  Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Challenger"
                                                                                ]
                                                                                (Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Pcs")
                                                                                "Domain")
                                                                              "Val"
                                                                          ]
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                                                                      [ CHUNK ]
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_commit::domain::PolynomialSpace"
                                                                          []
                                                                          []
                                                                          (Ty.associated_in_trait
                                                                            "p3_commit::pcs::Pcs"
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Challenge";
                                                                              Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Challenger"
                                                                            ]
                                                                            (Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Pcs")
                                                                            "Domain")
                                                                          "Val"
                                                                      ]
                                                                  ]
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::iter::traits::iterator::Iterator",
                                                              Ty.apply
                                                                (Ty.path
                                                                  "core::iter::adapters::zip::Zip")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "core::slice::iter::ChunksExactMut")
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_commit::domain::PolynomialSpace"
                                                                        []
                                                                        []
                                                                        (Ty.associated_in_trait
                                                                          "p3_commit::pcs::Pcs"
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenge";
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenger"
                                                                          ]
                                                                          (Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Pcs")
                                                                          "Domain")
                                                                        "Val"
                                                                    ];
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "alloc::vec::into_iter::IntoIter")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                                                                        [ CHUNK ]
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_commit::domain::PolynomialSpace"
                                                                            []
                                                                            []
                                                                            (Ty.associated_in_trait
                                                                              "p3_commit::pcs::Pcs"
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenge";
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenger"
                                                                              ]
                                                                              (Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Pcs")
                                                                              "Domain")
                                                                            "Val"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ],
                                                              [],
                                                              [],
                                                              "next",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.MutRef,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.MutRef,
                                                                    iter
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let _ :=
                                                                M.is_struct_tuple (|
                                                                  γ,
                                                                  "core::option::Option::None"
                                                                |) in
                                                              M.never_to_any (|
                                                                M.read (| M.break (||) |)
                                                              |)));
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_struct_tuple_field (|
                                                                  γ,
                                                                  "core::option::Option::Some",
                                                                  0
                                                                |) in
                                                              let γ1_0 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ0_0,
                                                                  0
                                                                |) in
                                                              let γ1_1 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ0_0,
                                                                  1
                                                                |) in
                                                              let trace_row :=
                                                                M.copy (|
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_commit::domain::PolynomialSpace"
                                                                            []
                                                                            []
                                                                            (Ty.associated_in_trait
                                                                              "p3_commit::pcs::Pcs"
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenge";
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenger"
                                                                              ]
                                                                              (Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Pcs")
                                                                              "Domain")
                                                                            "Val"
                                                                        ]
                                                                    ],
                                                                  γ1_0
                                                                |) in
                                                              let row :=
                                                                M.copy (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                                                                    [ CHUNK ]
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_commit::domain::PolynomialSpace"
                                                                        []
                                                                        []
                                                                        (Ty.associated_in_trait
                                                                          "p3_commit::pcs::Pcs"
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenge";
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenger"
                                                                          ]
                                                                          (Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Pcs")
                                                                          "Domain")
                                                                        "Val"
                                                                    ],
                                                                  γ1_1
                                                                |) in
                                                              M.read (|
                                                                let~ _ : Ty.tuple [] :=
                                                                  M.write (|
                                                                    M.deref (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&mut")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                                                                              [ CHUNK ]
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                  []
                                                                                  []
                                                                                  (Ty.associated_in_trait
                                                                                    "p3_commit::pcs::Pcs"
                                                                                    []
                                                                                    [
                                                                                      Ty.associated_in_trait
                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                        []
                                                                                        []
                                                                                        SC
                                                                                        "Challenge";
                                                                                      Ty.associated_in_trait
                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                        []
                                                                                        []
                                                                                        SC
                                                                                        "Challenger"
                                                                                    ]
                                                                                    (Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Pcs")
                                                                                    "Domain")
                                                                                  "Val"
                                                                              ]
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "core::borrow::BorrowMut",
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_commit::domain::PolynomialSpace"
                                                                                []
                                                                                []
                                                                                (Ty.associated_in_trait
                                                                                  "p3_commit::pcs::Pcs"
                                                                                  []
                                                                                  [
                                                                                    Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Challenge";
                                                                                    Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Challenger"
                                                                                  ]
                                                                                  (Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Pcs")
                                                                                  "Domain")
                                                                                "Val"
                                                                            ],
                                                                          [],
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                                                                              [ CHUNK ]
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                  []
                                                                                  []
                                                                                  (Ty.associated_in_trait
                                                                                    "p3_commit::pcs::Pcs"
                                                                                    []
                                                                                    [
                                                                                      Ty.associated_in_trait
                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                        []
                                                                                        []
                                                                                        SC
                                                                                        "Challenge";
                                                                                      Ty.associated_in_trait
                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                        []
                                                                                        []
                                                                                        SC
                                                                                        "Challenger"
                                                                                    ]
                                                                                    (Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Pcs")
                                                                                    "Domain")
                                                                                  "Val"
                                                                              ]
                                                                          ],
                                                                          "borrow_mut",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.MutRef,
                                                                            M.deref (|
                                                                              M.read (| trace_row |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |),
                                                                    M.read (| row |)
                                                                  |) in
                                                                M.alloc (|
                                                                  Ty.tuple [],
                                                                  Value.Tuple []
                                                                |)
                                                              |)))
                                                        ]
                                                      |) in
                                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                                |)
                                              |)))
                                        ]
                                      |)
                                    |))
                                |) in
                              let~ trace :
                                  Ty.apply
                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val";
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val";
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ] :=
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "p3_matrix::dense::DenseMatrix")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val";
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val";
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "p3_matrix::dense::DenseMatrix")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val";
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val";
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ],
                                    "new",
                                    [],
                                    []
                                  |),
                                  [ M.read (| trace |); M.read (| width |) ]
                                |) in
                              let~ pvs :
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val";
                                      Ty.path "alloc::alloc::Global"
                                    ] :=
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::chain::Chain")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::array::iter::IntoIter")
                                          [ CHUNK ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val"
                                          ];
                                        Ty.apply
                                          (Ty.path "core::array::iter::IntoIter")
                                          [ CHUNK ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val"
                                          ]
                                      ],
                                    [],
                                    [],
                                    "collect",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val";
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::chain::Chain")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::array::iter::IntoIter")
                                            [ CHUNK ]
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::domain::PolynomialSpace"
                                                []
                                                []
                                                (Ty.associated_in_trait
                                                  "p3_commit::pcs::Pcs"
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenge";
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenger"
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Pcs")
                                                  "Domain")
                                                "Val"
                                            ];
                                          Ty.apply
                                            (Ty.path "core::array::iter::IntoIter")
                                            [ CHUNK ]
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::domain::PolynomialSpace"
                                                []
                                                []
                                                (Ty.associated_in_trait
                                                  "p3_commit::pcs::Pcs"
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenge";
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenger"
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Pcs")
                                                  "Domain")
                                                "Val"
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path "core::array::iter::IntoIter")
                                          [ CHUNK ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val"
                                          ],
                                        [],
                                        [],
                                        "chain",
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ CHUNK ]
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::domain::PolynomialSpace"
                                                []
                                                []
                                                (Ty.associated_in_trait
                                                  "p3_commit::pcs::Pcs"
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenge";
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenger"
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Pcs")
                                                  "Domain")
                                                "Val"
                                            ]
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::array::iter::IntoIter")
                                            [ CHUNK ]
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::domain::PolynomialSpace"
                                                []
                                                []
                                                (Ty.associated_in_trait
                                                  "p3_commit::pcs::Pcs"
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenge";
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenger"
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Pcs")
                                                  "Domain")
                                                "Val"
                                            ],
                                          M.get_trait_method (|
                                            "core::iter::traits::collect::IntoIterator",
                                            Ty.apply
                                              (Ty.path "array")
                                              [ CHUNK ]
                                              [
                                                Ty.associated_in_trait
                                                  "p3_commit::domain::PolynomialSpace"
                                                  []
                                                  []
                                                  (Ty.associated_in_trait
                                                    "p3_commit::pcs::Pcs"
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenge";
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenger"
                                                    ]
                                                    (Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Pcs")
                                                    "Domain")
                                                  "Val"
                                              ],
                                            [],
                                            [],
                                            "into_iter",
                                            [],
                                            []
                                          |),
                                          [ M.read (| init_root |) ]
                                        |);
                                        M.read (| final_root |)
                                      ]
                                    |)
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                                  []
                                  [ SC ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                                    []
                                    [ SC ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                                      []
                                      [ SC ],
                                    "simple",
                                    [],
                                    []
                                  |),
                                  [ M.read (| trace |); M.read (| pvs |) ]
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (CHUNK : Value.t) (SC : Ty.t),
            M.IsTraitInstance
              "openvm_stark_backend::chip::Chip"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) [ SC ]
              (Self CHUNK SC)
              (* Instance *)
              [
                ("air", InstanceField.Method (air CHUNK SC));
                ("generate_air_proof_input",
                  InstanceField.Method (generate_air_proof_input CHUNK SC))
              ].
        End Impl_openvm_stark_backend_chip_Chip_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_field_field_PrimeField32_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val_SC_for_openvm_circuit_system_memory_merkle_MemoryMerkleChip_CHUNK_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val.
        
        Module Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_circuit_system_memory_merkle_MemoryMerkleChip_CHUNK_F.
          Definition Self (CHUNK : Value.t) (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
              [ CHUNK ]
              [ F ].
          
          (*
              fn air_name(&self) -> String {
                  "Merkle".to_string()
              }
          *)
          Definition air_name
              (CHUNK : Value.t)
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self CHUNK F in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                          [ CHUNK ]
                          [ F ]
                      ],
                    self
                  |) in
                M.call_closure (|
                  Ty.path "alloc::string::String",
                  M.get_trait_method (|
                    "alloc::string::ToString",
                    Ty.path "str",
                    [],
                    [],
                    "to_string",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Merkle" |) |) |) ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          (*
              fn current_trace_height(&self) -> usize {
                  2 * self.num_touched_nonleaves
              }
          *)
          Definition current_trace_height
              (CHUNK : Value.t)
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self CHUNK F in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                          [ CHUNK ]
                          [ F ]
                      ],
                    self
                  |) in
                M.call_closure (|
                  Ty.path "usize",
                  BinOp.Wrap.mul,
                  [
                    Value.Integer IntegerKind.Usize 2;
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::system::memory::merkle::MemoryMerkleChip",
                        "num_touched_nonleaves"
                      |)
                    |)
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          (*
              fn trace_width(&self) -> usize {
                  MemoryMerkleCols::<F, CHUNK>::width()
              }
          *)
          Definition trace_width
              (CHUNK : Value.t)
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self CHUNK F in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::merkle::MemoryMerkleChip")
                          [ CHUNK ]
                          [ F ]
                      ],
                    self
                  |) in
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                      [ CHUNK ]
                      [ F ],
                    "width",
                    [],
                    []
                  |),
                  []
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (CHUNK : Value.t) (F : Ty.t),
            M.IsTraitInstance
              "openvm_stark_backend::chip::ChipUsageGetter"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self CHUNK F)
              (* Instance *)
              [
                ("air_name", InstanceField.Method (air_name CHUNK F));
                ("current_trace_height", InstanceField.Method (current_trace_height CHUNK F));
                ("trace_width", InstanceField.Method (trace_width CHUNK F))
              ].
        End Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_circuit_system_memory_merkle_MemoryMerkleChip_CHUNK_F.
        
        (* StructRecord
          {
            name := "TreeHelper";
            const_params := [ "CHUNK" ];
            ty_params := [ "F" ];
            fields :=
              [
                ("memory_dimensions",
                  Ty.path
                    "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions");
                ("final_memory",
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        []
                        [
                          Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                          Ty.apply (Ty.path "array") [ CHUNK ] [ F ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ]);
                ("touched_nodes",
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "std::collections::hash::set::HashSet")
                        []
                        [
                          Ty.tuple [ Ty.path "usize"; Ty.path "u32"; Ty.path "u32" ];
                          Ty.path "rustc_hash::FxBuildHasher"
                        ]
                    ]);
                ("trace_rows",
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                            [ CHUNK ]
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ])
              ];
          } *)
        
        Module Impl_openvm_circuit_system_memory_merkle_trace_TreeHelper_CHUNK_F.
          Definition Self (CHUNK : Value.t) (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::system::memory::merkle::trace::TreeHelper")
              [ CHUNK ]
              [ F ].
          
          (*
              fn recur(
                  &mut self,
                  height: usize,
                  initial_node: &MemoryNode<CHUNK, F>,
                  as_label: u32,
                  address_label: u32,
                  hasher: &mut impl HasherChip<CHUNK, F>,
              ) -> MemoryNode<CHUNK, F> {
                  if height == 0 {
                      let address_space = as_label + self.memory_dimensions.as_offset;
                      let leaf_values = *self
                          .final_memory
                          .get(&(address_space, address_label))
                          .unwrap_or(&[F::ZERO; CHUNK]);
                      MemoryNode::new_leaf(hasher.hash(&leaf_values))
                  } else if let NonLeaf {
                      left: initial_left_node,
                      right: initial_right_node,
                      ..
                  } = initial_node.clone()
                  {
                      // Tell the hasher about this hash.
                      hasher.compress_and_record(&initial_left_node.hash(), &initial_right_node.hash());
          
                      let is_as_section = height > self.memory_dimensions.address_height;
          
                      let (left_as_label, right_as_label) = if is_as_section {
                          (2 * as_label, 2 * as_label + 1)
                      } else {
                          (as_label, as_label)
                      };
                      let (left_address_label, right_address_label) = if is_as_section {
                          (address_label, address_label)
                      } else {
                          (2 * address_label, 2 * address_label + 1)
                      };
          
                      let left_is_final =
                          !self
                              .touched_nodes
                              .contains(&(height - 1, left_as_label, left_address_label));
          
                      let final_left_node = if left_is_final {
                          initial_left_node
                      } else {
                          Arc::new(self.recur(
                              height - 1,
                              &initial_left_node,
                              left_as_label,
                              left_address_label,
                              hasher,
                          ))
                      };
          
                      let right_is_final =
                          !self
                              .touched_nodes
                              .contains(&(height - 1, right_as_label, right_address_label));
          
                      let final_right_node = if right_is_final {
                          initial_right_node
                      } else {
                          Arc::new(self.recur(
                              height - 1,
                              &initial_right_node,
                              right_as_label,
                              right_address_label,
                              hasher,
                          ))
                      };
          
                      let final_node = MemoryNode::new_nonleaf(final_left_node, final_right_node, hasher);
                      self.add_trace_row(height, as_label, address_label, initial_node, None);
                      self.add_trace_row(
                          height,
                          as_label,
                          address_label,
                          &final_node,
                          Some([left_is_final, right_is_final]),
                      );
                      final_node
                  } else {
                      panic!("Leaf {:?} found at nonzero height {}", initial_node, height);
                  }
              }
          *)
          Definition recur
              (CHUNK : Value.t)
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self CHUNK F in
            match ε, τ, α with
            | [],
                [ impl_HasherChip_CHUNK__F_ ],
                [ self; height; initial_node; as_label; address_label; hasher ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::merkle::trace::TreeHelper")
                          [ CHUNK ]
                          [ F ]
                      ],
                    self
                  |) in
                let height := M.alloc (| Ty.path "usize", height |) in
                let initial_node :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                          [ CHUNK ]
                          [ F ]
                      ],
                    initial_node
                  |) in
                let as_label := M.alloc (| Ty.path "u32", as_label |) in
                let address_label := M.alloc (| Ty.path "u32", address_label |) in
                let hasher :=
                  M.alloc (|
                    Ty.apply (Ty.path "&mut") [] [ impl_HasherChip_CHUNK__F_ ],
                    hasher
                  |) in
                M.match_operator (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                    [ CHUNK ]
                    [ F ],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.use
                            (M.alloc (|
                              Ty.path "bool",
                              M.call_closure (|
                                Ty.path "bool",
                                BinOp.eq,
                                [ M.read (| height |); Value.Integer IntegerKind.Usize 0 ]
                              |)
                            |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ address_space : Ty.path "u32" :=
                            M.call_closure (|
                              Ty.path "u32",
                              BinOp.Wrap.add,
                              [
                                M.read (| as_label |);
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::system::memory::merkle::trace::TreeHelper",
                                      "memory_dimensions"
                                    |),
                                    "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                                    "as_offset"
                                  |)
                                |)
                              ]
                            |) in
                          let~ leaf_values : Ty.apply (Ty.path "array") [ CHUNK ] [ F ] :=
                            M.read (|
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ]
                                      ],
                                    "unwrap_or",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ]
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                                          []
                                          [
                                            Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                            Ty.apply (Ty.path "array") [ CHUNK ] [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        "get",
                                        [],
                                        [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "openvm_circuit::system::memory::merkle::trace::TreeHelper",
                                                "final_memory"
                                              |)
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.tuple [ Ty.path "u32"; Ty.path "u32" ],
                                                Value.Tuple
                                                  [
                                                    M.read (| address_space |);
                                                    M.read (| address_label |)
                                                  ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                            lib.repeat (|
                                              M.read (|
                                                get_constant (|
                                                  "p3_field::field::FieldAlgebra::ZERO",
                                                  F
                                                |)
                                              |),
                                              CHUNK
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |) in
                          M.alloc (|
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                              [ CHUNK ]
                              [ F ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                [ CHUNK ]
                                [ F ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                  [ CHUNK ]
                                  [ F ],
                                "new_leaf",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                  M.get_trait_method (|
                                    "openvm_circuit::arch::hasher::Hasher",
                                    impl_HasherChip_CHUNK__F_,
                                    [ CHUNK ],
                                    [ F ],
                                    "hash",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| hasher |) |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.borrow (| Pointer.Kind.Ref, leaf_values |) |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |)
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                            [ CHUNK ]
                            [ F ],
                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                      [ CHUNK ]
                                      [ F ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                        [ CHUNK ]
                                        [ F ],
                                      M.get_trait_method (|
                                        "core::clone::Clone",
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::tree::MemoryNode")
                                          [ CHUNK ]
                                          [ F ],
                                        [],
                                        [],
                                        "clone",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| initial_node |) |)
                                        |)
                                      ]
                                    |)
                                  |) in
                                let γ0_0 :=
                                  M.SubPointer.get_struct_record_field (|
                                    γ,
                                    "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf",
                                    "left"
                                  |) in
                                let γ0_1 :=
                                  M.SubPointer.get_struct_record_field (|
                                    γ,
                                    "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf",
                                    "right"
                                  |) in
                                let initial_left_node :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::tree::MemoryNode")
                                          [ CHUNK ]
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    γ0_0
                                  |) in
                                let initial_right_node :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::tree::MemoryNode")
                                          [ CHUNK ]
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    γ0_1
                                  |) in
                                M.read (|
                                  let~ _ : Ty.apply (Ty.path "array") [ CHUNK ] [ F ] :=
                                    M.call_closure (|
                                      Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                      M.get_trait_method (|
                                        "openvm_circuit::arch::hasher::HasherChip",
                                        impl_HasherChip_CHUNK__F_,
                                        [ CHUNK ],
                                        [ F ],
                                        "compress_and_record",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| hasher |) |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                                M.call_closure (|
                                                  Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::tree::MemoryNode")
                                                      [ CHUNK ]
                                                      [ F ],
                                                    "hash",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::system::memory::tree::MemoryNode")
                                                                [ CHUNK ]
                                                                [ F ]
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.apply
                                                              (Ty.path "alloc::sync::Arc")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit::system::memory::tree::MemoryNode")
                                                                  [ CHUNK ]
                                                                  [ F ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [],
                                                            [],
                                                            "deref",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              initial_left_node
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                                M.call_closure (|
                                                  Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::tree::MemoryNode")
                                                      [ CHUNK ]
                                                      [ F ],
                                                    "hash",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::system::memory::tree::MemoryNode")
                                                                [ CHUNK ]
                                                                [ F ]
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::ops::deref::Deref",
                                                            Ty.apply
                                                              (Ty.path "alloc::sync::Arc")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit::system::memory::tree::MemoryNode")
                                                                  [ CHUNK ]
                                                                  [ F ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [],
                                                            [],
                                                            "deref",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              initial_right_node
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |) in
                                  let~ is_as_section : Ty.path "bool" :=
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.gt,
                                      [
                                        M.read (| height |);
                                        M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::merkle::trace::TreeHelper",
                                              "memory_dimensions"
                                            |),
                                            "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                                            "address_height"
                                          |)
                                        |)
                                      ]
                                    |) in
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                      [ CHUNK ]
                                      [ F ],
                                    M.match_operator (|
                                      Ty.apply
                                        (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                        [ CHUNK ]
                                        [ F ],
                                      M.alloc (|
                                        Ty.tuple [ Ty.path "u32"; Ty.path "u32" ],
                                        M.match_operator (|
                                          Ty.tuple [ Ty.path "u32"; Ty.path "u32" ],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ := M.use is_as_section in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                Value.Tuple
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "u32",
                                                      BinOp.Wrap.mul,
                                                      [
                                                        Value.Integer IntegerKind.U32 2;
                                                        M.read (| as_label |)
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "u32",
                                                      BinOp.Wrap.add,
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "u32",
                                                          BinOp.Wrap.mul,
                                                          [
                                                            Value.Integer IntegerKind.U32 2;
                                                            M.read (| as_label |)
                                                          ]
                                                        |);
                                                        Value.Integer IntegerKind.U32 1
                                                      ]
                                                    |)
                                                  ]));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (Value.Tuple
                                                  [ M.read (| as_label |); M.read (| as_label |) ]))
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_as_label := M.copy (| Ty.path "u32", γ0_0 |) in
                                            let right_as_label :=
                                              M.copy (| Ty.path "u32", γ0_1 |) in
                                            M.match_operator (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::tree::MemoryNode")
                                                [ CHUNK ]
                                                [ F ],
                                              M.alloc (|
                                                Ty.tuple [ Ty.path "u32"; Ty.path "u32" ],
                                                M.match_operator (|
                                                  Ty.tuple [ Ty.path "u32"; Ty.path "u32" ],
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ := M.use is_as_section in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        Value.Tuple
                                                          [
                                                            M.read (| address_label |);
                                                            M.read (| address_label |)
                                                          ]));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (Value.Tuple
                                                          [
                                                            M.call_closure (|
                                                              Ty.path "u32",
                                                              BinOp.Wrap.mul,
                                                              [
                                                                Value.Integer IntegerKind.U32 2;
                                                                M.read (| address_label |)
                                                              ]
                                                            |);
                                                            M.call_closure (|
                                                              Ty.path "u32",
                                                              BinOp.Wrap.add,
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "u32",
                                                                  BinOp.Wrap.mul,
                                                                  [
                                                                    Value.Integer IntegerKind.U32 2;
                                                                    M.read (| address_label |)
                                                                  ]
                                                                |);
                                                                Value.Integer IntegerKind.U32 1
                                                              ]
                                                            |)
                                                          ]))
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let left_address_label :=
                                                      M.copy (| Ty.path "u32", γ0_0 |) in
                                                    let right_address_label :=
                                                      M.copy (| Ty.path "u32", γ0_1 |) in
                                                    M.read (|
                                                      let~ left_is_final : Ty.path "bool" :=
                                                        UnOp.not (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "std::collections::hash::set::HashSet")
                                                                []
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.path "u32";
                                                                      Ty.path "u32"
                                                                    ];
                                                                  Ty.path
                                                                    "rustc_hash::FxBuildHasher"
                                                                ],
                                                              "contains",
                                                              [],
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.path "usize";
                                                                    Ty.path "u32";
                                                                    Ty.path "u32"
                                                                  ]
                                                              ]
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.deref (|
                                                                        M.read (| self |)
                                                                      |),
                                                                      "openvm_circuit::system::memory::merkle::trace::TreeHelper",
                                                                      "touched_nodes"
                                                                    |)
                                                                  |)
                                                                |)
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.path "usize";
                                                                          Ty.path "u32";
                                                                          Ty.path "u32"
                                                                        ],
                                                                      Value.Tuple
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path "usize",
                                                                            BinOp.Wrap.sub,
                                                                            [
                                                                              M.read (| height |);
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                1
                                                                            ]
                                                                          |);
                                                                          M.read (|
                                                                            left_as_label
                                                                          |);
                                                                          M.read (|
                                                                            left_address_label
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |) in
                                                      let~ final_left_node :
                                                          Ty.apply
                                                            (Ty.path "alloc::sync::Arc")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::system::memory::tree::MemoryNode")
                                                                [ CHUNK ]
                                                                [ F ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ] :=
                                                        M.match_operator (|
                                                          Ty.apply
                                                            (Ty.path "alloc::sync::Arc")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::system::memory::tree::MemoryNode")
                                                                [ CHUNK ]
                                                                [ F ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ := M.use left_is_final in
                                                                let _ :=
                                                                  is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                M.read (| initial_left_node |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "alloc::sync::Arc")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_circuit::system::memory::tree::MemoryNode")
                                                                        [ CHUNK ]
                                                                        [ F ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::sync::Arc")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "openvm_circuit::system::memory::tree::MemoryNode")
                                                                          [ CHUNK ]
                                                                          [ F ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "new",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_circuit::system::memory::tree::MemoryNode")
                                                                        [ CHUNK ]
                                                                        [ F ],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "openvm_circuit::system::memory::merkle::trace::TreeHelper")
                                                                          [ CHUNK ]
                                                                          [ F ],
                                                                        "recur",
                                                                        [],
                                                                        [ impl_HasherChip_CHUNK__F_
                                                                        ]
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.MutRef,
                                                                          M.deref (|
                                                                            M.read (| self |)
                                                                          |)
                                                                        |);
                                                                        M.call_closure (|
                                                                          Ty.path "usize",
                                                                          BinOp.Wrap.sub,
                                                                          [
                                                                            M.read (| height |);
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              1
                                                                          ]
                                                                        |);
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "openvm_circuit::system::memory::tree::MemoryNode")
                                                                                    [ CHUNK ]
                                                                                    [ F ]
                                                                                ],
                                                                              M.get_trait_method (|
                                                                                "core::ops::deref::Deref",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::sync::Arc")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "openvm_circuit::system::memory::tree::MemoryNode")
                                                                                      [ CHUNK ]
                                                                                      [ F ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ],
                                                                                [],
                                                                                [],
                                                                                "deref",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      initial_left_node
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        M.read (| left_as_label |);
                                                                        M.read (|
                                                                          left_address_label
                                                                        |);
                                                                        M.borrow (|
                                                                          Pointer.Kind.MutRef,
                                                                          M.deref (|
                                                                            M.read (| hasher |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |) in
                                                      let~ right_is_final : Ty.path "bool" :=
                                                        UnOp.not (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "std::collections::hash::set::HashSet")
                                                                []
                                                                [
                                                                  Ty.tuple
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.path "u32";
                                                                      Ty.path "u32"
                                                                    ];
                                                                  Ty.path
                                                                    "rustc_hash::FxBuildHasher"
                                                                ],
                                                              "contains",
                                                              [],
                                                              [
                                                                Ty.tuple
                                                                  [
                                                                    Ty.path "usize";
                                                                    Ty.path "u32";
                                                                    Ty.path "u32"
                                                                  ]
                                                              ]
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.deref (|
                                                                        M.read (| self |)
                                                                      |),
                                                                      "openvm_circuit::system::memory::merkle::trace::TreeHelper",
                                                                      "touched_nodes"
                                                                    |)
                                                                  |)
                                                                |)
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.tuple
                                                                        [
                                                                          Ty.path "usize";
                                                                          Ty.path "u32";
                                                                          Ty.path "u32"
                                                                        ],
                                                                      Value.Tuple
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path "usize",
                                                                            BinOp.Wrap.sub,
                                                                            [
                                                                              M.read (| height |);
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                1
                                                                            ]
                                                                          |);
                                                                          M.read (|
                                                                            right_as_label
                                                                          |);
                                                                          M.read (|
                                                                            right_address_label
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        |) in
                                                      let~ final_right_node :
                                                          Ty.apply
                                                            (Ty.path "alloc::sync::Arc")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::system::memory::tree::MemoryNode")
                                                                [ CHUNK ]
                                                                [ F ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ] :=
                                                        M.match_operator (|
                                                          Ty.apply
                                                            (Ty.path "alloc::sync::Arc")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::system::memory::tree::MemoryNode")
                                                                [ CHUNK ]
                                                                [ F ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ := M.use right_is_final in
                                                                let _ :=
                                                                  is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                M.read (| initial_right_node |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "alloc::sync::Arc")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_circuit::system::memory::tree::MemoryNode")
                                                                        [ CHUNK ]
                                                                        [ F ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "alloc::sync::Arc")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "openvm_circuit::system::memory::tree::MemoryNode")
                                                                          [ CHUNK ]
                                                                          [ F ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    "new",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_circuit::system::memory::tree::MemoryNode")
                                                                        [ CHUNK ]
                                                                        [ F ],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "openvm_circuit::system::memory::merkle::trace::TreeHelper")
                                                                          [ CHUNK ]
                                                                          [ F ],
                                                                        "recur",
                                                                        [],
                                                                        [ impl_HasherChip_CHUNK__F_
                                                                        ]
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.MutRef,
                                                                          M.deref (|
                                                                            M.read (| self |)
                                                                          |)
                                                                        |);
                                                                        M.call_closure (|
                                                                          Ty.path "usize",
                                                                          BinOp.Wrap.sub,
                                                                          [
                                                                            M.read (| height |);
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              1
                                                                          ]
                                                                        |);
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "openvm_circuit::system::memory::tree::MemoryNode")
                                                                                    [ CHUNK ]
                                                                                    [ F ]
                                                                                ],
                                                                              M.get_trait_method (|
                                                                                "core::ops::deref::Deref",
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "alloc::sync::Arc")
                                                                                  []
                                                                                  [
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "openvm_circuit::system::memory::tree::MemoryNode")
                                                                                      [ CHUNK ]
                                                                                      [ F ];
                                                                                    Ty.path
                                                                                      "alloc::alloc::Global"
                                                                                  ],
                                                                                [],
                                                                                [],
                                                                                "deref",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      initial_right_node
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        M.read (| right_as_label |);
                                                                        M.read (|
                                                                          right_address_label
                                                                        |);
                                                                        M.borrow (|
                                                                          Pointer.Kind.MutRef,
                                                                          M.deref (|
                                                                            M.read (| hasher |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |) in
                                                      let~ final_node :
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit::system::memory::tree::MemoryNode")
                                                            [ CHUNK ]
                                                            [ F ] :=
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit::system::memory::tree::MemoryNode")
                                                            [ CHUNK ]
                                                            [ F ],
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_circuit::system::memory::tree::MemoryNode")
                                                              [ CHUNK ]
                                                              [ F ],
                                                            "new_nonleaf",
                                                            [],
                                                            [ impl_HasherChip_CHUNK__F_ ]
                                                          |),
                                                          [
                                                            M.read (| final_left_node |);
                                                            M.read (| final_right_node |);
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.deref (| M.read (| hasher |) |)
                                                            |)
                                                          ]
                                                        |) in
                                                      let~ _ : Ty.tuple [] :=
                                                        M.call_closure (|
                                                          Ty.tuple [],
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_circuit::system::memory::merkle::trace::TreeHelper")
                                                              [ CHUNK ]
                                                              [ F ],
                                                            "add_trace_row",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.deref (| M.read (| self |) |)
                                                            |);
                                                            M.read (| height |);
                                                            M.read (| as_label |);
                                                            M.read (| address_label |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.read (| initial_node |)
                                                              |)
                                                            |);
                                                            Value.StructTuple
                                                              "core::option::Option::None"
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      2
                                                                  ]
                                                                  [ Ty.path "bool" ]
                                                              ]
                                                              []
                                                          ]
                                                        |) in
                                                      let~ _ : Ty.tuple [] :=
                                                        M.call_closure (|
                                                          Ty.tuple [],
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_circuit::system::memory::merkle::trace::TreeHelper")
                                                              [ CHUNK ]
                                                              [ F ],
                                                            "add_trace_row",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.deref (| M.read (| self |) |)
                                                            |);
                                                            M.read (| height |);
                                                            M.read (| as_label |);
                                                            M.read (| address_label |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  final_node
                                                                |)
                                                              |)
                                                            |);
                                                            Value.StructTuple
                                                              "core::option::Option::Some"
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      2
                                                                  ]
                                                                  [ Ty.path "bool" ]
                                                              ]
                                                              [
                                                                Value.Array
                                                                  [
                                                                    M.read (| left_is_final |);
                                                                    M.read (| right_is_final |)
                                                                  ]
                                                              ]
                                                          ]
                                                        |) in
                                                      final_node
                                                    |)))
                                              ]
                                            |)))
                                      ]
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (M.never_to_any (|
                                  M.call_closure (|
                                    Ty.path "never",
                                    M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                    [
                                      M.call_closure (|
                                        Ty.path "core::fmt::Arguments",
                                        M.get_associated_function (|
                                          Ty.path "core::fmt::Arguments",
                                          "new_v1",
                                          [
                                            Value.Integer IntegerKind.Usize 2;
                                            Value.Integer IntegerKind.Usize 2
                                          ],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.alloc (|
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Value.Integer IntegerKind.Usize 2 ]
                                                    [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                                  Value.Array
                                                    [
                                                      mk_str (| "Leaf " |);
                                                      mk_str (| " found at nonzero height " |)
                                                    ]
                                                |)
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.alloc (|
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Value.Integer IntegerKind.Usize 2 ]
                                                    [ Ty.path "core::fmt::rt::Argument" ],
                                                  Value.Array
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "core::fmt::rt::Argument",
                                                        M.get_associated_function (|
                                                          Ty.path "core::fmt::rt::Argument",
                                                          "new_debug",
                                                          [],
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit::system::memory::tree::MemoryNode")
                                                                  [ CHUNK ]
                                                                  [ F ]
                                                              ]
                                                          ]
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                initial_node
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |);
                                                      M.call_closure (|
                                                        Ty.path "core::fmt::rt::Argument",
                                                        M.get_associated_function (|
                                                          Ty.path "core::fmt::rt::Argument",
                                                          "new_display",
                                                          [],
                                                          [ Ty.path "usize" ]
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                height
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |)))
                          ]
                        |)))
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_recur :
            forall (CHUNK : Value.t) (F : Ty.t),
            M.IsAssociatedFunction.C (Self CHUNK F) "recur" (recur CHUNK F).
          Admitted.
          Global Typeclasses Opaque recur.
          
          (*
              fn add_trace_row(
                  &mut self,
                  parent_height: usize,
                  as_label: u32,
                  address_label: u32,
                  node: &MemoryNode<CHUNK, F>,
                  direction_changes: Option<[bool; 2]>,
              ) {
                  let [left_direction_change, right_direction_change] =
                      direction_changes.unwrap_or([false; 2]);
                  let cols = if let NonLeaf { hash, left, right } = node {
                      MemoryMerkleCols {
                          expand_direction: if direction_changes.is_none() {
                              F::ONE
                          } else {
                              F::NEG_ONE
                          },
                          height_section: F::from_bool(parent_height > self.memory_dimensions.address_height),
                          parent_height: F::from_canonical_usize(parent_height),
                          is_root: F::from_bool(parent_height == self.memory_dimensions.overall_height()),
                          parent_as_label: F::from_canonical_u32(as_label),
                          parent_address_label: F::from_canonical_u32(address_label),
                          parent_hash: *hash,
                          left_child_hash: left.hash(),
                          right_child_hash: right.hash(),
                          left_direction_different: F::from_bool(left_direction_change),
                          right_direction_different: F::from_bool(right_direction_change),
                      }
                  } else {
                      panic!("trace_rows expects node = {:?} to be NonLeaf", node);
                  };
                  self.trace_rows.push(cols);
              }
          *)
          Definition add_trace_row
              (CHUNK : Value.t)
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self CHUNK F in
            match ε, τ, α with
            | [], [], [ self; parent_height; as_label; address_label; node; direction_changes ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::merkle::trace::TreeHelper")
                          [ CHUNK ]
                          [ F ]
                      ],
                    self
                  |) in
                let parent_height := M.alloc (| Ty.path "usize", parent_height |) in
                let as_label := M.alloc (| Ty.path "u32", as_label |) in
                let address_label := M.alloc (| Ty.path "u32", address_label |) in
                let node :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                          [ CHUNK ]
                          [ F ]
                      ],
                    node
                  |) in
                let direction_changes :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 2 ]
                          [ Ty.path "bool" ]
                      ],
                    direction_changes
                  |) in
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (|
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 2 ]
                      [ Ty.path "bool" ],
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [ Ty.path "bool" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ty.path "bool" ]
                          ],
                        "unwrap_or",
                        [],
                        []
                      |),
                      [
                        M.read (| direction_changes |);
                        lib.repeat (| Value.Bool false, Value.Integer IntegerKind.Usize 2 |)
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_slice_index (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_slice_index (| γ, 1 |) in
                        let left_direction_change := M.copy (| Ty.path "bool", γ0_0 |) in
                        let right_direction_change := M.copy (| Ty.path "bool", γ0_1 |) in
                        M.read (|
                          let~ cols :
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                                [ CHUNK ]
                                [ F ] :=
                            M.match_operator (|
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                                [ CHUNK ]
                                [ F ],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ := node in
                                    let γ := M.read (| γ |) in
                                    let γ1_0 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf",
                                        "hash"
                                      |) in
                                    let γ1_1 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf",
                                        "left"
                                      |) in
                                    let γ1_2 :=
                                      M.SubPointer.get_struct_record_field (|
                                        γ,
                                        "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf",
                                        "right"
                                      |) in
                                    let hash :=
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ],
                                        γ1_0
                                      |) in
                                    let left :=
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::tree::MemoryNode")
                                                  [ CHUNK ]
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ],
                                        γ1_1
                                      |) in
                                    let right :=
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::tree::MemoryNode")
                                                  [ CHUNK ]
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ],
                                        γ1_2
                                      |) in
                                    Value.mkStructRecord
                                      "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols"
                                      [ CHUNK ]
                                      [ F ]
                                      [
                                        ("expand_direction",
                                          M.match_operator (|
                                            F,
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        Ty.path "bool",
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      2
                                                                  ]
                                                                  [ Ty.path "bool" ]
                                                              ],
                                                            "is_none",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              direction_changes
                                                            |)
                                                          ]
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.read (|
                                                    get_constant (|
                                                      "p3_field::field::FieldAlgebra::ONE",
                                                      F
                                                    |)
                                                  |)));
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (M.read (|
                                                    get_constant (|
                                                      "p3_field::field::FieldAlgebra::NEG_ONE",
                                                      F
                                                    |)
                                                  |)))
                                            ]
                                          |));
                                        ("height_section",
                                          M.call_closure (|
                                            F,
                                            M.get_trait_method (|
                                              "p3_field::field::FieldAlgebra",
                                              F,
                                              [],
                                              [],
                                              "from_bool",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.gt,
                                                [
                                                  M.read (| parent_height |);
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| self |) |),
                                                        "openvm_circuit::system::memory::merkle::trace::TreeHelper",
                                                        "memory_dimensions"
                                                      |),
                                                      "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                                                      "address_height"
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |));
                                        ("parent_height",
                                          M.call_closure (|
                                            F,
                                            M.get_trait_method (|
                                              "p3_field::field::FieldAlgebra",
                                              F,
                                              [],
                                              [],
                                              "from_canonical_usize",
                                              [],
                                              []
                                            |),
                                            [ M.read (| parent_height |) ]
                                          |));
                                        ("is_root",
                                          M.call_closure (|
                                            F,
                                            M.get_trait_method (|
                                              "p3_field::field::FieldAlgebra",
                                              F,
                                              [],
                                              [],
                                              "from_bool",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.eq,
                                                [
                                                  M.read (| parent_height |);
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    M.get_associated_function (|
                                                      Ty.path
                                                        "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                                                      "overall_height",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| self |) |),
                                                          "openvm_circuit::system::memory::merkle::trace::TreeHelper",
                                                          "memory_dimensions"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |));
                                        ("parent_as_label",
                                          M.call_closure (|
                                            F,
                                            M.get_trait_method (|
                                              "p3_field::field::FieldAlgebra",
                                              F,
                                              [],
                                              [],
                                              "from_canonical_u32",
                                              [],
                                              []
                                            |),
                                            [ M.read (| as_label |) ]
                                          |));
                                        ("parent_address_label",
                                          M.call_closure (|
                                            F,
                                            M.get_trait_method (|
                                              "p3_field::field::FieldAlgebra",
                                              F,
                                              [],
                                              [],
                                              "from_canonical_u32",
                                              [],
                                              []
                                            |),
                                            [ M.read (| address_label |) ]
                                          |));
                                        ("parent_hash",
                                          M.read (| M.deref (| M.read (| hash |) |) |));
                                        ("left_child_hash",
                                          M.call_closure (|
                                            Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::tree::MemoryNode")
                                                [ CHUNK ]
                                                [ F ],
                                              "hash",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::system::memory::tree::MemoryNode")
                                                          [ CHUNK ]
                                                          [ F ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.apply
                                                        (Ty.path "alloc::sync::Arc")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit::system::memory::tree::MemoryNode")
                                                            [ CHUNK ]
                                                            [ F ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      [],
                                                      "deref",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| left |) |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |));
                                        ("right_child_hash",
                                          M.call_closure (|
                                            Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::tree::MemoryNode")
                                                [ CHUNK ]
                                                [ F ],
                                              "hash",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::system::memory::tree::MemoryNode")
                                                          [ CHUNK ]
                                                          [ F ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.apply
                                                        (Ty.path "alloc::sync::Arc")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit::system::memory::tree::MemoryNode")
                                                            [ CHUNK ]
                                                            [ F ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      [],
                                                      "deref",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| right |) |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |));
                                        ("left_direction_different",
                                          M.call_closure (|
                                            F,
                                            M.get_trait_method (|
                                              "p3_field::field::FieldAlgebra",
                                              F,
                                              [],
                                              [],
                                              "from_bool",
                                              [],
                                              []
                                            |),
                                            [ M.read (| left_direction_change |) ]
                                          |));
                                        ("right_direction_different",
                                          M.call_closure (|
                                            F,
                                            M.get_trait_method (|
                                              "p3_field::field::FieldAlgebra",
                                              F,
                                              [],
                                              [],
                                              "from_bool",
                                              [],
                                              []
                                            |),
                                            [ M.read (| right_direction_change |) ]
                                          |))
                                      ]));
                                fun γ =>
                                  ltac:(M.monadic
                                    (M.never_to_any (|
                                      M.call_closure (|
                                        Ty.path "never",
                                        M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                        [
                                          M.call_closure (|
                                            Ty.path "core::fmt::Arguments",
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::Arguments",
                                              "new_v1",
                                              [
                                                Value.Integer IntegerKind.Usize 2;
                                                Value.Integer IntegerKind.Usize 1
                                              ],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 2 ]
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "str" ]
                                                        ],
                                                      Value.Array
                                                        [
                                                          mk_str (| "trace_rows expects node = " |);
                                                          mk_str (| " to be NonLeaf" |)
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |);
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 1 ]
                                                        [ Ty.path "core::fmt::rt::Argument" ],
                                                      Value.Array
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::rt::Argument",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::rt::Argument",
                                                              "new_debug",
                                                              [],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit::system::memory::tree::MemoryNode")
                                                                      [ CHUNK ]
                                                                      [ F ]
                                                                  ]
                                                              ]
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    node
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |)))
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::merkle::columns::MemoryMerkleCols")
                                      [ CHUNK ]
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "push",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_circuit::system::memory::merkle::trace::TreeHelper",
                                        "trace_rows"
                                      |)
                                    |)
                                  |)
                                |);
                                M.read (| cols |)
                              ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)))
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_add_trace_row :
            forall (CHUNK : Value.t) (F : Ty.t),
            M.IsAssociatedFunction.C (Self CHUNK F) "add_trace_row" (add_trace_row CHUNK F).
          Admitted.
          Global Typeclasses Opaque add_trace_row.
        End Impl_openvm_circuit_system_memory_merkle_trace_TreeHelper_CHUNK_F.
        
        (* Trait *)
        (* Empty module 'SerialReceiver' *)
        
        Module Impl_openvm_circuit_system_memory_merkle_trace_SerialReceiver_where_p3_field_field_PrimeField32_F_ref__slice_F_for_openvm_circuit_system_poseidon2_chip_Poseidon2PeripheryBaseChip_SBOX_REGISTERS_F.
          Definition Self (SBOX_REGISTERS : Value.t) (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
              [ SBOX_REGISTERS ]
              [ F ].
          
          (*
              fn receive(&mut self, perm_preimage: &'a [F]) {
                  assert!(perm_preimage.len() <= PERIPHERY_POSEIDON2_WIDTH);
                  let mut state = [F::ZERO; PERIPHERY_POSEIDON2_WIDTH];
                  state[..perm_preimage.len()].copy_from_slice(perm_preimage);
                  let count = self.records.entry(state).or_insert(AtomicU32::new(0));
                  count.fetch_add(1, std::sync::atomic::Ordering::Relaxed);
              }
          *)
          Definition receive
              (SBOX_REGISTERS : Value.t)
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self SBOX_REGISTERS F in
            match ε, τ, α with
            | [], [], [ self; perm_preimage ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                          [ SBOX_REGISTERS ]
                          [ F ]
                      ],
                    self
                  |) in
                let perm_preimage :=
                  M.alloc (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                    perm_preimage
                  |) in
                M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  UnOp.not (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.le,
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ F ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| perm_preimage |) |)
                                            |)
                                          ]
                                        |);
                                        M.read (|
                                          get_constant (|
                                            "openvm_circuit::system::poseidon2::PERIPHERY_POSEIDON2_WIDTH",
                                            Ty.path "usize"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (|
                              M.call_closure (|
                                Ty.path "never",
                                M.get_function (| "core::panicking::panic", [], [] |),
                                [
                                  mk_str (|
                                    "assertion failed: perm_preimage.len() <= PERIPHERY_POSEIDON2_WIDTH"
                                  |)
                                ]
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  let~ state :
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 16 ] [ F ] :=
                    lib.repeat (|
                      M.read (| get_constant (| "p3_field::field::FieldAlgebra::ZERO", F |) |),
                      Value.Integer IntegerKind.Usize 16
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ F ],
                        "copy_from_slice",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                              M.get_trait_method (|
                                "core::ops::index::IndexMut",
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 16 ]
                                  [ F ],
                                [],
                                [
                                  Ty.apply
                                    (Ty.path "core::ops::range::RangeTo")
                                    []
                                    [ Ty.path "usize" ]
                                ],
                                "index_mut",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.MutRef, state |);
                                Value.mkStructRecord
                                  "core::ops::range::RangeTo"
                                  []
                                  [ Ty.path "usize" ]
                                  [
                                    ("end_",
                                      M.call_closure (|
                                        Ty.path "usize",
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "slice") [] [ F ],
                                          "len",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| perm_preimage |) |)
                                          |)
                                        ]
                                      |))
                                  ]
                              ]
                            |)
                          |)
                        |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| perm_preimage |) |) |)
                      ]
                    |) in
                  let~ count :
                      Ty.apply (Ty.path "&mut") [] [ Ty.path "core::sync::atomic::AtomicU32" ] :=
                    M.call_closure (|
                      Ty.apply (Ty.path "&mut") [] [ Ty.path "core::sync::atomic::AtomicU32" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "std::collections::hash::map::Entry")
                          []
                          [
                            Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 16 ] [ F ];
                            Ty.path "core::sync::atomic::AtomicU32"
                          ],
                        "or_insert",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "std::collections::hash::map::Entry")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 16 ]
                                [ F ];
                              Ty.path "core::sync::atomic::AtomicU32"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "std::collections::hash::map::HashMap")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 16 ]
                                  [ F ];
                                Ty.path "core::sync::atomic::AtomicU32";
                                Ty.path "rustc_hash::FxBuildHasher"
                              ],
                            "entry",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip",
                                "records"
                              |)
                            |);
                            M.read (| state |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.path "core::sync::atomic::AtomicU32",
                          M.get_associated_function (|
                            Ty.path "core::sync::atomic::AtomicU32",
                            "new",
                            [],
                            []
                          |),
                          [ Value.Integer IntegerKind.U32 0 ]
                        |)
                      ]
                    |) in
                  let~ _ : Ty.path "u32" :=
                    M.call_closure (|
                      Ty.path "u32",
                      M.get_associated_function (|
                        Ty.path "core::sync::atomic::AtomicU32",
                        "fetch_add",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| count |) |) |);
                        Value.Integer IntegerKind.U32 1;
                        Value.StructTuple "core::sync::atomic::Ordering::Relaxed" [] [] []
                      ]
                    |) in
                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (SBOX_REGISTERS : Value.t) (F : Ty.t),
            M.IsTraitInstance
              "openvm_circuit::system::memory::merkle::trace::SerialReceiver"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *)
              [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ] ]
              (Self SBOX_REGISTERS F)
              (* Instance *) [ ("receive", InstanceField.Method (receive SBOX_REGISTERS F)) ].
        End Impl_openvm_circuit_system_memory_merkle_trace_SerialReceiver_where_p3_field_field_PrimeField32_F_ref__slice_F_for_openvm_circuit_system_poseidon2_chip_Poseidon2PeripheryBaseChip_SBOX_REGISTERS_F.
        
        Module Impl_openvm_circuit_system_memory_merkle_trace_SerialReceiver_where_p3_field_field_PrimeField32_F_ref__slice_F_for_openvm_circuit_system_poseidon2_Poseidon2PeripheryChip_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip") [] [ F ].
          
          (*
              fn receive(&mut self, perm_preimage: &'a [F]) {
                  match self {
                      Poseidon2PeripheryChip::Register0(chip) => chip.receive(perm_preimage),
                      Poseidon2PeripheryChip::Register1(chip) => chip.receive(perm_preimage),
                  }
              }
          *)
          Definition receive (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match ε, τ, α with
            | [], [], [ self; perm_preimage ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                          []
                          [ F ]
                      ],
                    self
                  |) in
                let perm_preimage :=
                  M.alloc (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                    perm_preimage
                  |) in
                M.match_operator (|
                  Ty.tuple [],
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip::Register0",
                            0
                          |) in
                        let chip :=
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                                  [ Value.Integer IntegerKind.Usize 0 ]
                                  [ F ]
                              ],
                            γ1_0
                          |) in
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_trait_method (|
                            "openvm_circuit::system::memory::merkle::trace::SerialReceiver",
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                              [ Value.Integer IntegerKind.Usize 0 ]
                              [ F ],
                            [],
                            [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ] ],
                            "receive",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| chip |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| perm_preimage |) |)
                            |)
                          ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.read (| γ |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip::Register1",
                            0
                          |) in
                        let chip :=
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                                  [ Value.Integer IntegerKind.Usize 1 ]
                                  [ F ]
                              ],
                            γ1_0
                          |) in
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_trait_method (|
                            "openvm_circuit::system::memory::merkle::trace::SerialReceiver",
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                              [ Value.Integer IntegerKind.Usize 1 ]
                              [ F ],
                            [],
                            [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ] ],
                            "receive",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| chip |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| M.read (| perm_preimage |) |)
                            |)
                          ]
                        |)))
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "openvm_circuit::system::memory::merkle::trace::SerialReceiver"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *)
              [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ] ]
              (Self F)
              (* Instance *) [ ("receive", InstanceField.Method (receive F)) ].
        End Impl_openvm_circuit_system_memory_merkle_trace_SerialReceiver_where_p3_field_field_PrimeField32_F_ref__slice_F_for_openvm_circuit_system_poseidon2_Poseidon2PeripheryChip_F.
      End trace.
    End merkle.
  End memory.
End system.
