(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module system.
  Module memory.
    Module offline_checker.
      Module bridge.
        Definition value_AUX_LEN (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 2 |))).
        
        Global Instance Instance_IsConstant_value_AUX_LEN :
          M.IsFunction.C
            "openvm_circuit::system::memory::offline_checker::bridge::AUX_LEN"
            value_AUX_LEN.
        Admitted.
        Global Typeclasses Opaque value_AUX_LEN.
        
        (* StructRecord
          {
            name := "MemoryBridge";
            const_params := [];
            ty_params := [];
            fields :=
              [
                ("offline_checker",
                  Ty.path
                    "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker")
              ];
          } *)
        
        Module Impl_core_clone_Clone_for_openvm_circuit_system_memory_offline_checker_bridge_MemoryBridge.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge".
          
          (* Clone *)
          Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge"
                      ],
                    self
                  |) in
                M.match_operator (|
                  Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                  Value.DeclaredButUndefined,
                  [ fun γ => ltac:(M.monadic (M.read (| M.deref (| M.read (| self |) |) |))) ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "core::clone::Clone"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [ ("clone", InstanceField.Method clone) ].
        End Impl_core_clone_Clone_for_openvm_circuit_system_memory_offline_checker_bridge_MemoryBridge.
        
        Module Impl_core_marker_Copy_for_openvm_circuit_system_memory_offline_checker_bridge_MemoryBridge.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge".
          
          Axiom Implements :
            M.IsTraitInstance
              "core::marker::Copy"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [].
        End Impl_core_marker_Copy_for_openvm_circuit_system_memory_offline_checker_bridge_MemoryBridge.
        
        Module Impl_core_fmt_Debug_for_openvm_circuit_system_memory_offline_checker_bridge_MemoryBridge.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge".
          
          (* Debug *)
          Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [], [ self; f ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge"
                      ],
                    self
                  |) in
                let f :=
                  M.alloc (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ],
                    f
                  |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_field1_finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "MemoryBridge" |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "offline_checker" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.path
                                  "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker"
                              ]
                          ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.path
                                      "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker"
                                  ],
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                                    "offline_checker"
                                  |)
                                |)
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "core::fmt::Debug"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
        End Impl_core_fmt_Debug_for_openvm_circuit_system_memory_offline_checker_bridge_MemoryBridge.
        
        Module Impl_openvm_circuit_system_memory_offline_checker_bridge_MemoryBridge.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge".
          
          (*
              pub fn new(
                  memory_bus: MemoryBus,
                  clk_max_bits: usize,
                  range_bus: VariableRangeCheckerBus,
              ) -> Self {
                  Self {
                      offline_checker: MemoryOfflineChecker::new(memory_bus, clk_max_bits, range_bus),
                  }
              }
          *)
          Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [], [ memory_bus; clk_max_bits; range_bus ] =>
              ltac:(M.monadic
                (let memory_bus :=
                  M.alloc (|
                    Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                    memory_bus
                  |) in
                let clk_max_bits := M.alloc (| Ty.path "usize", clk_max_bits |) in
                let range_bus :=
                  M.alloc (|
                    Ty.path "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                    range_bus
                  |) in
                Value.mkStructRecord
                  "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge"
                  []
                  []
                  [
                    ("offline_checker",
                      M.call_closure (|
                        Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker",
                        M.get_associated_function (|
                          Ty.path
                            "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker",
                          "new",
                          [],
                          []
                        |),
                        [ M.read (| memory_bus |); M.read (| clk_max_bits |); M.read (| range_bus |)
                        ]
                      |))
                  ]))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
          Admitted.
          Global Typeclasses Opaque new.
          
          (*
              pub fn read<'a, T, V, const N: usize>(
                  &self,
                  address: MemoryAddress<impl Into<T>, impl Into<T>>,
                  data: [impl Into<T>; N],
                  timestamp: impl Into<T>,
                  aux: &'a MemoryReadAuxCols<V>,
              ) -> MemoryReadOperation<'a, T, V, N> {
                  MemoryReadOperation {
                      offline_checker: self.offline_checker,
                      address: MemoryAddress::from(address),
                      data: data.map(Into::into),
                      timestamp: timestamp.into(),
                      aux,
                  }
              }
          *)
          Definition read (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [ N ],
                [ T; V; impl_Into_T_; impl_Into_T_'1; impl_Into_T_'2; impl_Into_T_'3 ],
                [ self; address; data; timestamp; aux ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge"
                      ],
                    self
                  |) in
                let address :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                      []
                      [ impl_Into_T_; impl_Into_T_'1 ],
                    address
                  |) in
                let data :=
                  M.alloc (| Ty.apply (Ty.path "array") [ N ] [ impl_Into_T_'2 ], data |) in
                let timestamp := M.alloc (| impl_Into_T_'3, timestamp |) in
                let aux :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                          []
                          [ V ]
                      ],
                    aux
                  |) in
                Value.mkStructRecord
                  "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOperation"
                  [ N ]
                  [ T; V ]
                  [
                    ("offline_checker",
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                          "offline_checker"
                        |)
                      |));
                    ("address",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                          []
                          [ T; T ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                            []
                            [ T; T ],
                          "from",
                          [],
                          [ impl_Into_T_; impl_Into_T_'1 ]
                        |),
                        [ M.read (| address |) ]
                      |));
                    ("data",
                      M.call_closure (|
                        Ty.apply (Ty.path "array") [ N ] [ T ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "array") [ N ] [ impl_Into_T_'2 ],
                          "map",
                          [],
                          [ Ty.function [ impl_Into_T_'2 ] T; T ]
                        |),
                        [
                          M.read (| data |);
                          M.get_trait_method (|
                            "core::convert::Into",
                            impl_Into_T_'2,
                            [],
                            [ T ],
                            "into",
                            [],
                            []
                          |)
                        ]
                      |));
                    ("timestamp",
                      M.call_closure (|
                        T,
                        M.get_trait_method (|
                          "core::convert::Into",
                          impl_Into_T_'3,
                          [],
                          [ T ],
                          "into",
                          [],
                          []
                        |),
                        [ M.read (| timestamp |) ]
                      |));
                    ("aux", M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| aux |) |) |))
                  ]))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_read : M.IsAssociatedFunction.C Self "read" read.
          Admitted.
          Global Typeclasses Opaque read.
          
          (*
              pub fn read_or_immediate<'a, T, V>(
                  &self,
                  address: MemoryAddress<impl Into<T>, impl Into<T>>,
                  data: impl Into<T>,
                  timestamp: impl Into<T>,
                  aux: &'a MemoryReadOrImmediateAuxCols<V>,
              ) -> MemoryReadOrImmediateOperation<'a, T, V> {
                  MemoryReadOrImmediateOperation {
                      offline_checker: self.offline_checker,
                      address: MemoryAddress::from(address),
                      data: data.into(),
                      timestamp: timestamp.into(),
                      aux,
                  }
              }
          *)
          Definition read_or_immediate (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [],
                [ T; V; impl_Into_T_; impl_Into_T_'1; impl_Into_T_'2; impl_Into_T_'3 ],
                [ self; address; data; timestamp; aux ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge"
                      ],
                    self
                  |) in
                let address :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                      []
                      [ impl_Into_T_; impl_Into_T_'1 ],
                    address
                  |) in
                let data := M.alloc (| impl_Into_T_'2, data |) in
                let timestamp := M.alloc (| impl_Into_T_'3, timestamp |) in
                let aux :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
                          []
                          [ V ]
                      ],
                    aux
                  |) in
                Value.mkStructRecord
                  "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOrImmediateOperation"
                  []
                  [ T; V ]
                  [
                    ("offline_checker",
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                          "offline_checker"
                        |)
                      |));
                    ("address",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                          []
                          [ T; T ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                            []
                            [ T; T ],
                          "from",
                          [],
                          [ impl_Into_T_; impl_Into_T_'1 ]
                        |),
                        [ M.read (| address |) ]
                      |));
                    ("data",
                      M.call_closure (|
                        T,
                        M.get_trait_method (|
                          "core::convert::Into",
                          impl_Into_T_'2,
                          [],
                          [ T ],
                          "into",
                          [],
                          []
                        |),
                        [ M.read (| data |) ]
                      |));
                    ("timestamp",
                      M.call_closure (|
                        T,
                        M.get_trait_method (|
                          "core::convert::Into",
                          impl_Into_T_'3,
                          [],
                          [ T ],
                          "into",
                          [],
                          []
                        |),
                        [ M.read (| timestamp |) ]
                      |));
                    ("aux", M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| aux |) |) |))
                  ]))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_read_or_immediate :
            M.IsAssociatedFunction.C Self "read_or_immediate" read_or_immediate.
          Admitted.
          Global Typeclasses Opaque read_or_immediate.
          
          (*
              pub fn write<'a, T, V, const N: usize>(
                  &self,
                  address: MemoryAddress<impl Into<T>, impl Into<T>>,
                  data: [impl Into<T>; N],
                  timestamp: impl Into<T>,
                  aux: &'a MemoryWriteAuxCols<V, N>,
              ) -> MemoryWriteOperation<'a, T, V, N> {
                  MemoryWriteOperation {
                      offline_checker: self.offline_checker,
                      address: MemoryAddress::from(address),
                      data: data.map(Into::into),
                      timestamp: timestamp.into(),
                      aux,
                  }
              }
          *)
          Definition write (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [ N ],
                [ T; V; impl_Into_T_; impl_Into_T_'1; impl_Into_T_'2; impl_Into_T_'3 ],
                [ self; address; data; timestamp; aux ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge"
                      ],
                    self
                  |) in
                let address :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                      []
                      [ impl_Into_T_; impl_Into_T_'1 ],
                    address
                  |) in
                let data :=
                  M.alloc (| Ty.apply (Ty.path "array") [ N ] [ impl_Into_T_'2 ], data |) in
                let timestamp := M.alloc (| impl_Into_T_'3, timestamp |) in
                let aux :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                          [ N ]
                          [ V ]
                      ],
                    aux
                  |) in
                Value.mkStructRecord
                  "openvm_circuit::system::memory::offline_checker::bridge::MemoryWriteOperation"
                  [ N ]
                  [ T; V ]
                  [
                    ("offline_checker",
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                          "offline_checker"
                        |)
                      |));
                    ("address",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                          []
                          [ T; T ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                            []
                            [ T; T ],
                          "from",
                          [],
                          [ impl_Into_T_; impl_Into_T_'1 ]
                        |),
                        [ M.read (| address |) ]
                      |));
                    ("data",
                      M.call_closure (|
                        Ty.apply (Ty.path "array") [ N ] [ T ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "array") [ N ] [ impl_Into_T_'2 ],
                          "map",
                          [],
                          [ Ty.function [ impl_Into_T_'2 ] T; T ]
                        |),
                        [
                          M.read (| data |);
                          M.get_trait_method (|
                            "core::convert::Into",
                            impl_Into_T_'2,
                            [],
                            [ T ],
                            "into",
                            [],
                            []
                          |)
                        ]
                      |));
                    ("timestamp",
                      M.call_closure (|
                        T,
                        M.get_trait_method (|
                          "core::convert::Into",
                          impl_Into_T_'3,
                          [],
                          [ T ],
                          "into",
                          [],
                          []
                        |),
                        [ M.read (| timestamp |) ]
                      |));
                    ("aux", M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| aux |) |) |))
                  ]))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_write : M.IsAssociatedFunction.C Self "write" write.
          Admitted.
          Global Typeclasses Opaque write.
        End Impl_openvm_circuit_system_memory_offline_checker_bridge_MemoryBridge.
        
        (* StructRecord
          {
            name := "MemoryReadOperation";
            const_params := [ "N" ];
            ty_params := [ "T"; "V" ];
            fields :=
              [
                ("offline_checker",
                  Ty.path
                    "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker");
                ("address",
                  Ty.apply (Ty.path "openvm_circuit::system::memory::MemoryAddress") [] [ T; T ]);
                ("data", Ty.apply (Ty.path "array") [ N ] [ T ]);
                ("timestamp", T);
                ("aux",
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                        []
                        [ V ]
                    ])
              ];
          } *)
        
        Module Impl_openvm_circuit_system_memory_offline_checker_bridge_MemoryReadOperation_N_F_V.
          Definition Self (N : Value.t) (F V : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOperation")
              [ N ]
              [ F; V ].
          
          (*
              pub fn eval<AB>(self, builder: &mut AB, enabled: impl Into<AB::Expr>)
              where
                  AB: InteractionBuilder<Var = V, Expr = F>,
              {
                  let enabled = enabled.into();
          
                  // NOTE: We do not need to constrain `address_space != 0` since this is done implicitly by
                  // the memory interactions argument together with initial/final memory chips.
          
                  self.offline_checker.eval_timestamps(
                      builder,
                      self.timestamp.clone(),
                      &self.aux.base,
                      enabled.clone(),
                  );
          
                  self.offline_checker.eval_bulk_access(
                      builder,
                      self.address,
                      &self.data,
                      &self.data,
                      self.timestamp.clone(),
                      self.aux.base.prev_timestamp,
                      enabled,
                  );
              }
          *)
          Definition eval
              (N : Value.t)
              (F V : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self N F V in
            match ε, τ, α with
            | [], [ AB; impl_Into_AB_Expr_ ], [ self; builder; enabled ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOperation")
                      [ N ]
                      [ F; V ],
                    self
                  |) in
                let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
                let enabled := M.alloc (| impl_Into_AB_Expr_, enabled |) in
                M.read (|
                  let~ enabled : F :=
                    M.call_closure (|
                      F,
                      M.get_trait_method (|
                        "core::convert::Into",
                        impl_Into_AB_Expr_,
                        [],
                        [ F ],
                        "into",
                        [],
                        []
                      |),
                      [ M.read (| enabled |) ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker",
                        "eval_timestamps",
                        [],
                        [ AB ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            self,
                            "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOperation",
                            "offline_checker"
                          |)
                        |);
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                        M.call_closure (|
                          F,
                          M.get_trait_method (| "core::clone::Clone", F, [], [], "clone", [], [] |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                self,
                                "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOperation",
                                "timestamp"
                              |)
                            |)
                          ]
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (|
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      self,
                                      "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOperation",
                                      "aux"
                                    |)
                                  |)
                                |),
                                "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols",
                                "base"
                              |)
                            |)
                          |)
                        |);
                        M.call_closure (|
                          F,
                          M.get_trait_method (| "core::clone::Clone", F, [], [], "clone", [], [] |),
                          [ M.borrow (| Pointer.Kind.Ref, enabled |) ]
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker",
                        "eval_bulk_access",
                        [ N ],
                        [ AB ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            self,
                            "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOperation",
                            "offline_checker"
                          |)
                        |);
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            self,
                            "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOperation",
                            "address"
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                self,
                                "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOperation",
                                "data"
                              |)
                            |)
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                self,
                                "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOperation",
                                "data"
                              |)
                            |)
                          |)
                        |);
                        M.call_closure (|
                          F,
                          M.get_trait_method (| "core::clone::Clone", F, [], [], "clone", [], [] |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                self,
                                "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOperation",
                                "timestamp"
                              |)
                            |)
                          ]
                        |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (|
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    self,
                                    "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOperation",
                                    "aux"
                                  |)
                                |)
                              |),
                              "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols",
                              "base"
                            |),
                            "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols",
                            "prev_timestamp"
                          |)
                        |);
                        M.read (| enabled |)
                      ]
                    |) in
                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_eval :
            forall (N : Value.t) (F V : Ty.t),
            M.IsAssociatedFunction.C (Self N F V) "eval" (eval N F V).
          Admitted.
          Global Typeclasses Opaque eval.
        End Impl_openvm_circuit_system_memory_offline_checker_bridge_MemoryReadOperation_N_F_V.
        
        (* StructRecord
          {
            name := "MemoryReadOrImmediateOperation";
            const_params := [];
            ty_params := [ "T"; "V" ];
            fields :=
              [
                ("offline_checker",
                  Ty.path
                    "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker");
                ("address",
                  Ty.apply (Ty.path "openvm_circuit::system::memory::MemoryAddress") [] [ T; T ]);
                ("data", T);
                ("timestamp", T);
                ("aux",
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
                        []
                        [ V ]
                    ])
              ];
          } *)
        
        Module Impl_openvm_circuit_system_memory_offline_checker_bridge_MemoryReadOrImmediateOperation_F_V.
          Definition Self (F V : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOrImmediateOperation")
              []
              [ F; V ].
          
          (*
              pub fn eval<AB>(self, builder: &mut AB, enabled: impl Into<AB::Expr>)
              where
                  AB: InteractionBuilder<Var = V, Expr = F>,
              {
                  let enabled = enabled.into();
          
                  // `is_immediate` should be an indicator for `address_space == 0` (when `enabled`).
                  {
                      let is_zero_io = IsZeroIo::new(
                          self.address.address_space.clone(),
                          self.aux.is_immediate.into(),
                          enabled.clone(),
                      );
                      IsZeroSubAir.eval(builder, (is_zero_io, self.aux.is_zero_aux));
                  }
                  // When `is_immediate`, the data should be the pointer value.
                  builder
                      .when(self.aux.is_immediate)
                      .assert_eq(self.data.clone(), self.address.pointer.clone());
          
                  // Timestamps should be increasing (when enabled).
                  self.offline_checker.eval_timestamps(
                      builder,
                      self.timestamp.clone(),
                      &self.aux.base,
                      enabled.clone(),
                  );
          
                  self.offline_checker.eval_bulk_access(
                      builder,
                      self.address,
                      &[self.data.clone()],
                      &[self.data],
                      self.timestamp,
                      self.aux.base.prev_timestamp,
                      enabled * not(self.aux.is_immediate),
                  );
              }
          *)
          Definition eval (F V : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F V in
            match ε, τ, α with
            | [], [ AB; impl_Into_AB_Expr_ ], [ self; builder; enabled ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOrImmediateOperation")
                      []
                      [ F; V ],
                    self
                  |) in
                let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
                let enabled := M.alloc (| impl_Into_AB_Expr_, enabled |) in
                M.read (|
                  let~ enabled : F :=
                    M.call_closure (|
                      F,
                      M.get_trait_method (|
                        "core::convert::Into",
                        impl_Into_AB_Expr_,
                        [],
                        [ F ],
                        "into",
                        [],
                        []
                      |),
                      [ M.read (| enabled |) ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.read (|
                      let~ is_zero_io :
                          Ty.apply
                            (Ty.path "openvm_circuit_primitives::is_zero::IsZeroIo")
                            []
                            [ F ] :=
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "openvm_circuit_primitives::is_zero::IsZeroIo")
                            []
                            [ F ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "openvm_circuit_primitives::is_zero::IsZeroIo")
                              []
                              [ F ],
                            "new",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              F,
                              M.get_trait_method (|
                                "core::clone::Clone",
                                F,
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.SubPointer.get_struct_record_field (|
                                      self,
                                      "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOrImmediateOperation",
                                      "address"
                                    |),
                                    "openvm_circuit::system::memory::MemoryAddress",
                                    "address_space"
                                  |)
                                |)
                              ]
                            |);
                            M.call_closure (|
                              F,
                              M.get_trait_method (|
                                "core::convert::Into",
                                V,
                                [],
                                [ F ],
                                "into",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (|
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          self,
                                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOrImmediateOperation",
                                          "aux"
                                        |)
                                      |)
                                    |),
                                    "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols",
                                    "is_immediate"
                                  |)
                                |)
                              ]
                            |);
                            M.call_closure (|
                              F,
                              M.get_trait_method (|
                                "core::clone::Clone",
                                F,
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, enabled |) ]
                            |)
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.call_closure (|
                          Ty.tuple [],
                          M.get_trait_method (|
                            "openvm_circuit_primitives::sub_air::SubAir",
                            Ty.path "openvm_circuit_primitives::is_zero::IsZeroSubAir",
                            [],
                            [ AB ],
                            "eval",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.path "openvm_circuit_primitives::is_zero::IsZeroSubAir",
                                Value.StructTuple
                                  "openvm_circuit_primitives::is_zero::IsZeroSubAir"
                                  []
                                  []
                                  []
                              |)
                            |);
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                            Value.Tuple
                              [
                                M.read (| is_zero_io |);
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (|
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          self,
                                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOrImmediateOperation",
                                          "aux"
                                        |)
                                      |)
                                    |),
                                    "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols",
                                    "is_zero_aux"
                                  |)
                                |)
                              ]
                          ]
                        |) in
                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_trait_method (|
                        "p3_air::air::AirBuilder",
                        Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                        [],
                        [],
                        "assert_eq",
                        [],
                        [ F; F ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.alloc (|
                            Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                            M.call_closure (|
                              Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                              M.get_trait_method (|
                                "p3_air::air::AirBuilder",
                                AB,
                                [],
                                [],
                                "when",
                                [],
                                [ V ]
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| builder |) |)
                                |);
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (|
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          self,
                                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOrImmediateOperation",
                                          "aux"
                                        |)
                                      |)
                                    |),
                                    "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols",
                                    "is_immediate"
                                  |)
                                |)
                              ]
                            |)
                          |)
                        |);
                        M.call_closure (|
                          F,
                          M.get_trait_method (| "core::clone::Clone", F, [], [], "clone", [], [] |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                self,
                                "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOrImmediateOperation",
                                "data"
                              |)
                            |)
                          ]
                        |);
                        M.call_closure (|
                          F,
                          M.get_trait_method (| "core::clone::Clone", F, [], [], "clone", [], [] |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOrImmediateOperation",
                                  "address"
                                |),
                                "openvm_circuit::system::memory::MemoryAddress",
                                "pointer"
                              |)
                            |)
                          ]
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker",
                        "eval_timestamps",
                        [],
                        [ AB ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            self,
                            "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOrImmediateOperation",
                            "offline_checker"
                          |)
                        |);
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                        M.call_closure (|
                          F,
                          M.get_trait_method (| "core::clone::Clone", F, [], [], "clone", [], [] |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                self,
                                "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOrImmediateOperation",
                                "timestamp"
                              |)
                            |)
                          ]
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (|
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      self,
                                      "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOrImmediateOperation",
                                      "aux"
                                    |)
                                  |)
                                |),
                                "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols",
                                "base"
                              |)
                            |)
                          |)
                        |);
                        M.call_closure (|
                          F,
                          M.get_trait_method (| "core::clone::Clone", F, [], [], "clone", [], [] |),
                          [ M.borrow (| Pointer.Kind.Ref, enabled |) ]
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker",
                        "eval_bulk_access",
                        [ Value.Integer IntegerKind.Usize 1 ],
                        [ AB ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            self,
                            "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOrImmediateOperation",
                            "offline_checker"
                          |)
                        |);
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            self,
                            "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOrImmediateOperation",
                            "address"
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 1 ]
                                  [ F ],
                                Value.Array
                                  [
                                    M.call_closure (|
                                      F,
                                      M.get_trait_method (|
                                        "core::clone::Clone",
                                        F,
                                        [],
                                        [],
                                        "clone",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            self,
                                            "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOrImmediateOperation",
                                            "data"
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                              |)
                            |)
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 1 ]
                                  [ F ],
                                Value.Array
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        self,
                                        "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOrImmediateOperation",
                                        "data"
                                      |)
                                    |)
                                  ]
                              |)
                            |)
                          |)
                        |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            self,
                            "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOrImmediateOperation",
                            "timestamp"
                          |)
                        |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (|
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    self,
                                    "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOrImmediateOperation",
                                    "aux"
                                  |)
                                |)
                              |),
                              "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols",
                              "base"
                            |),
                            "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols",
                            "prev_timestamp"
                          |)
                        |);
                        M.call_closure (|
                          F,
                          M.get_trait_method (|
                            "core::ops::arith::Mul",
                            F,
                            [],
                            [ F ],
                            "mul",
                            [],
                            []
                          |),
                          [
                            M.read (| enabled |);
                            M.call_closure (|
                              F,
                              M.get_function (|
                                "openvm_circuit_primitives::utils::not",
                                [],
                                [ F; V ]
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (|
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          self,
                                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOrImmediateOperation",
                                          "aux"
                                        |)
                                      |)
                                    |),
                                    "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols",
                                    "is_immediate"
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      ]
                    |) in
                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_eval :
            forall (F V : Ty.t),
            M.IsAssociatedFunction.C (Self F V) "eval" (eval F V).
          Admitted.
          Global Typeclasses Opaque eval.
        End Impl_openvm_circuit_system_memory_offline_checker_bridge_MemoryReadOrImmediateOperation_F_V.
        
        (* StructRecord
          {
            name := "MemoryWriteOperation";
            const_params := [ "N" ];
            ty_params := [ "T"; "V" ];
            fields :=
              [
                ("offline_checker",
                  Ty.path
                    "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker");
                ("address",
                  Ty.apply (Ty.path "openvm_circuit::system::memory::MemoryAddress") [] [ T; T ]);
                ("data", Ty.apply (Ty.path "array") [ N ] [ T ]);
                ("timestamp", T);
                ("aux",
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                        [ N ]
                        [ V ]
                    ])
              ];
          } *)
        
        Module Impl_openvm_circuit_system_memory_offline_checker_bridge_MemoryWriteOperation_N_T_V.
          Definition Self (N : Value.t) (T V : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "openvm_circuit::system::memory::offline_checker::bridge::MemoryWriteOperation")
              [ N ]
              [ T; V ].
          
          (*
              pub fn eval<AB>(self, builder: &mut AB, enabled: impl Into<AB::Expr>)
              where
                  AB: InteractionBuilder<Var = V, Expr = T>,
              {
                  let enabled = enabled.into();
                  self.offline_checker.eval_timestamps(
                      builder,
                      self.timestamp.clone(),
                      &self.aux.base,
                      enabled.clone(),
                  );
          
                  self.offline_checker.eval_bulk_access(
                      builder,
                      self.address,
                      &self.data,
                      &self.aux.prev_data.map(Into::into),
                      self.timestamp,
                      self.aux.base.prev_timestamp,
                      enabled,
                  );
              }
          *)
          Definition eval
              (N : Value.t)
              (T V : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self N T V in
            match ε, τ, α with
            | [], [ AB; impl_Into_AB_Expr_ ], [ self; builder; enabled ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::memory::offline_checker::bridge::MemoryWriteOperation")
                      [ N ]
                      [ T; V ],
                    self
                  |) in
                let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
                let enabled := M.alloc (| impl_Into_AB_Expr_, enabled |) in
                M.read (|
                  let~ enabled : T :=
                    M.call_closure (|
                      T,
                      M.get_trait_method (|
                        "core::convert::Into",
                        impl_Into_AB_Expr_,
                        [],
                        [ T ],
                        "into",
                        [],
                        []
                      |),
                      [ M.read (| enabled |) ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker",
                        "eval_timestamps",
                        [],
                        [ AB ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            self,
                            "openvm_circuit::system::memory::offline_checker::bridge::MemoryWriteOperation",
                            "offline_checker"
                          |)
                        |);
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                        M.call_closure (|
                          T,
                          M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                self,
                                "openvm_circuit::system::memory::offline_checker::bridge::MemoryWriteOperation",
                                "timestamp"
                              |)
                            |)
                          ]
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (|
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      self,
                                      "openvm_circuit::system::memory::offline_checker::bridge::MemoryWriteOperation",
                                      "aux"
                                    |)
                                  |)
                                |),
                                "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols",
                                "base"
                              |)
                            |)
                          |)
                        |);
                        M.call_closure (|
                          T,
                          M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                          [ M.borrow (| Pointer.Kind.Ref, enabled |) ]
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker",
                        "eval_bulk_access",
                        [ N ],
                        [ AB ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            self,
                            "openvm_circuit::system::memory::offline_checker::bridge::MemoryWriteOperation",
                            "offline_checker"
                          |)
                        |);
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            self,
                            "openvm_circuit::system::memory::offline_checker::bridge::MemoryWriteOperation",
                            "address"
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                self,
                                "openvm_circuit::system::memory::offline_checker::bridge::MemoryWriteOperation",
                                "data"
                              |)
                            |)
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.apply (Ty.path "array") [ N ] [ T ],
                                M.call_closure (|
                                  Ty.apply (Ty.path "array") [ N ] [ T ],
                                  M.get_associated_function (|
                                    Ty.apply (Ty.path "array") [ N ] [ V ],
                                    "map",
                                    [],
                                    [ Ty.function [ V ] T; T ]
                                  |),
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (|
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              self,
                                              "openvm_circuit::system::memory::offline_checker::bridge::MemoryWriteOperation",
                                              "aux"
                                            |)
                                          |)
                                        |),
                                        "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols",
                                        "prev_data"
                                      |)
                                    |);
                                    M.get_trait_method (|
                                      "core::convert::Into",
                                      V,
                                      [],
                                      [ T ],
                                      "into",
                                      [],
                                      []
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          |)
                        |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            self,
                            "openvm_circuit::system::memory::offline_checker::bridge::MemoryWriteOperation",
                            "timestamp"
                          |)
                        |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (|
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    self,
                                    "openvm_circuit::system::memory::offline_checker::bridge::MemoryWriteOperation",
                                    "aux"
                                  |)
                                |)
                              |),
                              "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols",
                              "base"
                            |),
                            "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols",
                            "prev_timestamp"
                          |)
                        |);
                        M.read (| enabled |)
                      ]
                    |) in
                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_eval :
            forall (N : Value.t) (T V : Ty.t),
            M.IsAssociatedFunction.C (Self N T V) "eval" (eval N T V).
          Admitted.
          Global Typeclasses Opaque eval.
        End Impl_openvm_circuit_system_memory_offline_checker_bridge_MemoryWriteOperation_N_T_V.
        
        (* StructRecord
          {
            name := "MemoryOfflineChecker";
            const_params := [];
            ty_params := [];
            fields :=
              [
                ("memory_bus",
                  Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus");
                ("timestamp_lt_air",
                  Ty.path "openvm_circuit_primitives::assert_less_than::AssertLtSubAir")
              ];
          } *)
        
        Module Impl_core_clone_Clone_for_openvm_circuit_system_memory_offline_checker_bridge_MemoryOfflineChecker.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker".
          
          (* Clone *)
          Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker"
                      ],
                    self
                  |) in
                M.match_operator (|
                  Ty.path
                    "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker",
                  Value.DeclaredButUndefined,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.path
                            "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker",
                          Value.DeclaredButUndefined,
                          [ fun γ => ltac:(M.monadic (M.read (| M.deref (| M.read (| self |) |) |)))
                          ]
                        |)))
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "core::clone::Clone"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [ ("clone", InstanceField.Method clone) ].
        End Impl_core_clone_Clone_for_openvm_circuit_system_memory_offline_checker_bridge_MemoryOfflineChecker.
        
        Module Impl_core_marker_Copy_for_openvm_circuit_system_memory_offline_checker_bridge_MemoryOfflineChecker.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker".
          
          Axiom Implements :
            M.IsTraitInstance
              "core::marker::Copy"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [].
        End Impl_core_marker_Copy_for_openvm_circuit_system_memory_offline_checker_bridge_MemoryOfflineChecker.
        
        Module Impl_core_fmt_Debug_for_openvm_circuit_system_memory_offline_checker_bridge_MemoryOfflineChecker.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker".
          
          (* Debug *)
          Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [], [ self; f ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker"
                      ],
                    self
                  |) in
                let f :=
                  M.alloc (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ],
                    f
                  |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_field2_finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| mk_str (| "MemoryOfflineChecker" |) |)
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "memory_bus" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.path
                              "openvm_circuit::system::memory::offline_checker::bus::MemoryBus"
                          ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker",
                                "memory_bus"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "timestamp_lt_air" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.path
                                  "openvm_circuit_primitives::assert_less_than::AssertLtSubAir"
                              ]
                          ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.path
                                      "openvm_circuit_primitives::assert_less_than::AssertLtSubAir"
                                  ],
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker",
                                    "timestamp_lt_air"
                                  |)
                                |)
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "core::fmt::Debug"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
        End Impl_core_fmt_Debug_for_openvm_circuit_system_memory_offline_checker_bridge_MemoryOfflineChecker.
        
        Module Impl_openvm_circuit_system_memory_offline_checker_bridge_MemoryOfflineChecker.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker".
          
          (*
              fn new(memory_bus: MemoryBus, clk_max_bits: usize, range_bus: VariableRangeCheckerBus) -> Self {
                  Self {
                      memory_bus,
                      timestamp_lt_air: AssertLtSubAir::new(range_bus, clk_max_bits),
                  }
              }
          *)
          Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [], [ memory_bus; clk_max_bits; range_bus ] =>
              ltac:(M.monadic
                (let memory_bus :=
                  M.alloc (|
                    Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                    memory_bus
                  |) in
                let clk_max_bits := M.alloc (| Ty.path "usize", clk_max_bits |) in
                let range_bus :=
                  M.alloc (|
                    Ty.path "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                    range_bus
                  |) in
                Value.mkStructRecord
                  "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker"
                  []
                  []
                  [
                    ("memory_bus", M.read (| memory_bus |));
                    ("timestamp_lt_air",
                      M.call_closure (|
                        Ty.path "openvm_circuit_primitives::assert_less_than::AssertLtSubAir",
                        M.get_associated_function (|
                          Ty.path "openvm_circuit_primitives::assert_less_than::AssertLtSubAir",
                          "new",
                          [],
                          []
                        |),
                        [ M.read (| range_bus |); M.read (| clk_max_bits |) ]
                      |))
                  ]))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
          Admitted.
          Global Typeclasses Opaque new.
          
          (*
              fn eval_timestamps<AB: InteractionBuilder>(
                  &self,
                  builder: &mut AB,
                  timestamp: AB::Expr,
                  base: &MemoryBaseAuxCols<AB::Var>,
                  enabled: AB::Expr,
              ) {
                  let lt_io = AssertLessThanIo::new(base.prev_timestamp, timestamp.clone(), enabled);
                  self.timestamp_lt_air
                      .eval(builder, (lt_io, &base.timestamp_lt_aux.lower_decomp));
              }
          *)
          Definition eval_timestamps (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [ AB ], [ self; builder; timestamp; base; enabled ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker"
                      ],
                    self
                  |) in
                let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
                let timestamp :=
                  M.alloc (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    timestamp
                  |) in
                let base :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      ],
                    base
                  |) in
                let enabled :=
                  M.alloc (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    enabled
                  |) in
                M.read (|
                  let~ lt_io :
                      Ty.apply
                        (Ty.path "openvm_circuit_primitives::assert_less_than::AssertLessThanIo")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "openvm_circuit_primitives::assert_less_than::AssertLessThanIo")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_circuit_primitives::assert_less_than::AssertLessThanIo")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                        "new",
                        [],
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                        ]
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| base |) |),
                            "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols",
                            "prev_timestamp"
                          |)
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, timestamp |) ]
                        |);
                        M.read (| enabled |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_trait_method (|
                        "openvm_circuit_primitives::sub_air::SubAir",
                        Ty.path "openvm_circuit_primitives::assert_less_than::AssertLtSubAir",
                        [],
                        [ AB ],
                        "eval",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker",
                            "timestamp_lt_air"
                          |)
                        |);
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                        Value.Tuple
                          [
                            M.read (| lt_io |);
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ]
                                ],
                              M.pointer_coercion
                                M.PointerCoercion.Unsize
                                (Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                  ])
                                (Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                  ]),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| base |) |),
                                          "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols",
                                          "timestamp_lt_aux"
                                        |),
                                        "openvm_circuit_primitives::assert_less_than::LessThanAuxCols",
                                        "lower_decomp"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                      ]
                    |) in
                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_eval_timestamps :
            M.IsAssociatedFunction.C Self "eval_timestamps" eval_timestamps.
          Admitted.
          Global Typeclasses Opaque eval_timestamps.
          
          (*
              fn eval_bulk_access<AB, const N: usize>(
                  &self,
                  builder: &mut AB,
                  address: MemoryAddress<AB::Expr, AB::Expr>,
                  data: &[AB::Expr; N],
                  prev_data: &[AB::Expr; N],
                  timestamp: AB::Expr,
                  prev_timestamp: AB::Var,
                  enabled: AB::Expr,
              ) where
                  AB: InteractionBuilder,
              {
                  self.memory_bus
                      .receive(address.clone(), prev_data.to_vec(), prev_timestamp)
                      .eval(builder, enabled.clone());
          
                  self.memory_bus
                      .send(address, data.to_vec(), timestamp)
                      .eval(builder, enabled);
              }
          *)
          Definition eval_bulk_access (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [ N ],
                [ AB ],
                [ self; builder; address; data; prev_data; timestamp; prev_timestamp; enabled ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker"
                      ],
                    self
                  |) in
                let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
                let address :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                      []
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                      ],
                    address
                  |) in
                let data :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ N ]
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                      ],
                    data
                  |) in
                let prev_data :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ N ]
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                      ],
                    prev_data
                  |) in
                let timestamp :=
                  M.alloc (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    timestamp
                  |) in
                let prev_timestamp :=
                  M.alloc (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                    prev_timestamp
                  |) in
                let enabled :=
                  M.alloc (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    enabled
                  |) in
                M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                        "eval",
                        [],
                        [ AB; Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                          M.get_associated_function (|
                            Ty.path
                              "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                            "receive",
                            [],
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                            ]
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker",
                                "memory_bus"
                              |)
                            |);
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                                []
                                [
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr";
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ],
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, address |) ]
                            |);
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ],
                                "to_vec",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        ]
                                    ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ N ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr"
                                          ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr"
                                          ]
                                      ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| prev_data |) |)
                                    |)
                                  ]
                                |)
                              ]
                            |);
                            M.read (| prev_timestamp |)
                          ]
                        |);
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, enabled |) ]
                        |)
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    M.call_closure (|
                      Ty.tuple [],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                        "eval",
                        [],
                        [ AB; Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                          M.get_associated_function (|
                            Ty.path
                              "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                            "send",
                            [],
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                            ]
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::offline_checker::bridge::MemoryOfflineChecker",
                                "memory_bus"
                              |)
                            |);
                            M.read (| address |);
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ],
                                "to_vec",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        ]
                                    ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ N ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr"
                                          ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr"
                                          ]
                                      ]),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| data |) |) |)
                                  ]
                                |)
                              ]
                            |);
                            M.read (| timestamp |)
                          ]
                        |);
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                        M.read (| enabled |)
                      ]
                    |) in
                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_eval_bulk_access :
            M.IsAssociatedFunction.C Self "eval_bulk_access" eval_bulk_access.
          Admitted.
          Global Typeclasses Opaque eval_bulk_access.
        End Impl_openvm_circuit_system_memory_offline_checker_bridge_MemoryOfflineChecker.
      End bridge.
    End offline_checker.
  End memory.
End system.
