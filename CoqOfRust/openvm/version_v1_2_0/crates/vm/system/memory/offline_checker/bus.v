(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module system.
  Module memory.
    Module offline_checker.
      Module bus.
        (* StructRecord
          {
            name := "MemoryBus";
            const_params := [];
            ty_params := [];
            fields :=
              [ ("inner", Ty.path "openvm_stark_backend::interaction::PermutationCheckBus") ];
          } *)
        
        Module Impl_core_clone_Clone_for_openvm_circuit_system_memory_offline_checker_bus_MemoryBus.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus".
          
          (* Clone *)
          Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus" ],
                    self
                  |) in
                M.match_operator (|
                  Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                  Value.DeclaredButUndefined,
                  [ fun γ => ltac:(M.monadic (M.read (| M.deref (| M.read (| self |) |) |))) ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "core::clone::Clone"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [ ("clone", InstanceField.Method clone) ].
        End Impl_core_clone_Clone_for_openvm_circuit_system_memory_offline_checker_bus_MemoryBus.
        
        Module Impl_core_marker_Copy_for_openvm_circuit_system_memory_offline_checker_bus_MemoryBus.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus".
          
          Axiom Implements :
            M.IsTraitInstance
              "core::marker::Copy"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [].
        End Impl_core_marker_Copy_for_openvm_circuit_system_memory_offline_checker_bus_MemoryBus.
        
        Module Impl_core_fmt_Debug_for_openvm_circuit_system_memory_offline_checker_bus_MemoryBus.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus".
          
          (* Debug *)
          Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [], [ self; f ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus" ],
                    self
                  |) in
                let f :=
                  M.alloc (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ],
                    f
                  |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_field1_finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "MemoryBus" |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "inner" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.path "openvm_stark_backend::interaction::PermutationCheckBus" ]
                          ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.path "openvm_stark_backend::interaction::PermutationCheckBus"
                                  ],
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                                    "inner"
                                  |)
                                |)
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "core::fmt::Debug"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
        End Impl_core_fmt_Debug_for_openvm_circuit_system_memory_offline_checker_bus_MemoryBus.
        
        Module Impl_core_marker_StructuralPartialEq_for_openvm_circuit_system_memory_offline_checker_bus_MemoryBus.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus".
          
          Axiom Implements :
            M.IsTraitInstance
              "core::marker::StructuralPartialEq"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [].
        End Impl_core_marker_StructuralPartialEq_for_openvm_circuit_system_memory_offline_checker_bus_MemoryBus.
        
        Module Impl_core_cmp_PartialEq_openvm_circuit_system_memory_offline_checker_bus_MemoryBus_for_openvm_circuit_system_memory_offline_checker_bus_MemoryBus.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus".
          
          (* PartialEq *)
          Definition eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [], [ self; other ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus" ],
                    self
                  |) in
                let other :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus" ],
                    other
                  |) in
                M.call_closure (|
                  Ty.path "bool",
                  M.get_trait_method (|
                    "core::cmp::PartialEq",
                    Ty.path "openvm_stark_backend::interaction::PermutationCheckBus",
                    [],
                    [ Ty.path "openvm_stark_backend::interaction::PermutationCheckBus" ],
                    "eq",
                    [],
                    []
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                        "inner"
                      |)
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| other |) |),
                        "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                        "inner"
                      |)
                    |)
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "core::cmp::PartialEq"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *)
              [ Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus" ]
              Self
              (* Instance *) [ ("eq", InstanceField.Method eq) ].
        End Impl_core_cmp_PartialEq_openvm_circuit_system_memory_offline_checker_bus_MemoryBus_for_openvm_circuit_system_memory_offline_checker_bus_MemoryBus.
        
        Module Impl_core_cmp_Eq_for_openvm_circuit_system_memory_offline_checker_bus_MemoryBus.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus".
          
          (* Eq *)
          Definition assert_receiver_is_total_eq
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus" ],
                    self
                  |) in
                M.match_operator (|
                  Ty.tuple [],
                  Value.DeclaredButUndefined,
                  [ fun γ => ltac:(M.monadic (Value.Tuple [])) ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "core::cmp::Eq"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *)
              [ ("assert_receiver_is_total_eq", InstanceField.Method assert_receiver_is_total_eq) ].
        End Impl_core_cmp_Eq_for_openvm_circuit_system_memory_offline_checker_bus_MemoryBus.
        
        Module Impl_openvm_circuit_system_memory_offline_checker_bus_MemoryBus.
          Definition Self : Ty.t :=
            Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus".
          
          (*
              pub const fn new(index: BusIndex) -> Self {
                  Self {
                      inner: PermutationCheckBus::new(index),
                  }
              }
          *)
          Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [], [ index ] =>
              ltac:(M.monadic
                (let index := M.alloc (| Ty.path "u16", index |) in
                Value.mkStructRecord
                  "openvm_circuit::system::memory::offline_checker::bus::MemoryBus"
                  []
                  []
                  [
                    ("inner",
                      M.call_closure (|
                        Ty.path "openvm_stark_backend::interaction::PermutationCheckBus",
                        M.get_associated_function (|
                          Ty.path "openvm_stark_backend::interaction::PermutationCheckBus",
                          "new",
                          [],
                          []
                        |),
                        [ M.read (| index |) ]
                      |))
                  ]))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
          Admitted.
          Global Typeclasses Opaque new.
          (*
              pub fn index(&self) -> BusIndex {
                  self.inner.index
              }
          *)
          Definition index (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus" ],
                    self
                  |) in
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                      "inner"
                    |),
                    "openvm_stark_backend::interaction::PermutationCheckBus",
                    "index"
                  |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_index : M.IsAssociatedFunction.C Self "index" index.
          Admitted.
          Global Typeclasses Opaque index.
          
          (*
              pub fn send<T: Clone>(
                  &self,
                  address: MemoryAddress<impl Into<T>, impl Into<T>>,
                  data: Vec<impl Into<T>>,
                  timestamp: impl Into<T>,
              ) -> MemoryBusInteraction<T> {
                  self.push(true, address, data, timestamp)
              }
          *)
          Definition send (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [],
                [ T; impl_Into_T_; impl_Into_T_'1; impl_Into_T_'2; impl_Into_T_'3 ],
                [ self; address; data; timestamp ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus" ],
                    self
                  |) in
                let address :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                      []
                      [ impl_Into_T_; impl_Into_T_'1 ],
                    address
                  |) in
                let data :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ impl_Into_T_'2; Ty.path "alloc::alloc::Global" ],
                    data
                  |) in
                let timestamp := M.alloc (| impl_Into_T_'3, timestamp |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path
                      "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction")
                    []
                    [ T ],
                  M.get_associated_function (|
                    Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                    "push",
                    [],
                    [ T; impl_Into_T_; impl_Into_T_'1; impl_Into_T_'2; impl_Into_T_'3 ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                    Value.Bool true;
                    M.read (| address |);
                    M.read (| data |);
                    M.read (| timestamp |)
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_send : M.IsAssociatedFunction.C Self "send" send.
          Admitted.
          Global Typeclasses Opaque send.
          
          (*
              pub fn receive<T: Clone>(
                  &self,
                  address: MemoryAddress<impl Into<T>, impl Into<T>>,
                  data: Vec<impl Into<T>>,
                  timestamp: impl Into<T>,
              ) -> MemoryBusInteraction<T> {
                  self.push(false, address, data, timestamp)
              }
          *)
          Definition receive (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [],
                [ T; impl_Into_T_; impl_Into_T_'1; impl_Into_T_'2; impl_Into_T_'3 ],
                [ self; address; data; timestamp ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus" ],
                    self
                  |) in
                let address :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                      []
                      [ impl_Into_T_; impl_Into_T_'1 ],
                    address
                  |) in
                let data :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ impl_Into_T_'2; Ty.path "alloc::alloc::Global" ],
                    data
                  |) in
                let timestamp := M.alloc (| impl_Into_T_'3, timestamp |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path
                      "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction")
                    []
                    [ T ],
                  M.get_associated_function (|
                    Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                    "push",
                    [],
                    [ T; impl_Into_T_; impl_Into_T_'1; impl_Into_T_'2; impl_Into_T_'3 ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                    Value.Bool false;
                    M.read (| address |);
                    M.read (| data |);
                    M.read (| timestamp |)
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_receive :
            M.IsAssociatedFunction.C Self "receive" receive.
          Admitted.
          Global Typeclasses Opaque receive.
          
          (*
              fn push<T: Clone>(
                  &self,
                  is_send: bool,
                  address: MemoryAddress<impl Into<T>, impl Into<T>>,
                  data: Vec<impl Into<T>>,
                  timestamp: impl Into<T>,
              ) -> MemoryBusInteraction<T> {
                  MemoryBusInteraction {
                      bus: self.inner,
                      is_send,
                      address: MemoryAddress::new(address.address_space.into(), address.pointer.into()),
                      data: data.into_iter().map(|item| item.into()).collect(),
                      timestamp: timestamp.into(),
                  }
              }
          *)
          Definition push (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [],
                [ T; impl_Into_T_; impl_Into_T_'1; impl_Into_T_'2; impl_Into_T_'3 ],
                [ self; is_send; address; data; timestamp ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus" ],
                    self
                  |) in
                let is_send := M.alloc (| Ty.path "bool", is_send |) in
                let address :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                      []
                      [ impl_Into_T_; impl_Into_T_'1 ],
                    address
                  |) in
                let data :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ impl_Into_T_'2; Ty.path "alloc::alloc::Global" ],
                    data
                  |) in
                let timestamp := M.alloc (| impl_Into_T_'3, timestamp |) in
                Value.mkStructRecord
                  "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction"
                  []
                  [ T ]
                  [
                    ("bus",
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                          "inner"
                        |)
                      |));
                    ("is_send", M.read (| is_send |));
                    ("address",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                          []
                          [ T; T ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                            []
                            [ T; T ],
                          "new",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            T,
                            M.get_trait_method (|
                              "core::convert::Into",
                              impl_Into_T_,
                              [],
                              [ T ],
                              "into",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  address,
                                  "openvm_circuit::system::memory::MemoryAddress",
                                  "address_space"
                                |)
                              |)
                            ]
                          |);
                          M.call_closure (|
                            T,
                            M.get_trait_method (|
                              "core::convert::Into",
                              impl_Into_T_'1,
                              [],
                              [ T ],
                              "into",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  address,
                                  "openvm_circuit::system::memory::MemoryAddress",
                                  "pointer"
                                |)
                              |)
                            ]
                          |)
                        ]
                      |));
                    ("data",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ T; Ty.path "alloc::alloc::Global" ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::map::Map")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [ impl_Into_T_'2; Ty.path "alloc::alloc::Global" ];
                              Ty.function [ impl_Into_T_'2 ] T
                            ],
                          [],
                          [],
                          "collect",
                          [],
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ T; Ty.path "alloc::alloc::Global" ]
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::map::Map")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                  []
                                  [ impl_Into_T_'2; Ty.path "alloc::alloc::Global" ];
                                Ty.function [ impl_Into_T_'2 ] T
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [ impl_Into_T_'2; Ty.path "alloc::alloc::Global" ],
                              [],
                              [],
                              "map",
                              [],
                              [ T; Ty.function [ impl_Into_T_'2 ] T ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                  []
                                  [ impl_Into_T_'2; Ty.path "alloc::alloc::Global" ],
                                M.get_trait_method (|
                                  "core::iter::traits::collect::IntoIterator",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ impl_Into_T_'2; Ty.path "alloc::alloc::Global" ],
                                  [],
                                  [],
                                  "into_iter",
                                  [],
                                  []
                                |),
                                [ M.read (| data |) ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          T,
                                          M.alloc (| impl_Into_T_'2, α0 |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let item := M.copy (| impl_Into_T_'2, γ |) in
                                                M.call_closure (|
                                                  T,
                                                  M.get_trait_method (|
                                                    "core::convert::Into",
                                                    impl_Into_T_'2,
                                                    [],
                                                    [ T ],
                                                    "into",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| item |) ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |)
                        ]
                      |));
                    ("timestamp",
                      M.call_closure (|
                        T,
                        M.get_trait_method (|
                          "core::convert::Into",
                          impl_Into_T_'3,
                          [],
                          [ T ],
                          "into",
                          [],
                          []
                        |),
                        [ M.read (| timestamp |) ]
                      |))
                  ]))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_push : M.IsAssociatedFunction.C Self "push" push.
          Admitted.
          Global Typeclasses Opaque push.
        End Impl_openvm_circuit_system_memory_offline_checker_bus_MemoryBus.
        
        
        (* StructRecord
          {
            name := "MemoryBusInteraction";
            const_params := [];
            ty_params := [ "T" ];
            fields :=
              [
                ("bus", Ty.path "openvm_stark_backend::interaction::PermutationCheckBus");
                ("is_send", Ty.path "bool");
                ("address",
                  Ty.apply (Ty.path "openvm_circuit::system::memory::MemoryAddress") [] [ T; T ]);
                ("data",
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ]);
                ("timestamp", T)
              ];
          } *)
        
        Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_circuit_system_memory_offline_checker_bus_MemoryBusInteraction_T.
          Definition Self (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction")
              []
              [ T ].
          
          (* Clone *)
          Definition clone (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self T in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction")
                          []
                          [ T ]
                      ],
                    self
                  |) in
                Value.mkStructRecord
                  "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction"
                  []
                  [ T ]
                  [
                    ("bus",
                      M.call_closure (|
                        Ty.path "openvm_stark_backend::interaction::PermutationCheckBus",
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.path "openvm_stark_backend::interaction::PermutationCheckBus",
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction",
                                  "bus"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |));
                    ("is_send",
                      M.call_closure (|
                        Ty.path "bool",
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.path "bool",
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction",
                                  "is_send"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |));
                    ("address",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                          []
                          [ T; T ],
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                            []
                            [ T; T ],
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction",
                                  "address"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |));
                    ("data",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ T; Ty.path "alloc::alloc::Global" ],
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction",
                                  "data"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |));
                    ("timestamp",
                      M.call_closure (|
                        T,
                        M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction",
                                  "timestamp"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |))
                  ]))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (T : Ty.t),
            M.IsTraitInstance
              "core::clone::Clone"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self T)
              (* Instance *) [ ("clone", InstanceField.Method (clone T)) ].
        End Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_circuit_system_memory_offline_checker_bus_MemoryBusInteraction_T.
        
        Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_circuit_system_memory_offline_checker_bus_MemoryBusInteraction_T.
          Definition Self (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction")
              []
              [ T ].
          
          (* Debug *)
          Definition fmt (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self T in
            match ε, τ, α with
            | [], [], [ self; f ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction")
                          []
                          [ T ]
                      ],
                    self
                  |) in
                let f :=
                  M.alloc (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ],
                    f
                  |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_field5_finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| mk_str (| "MemoryBusInteraction" |) |)
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "bus" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.path "openvm_stark_backend::interaction::PermutationCheckBus" ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction",
                                "bus"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "is_send" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply (Ty.path "&") [] [ Ty.path "bool" ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction",
                                "is_send"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "address" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                              []
                              [ T; T ]
                          ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction",
                                "address"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "data" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ T; Ty.path "alloc::alloc::Global" ]
                          ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction",
                                "data"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "timestamp" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ T ] ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.apply (Ty.path "&") [] [ T ],
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction",
                                    "timestamp"
                                  |)
                                |)
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (T : Ty.t),
            M.IsTraitInstance
              "core::fmt::Debug"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self T)
              (* Instance *) [ ("fmt", InstanceField.Method (fmt T)) ].
        End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_circuit_system_memory_offline_checker_bus_MemoryBusInteraction_T.
        
        Module Impl_openvm_circuit_system_memory_offline_checker_bus_MemoryBusInteraction_T.
          Definition Self (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction")
              []
              [ T ].
          
          (*
              pub fn eval<AB>(self, builder: &mut AB, direction: impl Into<AB::Expr>)
              where
                  AB: InteractionBuilder<Expr = T>,
              {
                  let fields = iter::empty()
                      .chain(iter::once(self.address.address_space))
                      .chain(iter::once(self.address.pointer))
                      .chain(self.data)
                      .chain(iter::once(self.timestamp));
          
                  if self.is_send {
                      self.bus.interact(builder, fields, direction);
                  } else {
                      self.bus
                          .interact(builder, fields, AB::Expr::NEG_ONE * direction.into());
                  }
              }
          *)
          Definition eval (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self T in
            match ε, τ, α with
            | [], [ AB; impl_Into_AB_Expr_ ], [ self; builder; direction ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction")
                      []
                      [ T ],
                    self
                  |) in
                let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
                let direction := M.alloc (| impl_Into_AB_Expr_, direction |) in
                M.read (|
                  let~ fields :
                      Ty.apply
                        (Ty.path "core::iter::adapters::chain::Chain")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::chain::Chain")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::sources::empty::Empty")
                                        []
                                        [ T ];
                                      Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ T ]
                                    ];
                                  Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ T ]
                                ];
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [ T; Ty.path "alloc::alloc::Global" ]
                            ];
                          Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ T ]
                        ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::iter::adapters::chain::Chain")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::chain::Chain")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::sources::empty::Empty")
                                        []
                                        [ T ];
                                      Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ T ]
                                    ];
                                  Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ T ]
                                ];
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [ T; Ty.path "alloc::alloc::Global" ]
                            ];
                          Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ T ]
                        ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::chain::Chain")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  []
                                  [
                                    Ty.apply (Ty.path "core::iter::sources::empty::Empty") [] [ T ];
                                    Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ T ]
                                  ];
                                Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ T ]
                              ];
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ T; Ty.path "alloc::alloc::Global" ]
                          ],
                        [],
                        [],
                        "chain",
                        [],
                        [ Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ T ] ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::chain::Chain")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::sources::empty::Empty")
                                        []
                                        [ T ];
                                      Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ T ]
                                    ];
                                  Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ T ]
                                ];
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [ T; Ty.path "alloc::alloc::Global" ]
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  []
                                  [
                                    Ty.apply (Ty.path "core::iter::sources::empty::Empty") [] [ T ];
                                    Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ T ]
                                  ];
                                Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ T ]
                              ],
                            [],
                            [],
                            "chain",
                            [],
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ T; Ty.path "alloc::alloc::Global" ]
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::sources::empty::Empty")
                                        []
                                        [ T ];
                                      Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ T ]
                                    ];
                                  Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ T ]
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  []
                                  [
                                    Ty.apply (Ty.path "core::iter::sources::empty::Empty") [] [ T ];
                                    Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ T ]
                                  ],
                                [],
                                [],
                                "chain",
                                [],
                                [ Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ T ] ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::chain::Chain")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::iter::sources::empty::Empty")
                                        []
                                        [ T ];
                                      Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ T ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply (Ty.path "core::iter::sources::empty::Empty") [] [ T ],
                                    [],
                                    [],
                                    "chain",
                                    [],
                                    [ Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ T ]
                                    ]
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::iter::sources::empty::Empty")
                                        []
                                        [ T ],
                                      M.get_function (|
                                        "core::iter::sources::empty::empty",
                                        [],
                                        [ T ]
                                      |),
                                      []
                                    |);
                                    M.call_closure (|
                                      Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ T ],
                                      M.get_function (|
                                        "core::iter::sources::once::once",
                                        [],
                                        [ T ]
                                      |),
                                      [
                                        M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.SubPointer.get_struct_record_field (|
                                              self,
                                              "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction",
                                              "address"
                                            |),
                                            "openvm_circuit::system::memory::MemoryAddress",
                                            "address_space"
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ T ],
                                  M.get_function (| "core::iter::sources::once::once", [], [ T ] |),
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          self,
                                          "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction",
                                          "address"
                                        |),
                                        "openvm_circuit::system::memory::MemoryAddress",
                                        "pointer"
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                self,
                                "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction",
                                "data"
                              |)
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.apply (Ty.path "core::iter::sources::once::Once") [] [ T ],
                          M.get_function (| "core::iter::sources::once::once", [], [ T ] |),
                          [
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                self,
                                "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction",
                                "timestamp"
                              |)
                            |)
                          ]
                        |)
                      ]
                    |) in
                  M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.SubPointer.get_struct_record_field (|
                                  self,
                                  "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction",
                                  "is_send"
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.call_closure (|
                                  Ty.tuple [],
                                  M.get_associated_function (|
                                    Ty.path
                                      "openvm_stark_backend::interaction::PermutationCheckBus",
                                    "interact",
                                    [],
                                    [
                                      AB;
                                      T;
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::chain::Chain")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::chain::Chain")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::chain::Chain")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::chain::Chain")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::sources::empty::Empty")
                                                        []
                                                        [ T ];
                                                      Ty.apply
                                                        (Ty.path "core::iter::sources::once::Once")
                                                        []
                                                        [ T ]
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "core::iter::sources::once::Once")
                                                    []
                                                    [ T ]
                                                ];
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                []
                                                [ T; Ty.path "alloc::alloc::Global" ]
                                            ];
                                          Ty.apply
                                            (Ty.path "core::iter::sources::once::Once")
                                            []
                                            [ T ]
                                        ];
                                      impl_Into_AB_Expr_
                                    ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        self,
                                        "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction",
                                        "bus"
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| builder |) |)
                                    |);
                                    M.read (| fields |);
                                    M.read (| direction |)
                                  ]
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.call_closure (|
                                  Ty.tuple [],
                                  M.get_associated_function (|
                                    Ty.path
                                      "openvm_stark_backend::interaction::PermutationCheckBus",
                                    "interact",
                                    [],
                                    [
                                      AB;
                                      T;
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::chain::Chain")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::chain::Chain")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::iter::adapters::chain::Chain")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::iter::adapters::chain::Chain")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::sources::empty::Empty")
                                                        []
                                                        [ T ];
                                                      Ty.apply
                                                        (Ty.path "core::iter::sources::once::Once")
                                                        []
                                                        [ T ]
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "core::iter::sources::once::Once")
                                                    []
                                                    [ T ]
                                                ];
                                              Ty.apply
                                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                                []
                                                [ T; Ty.path "alloc::alloc::Global" ]
                                            ];
                                          Ty.apply
                                            (Ty.path "core::iter::sources::once::Once")
                                            []
                                            [ T ]
                                        ];
                                      T
                                    ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        self,
                                        "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction",
                                        "bus"
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| builder |) |)
                                    |);
                                    M.read (| fields |);
                                    M.call_closure (|
                                      T,
                                      M.get_trait_method (|
                                        "core::ops::arith::Mul",
                                        T,
                                        [],
                                        [ T ],
                                        "mul",
                                        [],
                                        []
                                      |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "p3_field::field::FieldAlgebra::NEG_ONE",
                                            T
                                          |)
                                        |);
                                        M.call_closure (|
                                          T,
                                          M.get_trait_method (|
                                            "core::convert::Into",
                                            impl_Into_AB_Expr_,
                                            [],
                                            [ T ],
                                            "into",
                                            [],
                                            []
                                          |),
                                          [ M.read (| direction |) ]
                                        |)
                                      ]
                                    |)
                                  ]
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                            |)))
                      ]
                    |)
                  |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_eval :
            forall (T : Ty.t),
            M.IsAssociatedFunction.C (Self T) "eval" (eval T).
          Admitted.
          Global Typeclasses Opaque eval.
        End Impl_openvm_circuit_system_memory_offline_checker_bus_MemoryBusInteraction_T.
      End bus.
    End offline_checker.
  End memory.
End system.
