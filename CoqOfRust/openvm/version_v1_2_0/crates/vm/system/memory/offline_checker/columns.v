(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module system.
  Module memory.
    Module offline_checker.
      Module columns.
        (* StructRecord
          {
            name := "MemoryBaseAuxCols";
            const_params := [];
            ty_params := [ "T" ];
            fields :=
              [
                ("prev_timestamp", T);
                ("timestamp_lt_aux",
                  Ty.apply
                    (Ty.path "openvm_circuit_primitives::assert_less_than::LessThanAuxCols")
                    [
                      M.unevaluated_const
                        (mk_str (|
                          "openvm_circuit_system_memory_offline_checker_columns_MemoryBaseAuxCols_discriminant"
                        |))
                    ]
                    [ T ])
              ];
          } *)
        
        Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_circuit_system_memory_offline_checker_columns_MemoryBaseAuxCols_T.
          Definition Self (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
              []
              [ T ].
          
          (* Clone *)
          Definition clone (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self T in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                          []
                          [ T ]
                      ],
                    self
                  |) in
                Value.mkStructRecord
                  "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols"
                  []
                  [ T ]
                  [
                    ("prev_timestamp",
                      M.call_closure (|
                        T,
                        M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols",
                                  "prev_timestamp"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |));
                    ("timestamp_lt_aux",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_circuit_primitives::assert_less_than::LessThanAuxCols")
                          [ Value.Integer IntegerKind.Usize 2 ]
                          [ T ],
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.apply
                            (Ty.path "openvm_circuit_primitives::assert_less_than::LessThanAuxCols")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ T ],
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols",
                                  "timestamp_lt_aux"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |))
                  ]))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (T : Ty.t),
            M.IsTraitInstance
              "core::clone::Clone"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self T)
              (* Instance *) [ ("clone", InstanceField.Method (clone T)) ].
        End Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_circuit_system_memory_offline_checker_columns_MemoryBaseAuxCols_T.
        
        Module Impl_core_marker_Copy_where_core_marker_Copy_T_for_openvm_circuit_system_memory_offline_checker_columns_MemoryBaseAuxCols_T.
          Definition Self (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
              []
              [ T ].
          
          Axiom Implements :
            forall (T : Ty.t),
            M.IsTraitInstance
              "core::marker::Copy"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self T)
              (* Instance *) [].
        End Impl_core_marker_Copy_where_core_marker_Copy_T_for_openvm_circuit_system_memory_offline_checker_columns_MemoryBaseAuxCols_T.
        
        Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_circuit_system_memory_offline_checker_columns_MemoryBaseAuxCols_T.
          Definition Self (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
              []
              [ T ].
          
          (* Debug *)
          Definition fmt (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self T in
            match ε, τ, α with
            | [], [], [ self; f ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                          []
                          [ T ]
                      ],
                    self
                  |) in
                let f :=
                  M.alloc (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ],
                    f
                  |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_field2_finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "MemoryBaseAuxCols" |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "prev_timestamp" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply (Ty.path "&") [] [ T ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols",
                                "prev_timestamp"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "timestamp_lt_aux" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit_primitives::assert_less_than::LessThanAuxCols")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ T ]
                              ]
                          ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit_primitives::assert_less_than::LessThanAuxCols")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ T ]
                                  ],
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols",
                                    "timestamp_lt_aux"
                                  |)
                                |)
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (T : Ty.t),
            M.IsTraitInstance
              "core::fmt::Debug"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self T)
              (* Instance *) [ ("fmt", InstanceField.Method (fmt T)) ].
        End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_circuit_system_memory_offline_checker_columns_MemoryBaseAuxCols_T.
        
        Module Impl_core_borrow_Borrow_openvm_circuit_system_memory_offline_checker_columns_MemoryBaseAuxCols_T_for_slice_T.
          Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ T ].
          
          (* AlignedBorrow *)
          Definition borrow (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self T in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                    self
                  |) in
                M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.tuple
                                      [
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                      ],
                                    Value.Tuple
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                "len",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| self |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                                                  []
                                                  [ T ],
                                                "width",
                                                [],
                                                []
                                              |),
                                              []
                                            |)
                                          |)
                                        |)
                                      ]
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let left_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_0
                                          |) in
                                        let right_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_1
                                          |) in
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.eq,
                                                          [
                                                            M.read (|
                                                              M.deref (| M.read (| left_val |) |)
                                                            |);
                                                            M.read (|
                                                              M.deref (| M.read (| right_val |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.never_to_any (|
                                                  M.read (|
                                                    let~ kind :
                                                        Ty.path "core::panicking::AssertKind" :=
                                                      Value.StructTuple
                                                        "core::panicking::AssertKind::Eq"
                                                        []
                                                        []
                                                        [] in
                                                    M.alloc (|
                                                      Ty.path "never",
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::assert_failed",
                                                          [],
                                                          [ Ty.path "usize"; Ty.path "usize" ]
                                                        |),
                                                        [
                                                          M.read (| kind |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| left_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| right_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          Value.StructTuple
                                                            "core::option::Option::None"
                                                            []
                                                            [ Ty.path "core::fmt::Arguments" ]
                                                            []
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                          []
                          [ T ]
                      ],
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                            []
                            [ T ]
                        ],
                      M.alloc (|
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                                      []
                                      [ T ]
                                  ]
                              ];
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                          ],
                        M.call_closure (|
                          Ty.tuple
                            [
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                                        []
                                        [ T ]
                                    ]
                                ];
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                            ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ T ],
                            "align_to",
                            [],
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                                []
                                [ T ]
                            ]
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                            let prefix :=
                              M.copy (|
                                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_0
                              |) in
                            let shorts :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                                          []
                                          [ T ]
                                      ]
                                  ],
                                γ0_1
                              |) in
                            let _suffix :=
                              M.copy (|
                                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_2
                              |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_associated_function (|
                                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                                "is_empty",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| prefix |) |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.never_to_any (|
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::panic_fmt",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::Arguments",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::Arguments",
                                                              "new_const",
                                                              [ Value.Integer IntegerKind.Usize 1 ],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Ty.path "str" ]
                                                                        ],
                                                                      Value.Array
                                                                        [
                                                                          mk_str (|
                                                                            "Alignment should match"
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (|
                                                Ty.tuple
                                                  [
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                  ],
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                                                                  []
                                                                  [ T ]
                                                              ],
                                                            "len",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| shorts |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        Value.Integer IntegerKind.Usize 1
                                                      |)
                                                    |)
                                                  ]
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let left_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_0
                                                      |) in
                                                    let right_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_1
                                                      |) in
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  Ty.path "bool",
                                                                  UnOp.not (|
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| left_val |)
                                                                          |)
                                                                        |);
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| right_val |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.never_to_any (|
                                                              M.read (|
                                                                let~ kind :
                                                                    Ty.path
                                                                      "core::panicking::AssertKind" :=
                                                                  Value.StructTuple
                                                                    "core::panicking::AssertKind::Eq"
                                                                    []
                                                                    []
                                                                    [] in
                                                                M.alloc (|
                                                                  Ty.path "never",
                                                                  M.call_closure (|
                                                                    Ty.path "never",
                                                                    M.get_function (|
                                                                      "core::panicking::assert_failed",
                                                                      [],
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.path "usize"
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.read (| kind |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| left_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| right_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      Value.StructTuple
                                                                        "core::option::Option::None"
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "core::fmt::Arguments"
                                                                        ]
                                                                        []
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                                      ]
                                                    |)))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                                      []
                                      [ T ]
                                  ],
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_array_field (|
                                        M.deref (| M.read (| shorts |) |),
                                        Value.Integer IntegerKind.Usize 0
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (T : Ty.t),
            M.IsTraitInstance
              "core::borrow::Borrow"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *)
              [
                Ty.apply
                  (Ty.path
                    "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                  []
                  [ T ]
              ]
              (Self T)
              (* Instance *) [ ("borrow", InstanceField.Method (borrow T)) ].
        End Impl_core_borrow_Borrow_openvm_circuit_system_memory_offline_checker_columns_MemoryBaseAuxCols_T_for_slice_T.
        
        Module Impl_core_borrow_BorrowMut_openvm_circuit_system_memory_offline_checker_columns_MemoryBaseAuxCols_T_for_slice_T.
          Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ T ].
          
          (* AlignedBorrow *)
          Definition borrow_mut
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self T in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                    self
                  |) in
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.read (|
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.read (|
                                  let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.tuple
                                          [
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                          ],
                                        Value.Tuple
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.path "usize",
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [] [ T ],
                                                    "len",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| self |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.path "usize",
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                                                      []
                                                      [ T ],
                                                    "width",
                                                    [],
                                                    []
                                                  |),
                                                  []
                                                |)
                                              |)
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_val :=
                                              M.copy (|
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                γ0_0
                                              |) in
                                            let right_val :=
                                              M.copy (|
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                γ0_1
                                              |) in
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.eq,
                                                              [
                                                                M.read (|
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |);
                                                                M.read (|
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.never_to_any (|
                                                      M.read (|
                                                        let~ kind :
                                                            Ty.path "core::panicking::AssertKind" :=
                                                          Value.StructTuple
                                                            "core::panicking::AssertKind::Eq"
                                                            []
                                                            []
                                                            [] in
                                                        M.alloc (|
                                                          Ty.path "never",
                                                          M.call_closure (|
                                                            Ty.path "never",
                                                            M.get_function (|
                                                              "core::panicking::assert_failed",
                                                              [],
                                                              [ Ty.path "usize"; Ty.path "usize" ]
                                                            |),
                                                            [
                                                              M.read (| kind |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| left_val |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| right_val |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |);
                                                              Value.StructTuple
                                                                "core::option::Option::None"
                                                                []
                                                                [ Ty.path "core::fmt::Arguments" ]
                                                                []
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                |)));
                            fun γ => ltac:(M.monadic (Value.Tuple []))
                          ]
                        |) in
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                              []
                              [ T ]
                          ],
                        M.match_operator (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                                []
                                [ T ]
                            ],
                          M.alloc (|
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ];
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                                          []
                                          [ T ]
                                      ]
                                  ];
                                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                              ],
                            M.call_closure (|
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ T ] ];
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                                            []
                                            [ T ]
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ T ],
                                "align_to_mut",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                                    []
                                    [ T ]
                                ]
                              |),
                              [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                                let prefix :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                    γ0_0
                                  |) in
                                let shorts :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                                              []
                                              [ T ]
                                          ]
                                      ],
                                    γ0_1
                                  |) in
                                let _suffix :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                    γ0_2
                                  |) in
                                M.read (|
                                  let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              Ty.path "bool",
                                                              UnOp.not (|
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [ T ],
                                                                    "is_empty",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| prefix |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.never_to_any (|
                                                          M.call_closure (|
                                                            Ty.path "never",
                                                            M.get_function (|
                                                              "core::panicking::panic_fmt",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "core::fmt::Arguments",
                                                                M.get_associated_function (|
                                                                  Ty.path "core::fmt::Arguments",
                                                                  "new_const",
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      1
                                                                  ],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.alloc (|
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                1
                                                                            ]
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [ Ty.path "str" ]
                                                                            ],
                                                                          Value.Array
                                                                            [
                                                                              mk_str (|
                                                                                "Alignment should match"
                                                                              |)
                                                                            ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |)));
                                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                                  ]
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (|
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ];
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ]
                                                      ],
                                                    Value.Tuple
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.path "usize",
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                                                                      []
                                                                      [ T ]
                                                                  ],
                                                                "len",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| shorts |) |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.path "usize",
                                                            Value.Integer IntegerKind.Usize 1
                                                          |)
                                                        |)
                                                      ]
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                        let γ0_1 :=
                                                          M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                        let left_val :=
                                                          M.copy (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            γ0_0
                                                          |) in
                                                        let right_val :=
                                                          M.copy (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            γ0_1
                                                          |) in
                                                        M.match_operator (|
                                                          Ty.tuple [],
                                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ :=
                                                                  M.use
                                                                    (M.alloc (|
                                                                      Ty.path "bool",
                                                                      UnOp.not (|
                                                                        M.call_closure (|
                                                                          Ty.path "bool",
                                                                          BinOp.eq,
                                                                          [
                                                                            M.read (|
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  left_val
                                                                                |)
                                                                              |)
                                                                            |);
                                                                            M.read (|
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  right_val
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)) in
                                                                let _ :=
                                                                  is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                M.never_to_any (|
                                                                  M.read (|
                                                                    let~ kind :
                                                                        Ty.path
                                                                          "core::panicking::AssertKind" :=
                                                                      Value.StructTuple
                                                                        "core::panicking::AssertKind::Eq"
                                                                        []
                                                                        []
                                                                        [] in
                                                                    M.alloc (|
                                                                      Ty.path "never",
                                                                      M.call_closure (|
                                                                        Ty.path "never",
                                                                        M.get_function (|
                                                                          "core::panicking::assert_failed",
                                                                          [],
                                                                          [
                                                                            Ty.path "usize";
                                                                            Ty.path "usize"
                                                                          ]
                                                                        |),
                                                                        [
                                                                          M.read (| kind |);
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    left_val
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |);
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    right_val
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |);
                                                                          Value.StructTuple
                                                                            "core::option::Option::None"
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "core::fmt::Arguments"
                                                                            ]
                                                                            []
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic (Value.Tuple []))
                                                          ]
                                                        |)))
                                                  ]
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |) in
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                                          []
                                          [ T ]
                                      ],
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_array_field (|
                                            M.deref (| M.read (| shorts |) |),
                                            Value.Integer IntegerKind.Usize 0
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)
                                |)))
                          ]
                        |)
                      |)
                    |)
                  |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (T : Ty.t),
            M.IsTraitInstance
              "core::borrow::BorrowMut"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *)
              [
                Ty.apply
                  (Ty.path
                    "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                  []
                  [ T ]
              ]
              (Self T)
              (* Instance *) [ ("borrow_mut", InstanceField.Method (borrow_mut T)) ].
        End Impl_core_borrow_BorrowMut_openvm_circuit_system_memory_offline_checker_columns_MemoryBaseAuxCols_T_for_slice_T.
        
        Module Impl_openvm_circuit_system_memory_offline_checker_columns_MemoryBaseAuxCols_T.
          Definition Self (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
              []
              [ T ].
          
          (* AlignedBorrow *)
          Definition width (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self T in
            match ε, τ, α with
            | [], [], [] =>
              ltac:(M.monadic
                (M.call_closure (|
                  Ty.path "usize",
                  M.get_function (|
                    "core::mem::size_of",
                    [],
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                        []
                        [ Ty.path "u8" ]
                    ]
                  |),
                  []
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_width :
            forall (T : Ty.t),
            M.IsAssociatedFunction.C (Self T) "width" (width T).
          Admitted.
          Global Typeclasses Opaque width.
        End Impl_openvm_circuit_system_memory_offline_checker_columns_MemoryBaseAuxCols_T.
        
        (* StructRecord
          {
            name := "MemoryWriteAuxCols";
            const_params := [ "N" ];
            ty_params := [ "T" ];
            fields :=
              [
                ("base",
                  Ty.apply
                    (Ty.path
                      "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                    []
                    [ T ]);
                ("prev_data", Ty.apply (Ty.path "array") [ N ] [ T ])
              ];
          } *)
        
        Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_circuit_system_memory_offline_checker_columns_MemoryWriteAuxCols_N_T.
          Definition Self (N : Value.t) (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
              [ N ]
              [ T ].
          
          (* Clone *)
          Definition clone
              (N : Value.t)
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self N T in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                          [ N ]
                          [ T ]
                      ],
                    self
                  |) in
                Value.mkStructRecord
                  "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols"
                  [ N ]
                  [ T ]
                  [
                    ("base",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                          []
                          [ T ],
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                            []
                            [ T ],
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols",
                                  "base"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |));
                    ("prev_data",
                      M.call_closure (|
                        Ty.apply (Ty.path "array") [ N ] [ T ],
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.apply (Ty.path "array") [ N ] [ T ],
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols",
                                  "prev_data"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |))
                  ]))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (N : Value.t) (T : Ty.t),
            M.IsTraitInstance
              "core::clone::Clone"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self N T)
              (* Instance *) [ ("clone", InstanceField.Method (clone N T)) ].
        End Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_circuit_system_memory_offline_checker_columns_MemoryWriteAuxCols_N_T.
        
        Module Impl_core_marker_Copy_where_core_marker_Copy_T_for_openvm_circuit_system_memory_offline_checker_columns_MemoryWriteAuxCols_N_T.
          Definition Self (N : Value.t) (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
              [ N ]
              [ T ].
          
          Axiom Implements :
            forall (N : Value.t) (T : Ty.t),
            M.IsTraitInstance
              "core::marker::Copy"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self N T)
              (* Instance *) [].
        End Impl_core_marker_Copy_where_core_marker_Copy_T_for_openvm_circuit_system_memory_offline_checker_columns_MemoryWriteAuxCols_N_T.
        
        Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_circuit_system_memory_offline_checker_columns_MemoryWriteAuxCols_N_T.
          Definition Self (N : Value.t) (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
              [ N ]
              [ T ].
          
          (* Debug *)
          Definition fmt
              (N : Value.t)
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self N T in
            match ε, τ, α with
            | [], [], [ self; f ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                          [ N ]
                          [ T ]
                      ],
                    self
                  |) in
                let f :=
                  M.alloc (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ],
                    f
                  |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_field2_finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| mk_str (| "MemoryWriteAuxCols" |) |)
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "base" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                              []
                              [ T ]
                          ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols",
                                "base"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "prev_data" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "array") [ N ] [ T ] ] ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "array") [ N ] [ T ] ],
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols",
                                    "prev_data"
                                  |)
                                |)
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (N : Value.t) (T : Ty.t),
            M.IsTraitInstance
              "core::fmt::Debug"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self N T)
              (* Instance *) [ ("fmt", InstanceField.Method (fmt N T)) ].
        End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_circuit_system_memory_offline_checker_columns_MemoryWriteAuxCols_N_T.
        
        Module Impl_core_borrow_Borrow_openvm_circuit_system_memory_offline_checker_columns_MemoryWriteAuxCols_N_T_for_slice_T.
          Definition Self (N : Value.t) (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ T ].
          
          (* AlignedBorrow *)
          Definition borrow
              (N : Value.t)
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self N T in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                    self
                  |) in
                M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.tuple
                                      [
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                      ],
                                    Value.Tuple
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                "len",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| self |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                                                  [ N ]
                                                  [ T ],
                                                "width",
                                                [],
                                                []
                                              |),
                                              []
                                            |)
                                          |)
                                        |)
                                      ]
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let left_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_0
                                          |) in
                                        let right_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_1
                                          |) in
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.eq,
                                                          [
                                                            M.read (|
                                                              M.deref (| M.read (| left_val |) |)
                                                            |);
                                                            M.read (|
                                                              M.deref (| M.read (| right_val |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.never_to_any (|
                                                  M.read (|
                                                    let~ kind :
                                                        Ty.path "core::panicking::AssertKind" :=
                                                      Value.StructTuple
                                                        "core::panicking::AssertKind::Eq"
                                                        []
                                                        []
                                                        [] in
                                                    M.alloc (|
                                                      Ty.path "never",
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::assert_failed",
                                                          [],
                                                          [ Ty.path "usize"; Ty.path "usize" ]
                                                        |),
                                                        [
                                                          M.read (| kind |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| left_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| right_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          Value.StructTuple
                                                            "core::option::Option::None"
                                                            []
                                                            [ Ty.path "core::fmt::Arguments" ]
                                                            []
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                          [ N ]
                          [ T ]
                      ],
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                            [ N ]
                            [ T ]
                        ],
                      M.alloc (|
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                                      [ N ]
                                      [ T ]
                                  ]
                              ];
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                          ],
                        M.call_closure (|
                          Ty.tuple
                            [
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                                        [ N ]
                                        [ T ]
                                    ]
                                ];
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                            ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ T ],
                            "align_to",
                            [],
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                                [ N ]
                                [ T ]
                            ]
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                            let prefix :=
                              M.copy (|
                                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_0
                              |) in
                            let shorts :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                                          [ N ]
                                          [ T ]
                                      ]
                                  ],
                                γ0_1
                              |) in
                            let _suffix :=
                              M.copy (|
                                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_2
                              |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_associated_function (|
                                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                                "is_empty",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| prefix |) |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.never_to_any (|
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::panic_fmt",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::Arguments",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::Arguments",
                                                              "new_const",
                                                              [ Value.Integer IntegerKind.Usize 1 ],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Ty.path "str" ]
                                                                        ],
                                                                      Value.Array
                                                                        [
                                                                          mk_str (|
                                                                            "Alignment should match"
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (|
                                                Ty.tuple
                                                  [
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                  ],
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                                                                  [ N ]
                                                                  [ T ]
                                                              ],
                                                            "len",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| shorts |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        Value.Integer IntegerKind.Usize 1
                                                      |)
                                                    |)
                                                  ]
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let left_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_0
                                                      |) in
                                                    let right_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_1
                                                      |) in
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  Ty.path "bool",
                                                                  UnOp.not (|
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| left_val |)
                                                                          |)
                                                                        |);
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| right_val |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.never_to_any (|
                                                              M.read (|
                                                                let~ kind :
                                                                    Ty.path
                                                                      "core::panicking::AssertKind" :=
                                                                  Value.StructTuple
                                                                    "core::panicking::AssertKind::Eq"
                                                                    []
                                                                    []
                                                                    [] in
                                                                M.alloc (|
                                                                  Ty.path "never",
                                                                  M.call_closure (|
                                                                    Ty.path "never",
                                                                    M.get_function (|
                                                                      "core::panicking::assert_failed",
                                                                      [],
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.path "usize"
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.read (| kind |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| left_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| right_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      Value.StructTuple
                                                                        "core::option::Option::None"
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "core::fmt::Arguments"
                                                                        ]
                                                                        []
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                                      ]
                                                    |)))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                                      [ N ]
                                      [ T ]
                                  ],
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_array_field (|
                                        M.deref (| M.read (| shorts |) |),
                                        Value.Integer IntegerKind.Usize 0
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (N : Value.t) (T : Ty.t),
            M.IsTraitInstance
              "core::borrow::Borrow"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *)
              [
                Ty.apply
                  (Ty.path
                    "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                  [ N ]
                  [ T ]
              ]
              (Self N T)
              (* Instance *) [ ("borrow", InstanceField.Method (borrow N T)) ].
        End Impl_core_borrow_Borrow_openvm_circuit_system_memory_offline_checker_columns_MemoryWriteAuxCols_N_T_for_slice_T.
        
        Module Impl_core_borrow_BorrowMut_openvm_circuit_system_memory_offline_checker_columns_MemoryWriteAuxCols_N_T_for_slice_T.
          Definition Self (N : Value.t) (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ T ].
          
          (* AlignedBorrow *)
          Definition borrow_mut
              (N : Value.t)
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self N T in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                    self
                  |) in
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.read (|
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.read (|
                                  let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.tuple
                                          [
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                          ],
                                        Value.Tuple
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.path "usize",
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [] [ T ],
                                                    "len",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| self |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.path "usize",
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                                                      [ N ]
                                                      [ T ],
                                                    "width",
                                                    [],
                                                    []
                                                  |),
                                                  []
                                                |)
                                              |)
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_val :=
                                              M.copy (|
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                γ0_0
                                              |) in
                                            let right_val :=
                                              M.copy (|
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                γ0_1
                                              |) in
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.eq,
                                                              [
                                                                M.read (|
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |);
                                                                M.read (|
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.never_to_any (|
                                                      M.read (|
                                                        let~ kind :
                                                            Ty.path "core::panicking::AssertKind" :=
                                                          Value.StructTuple
                                                            "core::panicking::AssertKind::Eq"
                                                            []
                                                            []
                                                            [] in
                                                        M.alloc (|
                                                          Ty.path "never",
                                                          M.call_closure (|
                                                            Ty.path "never",
                                                            M.get_function (|
                                                              "core::panicking::assert_failed",
                                                              [],
                                                              [ Ty.path "usize"; Ty.path "usize" ]
                                                            |),
                                                            [
                                                              M.read (| kind |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| left_val |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| right_val |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |);
                                                              Value.StructTuple
                                                                "core::option::Option::None"
                                                                []
                                                                [ Ty.path "core::fmt::Arguments" ]
                                                                []
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                |)));
                            fun γ => ltac:(M.monadic (Value.Tuple []))
                          ]
                        |) in
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                              [ N ]
                              [ T ]
                          ],
                        M.match_operator (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                                [ N ]
                                [ T ]
                            ],
                          M.alloc (|
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ];
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                                          [ N ]
                                          [ T ]
                                      ]
                                  ];
                                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                              ],
                            M.call_closure (|
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ T ] ];
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                                            [ N ]
                                            [ T ]
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ T ],
                                "align_to_mut",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                                    [ N ]
                                    [ T ]
                                ]
                              |),
                              [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                                let prefix :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                    γ0_0
                                  |) in
                                let shorts :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                                              [ N ]
                                              [ T ]
                                          ]
                                      ],
                                    γ0_1
                                  |) in
                                let _suffix :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                    γ0_2
                                  |) in
                                M.read (|
                                  let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              Ty.path "bool",
                                                              UnOp.not (|
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [ T ],
                                                                    "is_empty",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| prefix |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.never_to_any (|
                                                          M.call_closure (|
                                                            Ty.path "never",
                                                            M.get_function (|
                                                              "core::panicking::panic_fmt",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "core::fmt::Arguments",
                                                                M.get_associated_function (|
                                                                  Ty.path "core::fmt::Arguments",
                                                                  "new_const",
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      1
                                                                  ],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.alloc (|
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                1
                                                                            ]
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [ Ty.path "str" ]
                                                                            ],
                                                                          Value.Array
                                                                            [
                                                                              mk_str (|
                                                                                "Alignment should match"
                                                                              |)
                                                                            ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |)));
                                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                                  ]
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (|
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ];
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ]
                                                      ],
                                                    Value.Tuple
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.path "usize",
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                                                                      [ N ]
                                                                      [ T ]
                                                                  ],
                                                                "len",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| shorts |) |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.path "usize",
                                                            Value.Integer IntegerKind.Usize 1
                                                          |)
                                                        |)
                                                      ]
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                        let γ0_1 :=
                                                          M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                        let left_val :=
                                                          M.copy (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            γ0_0
                                                          |) in
                                                        let right_val :=
                                                          M.copy (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            γ0_1
                                                          |) in
                                                        M.match_operator (|
                                                          Ty.tuple [],
                                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ :=
                                                                  M.use
                                                                    (M.alloc (|
                                                                      Ty.path "bool",
                                                                      UnOp.not (|
                                                                        M.call_closure (|
                                                                          Ty.path "bool",
                                                                          BinOp.eq,
                                                                          [
                                                                            M.read (|
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  left_val
                                                                                |)
                                                                              |)
                                                                            |);
                                                                            M.read (|
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  right_val
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)) in
                                                                let _ :=
                                                                  is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                M.never_to_any (|
                                                                  M.read (|
                                                                    let~ kind :
                                                                        Ty.path
                                                                          "core::panicking::AssertKind" :=
                                                                      Value.StructTuple
                                                                        "core::panicking::AssertKind::Eq"
                                                                        []
                                                                        []
                                                                        [] in
                                                                    M.alloc (|
                                                                      Ty.path "never",
                                                                      M.call_closure (|
                                                                        Ty.path "never",
                                                                        M.get_function (|
                                                                          "core::panicking::assert_failed",
                                                                          [],
                                                                          [
                                                                            Ty.path "usize";
                                                                            Ty.path "usize"
                                                                          ]
                                                                        |),
                                                                        [
                                                                          M.read (| kind |);
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    left_val
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |);
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    right_val
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |);
                                                                          Value.StructTuple
                                                                            "core::option::Option::None"
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "core::fmt::Arguments"
                                                                            ]
                                                                            []
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic (Value.Tuple []))
                                                          ]
                                                        |)))
                                                  ]
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |) in
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                                          [ N ]
                                          [ T ]
                                      ],
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_array_field (|
                                            M.deref (| M.read (| shorts |) |),
                                            Value.Integer IntegerKind.Usize 0
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)
                                |)))
                          ]
                        |)
                      |)
                    |)
                  |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (N : Value.t) (T : Ty.t),
            M.IsTraitInstance
              "core::borrow::BorrowMut"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *)
              [
                Ty.apply
                  (Ty.path
                    "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                  [ N ]
                  [ T ]
              ]
              (Self N T)
              (* Instance *) [ ("borrow_mut", InstanceField.Method (borrow_mut N T)) ].
        End Impl_core_borrow_BorrowMut_openvm_circuit_system_memory_offline_checker_columns_MemoryWriteAuxCols_N_T_for_slice_T.
        
        Module Impl_openvm_circuit_system_memory_offline_checker_columns_MemoryWriteAuxCols_N_T.
          Definition Self (N : Value.t) (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
              [ N ]
              [ T ].
          
          (* AlignedBorrow *)
          Definition width
              (N : Value.t)
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self N T in
            match ε, τ, α with
            | [], [], [] =>
              ltac:(M.monadic
                (M.call_closure (|
                  Ty.path "usize",
                  M.get_function (|
                    "core::mem::size_of",
                    [],
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                        [ N ]
                        [ Ty.path "u8" ]
                    ]
                  |),
                  []
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_width :
            forall (N : Value.t) (T : Ty.t),
            M.IsAssociatedFunction.C (Self N T) "width" (width N T).
          Admitted.
          Global Typeclasses Opaque width.
          (*
              pub(in crate::system::memory) fn new(
                  prev_data: [T; N],
                  prev_timestamp: T,
                  lt_aux: LessThanAuxCols<T, AUX_LEN>,
              ) -> Self {
                  Self {
                      base: MemoryBaseAuxCols {
                          prev_timestamp,
                          timestamp_lt_aux: lt_aux,
                      },
                      prev_data,
                  }
              }
          *)
          Definition new
              (N : Value.t)
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self N T in
            match ε, τ, α with
            | [], [], [ prev_data; prev_timestamp; lt_aux ] =>
              ltac:(M.monadic
                (let prev_data := M.alloc (| Ty.apply (Ty.path "array") [ N ] [ T ], prev_data |) in
                let prev_timestamp := M.alloc (| T, prev_timestamp |) in
                let lt_aux :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "openvm_circuit_primitives::assert_less_than::LessThanAuxCols")
                      [
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_circuit_system_memory_offline_checker_columns_new_discriminant"
                          |))
                      ]
                      [ T ],
                    lt_aux
                  |) in
                Value.mkStructRecord
                  "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols"
                  [ N ]
                  [ T ]
                  [
                    ("base",
                      Value.mkStructRecord
                        "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols"
                        []
                        [ T ]
                        [
                          ("prev_timestamp", M.read (| prev_timestamp |));
                          ("timestamp_lt_aux", M.read (| lt_aux |))
                        ]);
                    ("prev_data", M.read (| prev_data |))
                  ]))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_new :
            forall (N : Value.t) (T : Ty.t),
            M.IsAssociatedFunction.C (Self N T) "new" (new N T).
          Admitted.
          Global Typeclasses Opaque new.
          (*
              pub fn from_base(base: MemoryBaseAuxCols<T>, prev_data: [T; N]) -> Self {
                  Self { base, prev_data }
              }
          *)
          Definition from_base
              (N : Value.t)
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self N T in
            match ε, τ, α with
            | [], [], [ base; prev_data ] =>
              ltac:(M.monadic
                (let base :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                      []
                      [ T ],
                    base
                  |) in
                let prev_data := M.alloc (| Ty.apply (Ty.path "array") [ N ] [ T ], prev_data |) in
                Value.mkStructRecord
                  "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols"
                  [ N ]
                  [ T ]
                  [ ("base", M.read (| base |)); ("prev_data", M.read (| prev_data |)) ]))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_from_base :
            forall (N : Value.t) (T : Ty.t),
            M.IsAssociatedFunction.C (Self N T) "from_base" (from_base N T).
          Admitted.
          Global Typeclasses Opaque from_base.
          
          (*
              pub fn get_base(self) -> MemoryBaseAuxCols<T> {
                  self.base
              }
          *)
          Definition get_base
              (N : Value.t)
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self N T in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                      [ N ]
                      [ T ],
                    self
                  |) in
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    self,
                    "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols",
                    "base"
                  |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_get_base :
            forall (N : Value.t) (T : Ty.t),
            M.IsAssociatedFunction.C (Self N T) "get_base" (get_base N T).
          Admitted.
          Global Typeclasses Opaque get_base.
          
          (*
              pub fn prev_data(&self) -> &[T; N] {
                  &self.prev_data
              }
          *)
          Definition prev_data
              (N : Value.t)
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self N T in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                          [ N ]
                          [ T ]
                      ],
                    self
                  |) in
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols",
                        "prev_data"
                      |)
                    |)
                  |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_prev_data :
            forall (N : Value.t) (T : Ty.t),
            M.IsAssociatedFunction.C (Self N T) "prev_data" (prev_data N T).
          Admitted.
          Global Typeclasses Opaque prev_data.
        End Impl_openvm_circuit_system_memory_offline_checker_columns_MemoryWriteAuxCols_N_T.
        
        
        
        (* StructRecord
          {
            name := "MemoryReadAuxCols";
            const_params := [];
            ty_params := [ "T" ];
            fields :=
              [
                ("base",
                  Ty.apply
                    (Ty.path
                      "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                    []
                    [ T ])
              ];
          } *)
        
        Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_circuit_system_memory_offline_checker_columns_MemoryReadAuxCols_T.
          Definition Self (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
              []
              [ T ].
          
          (* Clone *)
          Definition clone (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self T in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                          []
                          [ T ]
                      ],
                    self
                  |) in
                Value.mkStructRecord
                  "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols"
                  []
                  [ T ]
                  [
                    ("base",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                          []
                          [ T ],
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                            []
                            [ T ],
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols",
                                  "base"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |))
                  ]))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (T : Ty.t),
            M.IsTraitInstance
              "core::clone::Clone"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self T)
              (* Instance *) [ ("clone", InstanceField.Method (clone T)) ].
        End Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_circuit_system_memory_offline_checker_columns_MemoryReadAuxCols_T.
        
        Module Impl_core_marker_Copy_where_core_marker_Copy_T_for_openvm_circuit_system_memory_offline_checker_columns_MemoryReadAuxCols_T.
          Definition Self (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
              []
              [ T ].
          
          Axiom Implements :
            forall (T : Ty.t),
            M.IsTraitInstance
              "core::marker::Copy"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self T)
              (* Instance *) [].
        End Impl_core_marker_Copy_where_core_marker_Copy_T_for_openvm_circuit_system_memory_offline_checker_columns_MemoryReadAuxCols_T.
        
        Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_circuit_system_memory_offline_checker_columns_MemoryReadAuxCols_T.
          Definition Self (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
              []
              [ T ].
          
          (* Debug *)
          Definition fmt (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self T in
            match ε, τ, α with
            | [], [], [ self; f ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                          []
                          [ T ]
                      ],
                    self
                  |) in
                let f :=
                  M.alloc (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ],
                    f
                  |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_field1_finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "MemoryReadAuxCols" |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "base" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                                  []
                                  [ T ]
                              ]
                          ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                                      []
                                      [ T ]
                                  ],
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols",
                                    "base"
                                  |)
                                |)
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (T : Ty.t),
            M.IsTraitInstance
              "core::fmt::Debug"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self T)
              (* Instance *) [ ("fmt", InstanceField.Method (fmt T)) ].
        End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_circuit_system_memory_offline_checker_columns_MemoryReadAuxCols_T.
        
        Module Impl_core_borrow_Borrow_openvm_circuit_system_memory_offline_checker_columns_MemoryReadAuxCols_T_for_slice_T.
          Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ T ].
          
          (* AlignedBorrow *)
          Definition borrow (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self T in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                    self
                  |) in
                M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.tuple
                                      [
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                      ],
                                    Value.Tuple
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                "len",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| self |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                                                  []
                                                  [ T ],
                                                "width",
                                                [],
                                                []
                                              |),
                                              []
                                            |)
                                          |)
                                        |)
                                      ]
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let left_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_0
                                          |) in
                                        let right_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_1
                                          |) in
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.eq,
                                                          [
                                                            M.read (|
                                                              M.deref (| M.read (| left_val |) |)
                                                            |);
                                                            M.read (|
                                                              M.deref (| M.read (| right_val |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.never_to_any (|
                                                  M.read (|
                                                    let~ kind :
                                                        Ty.path "core::panicking::AssertKind" :=
                                                      Value.StructTuple
                                                        "core::panicking::AssertKind::Eq"
                                                        []
                                                        []
                                                        [] in
                                                    M.alloc (|
                                                      Ty.path "never",
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::assert_failed",
                                                          [],
                                                          [ Ty.path "usize"; Ty.path "usize" ]
                                                        |),
                                                        [
                                                          M.read (| kind |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| left_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| right_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          Value.StructTuple
                                                            "core::option::Option::None"
                                                            []
                                                            [ Ty.path "core::fmt::Arguments" ]
                                                            []
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                          []
                          [ T ]
                      ],
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                            []
                            [ T ]
                        ],
                      M.alloc (|
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                                      []
                                      [ T ]
                                  ]
                              ];
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                          ],
                        M.call_closure (|
                          Ty.tuple
                            [
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                                        []
                                        [ T ]
                                    ]
                                ];
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                            ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ T ],
                            "align_to",
                            [],
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                                []
                                [ T ]
                            ]
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                            let prefix :=
                              M.copy (|
                                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_0
                              |) in
                            let shorts :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                                          []
                                          [ T ]
                                      ]
                                  ],
                                γ0_1
                              |) in
                            let _suffix :=
                              M.copy (|
                                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_2
                              |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_associated_function (|
                                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                                "is_empty",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| prefix |) |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.never_to_any (|
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::panic_fmt",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::Arguments",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::Arguments",
                                                              "new_const",
                                                              [ Value.Integer IntegerKind.Usize 1 ],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Ty.path "str" ]
                                                                        ],
                                                                      Value.Array
                                                                        [
                                                                          mk_str (|
                                                                            "Alignment should match"
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (|
                                                Ty.tuple
                                                  [
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                  ],
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                                                                  []
                                                                  [ T ]
                                                              ],
                                                            "len",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| shorts |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        Value.Integer IntegerKind.Usize 1
                                                      |)
                                                    |)
                                                  ]
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let left_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_0
                                                      |) in
                                                    let right_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_1
                                                      |) in
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  Ty.path "bool",
                                                                  UnOp.not (|
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| left_val |)
                                                                          |)
                                                                        |);
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| right_val |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.never_to_any (|
                                                              M.read (|
                                                                let~ kind :
                                                                    Ty.path
                                                                      "core::panicking::AssertKind" :=
                                                                  Value.StructTuple
                                                                    "core::panicking::AssertKind::Eq"
                                                                    []
                                                                    []
                                                                    [] in
                                                                M.alloc (|
                                                                  Ty.path "never",
                                                                  M.call_closure (|
                                                                    Ty.path "never",
                                                                    M.get_function (|
                                                                      "core::panicking::assert_failed",
                                                                      [],
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.path "usize"
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.read (| kind |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| left_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| right_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      Value.StructTuple
                                                                        "core::option::Option::None"
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "core::fmt::Arguments"
                                                                        ]
                                                                        []
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                                      ]
                                                    |)))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                                      []
                                      [ T ]
                                  ],
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_array_field (|
                                        M.deref (| M.read (| shorts |) |),
                                        Value.Integer IntegerKind.Usize 0
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (T : Ty.t),
            M.IsTraitInstance
              "core::borrow::Borrow"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *)
              [
                Ty.apply
                  (Ty.path
                    "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                  []
                  [ T ]
              ]
              (Self T)
              (* Instance *) [ ("borrow", InstanceField.Method (borrow T)) ].
        End Impl_core_borrow_Borrow_openvm_circuit_system_memory_offline_checker_columns_MemoryReadAuxCols_T_for_slice_T.
        
        Module Impl_core_borrow_BorrowMut_openvm_circuit_system_memory_offline_checker_columns_MemoryReadAuxCols_T_for_slice_T.
          Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ T ].
          
          (* AlignedBorrow *)
          Definition borrow_mut
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self T in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                    self
                  |) in
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.read (|
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.read (|
                                  let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.tuple
                                          [
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                          ],
                                        Value.Tuple
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.path "usize",
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [] [ T ],
                                                    "len",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| self |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.path "usize",
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                                                      []
                                                      [ T ],
                                                    "width",
                                                    [],
                                                    []
                                                  |),
                                                  []
                                                |)
                                              |)
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_val :=
                                              M.copy (|
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                γ0_0
                                              |) in
                                            let right_val :=
                                              M.copy (|
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                γ0_1
                                              |) in
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.eq,
                                                              [
                                                                M.read (|
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |);
                                                                M.read (|
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.never_to_any (|
                                                      M.read (|
                                                        let~ kind :
                                                            Ty.path "core::panicking::AssertKind" :=
                                                          Value.StructTuple
                                                            "core::panicking::AssertKind::Eq"
                                                            []
                                                            []
                                                            [] in
                                                        M.alloc (|
                                                          Ty.path "never",
                                                          M.call_closure (|
                                                            Ty.path "never",
                                                            M.get_function (|
                                                              "core::panicking::assert_failed",
                                                              [],
                                                              [ Ty.path "usize"; Ty.path "usize" ]
                                                            |),
                                                            [
                                                              M.read (| kind |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| left_val |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| right_val |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |);
                                                              Value.StructTuple
                                                                "core::option::Option::None"
                                                                []
                                                                [ Ty.path "core::fmt::Arguments" ]
                                                                []
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                |)));
                            fun γ => ltac:(M.monadic (Value.Tuple []))
                          ]
                        |) in
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                              []
                              [ T ]
                          ],
                        M.match_operator (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                                []
                                [ T ]
                            ],
                          M.alloc (|
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ];
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                                          []
                                          [ T ]
                                      ]
                                  ];
                                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                              ],
                            M.call_closure (|
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ T ] ];
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                                            []
                                            [ T ]
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ T ],
                                "align_to_mut",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                                    []
                                    [ T ]
                                ]
                              |),
                              [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                                let prefix :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                    γ0_0
                                  |) in
                                let shorts :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                                              []
                                              [ T ]
                                          ]
                                      ],
                                    γ0_1
                                  |) in
                                let _suffix :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                    γ0_2
                                  |) in
                                M.read (|
                                  let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              Ty.path "bool",
                                                              UnOp.not (|
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [ T ],
                                                                    "is_empty",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| prefix |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.never_to_any (|
                                                          M.call_closure (|
                                                            Ty.path "never",
                                                            M.get_function (|
                                                              "core::panicking::panic_fmt",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "core::fmt::Arguments",
                                                                M.get_associated_function (|
                                                                  Ty.path "core::fmt::Arguments",
                                                                  "new_const",
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      1
                                                                  ],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.alloc (|
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                1
                                                                            ]
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [ Ty.path "str" ]
                                                                            ],
                                                                          Value.Array
                                                                            [
                                                                              mk_str (|
                                                                                "Alignment should match"
                                                                              |)
                                                                            ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |)));
                                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                                  ]
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (|
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ];
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ]
                                                      ],
                                                    Value.Tuple
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.path "usize",
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                                                                      []
                                                                      [ T ]
                                                                  ],
                                                                "len",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| shorts |) |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.path "usize",
                                                            Value.Integer IntegerKind.Usize 1
                                                          |)
                                                        |)
                                                      ]
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                        let γ0_1 :=
                                                          M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                        let left_val :=
                                                          M.copy (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            γ0_0
                                                          |) in
                                                        let right_val :=
                                                          M.copy (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            γ0_1
                                                          |) in
                                                        M.match_operator (|
                                                          Ty.tuple [],
                                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ :=
                                                                  M.use
                                                                    (M.alloc (|
                                                                      Ty.path "bool",
                                                                      UnOp.not (|
                                                                        M.call_closure (|
                                                                          Ty.path "bool",
                                                                          BinOp.eq,
                                                                          [
                                                                            M.read (|
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  left_val
                                                                                |)
                                                                              |)
                                                                            |);
                                                                            M.read (|
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  right_val
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)) in
                                                                let _ :=
                                                                  is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                M.never_to_any (|
                                                                  M.read (|
                                                                    let~ kind :
                                                                        Ty.path
                                                                          "core::panicking::AssertKind" :=
                                                                      Value.StructTuple
                                                                        "core::panicking::AssertKind::Eq"
                                                                        []
                                                                        []
                                                                        [] in
                                                                    M.alloc (|
                                                                      Ty.path "never",
                                                                      M.call_closure (|
                                                                        Ty.path "never",
                                                                        M.get_function (|
                                                                          "core::panicking::assert_failed",
                                                                          [],
                                                                          [
                                                                            Ty.path "usize";
                                                                            Ty.path "usize"
                                                                          ]
                                                                        |),
                                                                        [
                                                                          M.read (| kind |);
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    left_val
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |);
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    right_val
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |);
                                                                          Value.StructTuple
                                                                            "core::option::Option::None"
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "core::fmt::Arguments"
                                                                            ]
                                                                            []
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic (Value.Tuple []))
                                                          ]
                                                        |)))
                                                  ]
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |) in
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                                          []
                                          [ T ]
                                      ],
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_array_field (|
                                            M.deref (| M.read (| shorts |) |),
                                            Value.Integer IntegerKind.Usize 0
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)
                                |)))
                          ]
                        |)
                      |)
                    |)
                  |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (T : Ty.t),
            M.IsTraitInstance
              "core::borrow::BorrowMut"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *)
              [
                Ty.apply
                  (Ty.path
                    "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                  []
                  [ T ]
              ]
              (Self T)
              (* Instance *) [ ("borrow_mut", InstanceField.Method (borrow_mut T)) ].
        End Impl_core_borrow_BorrowMut_openvm_circuit_system_memory_offline_checker_columns_MemoryReadAuxCols_T_for_slice_T.
        
        Module Impl_openvm_circuit_system_memory_offline_checker_columns_MemoryReadAuxCols_T.
          Definition Self (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
              []
              [ T ].
          
          (* AlignedBorrow *)
          Definition width (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self T in
            match ε, τ, α with
            | [], [], [] =>
              ltac:(M.monadic
                (M.call_closure (|
                  Ty.path "usize",
                  M.get_function (|
                    "core::mem::size_of",
                    [],
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                        []
                        [ Ty.path "u8" ]
                    ]
                  |),
                  []
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_width :
            forall (T : Ty.t),
            M.IsAssociatedFunction.C (Self T) "width" (width T).
          Admitted.
          Global Typeclasses Opaque width.
        End Impl_openvm_circuit_system_memory_offline_checker_columns_MemoryReadAuxCols_T.
        
        Module Impl_openvm_circuit_system_memory_offline_checker_columns_MemoryReadAuxCols_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
              []
              [ F ].
          
          (*
              pub(in crate::system::memory) fn new(
                  prev_timestamp: u32,
                  timestamp_lt_aux: LessThanAuxCols<F, AUX_LEN>,
              ) -> Self {
                  Self {
                      base: MemoryBaseAuxCols {
                          prev_timestamp: F::from_canonical_u32(prev_timestamp),
                          timestamp_lt_aux,
                      },
                  }
              }
          *)
          Definition new (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self F in
            match ε, τ, α with
            | [], [], [ prev_timestamp; timestamp_lt_aux ] =>
              ltac:(M.monadic
                (let prev_timestamp := M.alloc (| Ty.path "u32", prev_timestamp |) in
                let timestamp_lt_aux :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "openvm_circuit_primitives::assert_less_than::LessThanAuxCols")
                      [
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_circuit_system_memory_offline_checker_columns_new_discriminant"
                          |))
                      ]
                      [ F ],
                    timestamp_lt_aux
                  |) in
                Value.mkStructRecord
                  "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols"
                  []
                  [ F ]
                  [
                    ("base",
                      Value.mkStructRecord
                        "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols"
                        []
                        [ F ]
                        [
                          ("prev_timestamp",
                            M.call_closure (|
                              F,
                              M.get_trait_method (|
                                "p3_field::field::FieldAlgebra",
                                F,
                                [],
                                [],
                                "from_canonical_u32",
                                [],
                                []
                              |),
                              [ M.read (| prev_timestamp |) ]
                            |));
                          ("timestamp_lt_aux", M.read (| timestamp_lt_aux |))
                        ])
                  ]))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_new :
            forall (F : Ty.t),
            M.IsAssociatedFunction.C (Self F) "new" (new F).
          Admitted.
          Global Typeclasses Opaque new.
          
          (*
              pub fn get_base(self) -> MemoryBaseAuxCols<F> {
                  self.base
              }
          *)
          Definition get_base
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self F in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                      []
                      [ F ],
                    self
                  |) in
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    self,
                    "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols",
                    "base"
                  |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_get_base :
            forall (F : Ty.t),
            M.IsAssociatedFunction.C (Self F) "get_base" (get_base F).
          Admitted.
          Global Typeclasses Opaque get_base.
        End Impl_openvm_circuit_system_memory_offline_checker_columns_MemoryReadAuxCols_F.
        
        (* StructRecord
          {
            name := "MemoryReadOrImmediateAuxCols";
            const_params := [];
            ty_params := [ "T" ];
            fields :=
              [
                ("base",
                  Ty.apply
                    (Ty.path
                      "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                    []
                    [ T ]);
                ("is_immediate", T);
                ("is_zero_aux", T)
              ];
          } *)
        
        Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_circuit_system_memory_offline_checker_columns_MemoryReadOrImmediateAuxCols_T.
          Definition Self (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
              []
              [ T ].
          
          (* Clone *)
          Definition clone (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self T in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
                          []
                          [ T ]
                      ],
                    self
                  |) in
                Value.mkStructRecord
                  "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols"
                  []
                  [ T ]
                  [
                    ("base",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                          []
                          [ T ],
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                            []
                            [ T ],
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols",
                                  "base"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |));
                    ("is_immediate",
                      M.call_closure (|
                        T,
                        M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols",
                                  "is_immediate"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |));
                    ("is_zero_aux",
                      M.call_closure (|
                        T,
                        M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols",
                                  "is_zero_aux"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |))
                  ]))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (T : Ty.t),
            M.IsTraitInstance
              "core::clone::Clone"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self T)
              (* Instance *) [ ("clone", InstanceField.Method (clone T)) ].
        End Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_circuit_system_memory_offline_checker_columns_MemoryReadOrImmediateAuxCols_T.
        
        Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_circuit_system_memory_offline_checker_columns_MemoryReadOrImmediateAuxCols_T.
          Definition Self (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
              []
              [ T ].
          
          (* Debug *)
          Definition fmt (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self T in
            match ε, τ, α with
            | [], [], [ self; f ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
                          []
                          [ T ]
                      ],
                    self
                  |) in
                let f :=
                  M.alloc (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ],
                    f
                  |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_field3_finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| mk_str (| "MemoryReadOrImmediateAuxCols" |) |)
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "base" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::offline_checker::columns::MemoryBaseAuxCols")
                              []
                              [ T ]
                          ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols",
                                "base"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "is_immediate" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply (Ty.path "&") [] [ T ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols",
                                "is_immediate"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "is_zero_aux" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ T ] ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.apply (Ty.path "&") [] [ T ],
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols",
                                    "is_zero_aux"
                                  |)
                                |)
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (T : Ty.t),
            M.IsTraitInstance
              "core::fmt::Debug"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self T)
              (* Instance *) [ ("fmt", InstanceField.Method (fmt T)) ].
        End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_circuit_system_memory_offline_checker_columns_MemoryReadOrImmediateAuxCols_T.
        
        Module Impl_core_borrow_Borrow_openvm_circuit_system_memory_offline_checker_columns_MemoryReadOrImmediateAuxCols_T_for_slice_T.
          Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ T ].
          
          (* AlignedBorrow *)
          Definition borrow (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self T in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                    self
                  |) in
                M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.tuple
                                      [
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                      ],
                                    Value.Tuple
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                "len",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| self |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
                                                  []
                                                  [ T ],
                                                "width",
                                                [],
                                                []
                                              |),
                                              []
                                            |)
                                          |)
                                        |)
                                      ]
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let left_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_0
                                          |) in
                                        let right_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_1
                                          |) in
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.eq,
                                                          [
                                                            M.read (|
                                                              M.deref (| M.read (| left_val |) |)
                                                            |);
                                                            M.read (|
                                                              M.deref (| M.read (| right_val |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.never_to_any (|
                                                  M.read (|
                                                    let~ kind :
                                                        Ty.path "core::panicking::AssertKind" :=
                                                      Value.StructTuple
                                                        "core::panicking::AssertKind::Eq"
                                                        []
                                                        []
                                                        [] in
                                                    M.alloc (|
                                                      Ty.path "never",
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::assert_failed",
                                                          [],
                                                          [ Ty.path "usize"; Ty.path "usize" ]
                                                        |),
                                                        [
                                                          M.read (| kind |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| left_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| right_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          Value.StructTuple
                                                            "core::option::Option::None"
                                                            []
                                                            [ Ty.path "core::fmt::Arguments" ]
                                                            []
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
                          []
                          [ T ]
                      ],
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
                            []
                            [ T ]
                        ],
                      M.alloc (|
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
                                      []
                                      [ T ]
                                  ]
                              ];
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                          ],
                        M.call_closure (|
                          Ty.tuple
                            [
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
                                        []
                                        [ T ]
                                    ]
                                ];
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                            ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ T ],
                            "align_to",
                            [],
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
                                []
                                [ T ]
                            ]
                          |),
                          [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                            let prefix :=
                              M.copy (|
                                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_0
                              |) in
                            let shorts :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
                                          []
                                          [ T ]
                                      ]
                                  ],
                                γ0_1
                              |) in
                            let _suffix :=
                              M.copy (|
                                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_2
                              |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_associated_function (|
                                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                                "is_empty",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| prefix |) |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.never_to_any (|
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::panic_fmt",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::Arguments",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::Arguments",
                                                              "new_const",
                                                              [ Value.Integer IntegerKind.Usize 1 ],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Ty.path "str" ]
                                                                        ],
                                                                      Value.Array
                                                                        [
                                                                          mk_str (|
                                                                            "Alignment should match"
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (|
                                                Ty.tuple
                                                  [
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                  ],
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
                                                                  []
                                                                  [ T ]
                                                              ],
                                                            "len",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| shorts |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        Value.Integer IntegerKind.Usize 1
                                                      |)
                                                    |)
                                                  ]
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let left_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_0
                                                      |) in
                                                    let right_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_1
                                                      |) in
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  Ty.path "bool",
                                                                  UnOp.not (|
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| left_val |)
                                                                          |)
                                                                        |);
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| right_val |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.never_to_any (|
                                                              M.read (|
                                                                let~ kind :
                                                                    Ty.path
                                                                      "core::panicking::AssertKind" :=
                                                                  Value.StructTuple
                                                                    "core::panicking::AssertKind::Eq"
                                                                    []
                                                                    []
                                                                    [] in
                                                                M.alloc (|
                                                                  Ty.path "never",
                                                                  M.call_closure (|
                                                                    Ty.path "never",
                                                                    M.get_function (|
                                                                      "core::panicking::assert_failed",
                                                                      [],
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.path "usize"
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.read (| kind |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| left_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| right_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      Value.StructTuple
                                                                        "core::option::Option::None"
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "core::fmt::Arguments"
                                                                        ]
                                                                        []
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                                      ]
                                                    |)))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
                                      []
                                      [ T ]
                                  ],
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_array_field (|
                                        M.deref (| M.read (| shorts |) |),
                                        Value.Integer IntegerKind.Usize 0
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (T : Ty.t),
            M.IsTraitInstance
              "core::borrow::Borrow"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *)
              [
                Ty.apply
                  (Ty.path
                    "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
                  []
                  [ T ]
              ]
              (Self T)
              (* Instance *) [ ("borrow", InstanceField.Method (borrow T)) ].
        End Impl_core_borrow_Borrow_openvm_circuit_system_memory_offline_checker_columns_MemoryReadOrImmediateAuxCols_T_for_slice_T.
        
        Module Impl_core_borrow_BorrowMut_openvm_circuit_system_memory_offline_checker_columns_MemoryReadOrImmediateAuxCols_T_for_slice_T.
          Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ T ].
          
          (* AlignedBorrow *)
          Definition borrow_mut
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self T in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                    self
                  |) in
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.read (|
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.read (|
                                  let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.tuple
                                          [
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                          ],
                                        Value.Tuple
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.path "usize",
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_associated_function (|
                                                    Ty.apply (Ty.path "slice") [] [ T ],
                                                    "len",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| self |) |)
                                                    |)
                                                  ]
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.path "usize",
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
                                                      []
                                                      [ T ],
                                                    "width",
                                                    [],
                                                    []
                                                  |),
                                                  []
                                                |)
                                              |)
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_val :=
                                              M.copy (|
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                γ0_0
                                              |) in
                                            let right_val :=
                                              M.copy (|
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                γ0_1
                                              |) in
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.eq,
                                                              [
                                                                M.read (|
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |);
                                                                M.read (|
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.never_to_any (|
                                                      M.read (|
                                                        let~ kind :
                                                            Ty.path "core::panicking::AssertKind" :=
                                                          Value.StructTuple
                                                            "core::panicking::AssertKind::Eq"
                                                            []
                                                            []
                                                            [] in
                                                        M.alloc (|
                                                          Ty.path "never",
                                                          M.call_closure (|
                                                            Ty.path "never",
                                                            M.get_function (|
                                                              "core::panicking::assert_failed",
                                                              [],
                                                              [ Ty.path "usize"; Ty.path "usize" ]
                                                            |),
                                                            [
                                                              M.read (| kind |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| left_val |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| right_val |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |);
                                                              Value.StructTuple
                                                                "core::option::Option::None"
                                                                []
                                                                [ Ty.path "core::fmt::Arguments" ]
                                                                []
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                |)));
                            fun γ => ltac:(M.monadic (Value.Tuple []))
                          ]
                        |) in
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
                              []
                              [ T ]
                          ],
                        M.match_operator (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
                                []
                                [ T ]
                            ],
                          M.alloc (|
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ];
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
                                          []
                                          [ T ]
                                      ]
                                  ];
                                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                              ],
                            M.call_closure (|
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ T ] ];
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
                                            []
                                            [ T ]
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ T ] ]
                                ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ T ],
                                "align_to_mut",
                                [],
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
                                    []
                                    [ T ]
                                ]
                              |),
                              [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                                let prefix :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                    γ0_0
                                  |) in
                                let shorts :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
                                              []
                                              [ T ]
                                          ]
                                      ],
                                    γ0_1
                                  |) in
                                let _suffix :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                    γ0_2
                                  |) in
                                M.read (|
                                  let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              Ty.path "bool",
                                                              UnOp.not (|
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [ T ],
                                                                    "is_empty",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| prefix |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.never_to_any (|
                                                          M.call_closure (|
                                                            Ty.path "never",
                                                            M.get_function (|
                                                              "core::panicking::panic_fmt",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.path "core::fmt::Arguments",
                                                                M.get_associated_function (|
                                                                  Ty.path "core::fmt::Arguments",
                                                                  "new_const",
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      1
                                                                  ],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.alloc (|
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                1
                                                                            ]
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [ Ty.path "str" ]
                                                                            ],
                                                                          Value.Array
                                                                            [
                                                                              mk_str (|
                                                                                "Alignment should match"
                                                                              |)
                                                                            ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |)
                                                        |)));
                                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                                  ]
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (|
                                                    Ty.tuple
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ];
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ]
                                                      ],
                                                    Value.Tuple
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.path "usize",
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
                                                                      []
                                                                      [ T ]
                                                                  ],
                                                                "len",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| shorts |) |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.path "usize",
                                                            Value.Integer IntegerKind.Usize 1
                                                          |)
                                                        |)
                                                      ]
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                        let γ0_1 :=
                                                          M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                        let left_val :=
                                                          M.copy (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            γ0_0
                                                          |) in
                                                        let right_val :=
                                                          M.copy (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            γ0_1
                                                          |) in
                                                        M.match_operator (|
                                                          Ty.tuple [],
                                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ :=
                                                                  M.use
                                                                    (M.alloc (|
                                                                      Ty.path "bool",
                                                                      UnOp.not (|
                                                                        M.call_closure (|
                                                                          Ty.path "bool",
                                                                          BinOp.eq,
                                                                          [
                                                                            M.read (|
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  left_val
                                                                                |)
                                                                              |)
                                                                            |);
                                                                            M.read (|
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  right_val
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)) in
                                                                let _ :=
                                                                  is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                M.never_to_any (|
                                                                  M.read (|
                                                                    let~ kind :
                                                                        Ty.path
                                                                          "core::panicking::AssertKind" :=
                                                                      Value.StructTuple
                                                                        "core::panicking::AssertKind::Eq"
                                                                        []
                                                                        []
                                                                        [] in
                                                                    M.alloc (|
                                                                      Ty.path "never",
                                                                      M.call_closure (|
                                                                        Ty.path "never",
                                                                        M.get_function (|
                                                                          "core::panicking::assert_failed",
                                                                          [],
                                                                          [
                                                                            Ty.path "usize";
                                                                            Ty.path "usize"
                                                                          ]
                                                                        |),
                                                                        [
                                                                          M.read (| kind |);
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    left_val
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |);
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.read (|
                                                                                    right_val
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |);
                                                                          Value.StructTuple
                                                                            "core::option::Option::None"
                                                                            []
                                                                            [
                                                                              Ty.path
                                                                                "core::fmt::Arguments"
                                                                            ]
                                                                            []
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic (Value.Tuple []))
                                                          ]
                                                        |)))
                                                  ]
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |) in
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
                                          []
                                          [ T ]
                                      ],
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.SubPointer.get_array_field (|
                                            M.deref (| M.read (| shorts |) |),
                                            Value.Integer IntegerKind.Usize 0
                                          |)
                                        |)
                                      |)
                                    |)
                                  |)
                                |)))
                          ]
                        |)
                      |)
                    |)
                  |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (T : Ty.t),
            M.IsTraitInstance
              "core::borrow::BorrowMut"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *)
              [
                Ty.apply
                  (Ty.path
                    "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
                  []
                  [ T ]
              ]
              (Self T)
              (* Instance *) [ ("borrow_mut", InstanceField.Method (borrow_mut T)) ].
        End Impl_core_borrow_BorrowMut_openvm_circuit_system_memory_offline_checker_columns_MemoryReadOrImmediateAuxCols_T_for_slice_T.
        
        Module Impl_openvm_circuit_system_memory_offline_checker_columns_MemoryReadOrImmediateAuxCols_T.
          Definition Self (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
              []
              [ T ].
          
          (* AlignedBorrow *)
          Definition width (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            let Self : Ty.t := Self T in
            match ε, τ, α with
            | [], [], [] =>
              ltac:(M.monadic
                (M.call_closure (|
                  Ty.path "usize",
                  M.get_function (|
                    "core::mem::size_of",
                    [],
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::offline_checker::columns::MemoryReadOrImmediateAuxCols")
                        []
                        [ Ty.path "u8" ]
                    ]
                  |),
                  []
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_width :
            forall (T : Ty.t),
            M.IsAssociatedFunction.C (Self T) "width" (width T).
          Admitted.
          Global Typeclasses Opaque width.
        End Impl_openvm_circuit_system_memory_offline_checker_columns_MemoryReadOrImmediateAuxCols_T.
        
        Module Impl_core_convert_AsRef_openvm_circuit_system_memory_offline_checker_columns_MemoryReadAuxCols_T_for_openvm_circuit_system_memory_offline_checker_columns_MemoryWriteAuxCols_N_T.
          Definition Self (N : Value.t) (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path
                "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
              [ N ]
              [ T ].
          
          (*
              fn as_ref(&self) -> &MemoryReadAuxCols<T> {
                  // Safety:
                  //  - `MemoryReadAuxCols<T>` is repr(C) and its only field is the first field of
                  //    `MemoryWriteAuxCols<T, N>`.
                  //  - Thus, the memory layout of `MemoryWriteAuxCols<T, N>` begins with a valid
                  //    `MemoryReadAuxCols<T>`.
                  unsafe { &*(self as *const MemoryWriteAuxCols<T, N> as *const MemoryReadAuxCols<T>) }
              }
          *)
          Definition as_ref
              (N : Value.t)
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self N T in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                          [ N ]
                          [ T ]
                      ],
                    self
                  |) in
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.cast
                          (Ty.apply
                            (Ty.path "*const")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                                []
                                [ T ]
                            ])
                          (M.read (|
                            M.use
                              (M.alloc (|
                                Ty.apply
                                  (Ty.path "*const")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                                      [ N ]
                                      [ T ]
                                  ],
                                M.borrow (|
                                  Pointer.Kind.ConstPointer,
                                  M.deref (| M.read (| self |) |)
                                |)
                              |))
                          |))
                      |)
                    |)
                  |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (N : Value.t) (T : Ty.t),
            M.IsTraitInstance
              "core::convert::AsRef"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *)
              [
                Ty.apply
                  (Ty.path
                    "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                  []
                  [ T ]
              ]
              (Self N T)
              (* Instance *) [ ("as_ref", InstanceField.Method (as_ref N T)) ].
        End Impl_core_convert_AsRef_openvm_circuit_system_memory_offline_checker_columns_MemoryReadAuxCols_T_for_openvm_circuit_system_memory_offline_checker_columns_MemoryWriteAuxCols_N_T.
      End columns.
    End offline_checker.
  End memory.
End system.
