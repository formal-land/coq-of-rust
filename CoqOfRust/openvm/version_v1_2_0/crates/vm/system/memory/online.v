(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module system.
  Module memory.
    Module online.
      (*
      Enum MemoryLogEntry
      {
        const_params := [];
        ty_params := [ "T" ];
        variants :=
          [
            {
              name := "Read";
              item :=
                StructRecord
                  [
                    ("address_space", Ty.path "u32");
                    ("pointer", Ty.path "u32");
                    ("len", Ty.path "usize")
                  ];
            };
            {
              name := "Write";
              item :=
                StructRecord
                  [
                    ("address_space", Ty.path "u32");
                    ("pointer", Ty.path "u32");
                    ("data",
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ])
                  ];
            };
            {
              name := "IncrementTimestampBy";
              item := StructTuple [ Ty.path "u32" ];
            }
          ];
      }
      *)
      
      Axiom IsDiscriminant_MemoryLogEntry_Read :
        M.IsDiscriminant "openvm_circuit::system::memory::online::MemoryLogEntry::Read" 0.
      Axiom IsDiscriminant_MemoryLogEntry_Write :
        M.IsDiscriminant "openvm_circuit::system::memory::online::MemoryLogEntry::Write" 1.
      Axiom IsDiscriminant_MemoryLogEntry_IncrementTimestampBy :
        M.IsDiscriminant
          "openvm_circuit::system::memory::online::MemoryLogEntry::IncrementTimestampBy"
          2.
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_circuit_system_memory_online_MemoryLogEntry_T.
        Definition Self (T : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry") [] [ T ].
        
        (* Debug *)
        Definition fmt (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry")
                        []
                        [ T ]
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::online::MemoryLogEntry::Read",
                          "address_space"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::online::MemoryLogEntry::Read",
                          "pointer"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::online::MemoryLogEntry::Read",
                          "len"
                        |) in
                      let __self_0 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ1_0 |) in
                      let __self_1 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ1_1 |) in
                      let __self_2 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_2 |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field3_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Read" |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "address_space" |) |)
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply (Ty.path "&") [] [ Ty.path "u32" ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                          |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "pointer" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply (Ty.path "&") [] [ Ty.path "u32" ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |) ]
                          |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "len" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_2 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::online::MemoryLogEntry::Write",
                          "address_space"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::online::MemoryLogEntry::Write",
                          "pointer"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::online::MemoryLogEntry::Write",
                          "data"
                        |) in
                      let __self_0 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ1_0 |) in
                      let __self_1 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ1_1 |) in
                      let __self_2 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ T; Ty.path "alloc::alloc::Global" ]
                            ],
                          γ1_2
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field3_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Write" |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "address_space" |) |)
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply (Ty.path "&") [] [ Ty.path "u32" ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                          |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "pointer" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply (Ty.path "&") [] [ Ty.path "u32" ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |) ]
                          |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "data" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ T; Ty.path "alloc::alloc::Global" ]
                                    ]
                                ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_2 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::online::MemoryLogEntry::IncrementTimestampBy",
                          0
                        |) in
                      let __self_0 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ1_0 |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (| mk_str (| "IncrementTimestampBy" |) |)
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self T)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt T)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_circuit_system_memory_online_MemoryLogEntry_T.
      
      Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_circuit_system_memory_online_MemoryLogEntry_T.
        Definition Self (T : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry") [] [ T ].
        
        (* Clone *)
        Definition clone (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry")
                        []
                        [ T ]
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry")
                  []
                  [ T ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::online::MemoryLogEntry::Read",
                          "address_space"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::online::MemoryLogEntry::Read",
                          "pointer"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::online::MemoryLogEntry::Read",
                          "len"
                        |) in
                      let __self_0 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ1_0 |) in
                      let __self_1 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ1_1 |) in
                      let __self_2 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_2 |) in
                      Value.mkStructRecord
                        "openvm_circuit::system::memory::online::MemoryLogEntry::Read"
                        []
                        [ T ]
                        [
                          ("address_space",
                            M.call_closure (|
                              Ty.path "u32",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "u32",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |)
                              ]
                            |));
                          ("pointer",
                            M.call_closure (|
                              Ty.path "u32",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "u32",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |)
                              ]
                            |));
                          ("len",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "usize",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_2 |) |) |)
                              ]
                            |))
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::online::MemoryLogEntry::Write",
                          "address_space"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::online::MemoryLogEntry::Write",
                          "pointer"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::online::MemoryLogEntry::Write",
                          "data"
                        |) in
                      let __self_0 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ1_0 |) in
                      let __self_1 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ1_1 |) in
                      let __self_2 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ T; Ty.path "alloc::alloc::Global" ]
                            ],
                          γ1_2
                        |) in
                      Value.mkStructRecord
                        "openvm_circuit::system::memory::online::MemoryLogEntry::Write"
                        []
                        [ T ]
                        [
                          ("address_space",
                            M.call_closure (|
                              Ty.path "u32",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "u32",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |)
                              ]
                            |));
                          ("pointer",
                            M.call_closure (|
                              Ty.path "u32",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.path "u32",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |)
                              ]
                            |));
                          ("data",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ T; Ty.path "alloc::alloc::Global" ],
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ T; Ty.path "alloc::alloc::Global" ],
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_2 |) |) |)
                              ]
                            |))
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::online::MemoryLogEntry::IncrementTimestampBy",
                          0
                        |) in
                      let __self_0 :=
                        M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ1_0 |) in
                      Value.StructTuple
                        "openvm_circuit::system::memory::online::MemoryLogEntry::IncrementTimestampBy"
                        []
                        [ T ]
                        [
                          M.call_closure (|
                            Ty.path "u32",
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.path "u32",
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                          |)
                        ]))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self T)
            (* Instance *) [ ("clone", InstanceField.Method (clone T)) ].
      End Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_circuit_system_memory_online_MemoryLogEntry_T.
      
      Module underscore.
        Module Impl_serde_ser_Serialize_where_serde_ser_Serialize_T_for_openvm_circuit_system_memory_online_MemoryLogEntry_T.
          Definition Self (T : Ty.t) : Ty.t :=
            Ty.apply (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry") [] [ T ].
          
          (* Serialize *)
          Definition serialize
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self T in
            match ε, τ, α with
            | [], [ __S ], [ self; __serializer ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry")
                          []
                          [ T ]
                      ],
                    self
                  |) in
                let __serializer := M.alloc (| __S, __serializer |) in
                M.catch_return
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                    ]) (|
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.deref (| M.read (| self |) |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_circuit::system::memory::online::MemoryLogEntry::Read",
                                "address_space"
                              |) in
                            let γ0_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_circuit::system::memory::online::MemoryLogEntry::Read",
                                "pointer"
                              |) in
                            let γ0_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_circuit::system::memory::online::MemoryLogEntry::Read",
                                "len"
                              |) in
                            let address_space :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ0_0 |) in
                            let pointer :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ0_1 |) in
                            let len :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_2 |) in
                            M.read (|
                              let~ __serde_state :
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStructVariant" :=
                                M.match_operator (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStructVariant",
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "SerializeStructVariant"
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "SerializeStructVariant"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "SerializeStructVariant";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::Serializer",
                                            __S,
                                            [],
                                            [],
                                            "serialize_struct_variant",
                                            [],
                                            []
                                          |),
                                          [
                                            M.read (| __serializer |);
                                            mk_str (| "MemoryLogEntry" |);
                                            Value.Integer IntegerKind.U32 0;
                                            mk_str (| "Read" |);
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.add,
                                              [
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.add,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.add,
                                                      [
                                                        Value.Integer IntegerKind.Usize 0;
                                                        Value.Integer IntegerKind.Usize 1
                                                      ]
                                                    |);
                                                    Value.Integer IntegerKind.Usize 1
                                                  ]
                                                |);
                                                Value.Integer IntegerKind.Usize 1
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val :=
                                          M.copy (|
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            γ0_0
                                          |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [ Ty.path "u32" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "address_space" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| address_space |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [ Ty.path "u32" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "pointer" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| pointer |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [ Ty.path "usize" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "len" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| len |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Ok";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStructVariant",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStructVariant",
                                    [],
                                    [],
                                    "end",
                                    [],
                                    []
                                  |),
                                  [ M.read (| __serde_state |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_circuit::system::memory::online::MemoryLogEntry::Write",
                                "address_space"
                              |) in
                            let γ0_1 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_circuit::system::memory::online::MemoryLogEntry::Write",
                                "pointer"
                              |) in
                            let γ0_2 :=
                              M.SubPointer.get_struct_record_field (|
                                γ,
                                "openvm_circuit::system::memory::online::MemoryLogEntry::Write",
                                "data"
                              |) in
                            let address_space :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ0_0 |) in
                            let pointer :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ0_1 |) in
                            let data :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ T; Ty.path "alloc::alloc::Global" ]
                                  ],
                                γ0_2
                              |) in
                            M.read (|
                              let~ __serde_state :
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStructVariant" :=
                                M.match_operator (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStructVariant",
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "SerializeStructVariant"
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "SerializeStructVariant"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "SerializeStructVariant";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::Serializer",
                                            __S,
                                            [],
                                            [],
                                            "serialize_struct_variant",
                                            [],
                                            []
                                          |),
                                          [
                                            M.read (| __serializer |);
                                            mk_str (| "MemoryLogEntry" |);
                                            Value.Integer IntegerKind.U32 1;
                                            mk_str (| "Write" |);
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.add,
                                              [
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.add,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.add,
                                                      [
                                                        Value.Integer IntegerKind.Usize 0;
                                                        Value.Integer IntegerKind.Usize 1
                                                      ]
                                                    |);
                                                    Value.Integer IntegerKind.Usize 1
                                                  ]
                                                |);
                                                Value.Integer IntegerKind.Usize 1
                                              ]
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val :=
                                          M.copy (|
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            γ0_0
                                          |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [ Ty.path "u32" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "address_space" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| address_space |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [ Ty.path "u32" ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "pointer" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| pointer |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::ops::control_flow::ControlFlow")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ];
                                        Ty.tuple []
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::ops::control_flow::ControlFlow")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ];
                                          Ty.tuple []
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::Try",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.tuple [];
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [],
                                        "branch",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.tuple [];
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "serde::ser::SerializeStructVariant",
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "SerializeStructVariant",
                                            [],
                                            [],
                                            "serialize_field",
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ T; Ty.path "alloc::alloc::Global" ]
                                            ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (|
                                                M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                              |)
                                            |);
                                            mk_str (| "data" |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| data |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Break",
                                            0
                                          |) in
                                        let residual :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            γ0_0
                                          |) in
                                        M.never_to_any (|
                                          M.read (|
                                            M.return_ (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "core::result::Result")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Ok";
                                                    Ty.associated_in_trait
                                                      "serde::ser::Serializer"
                                                      []
                                                      []
                                                      __S
                                                      "Error"
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::try_trait::FromResidual",
                                                  Ty.apply
                                                    (Ty.path "core::result::Result")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Ok";
                                                      Ty.associated_in_trait
                                                        "serde::ser::Serializer"
                                                        []
                                                        []
                                                        __S
                                                        "Error"
                                                    ],
                                                  [],
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::result::Result")
                                                      []
                                                      [
                                                        Ty.path "core::convert::Infallible";
                                                        Ty.associated_in_trait
                                                          "serde::ser::Serializer"
                                                          []
                                                          []
                                                          __S
                                                          "Error"
                                                      ]
                                                  ],
                                                  "from_residual",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| residual |) ]
                                              |)
                                            |)
                                          |)
                                        |)));
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 :=
                                          M.SubPointer.get_struct_tuple_field (|
                                            γ,
                                            "core::ops::control_flow::ControlFlow::Continue",
                                            0
                                          |) in
                                        let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                        M.read (| val |)))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Ok";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStructVariant",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStructVariant",
                                    [],
                                    [],
                                    "end",
                                    [],
                                    []
                                  |),
                                  [ M.read (| __serde_state |) ]
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "openvm_circuit::system::memory::online::MemoryLogEntry::IncrementTimestampBy",
                                0
                              |) in
                            let __field0 :=
                              M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "u32" ], γ0_0 |) in
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              M.get_trait_method (|
                                "serde::ser::Serializer",
                                __S,
                                [],
                                [],
                                "serialize_newtype_variant",
                                [],
                                [ Ty.path "u32" ]
                              |),
                              [
                                M.read (| __serializer |);
                                mk_str (| "MemoryLogEntry" |);
                                Value.Integer IntegerKind.U32 2;
                                mk_str (| "IncrementTimestampBy" |);
                                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __field0 |) |) |)
                              ]
                            |)))
                      ]
                    |)))
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (T : Ty.t),
            M.IsTraitInstance
              "serde::ser::Serialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self T)
              (* Instance *) [ ("serialize", InstanceField.Method (serialize T)) ].
        End Impl_serde_ser_Serialize_where_serde_ser_Serialize_T_for_openvm_circuit_system_memory_online_MemoryLogEntry_T.
        Module Impl_serde_de_Deserialize_where_serde_de_Deserialize_T_for_openvm_circuit_system_memory_online_MemoryLogEntry_T.
          Definition Self (T : Ty.t) : Ty.t :=
            Ty.apply (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry") [] [ T ].
          
          (* Deserialize *)
          Definition deserialize
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self T in
            match ε, τ, α with
            | [], [ __D ], [ __deserializer ] =>
              ltac:(M.monadic
                (let __deserializer := M.alloc (| __D, __deserializer |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry")
                        []
                        [ T ];
                      Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                    ],
                  M.get_trait_method (|
                    "serde::de::Deserializer",
                    __D,
                    [],
                    [],
                    "deserialize_enum",
                    [],
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::online::_'1::deserialize::__Visitor")
                        []
                        [ T ]
                    ]
                  |),
                  [
                    M.read (| __deserializer |);
                    mk_str (| "MemoryLogEntry" |);
                    M.read (|
                      get_constant (|
                        "openvm_circuit::system::memory::online::_'1::deserialize::VARIANTS",
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ]
                      |)
                    |);
                    Value.mkStructRecord
                      "openvm_circuit::system::memory::online::_'1::deserialize::__Visitor"
                      []
                      [ T ]
                      [
                        ("marker",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry")
                                []
                                [ T ]
                            ]
                            []);
                        ("lifetime",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                            [])
                      ]
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (T : Ty.t),
            M.IsTraitInstance
              "serde::de::Deserialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self T)
              (* Instance *) [ ("deserialize", InstanceField.Method (deserialize T)) ].
        End Impl_serde_de_Deserialize_where_serde_de_Deserialize_T_for_openvm_circuit_system_memory_online_MemoryLogEntry_T.
      End underscore.
      
      
      (* StructRecord
        {
          name := "Memory";
          const_params := [];
          ty_params := [ "F" ];
          fields :=
            [
              ("data",
                Ty.apply
                  (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                  [
                    M.unevaluated_const
                      (mk_str (| "openvm_circuit_system_memory_online_Memory_discriminant" |))
                  ]
                  [ F ]);
              ("log",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry")
                      []
                      [ F ];
                    Ty.path "alloc::alloc::Global"
                  ]);
              ("timestamp", Ty.path "u32")
            ];
        } *)
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_circuit_system_memory_online_Memory_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "openvm_circuit::system::memory::online::Memory") [] [ F ].
        
        (* Debug *)
        Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.apply (Ty.path "openvm_circuit::system::memory::online::Memory") [] [ F ]
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field3_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Memory" |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "data" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                            [ Value.Integer IntegerKind.Usize 4096 ]
                            [ F ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::online::Memory",
                              "data"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "log" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::online::Memory",
                              "log"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "timestamp" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::online::Memory",
                                  "timestamp"
                                |)
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_circuit_system_memory_online_Memory_F.
      
      Module Impl_openvm_circuit_system_memory_online_Memory_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "openvm_circuit::system::memory::online::Memory") [] [ F ].
        
        (*
            pub fn new(mem_config: &MemoryConfig) -> Self {
                Self {
                    data: AddressMap::from_mem_config(mem_config),
                    timestamp: INITIAL_TIMESTAMP + 1,
                    log: Vec::with_capacity(mem_config.access_capacity),
                }
            }
        *)
        Definition new (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ mem_config ] =>
            ltac:(M.monadic
              (let mem_config :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::arch::config::MemoryConfig" ],
                  mem_config
                |) in
              Value.mkStructRecord
                "openvm_circuit::system::memory::online::Memory"
                []
                [ F ]
                [
                  ("data",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                        [ Value.Integer IntegerKind.Usize 4096 ]
                        [ F ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                          [ Value.Integer IntegerKind.Usize 4096 ]
                          [ F ],
                        "from_mem_config",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| mem_config |) |) |) ]
                    |));
                  ("timestamp",
                    M.call_closure (|
                      Ty.path "u32",
                      BinOp.Wrap.add,
                      [
                        M.read (|
                          get_constant (|
                            "openvm_circuit::system::memory::offline::INITIAL_TIMESTAMP",
                            Ty.path "u32"
                          |)
                        |);
                        Value.Integer IntegerKind.U32 1
                      ]
                    |));
                  ("log",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "with_capacity",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| mem_config |) |),
                            "openvm_circuit::arch::config::MemoryConfig",
                            "access_capacity"
                          |)
                        |)
                      ]
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_new :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "new" (new F).
        Admitted.
        Global Typeclasses Opaque new.
        
        (*
            pub fn from_image(image: MemoryImage<F>, access_capacity: usize) -> Self {
                Self {
                    data: image,
                    timestamp: INITIAL_TIMESTAMP + 1,
                    log: Vec::with_capacity(access_capacity),
                }
            }
        *)
        Definition from_image
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ image; access_capacity ] =>
            ltac:(M.monadic
              (let image :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                    [
                      M.unevaluated_const
                        (mk_str (|
                          "openvm_circuit_system_memory_controller_MemoryImage_discriminant"
                        |))
                    ]
                    [ F ],
                  image
                |) in
              let access_capacity := M.alloc (| Ty.path "usize", access_capacity |) in
              Value.mkStructRecord
                "openvm_circuit::system::memory::online::Memory"
                []
                [ F ]
                [
                  ("data", M.read (| image |));
                  ("timestamp",
                    M.call_closure (|
                      Ty.path "u32",
                      BinOp.Wrap.add,
                      [
                        M.read (|
                          get_constant (|
                            "openvm_circuit::system::memory::offline::INITIAL_TIMESTAMP",
                            Ty.path "u32"
                          |)
                        |);
                        Value.Integer IntegerKind.U32 1
                      ]
                    |));
                  ("log",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry")
                              []
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        "with_capacity",
                        [],
                        []
                      |),
                      [ M.read (| access_capacity |) ]
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_from_image :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "from_image" (from_image F).
        Admitted.
        Global Typeclasses Opaque from_image.
        
        (*
            fn last_record_id(&self) -> RecordId {
                RecordId(self.log.len() - 1)
            }
        *)
        Definition last_record_id
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.apply (Ty.path "openvm_circuit::system::memory::online::Memory") [] [ F ]
                    ],
                  self
                |) in
              Value.StructTuple
                "openvm_circuit::system::memory::controller::RecordId"
                []
                []
                [
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.sub,
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry")
                                []
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "len",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::online::Memory",
                              "log"
                            |)
                          |)
                        ]
                      |);
                      Value.Integer IntegerKind.Usize 1
                    ]
                  |)
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_last_record_id :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "last_record_id" (last_record_id F).
        Admitted.
        Global Typeclasses Opaque last_record_id.
        
        (*
            pub fn write<const N: usize>(
                &mut self,
                address_space: u32,
                pointer: u32,
                values: [F; N],
            ) -> (RecordId, [F; N]) {
                assert!(N.is_power_of_two());
        
                let prev_data = self.data.set_range(&(address_space, pointer), &values);
        
                self.log.push(MemoryLogEntry::Write {
                    address_space,
                    pointer,
                    data: values.to_vec(),
                });
                self.timestamp += 1;
        
                (self.last_record_id(), prev_data)
            }
        *)
        Definition write (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [ N ], [], [ self; address_space; pointer; values ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [ Ty.apply (Ty.path "openvm_circuit::system::memory::online::Memory") [] [ F ]
                    ],
                  self
                |) in
              let address_space := M.alloc (| Ty.path "u32", address_space |) in
              let pointer := M.alloc (| Ty.path "u32", pointer |) in
              let values := M.alloc (| Ty.apply (Ty.path "array") [ N ] [ F ], values |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "usize",
                                      "is_power_of_two",
                                      [],
                                      []
                                    |),
                                    [ N ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic", [], [] |),
                              [ mk_str (| "assertion failed: N.is_power_of_two()" |) ]
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ prev_data : Ty.apply (Ty.path "array") [ N ] [ F ] :=
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ N ] [ F ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                        [ Value.Integer IntegerKind.Usize 4096 ]
                        [ F ],
                      "set_range",
                      [ N ],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::online::Memory",
                          "data"
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.tuple [ Ty.path "u32"; Ty.path "u32" ],
                              Value.Tuple [ M.read (| address_space |); M.read (| pointer |) ]
                            |)
                          |)
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| M.borrow (| Pointer.Kind.Ref, values |) |)
                      |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "push",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::online::Memory",
                          "log"
                        |)
                      |);
                      Value.mkStructRecord
                        "openvm_circuit::system::memory::online::MemoryLogEntry::Write"
                        []
                        [ F ]
                        [
                          ("address_space", M.read (| address_space |));
                          ("pointer", M.read (| pointer |));
                          ("data",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ],
                              M.get_associated_function (|
                                Ty.apply (Ty.path "slice") [] [ F ],
                                "to_vec",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "array") [ N ] [ F ] ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "slice") [] [ F ] ]),
                                  [ M.borrow (| Pointer.Kind.Ref, values |) ]
                                |)
                              ]
                            |))
                        ]
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  let β :=
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::online::Memory",
                      "timestamp"
                    |) in
                  M.write (|
                    β,
                    M.call_closure (|
                      Ty.path "u32",
                      BinOp.Wrap.add,
                      [ M.read (| β |); Value.Integer IntegerKind.U32 1 ]
                    |)
                  |) in
                M.alloc (|
                  Ty.tuple
                    [
                      Ty.path "openvm_circuit::system::memory::controller::RecordId";
                      Ty.apply (Ty.path "array") [ N ] [ F ]
                    ],
                  Value.Tuple
                    [
                      M.call_closure (|
                        Ty.path "openvm_circuit::system::memory::controller::RecordId",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::online::Memory")
                            []
                            [ F ],
                          "last_record_id",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |);
                      M.read (| prev_data |)
                    ]
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_write :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "write" (write F).
        Admitted.
        Global Typeclasses Opaque write.
        
        (*
            pub fn read<const N: usize>(&mut self, address_space: u32, pointer: u32) -> (RecordId, [F; N]) {
                assert!(N.is_power_of_two());
        
                self.log.push(MemoryLogEntry::Read {
                    address_space,
                    pointer,
                    len: N,
                });
        
                let values = if address_space == 0 {
                    assert_eq!(N, 1, "cannot batch read from address space 0");
                    [F::from_canonical_u32(pointer); N]
                } else {
                    self.range_array::<N>(address_space, pointer)
                };
                self.timestamp += 1;
                (self.last_record_id(), values)
            }
        *)
        Definition read (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [ N ], [], [ self; address_space; pointer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [ Ty.apply (Ty.path "openvm_circuit::system::memory::online::Memory") [] [ F ]
                    ],
                  self
                |) in
              let address_space := M.alloc (| Ty.path "u32", address_space |) in
              let pointer := M.alloc (| Ty.path "u32", pointer |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "usize",
                                      "is_power_of_two",
                                      [],
                                      []
                                    |),
                                    [ N ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic", [], [] |),
                              [ mk_str (| "assertion failed: N.is_power_of_two()" |) ]
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "push",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::online::Memory",
                          "log"
                        |)
                      |);
                      Value.mkStructRecord
                        "openvm_circuit::system::memory::online::MemoryLogEntry::Read"
                        []
                        [ F ]
                        [
                          ("address_space", M.read (| address_space |));
                          ("pointer", M.read (| pointer |));
                          ("len", N)
                        ]
                    ]
                  |) in
                let~ values : Ty.apply (Ty.path "array") [ N ] [ F ] :=
                  M.match_operator (|
                    Ty.apply (Ty.path "array") [ N ] [ F ],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.eq,
                                  [ M.read (| address_space |); Value.Integer IntegerKind.U32 0 ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.tuple
                                    [
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                    ],
                                  Value.Tuple
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (| Ty.path "usize", N |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.path "usize",
                                          Value.Integer IntegerKind.Usize 1
                                        |)
                                      |)
                                    ]
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                      let left_val :=
                                        M.copy (|
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                          γ0_0
                                        |) in
                                      let right_val :=
                                        M.copy (|
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                          γ0_1
                                        |) in
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    Ty.path "bool",
                                                    UnOp.not (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        BinOp.eq,
                                                        [
                                                          M.read (|
                                                            M.deref (| M.read (| left_val |) |)
                                                          |);
                                                          M.read (|
                                                            M.deref (| M.read (| right_val |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)) in
                                              let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.never_to_any (|
                                                M.read (|
                                                  let~ kind :
                                                      Ty.path "core::panicking::AssertKind" :=
                                                    Value.StructTuple
                                                      "core::panicking::AssertKind::Eq"
                                                      []
                                                      []
                                                      [] in
                                                  M.alloc (|
                                                    Ty.path "never",
                                                    M.call_closure (|
                                                      Ty.path "never",
                                                      M.get_function (|
                                                        "core::panicking::assert_failed",
                                                        [],
                                                        [ Ty.path "usize"; Ty.path "usize" ]
                                                      |),
                                                      [
                                                        M.read (| kind |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| left_val |) |)
                                                            |)
                                                          |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| right_val |) |)
                                                            |)
                                                          |)
                                                        |);
                                                        Value.StructTuple
                                                          "core::option::Option::Some"
                                                          []
                                                          [ Ty.path "core::fmt::Arguments" ]
                                                          [
                                                            M.call_closure (|
                                                              Ty.path "core::fmt::Arguments",
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::Arguments",
                                                                "new_const",
                                                                [ Value.Integer IntegerKind.Usize 1
                                                                ],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.alloc (|
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              1
                                                                          ]
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [ Ty.path "str" ]
                                                                          ],
                                                                        Value.Array
                                                                          [
                                                                            mk_str (|
                                                                              "cannot batch read from address space 0"
                                                                            |)
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ => ltac:(M.monadic (Value.Tuple []))
                                        ]
                                      |)))
                                ]
                              |) in
                            M.alloc (|
                              Ty.apply (Ty.path "array") [ N ] [ F ],
                              lib.repeat (|
                                M.call_closure (|
                                  F,
                                  M.get_trait_method (|
                                    "p3_field::field::FieldAlgebra",
                                    F,
                                    [],
                                    [],
                                    "from_canonical_u32",
                                    [],
                                    []
                                  |),
                                  [ M.read (| pointer |) ]
                                |),
                                N
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.call_closure (|
                            Ty.apply (Ty.path "array") [ N ] [ F ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::online::Memory")
                                []
                                [ F ],
                              "range_array",
                              [ N ],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                              M.read (| address_space |);
                              M.read (| pointer |)
                            ]
                          |)))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  let β :=
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::online::Memory",
                      "timestamp"
                    |) in
                  M.write (|
                    β,
                    M.call_closure (|
                      Ty.path "u32",
                      BinOp.Wrap.add,
                      [ M.read (| β |); Value.Integer IntegerKind.U32 1 ]
                    |)
                  |) in
                M.alloc (|
                  Ty.tuple
                    [
                      Ty.path "openvm_circuit::system::memory::controller::RecordId";
                      Ty.apply (Ty.path "array") [ N ] [ F ]
                    ],
                  Value.Tuple
                    [
                      M.call_closure (|
                        Ty.path "openvm_circuit::system::memory::controller::RecordId",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::online::Memory")
                            []
                            [ F ],
                          "last_record_id",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |);
                      M.read (| values |)
                    ]
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_read :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "read" (read F).
        Admitted.
        Global Typeclasses Opaque read.
        
        (*
            pub fn increment_timestamp_by(&mut self, amount: u32) {
                self.timestamp += amount;
                self.log.push(MemoryLogEntry::IncrementTimestampBy(amount))
            }
        *)
        Definition increment_timestamp_by
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; amount ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [ Ty.apply (Ty.path "openvm_circuit::system::memory::online::Memory") [] [ F ]
                    ],
                  self
                |) in
              let amount := M.alloc (| Ty.path "u32", amount |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  let β :=
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::online::Memory",
                      "timestamp"
                    |) in
                  M.write (|
                    β,
                    M.call_closure (|
                      Ty.path "u32",
                      BinOp.Wrap.add,
                      [ M.read (| β |); M.read (| amount |) ]
                    |)
                  |) in
                M.alloc (|
                  Ty.tuple [],
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::online::MemoryLogEntry")
                            []
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "push",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::online::Memory",
                          "log"
                        |)
                      |);
                      Value.StructTuple
                        "openvm_circuit::system::memory::online::MemoryLogEntry::IncrementTimestampBy"
                        []
                        [ F ]
                        [ M.read (| amount |) ]
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_increment_timestamp_by :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "increment_timestamp_by" (increment_timestamp_by F).
        Admitted.
        Global Typeclasses Opaque increment_timestamp_by.
        
        (*
            pub fn timestamp(&self) -> u32 {
                self.timestamp
            }
        *)
        Definition timestamp (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.apply (Ty.path "openvm_circuit::system::memory::online::Memory") [] [ F ]
                    ],
                  self
                |) in
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "openvm_circuit::system::memory::online::Memory",
                  "timestamp"
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_timestamp :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "timestamp" (timestamp F).
        Admitted.
        Global Typeclasses Opaque timestamp.
        
        (*
            pub fn get(&self, address_space: u32, pointer: u32) -> F {
                *self.data.get(&(address_space, pointer)).unwrap_or(&F::ZERO)
            }
        *)
        Definition get (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; address_space; pointer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.apply (Ty.path "openvm_circuit::system::memory::online::Memory") [] [ F ]
                    ],
                  self
                |) in
              let address_space := M.alloc (| Ty.path "u32", address_space |) in
              let pointer := M.alloc (| Ty.path "u32", pointer |) in
              M.read (|
                M.deref (|
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ F ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.apply (Ty.path "&") [] [ F ] ],
                      "unwrap_or",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.apply (Ty.path "&") [] [ F ] ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                            [ Value.Integer IntegerKind.Usize 4096 ]
                            [ F ],
                          "get",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::online::Memory",
                              "data"
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  Ty.tuple [ Ty.path "u32"; Ty.path "u32" ],
                                  Value.Tuple [ M.read (| address_space |); M.read (| pointer |) ]
                                |)
                              |)
                            |)
                          |)
                        ]
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            get_constant (| "p3_field::field::FieldAlgebra::ZERO", F |)
                          |)
                        |)
                      |)
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_get :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "get" (get F).
        Admitted.
        Global Typeclasses Opaque get.
        
        (*
            fn range_array<const N: usize>(&self, address_space: u32, pointer: u32) -> [F; N] {
                self.data.get_range(&(address_space, pointer))
            }
        *)
        Definition range_array
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [ N ], [], [ self; address_space; pointer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.apply (Ty.path "openvm_circuit::system::memory::online::Memory") [] [ F ]
                    ],
                  self
                |) in
              let address_space := M.alloc (| Ty.path "u32", address_space |) in
              let pointer := M.alloc (| Ty.path "u32", pointer |) in
              M.call_closure (|
                Ty.apply (Ty.path "array") [ N ] [ F ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                    [ Value.Integer IntegerKind.Usize 4096 ]
                    [ F ],
                  "get_range",
                  [ N ],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::online::Memory",
                      "data"
                    |)
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Ty.tuple [ Ty.path "u32"; Ty.path "u32" ],
                          Value.Tuple [ M.read (| address_space |); M.read (| pointer |) ]
                        |)
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_range_array :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "range_array" (range_array F).
        Admitted.
        Global Typeclasses Opaque range_array.
      End Impl_openvm_circuit_system_memory_online_Memory_F.
    End online.
  End memory.
End system.
