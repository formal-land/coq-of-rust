(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module system.
  Module memory.
    Module paged_vec.
      Axiom Address :
        (Ty.path "openvm_circuit::system::memory::paged_vec::Address") =
          (Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]).
      
      Definition value_PAGE_SIZE (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic
          (M.alloc (|
            Ty.path "usize",
            M.call_closure (|
              Ty.path "usize",
              BinOp.Wrap.shl,
              [ Value.Integer IntegerKind.Usize 1; Value.Integer IntegerKind.I32 12 ]
            |)
          |))).
      
      Global Instance Instance_IsConstant_value_PAGE_SIZE :
        M.IsFunction.C "openvm_circuit::system::memory::paged_vec::PAGE_SIZE" value_PAGE_SIZE.
      Admitted.
      Global Typeclasses Opaque value_PAGE_SIZE.
      
      (* StructRecord
        {
          name := "PagedVec";
          const_params := [ "PAGE_SIZE" ];
          ty_params := [ "T" ];
          fields :=
            [
              ("pages",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ T; Ty.path "alloc::alloc::Global" ]
                      ];
                    Ty.path "alloc::alloc::Global"
                  ])
            ];
        } *)
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_circuit_system_memory_paged_vec_PagedVec_PAGE_SIZE_T.
        Definition Self (PAGE_SIZE : Value.t) (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
            [ PAGE_SIZE ]
            [ T ].
        
        (* Debug *)
        Definition fmt
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                        [ PAGE_SIZE ]
                        [ T ]
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field1_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "PagedVec" |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "pages" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ T; Ty.path "alloc::alloc::Global" ]
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ T; Ty.path "alloc::alloc::Global" ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::paged_vec::PagedVec",
                                  "pages"
                                |)
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self PAGE_SIZE T)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt PAGE_SIZE T)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_circuit_system_memory_paged_vec_PagedVec_PAGE_SIZE_T.
      
      Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_circuit_system_memory_paged_vec_PagedVec_PAGE_SIZE_T.
        Definition Self (PAGE_SIZE : Value.t) (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
            [ PAGE_SIZE ]
            [ T ].
        
        (* Clone *)
        Definition clone
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                        [ PAGE_SIZE ]
                        [ T ]
                    ],
                  self
                |) in
              Value.mkStructRecord
                "openvm_circuit::system::memory::paged_vec::PagedVec"
                [ PAGE_SIZE ]
                [ T ]
                [
                  ("pages",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ T; Ty.path "alloc::alloc::Global" ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ T; Ty.path "alloc::alloc::Global" ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::paged_vec::PagedVec",
                                "pages"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self PAGE_SIZE T)
            (* Instance *) [ ("clone", InstanceField.Method (clone PAGE_SIZE T)) ].
      End Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_circuit_system_memory_paged_vec_PagedVec_PAGE_SIZE_T.
      
      Module underscore.
        Module Impl_serde_ser_Serialize_where_serde_ser_Serialize_T_for_openvm_circuit_system_memory_paged_vec_PagedVec_PAGE_SIZE_T.
          Definition Self (PAGE_SIZE : Value.t) (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
              [ PAGE_SIZE ]
              [ T ].
          
          (* Serialize *)
          Definition serialize
              (PAGE_SIZE : Value.t)
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self PAGE_SIZE T in
            match ε, τ, α with
            | [], [ __S ], [ self; __serializer ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                          [ PAGE_SIZE ]
                          [ T ]
                      ],
                    self
                  |) in
                let __serializer := M.alloc (| __S, __serializer |) in
                M.catch_return
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                    ]) (|
                  ltac:(M.monadic
                    (M.read (|
                      let~ __serde_state :
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct" :=
                        M.match_operator (|
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct"
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "SerializeStruct";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::Serializer",
                                    __S,
                                    [],
                                    [],
                                    "serialize_struct",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (| __serializer |);
                                    mk_str (| "PagedVec" |);
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.add,
                                      [
                                        M.cast (Ty.path "usize") (Value.Bool false);
                                        Value.Integer IntegerKind.Usize 1
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val :=
                                  M.copy (|
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    γ0_0
                                  |) in
                                M.read (| val |)))
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.tuple []
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStruct",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    [],
                                    [],
                                    "serialize_field",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ T; Ty.path "alloc::alloc::Global" ]
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                      |)
                                    |);
                                    mk_str (| "pages" |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::system::memory::paged_vec::PagedVec",
                                            "pages"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                M.read (| val |)))
                          ]
                        |) in
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                            ],
                          M.get_trait_method (|
                            "serde::ser::SerializeStruct",
                            Ty.associated_in_trait
                              "serde::ser::Serializer"
                              []
                              []
                              __S
                              "SerializeStruct",
                            [],
                            [],
                            "end",
                            [],
                            []
                          |),
                          [ M.read (| __serde_state |) ]
                        |)
                      |)
                    |)))
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (PAGE_SIZE : Value.t) (T : Ty.t),
            M.IsTraitInstance
              "serde::ser::Serialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self PAGE_SIZE T)
              (* Instance *) [ ("serialize", InstanceField.Method (serialize PAGE_SIZE T)) ].
        End Impl_serde_ser_Serialize_where_serde_ser_Serialize_T_for_openvm_circuit_system_memory_paged_vec_PagedVec_PAGE_SIZE_T.
        Module Impl_serde_de_Deserialize_where_serde_de_Deserialize_T_for_openvm_circuit_system_memory_paged_vec_PagedVec_PAGE_SIZE_T.
          Definition Self (PAGE_SIZE : Value.t) (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
              [ PAGE_SIZE ]
              [ T ].
          
          (* Deserialize *)
          Definition deserialize
              (PAGE_SIZE : Value.t)
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self PAGE_SIZE T in
            match ε, τ, α with
            | [], [ __D ], [ __deserializer ] =>
              ltac:(M.monadic
                (let __deserializer := M.alloc (| __D, __deserializer |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                        [ PAGE_SIZE ]
                        [ T ];
                      Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                    ],
                  M.get_trait_method (|
                    "serde::de::Deserializer",
                    __D,
                    [],
                    [],
                    "deserialize_struct",
                    [],
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::paged_vec::_'1::deserialize::__Visitor")
                        [ PAGE_SIZE ]
                        [ T ]
                    ]
                  |),
                  [
                    M.read (| __deserializer |);
                    mk_str (| "PagedVec" |);
                    M.read (|
                      get_constant (|
                        "openvm_circuit::system::memory::paged_vec::_'1::deserialize::FIELDS",
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ]
                      |)
                    |);
                    Value.mkStructRecord
                      "openvm_circuit::system::memory::paged_vec::_'1::deserialize::__Visitor"
                      [ PAGE_SIZE ]
                      [ T ]
                      [
                        ("marker",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                                [ PAGE_SIZE ]
                                [ T ]
                            ]
                            []);
                        ("lifetime",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                            [])
                      ]
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (PAGE_SIZE : Value.t) (T : Ty.t),
            M.IsTraitInstance
              "serde::de::Deserialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self PAGE_SIZE T)
              (* Instance *) [ ("deserialize", InstanceField.Method (deserialize PAGE_SIZE T)) ].
        End Impl_serde_de_Deserialize_where_serde_de_Deserialize_T_for_openvm_circuit_system_memory_paged_vec_PagedVec_PAGE_SIZE_T.
        Module Impl_serde_ser_Serialize_where_serde_ser_Serialize_T_for_openvm_circuit_system_memory_paged_vec_AddressMap_PAGE_SIZE_T.
          Definition Self (PAGE_SIZE : Value.t) (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
              [ PAGE_SIZE ]
              [ T ].
          
          (* Serialize *)
          Definition serialize
              (PAGE_SIZE : Value.t)
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self PAGE_SIZE T in
            match ε, τ, α with
            | [], [ __S ], [ self; __serializer ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                          [ PAGE_SIZE ]
                          [ T ]
                      ],
                    self
                  |) in
                let __serializer := M.alloc (| __S, __serializer |) in
                M.catch_return
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                    ]) (|
                  ltac:(M.monadic
                    (M.read (|
                      let~ __serde_state :
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct" :=
                        M.match_operator (|
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct"
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "SerializeStruct";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::Serializer",
                                    __S,
                                    [],
                                    [],
                                    "serialize_struct",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (| __serializer |);
                                    mk_str (| "AddressMap" |);
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.add,
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.add,
                                          [
                                            M.cast (Ty.path "usize") (Value.Bool false);
                                            Value.Integer IntegerKind.Usize 1
                                          ]
                                        |);
                                        Value.Integer IntegerKind.Usize 1
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val :=
                                  M.copy (|
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    γ0_0
                                  |) in
                                M.read (| val |)))
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.tuple []
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStruct",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    [],
                                    [],
                                    "serialize_field",
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::paged_vec::PagedVec")
                                            [ PAGE_SIZE ]
                                            [ T ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                      |)
                                    |);
                                    mk_str (| "paged_vecs" |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::system::memory::paged_vec::AddressMap",
                                            "paged_vecs"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                M.read (| val |)))
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.tuple []
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStruct",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    [],
                                    [],
                                    "serialize_field",
                                    [],
                                    [ Ty.path "u32" ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                      |)
                                    |);
                                    mk_str (| "as_offset" |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::system::memory::paged_vec::AddressMap",
                                            "as_offset"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                M.read (| val |)))
                          ]
                        |) in
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                            ],
                          M.get_trait_method (|
                            "serde::ser::SerializeStruct",
                            Ty.associated_in_trait
                              "serde::ser::Serializer"
                              []
                              []
                              __S
                              "SerializeStruct",
                            [],
                            [],
                            "end",
                            [],
                            []
                          |),
                          [ M.read (| __serde_state |) ]
                        |)
                      |)
                    |)))
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (PAGE_SIZE : Value.t) (T : Ty.t),
            M.IsTraitInstance
              "serde::ser::Serialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self PAGE_SIZE T)
              (* Instance *) [ ("serialize", InstanceField.Method (serialize PAGE_SIZE T)) ].
        End Impl_serde_ser_Serialize_where_serde_ser_Serialize_T_for_openvm_circuit_system_memory_paged_vec_AddressMap_PAGE_SIZE_T.
        Module Impl_serde_de_Deserialize_where_serde_de_Deserialize_T_for_openvm_circuit_system_memory_paged_vec_AddressMap_PAGE_SIZE_T.
          Definition Self (PAGE_SIZE : Value.t) (T : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
              [ PAGE_SIZE ]
              [ T ].
          
          (* Deserialize *)
          Definition deserialize
              (PAGE_SIZE : Value.t)
              (T : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self PAGE_SIZE T in
            match ε, τ, α with
            | [], [ __D ], [ __deserializer ] =>
              ltac:(M.monadic
                (let __deserializer := M.alloc (| __D, __deserializer |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                        [ PAGE_SIZE ]
                        [ T ];
                      Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                    ],
                  M.get_trait_method (|
                    "serde::de::Deserializer",
                    __D,
                    [],
                    [],
                    "deserialize_struct",
                    [],
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::paged_vec::_'3::deserialize::__Visitor")
                        [ PAGE_SIZE ]
                        [ T ]
                    ]
                  |),
                  [
                    M.read (| __deserializer |);
                    mk_str (| "AddressMap" |);
                    M.read (|
                      get_constant (|
                        "openvm_circuit::system::memory::paged_vec::_'3::deserialize::FIELDS",
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ]
                      |)
                    |);
                    Value.mkStructRecord
                      "openvm_circuit::system::memory::paged_vec::_'3::deserialize::__Visitor"
                      [ PAGE_SIZE ]
                      [ T ]
                      [
                        ("marker",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                                [ PAGE_SIZE ]
                                [ T ]
                            ]
                            []);
                        ("lifetime",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                            [])
                      ]
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (PAGE_SIZE : Value.t) (T : Ty.t),
            M.IsTraitInstance
              "serde::de::Deserialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self PAGE_SIZE T)
              (* Instance *) [ ("deserialize", InstanceField.Method (deserialize PAGE_SIZE T)) ].
        End Impl_serde_de_Deserialize_where_serde_de_Deserialize_T_for_openvm_circuit_system_memory_paged_vec_AddressMap_PAGE_SIZE_T.
      End underscore.
      
      
      Module Impl_openvm_circuit_system_memory_paged_vec_PagedVec_PAGE_SIZE_T.
        Definition Self (PAGE_SIZE : Value.t) (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
            [ PAGE_SIZE ]
            [ T ].
        
        (*
            fn read_range_generic(&self, start: usize, len: usize, dst: *mut T) {
                let start_page = start / PAGE_SIZE;
                let end_page = (start + len - 1) / PAGE_SIZE;
                unsafe {
                    if start_page == end_page {
                        let offset = start % PAGE_SIZE;
                        if let Some(page) = self.pages[start_page].as_ref() {
                            ptr::copy_nonoverlapping(page.as_ptr().add(offset), dst, len);
                        } else {
                            std::slice::from_raw_parts_mut(dst, len).fill(T::default());
                        }
                    } else {
                        let offset = start % PAGE_SIZE;
                        let first_part = PAGE_SIZE - offset;
                        if let Some(page) = self.pages[start_page].as_ref() {
                            ptr::copy_nonoverlapping(page.as_ptr().add(offset), dst, first_part);
                        } else {
                            std::slice::from_raw_parts_mut(dst, first_part).fill(T::default());
                        }
                        let second_part = len - first_part;
                        if let Some(page) = self.pages[end_page].as_ref() {
                            ptr::copy_nonoverlapping(page.as_ptr(), dst.add(first_part), second_part);
                        } else {
                            std::slice::from_raw_parts_mut(dst.add(first_part), second_part)
                                .fill(T::default());
                        }
                    }
                }
            }
        *)
        Definition read_range_generic
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [], [], [ self; start; len; dst ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                        [ PAGE_SIZE ]
                        [ T ]
                    ],
                  self
                |) in
              let start := M.alloc (| Ty.path "usize", start |) in
              let len := M.alloc (| Ty.path "usize", len |) in
              let dst := M.alloc (| Ty.apply (Ty.path "*mut") [] [ T ], dst |) in
              M.read (|
                let~ start_page : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.div,
                    [ M.read (| start |); PAGE_SIZE ]
                  |) in
                let~ end_page : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.div,
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.sub,
                        [
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.add,
                            [ M.read (| start |); M.read (| len |) ]
                          |);
                          Value.Integer IntegerKind.Usize 1
                        ]
                      |);
                      PAGE_SIZE
                    ]
                  |) in
                M.alloc (|
                  Ty.tuple [],
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.eq,
                                  [ M.read (| start_page |); M.read (| end_page |) ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.read (|
                            let~ offset : Ty.path "usize" :=
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.rem,
                                [ M.read (| start |); PAGE_SIZE ]
                              |) in
                            M.alloc (|
                              Ty.tuple [],
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ T; Ty.path "alloc::alloc::Global" ]
                                                ]
                                            ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ T; Ty.path "alloc::alloc::Global" ]
                                                  ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ T; Ty.path "alloc::alloc::Global" ]
                                                ],
                                              "as_ref",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [ T; Ty.path "alloc::alloc::Global" ]
                                                          ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::index::Index",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [ T; Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      [ Ty.path "usize" ],
                                                      "index",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| self |) |),
                                                          "openvm_circuit::system::memory::paged_vec::PagedVec",
                                                          "pages"
                                                        |)
                                                      |);
                                                      M.read (| start_page |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let page :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ T; Ty.path "alloc::alloc::Global" ]
                                            ],
                                          γ0_0
                                        |) in
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_function (|
                                              "core::intrinsics::copy_nonoverlapping",
                                              [],
                                              [ T ]
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply (Ty.path "*const") [] [ T ],
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "*const") [] [ T ],
                                                  "add",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply (Ty.path "*const") [] [ T ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ T; Ty.path "alloc::alloc::Global" ],
                                                      "as_ptr",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| page |) |)
                                                      |)
                                                    ]
                                                  |);
                                                  M.read (| offset |)
                                                ]
                                              |);
                                              M.read (| dst |);
                                              M.read (| len |)
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_associated_function (|
                                              Ty.apply (Ty.path "slice") [] [ T ],
                                              "fill",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      []
                                                      [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                                    M.get_function (|
                                                      "core::slice::raw::from_raw_parts_mut",
                                                      [],
                                                      [ T ]
                                                    |),
                                                    [ M.read (| dst |); M.read (| len |) ]
                                                  |)
                                                |)
                                              |);
                                              M.call_closure (|
                                                T,
                                                M.get_trait_method (|
                                                  "core::default::Default",
                                                  T,
                                                  [],
                                                  [],
                                                  "default",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                      |)))
                                ]
                              |)
                            |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.read (|
                            let~ offset : Ty.path "usize" :=
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.rem,
                                [ M.read (| start |); PAGE_SIZE ]
                              |) in
                            let~ first_part : Ty.path "usize" :=
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.sub,
                                [ PAGE_SIZE; M.read (| offset |) ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ T; Ty.path "alloc::alloc::Global" ]
                                                ]
                                            ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ T; Ty.path "alloc::alloc::Global" ]
                                                  ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ T; Ty.path "alloc::alloc::Global" ]
                                                ],
                                              "as_ref",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [ T; Ty.path "alloc::alloc::Global" ]
                                                          ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::index::Index",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [ T; Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      [ Ty.path "usize" ],
                                                      "index",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| self |) |),
                                                          "openvm_circuit::system::memory::paged_vec::PagedVec",
                                                          "pages"
                                                        |)
                                                      |);
                                                      M.read (| start_page |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let page :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ T; Ty.path "alloc::alloc::Global" ]
                                            ],
                                          γ0_0
                                        |) in
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_function (|
                                              "core::intrinsics::copy_nonoverlapping",
                                              [],
                                              [ T ]
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply (Ty.path "*const") [] [ T ],
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "*const") [] [ T ],
                                                  "add",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.call_closure (|
                                                    Ty.apply (Ty.path "*const") [] [ T ],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ T; Ty.path "alloc::alloc::Global" ],
                                                      "as_ptr",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (| M.read (| page |) |)
                                                      |)
                                                    ]
                                                  |);
                                                  M.read (| offset |)
                                                ]
                                              |);
                                              M.read (| dst |);
                                              M.read (| first_part |)
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_associated_function (|
                                              Ty.apply (Ty.path "slice") [] [ T ],
                                              "fill",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      []
                                                      [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                                    M.get_function (|
                                                      "core::slice::raw::from_raw_parts_mut",
                                                      [],
                                                      [ T ]
                                                    |),
                                                    [ M.read (| dst |); M.read (| first_part |) ]
                                                  |)
                                                |)
                                              |);
                                              M.call_closure (|
                                                T,
                                                M.get_trait_method (|
                                                  "core::default::Default",
                                                  T,
                                                  [],
                                                  [],
                                                  "default",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                      |)))
                                ]
                              |) in
                            let~ second_part : Ty.path "usize" :=
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.sub,
                                [ M.read (| len |); M.read (| first_part |) ]
                              |) in
                            M.alloc (|
                              Ty.tuple [],
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ T; Ty.path "alloc::alloc::Global" ]
                                                ]
                                            ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ T; Ty.path "alloc::alloc::Global" ]
                                                  ]
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ T; Ty.path "alloc::alloc::Global" ]
                                                ],
                                              "as_ref",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [ T; Ty.path "alloc::alloc::Global" ]
                                                          ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::index::Index",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [ T; Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      [ Ty.path "usize" ],
                                                      "index",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| self |) |),
                                                          "openvm_circuit::system::memory::paged_vec::PagedVec",
                                                          "pages"
                                                        |)
                                                      |);
                                                      M.read (| end_page |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |) in
                                      let γ0_0 :=
                                        M.SubPointer.get_struct_tuple_field (|
                                          γ,
                                          "core::option::Option::Some",
                                          0
                                        |) in
                                      let page :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ T; Ty.path "alloc::alloc::Global" ]
                                            ],
                                          γ0_0
                                        |) in
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_function (|
                                              "core::intrinsics::copy_nonoverlapping",
                                              [],
                                              [ T ]
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.apply (Ty.path "*const") [] [ T ],
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ T; Ty.path "alloc::alloc::Global" ],
                                                  "as_ptr",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| page |) |)
                                                  |)
                                                ]
                                              |);
                                              M.call_closure (|
                                                Ty.apply (Ty.path "*mut") [] [ T ],
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "*mut") [] [ T ],
                                                  "add",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| dst |); M.read (| first_part |) ]
                                              |);
                                              M.read (| second_part |)
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.call_closure (|
                                            Ty.tuple [],
                                            M.get_associated_function (|
                                              Ty.apply (Ty.path "slice") [] [ T ],
                                              "fill",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      []
                                                      [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                                    M.get_function (|
                                                      "core::slice::raw::from_raw_parts_mut",
                                                      [],
                                                      [ T ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply (Ty.path "*mut") [] [ T ],
                                                        M.get_associated_function (|
                                                          Ty.apply (Ty.path "*mut") [] [ T ],
                                                          "add",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.read (| dst |); M.read (| first_part |)
                                                        ]
                                                      |);
                                                      M.read (| second_part |)
                                                    ]
                                                  |)
                                                |)
                                              |);
                                              M.call_closure (|
                                                T,
                                                M.get_trait_method (|
                                                  "core::default::Default",
                                                  T,
                                                  [],
                                                  [],
                                                  "default",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |)
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                      |)))
                                ]
                              |)
                            |)
                          |)))
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_read_range_generic :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsAssociatedFunction.C
            (Self PAGE_SIZE T)
            "read_range_generic"
            (read_range_generic PAGE_SIZE T).
        Admitted.
        Global Typeclasses Opaque read_range_generic.
        
        (*
            fn set_range_generic(&mut self, start: usize, len: usize, new: *const T, dst: *mut T) {
                let start_page = start / PAGE_SIZE;
                let end_page = (start + len - 1) / PAGE_SIZE;
                unsafe {
                    if start_page == end_page {
                        let offset = start % PAGE_SIZE;
                        let page =
                            self.pages[start_page].get_or_insert_with(|| vec![T::default(); PAGE_SIZE]);
                        ptr::copy_nonoverlapping(page.as_ptr().add(offset), dst, len);
                        ptr::copy_nonoverlapping(new, page.as_mut_ptr().add(offset), len);
                    } else {
                        let offset = start % PAGE_SIZE;
                        let first_part = PAGE_SIZE - offset;
                        {
                            let page =
                                self.pages[start_page].get_or_insert_with(|| vec![T::default(); PAGE_SIZE]);
                            ptr::copy_nonoverlapping(page.as_ptr().add(offset), dst, first_part);
                            ptr::copy_nonoverlapping(new, page.as_mut_ptr().add(offset), first_part);
                        }
                        let second_part = len - first_part;
                        {
                            let page =
                                self.pages[end_page].get_or_insert_with(|| vec![T::default(); PAGE_SIZE]);
                            ptr::copy_nonoverlapping(page.as_ptr(), dst.add(first_part), second_part);
                            ptr::copy_nonoverlapping(new.add(first_part), page.as_mut_ptr(), second_part);
                        }
                    }
                }
            }
        *)
        Definition set_range_generic
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [], [], [ self; start; len; new; dst ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                        [ PAGE_SIZE ]
                        [ T ]
                    ],
                  self
                |) in
              let start := M.alloc (| Ty.path "usize", start |) in
              let len := M.alloc (| Ty.path "usize", len |) in
              let new := M.alloc (| Ty.apply (Ty.path "*const") [] [ T ], new |) in
              let dst := M.alloc (| Ty.apply (Ty.path "*mut") [] [ T ], dst |) in
              M.read (|
                let~ start_page : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.div,
                    [ M.read (| start |); PAGE_SIZE ]
                  |) in
                let~ end_page : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.div,
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.sub,
                        [
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.add,
                            [ M.read (| start |); M.read (| len |) ]
                          |);
                          Value.Integer IntegerKind.Usize 1
                        ]
                      |);
                      PAGE_SIZE
                    ]
                  |) in
                M.alloc (|
                  Ty.tuple [],
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.eq,
                                  [ M.read (| start_page |); M.read (| end_page |) ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.read (|
                            let~ offset : Ty.path "usize" :=
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.rem,
                                [ M.read (| start |); PAGE_SIZE ]
                              |) in
                            let~ page :
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ T; Ty.path "alloc::alloc::Global" ]
                                  ] :=
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ T; Ty.path "alloc::alloc::Global" ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ T; Ty.path "alloc::alloc::Global" ]
                                    ],
                                  "get_or_insert_with",
                                  [],
                                  [
                                    Ty.function
                                      []
                                      (Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ T; Ty.path "alloc::alloc::Global" ])
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ T; Ty.path "alloc::alloc::Global" ]
                                              ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::index::IndexMut",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ T; Ty.path "alloc::alloc::Global" ]
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          [ Ty.path "usize" ],
                                          "index_mut",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::paged_vec::PagedVec",
                                              "pages"
                                            |)
                                          |);
                                          M.read (| start_page |)
                                        ]
                                      |)
                                    |)
                                  |);
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          ltac:(M.monadic
                                            (M.match_operator (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ T; Ty.path "alloc::alloc::Global" ],
                                              M.alloc (| Ty.tuple [], α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ T; Ty.path "alloc::alloc::Global" ],
                                                      M.get_function (|
                                                        "alloc::vec::from_elem",
                                                        [],
                                                        [ T ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          T,
                                                          M.get_trait_method (|
                                                            "core::default::Default",
                                                            T,
                                                            [],
                                                            [],
                                                            "default",
                                                            [],
                                                            []
                                                          |),
                                                          []
                                                        |);
                                                        PAGE_SIZE
                                                      ]
                                                    |)))
                                              ]
                                            |)))
                                        | _ => M.impossible "wrong number of arguments"
                                        end))
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_function (|
                                  "core::intrinsics::copy_nonoverlapping",
                                  [],
                                  [ T ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply (Ty.path "*const") [] [ T ],
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "*const") [] [ T ],
                                      "add",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply (Ty.path "*const") [] [ T ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ T; Ty.path "alloc::alloc::Global" ],
                                          "as_ptr",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| page |) |)
                                          |)
                                        ]
                                      |);
                                      M.read (| offset |)
                                    ]
                                  |);
                                  M.read (| dst |);
                                  M.read (| len |)
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_function (|
                                  "core::intrinsics::copy_nonoverlapping",
                                  [],
                                  [ T ]
                                |),
                                [
                                  M.read (| new |);
                                  M.call_closure (|
                                    Ty.apply (Ty.path "*mut") [] [ T ],
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "*mut") [] [ T ],
                                      "add",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply (Ty.path "*mut") [] [ T ],
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ T; Ty.path "alloc::alloc::Global" ],
                                          "as_mut_ptr",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.read (| page |) |)
                                          |)
                                        ]
                                      |);
                                      M.read (| offset |)
                                    ]
                                  |);
                                  M.read (| len |)
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.read (|
                            let~ offset : Ty.path "usize" :=
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.rem,
                                [ M.read (| start |); PAGE_SIZE ]
                              |) in
                            let~ first_part : Ty.path "usize" :=
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.sub,
                                [ PAGE_SIZE; M.read (| offset |) ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.read (|
                                let~ page :
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ T; Ty.path "alloc::alloc::Global" ]
                                      ] :=
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ T; Ty.path "alloc::alloc::Global" ]
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ T; Ty.path "alloc::alloc::Global" ]
                                        ],
                                      "get_or_insert_with",
                                      [],
                                      [
                                        Ty.function
                                          []
                                          (Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ T; Ty.path "alloc::alloc::Global" ])
                                      ]
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ T; Ty.path "alloc::alloc::Global" ]
                                                  ]
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::index::IndexMut",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ T; Ty.path "alloc::alloc::Global" ]
                                                    ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              [ Ty.path "usize" ],
                                              "index_mut",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "openvm_circuit::system::memory::paged_vec::PagedVec",
                                                  "pages"
                                                |)
                                              |);
                                              M.read (| start_page |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              ltac:(M.monadic
                                                (M.match_operator (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ T; Ty.path "alloc::alloc::Global" ],
                                                  M.alloc (| Ty.tuple [], α0 |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [ T; Ty.path "alloc::alloc::Global" ],
                                                          M.get_function (|
                                                            "alloc::vec::from_elem",
                                                            [],
                                                            [ T ]
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              T,
                                                              M.get_trait_method (|
                                                                "core::default::Default",
                                                                T,
                                                                [],
                                                                [],
                                                                "default",
                                                                [],
                                                                []
                                                              |),
                                                              []
                                                            |);
                                                            PAGE_SIZE
                                                          ]
                                                        |)))
                                                  ]
                                                |)))
                                            | _ => M.impossible "wrong number of arguments"
                                            end))
                                    ]
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_function (|
                                      "core::intrinsics::copy_nonoverlapping",
                                      [],
                                      [ T ]
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply (Ty.path "*const") [] [ T ],
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "*const") [] [ T ],
                                          "add",
                                          [],
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.apply (Ty.path "*const") [] [ T ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ T; Ty.path "alloc::alloc::Global" ],
                                              "as_ptr",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| page |) |)
                                              |)
                                            ]
                                          |);
                                          M.read (| offset |)
                                        ]
                                      |);
                                      M.read (| dst |);
                                      M.read (| first_part |)
                                    ]
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.call_closure (|
                                    Ty.tuple [],
                                    M.get_function (|
                                      "core::intrinsics::copy_nonoverlapping",
                                      [],
                                      [ T ]
                                    |),
                                    [
                                      M.read (| new |);
                                      M.call_closure (|
                                        Ty.apply (Ty.path "*mut") [] [ T ],
                                        M.get_associated_function (|
                                          Ty.apply (Ty.path "*mut") [] [ T ],
                                          "add",
                                          [],
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.apply (Ty.path "*mut") [] [ T ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ T; Ty.path "alloc::alloc::Global" ],
                                              "as_mut_ptr",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| page |) |)
                                              |)
                                            ]
                                          |);
                                          M.read (| offset |)
                                        ]
                                      |);
                                      M.read (| first_part |)
                                    ]
                                  |) in
                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                              |) in
                            let~ second_part : Ty.path "usize" :=
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.sub,
                                [ M.read (| len |); M.read (| first_part |) ]
                              |) in
                            let~ page :
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ T; Ty.path "alloc::alloc::Global" ]
                                  ] :=
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ T; Ty.path "alloc::alloc::Global" ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ T; Ty.path "alloc::alloc::Global" ]
                                    ],
                                  "get_or_insert_with",
                                  [],
                                  [
                                    Ty.function
                                      []
                                      (Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ T; Ty.path "alloc::alloc::Global" ])
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ T; Ty.path "alloc::alloc::Global" ]
                                              ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::index::IndexMut",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ T; Ty.path "alloc::alloc::Global" ]
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          [ Ty.path "usize" ],
                                          "index_mut",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::paged_vec::PagedVec",
                                              "pages"
                                            |)
                                          |);
                                          M.read (| end_page |)
                                        ]
                                      |)
                                    |)
                                  |);
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          ltac:(M.monadic
                                            (M.match_operator (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ T; Ty.path "alloc::alloc::Global" ],
                                              M.alloc (| Ty.tuple [], α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ T; Ty.path "alloc::alloc::Global" ],
                                                      M.get_function (|
                                                        "alloc::vec::from_elem",
                                                        [],
                                                        [ T ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          T,
                                                          M.get_trait_method (|
                                                            "core::default::Default",
                                                            T,
                                                            [],
                                                            [],
                                                            "default",
                                                            [],
                                                            []
                                                          |),
                                                          []
                                                        |);
                                                        PAGE_SIZE
                                                      ]
                                                    |)))
                                              ]
                                            |)))
                                        | _ => M.impossible "wrong number of arguments"
                                        end))
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_function (|
                                  "core::intrinsics::copy_nonoverlapping",
                                  [],
                                  [ T ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply (Ty.path "*const") [] [ T ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ T; Ty.path "alloc::alloc::Global" ],
                                      "as_ptr",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| page |) |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply (Ty.path "*mut") [] [ T ],
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "*mut") [] [ T ],
                                      "add",
                                      [],
                                      []
                                    |),
                                    [ M.read (| dst |); M.read (| first_part |) ]
                                  |);
                                  M.read (| second_part |)
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_function (|
                                  "core::intrinsics::copy_nonoverlapping",
                                  [],
                                  [ T ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply (Ty.path "*const") [] [ T ],
                                    M.get_associated_function (|
                                      Ty.apply (Ty.path "*const") [] [ T ],
                                      "add",
                                      [],
                                      []
                                    |),
                                    [ M.read (| new |); M.read (| first_part |) ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply (Ty.path "*mut") [] [ T ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ T; Ty.path "alloc::alloc::Global" ],
                                      "as_mut_ptr",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| page |) |)
                                      |)
                                    ]
                                  |);
                                  M.read (| second_part |)
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)))
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_set_range_generic :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsAssociatedFunction.C
            (Self PAGE_SIZE T)
            "set_range_generic"
            (set_range_generic PAGE_SIZE T).
        Admitted.
        Global Typeclasses Opaque set_range_generic.
        (*
            pub fn new(num_pages: usize) -> Self {
                Self {
                    pages: vec![None; num_pages],
                }
            }
        *)
        Definition new
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [], [], [ num_pages ] =>
            ltac:(M.monadic
              (let num_pages := M.alloc (| Ty.path "usize", num_pages |) in
              Value.mkStructRecord
                "openvm_circuit::system::memory::paged_vec::PagedVec"
                [ PAGE_SIZE ]
                [ T ]
                [
                  ("pages",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ T; Ty.path "alloc::alloc::Global" ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_function (|
                        "alloc::vec::from_elem",
                        [],
                        [
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ T; Ty.path "alloc::alloc::Global" ]
                            ]
                        ]
                      |),
                      [
                        Value.StructTuple
                          "core::option::Option::None"
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ T; Ty.path "alloc::alloc::Global" ]
                          ]
                          [];
                        M.read (| num_pages |)
                      ]
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_new :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsAssociatedFunction.C (Self PAGE_SIZE T) "new" (new PAGE_SIZE T).
        Admitted.
        Global Typeclasses Opaque new.
        
        (*
            pub fn get(&self, index: usize) -> Option<&T> {
                let page_idx = index / PAGE_SIZE;
                self.pages[page_idx]
                    .as_ref()
                    .map(|page| &page[index % PAGE_SIZE])
            }
        *)
        Definition get
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [], [], [ self; index ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                        [ PAGE_SIZE ]
                        [ T ]
                    ],
                  self
                |) in
              let index := M.alloc (| Ty.path "usize", index |) in
              M.read (|
                let~ page_idx : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.div,
                    [ M.read (| index |); PAGE_SIZE ]
                  |) in
                M.alloc (|
                  Ty.apply (Ty.path "core::option::Option") [] [ Ty.apply (Ty.path "&") [] [ T ] ],
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.apply (Ty.path "&") [] [ T ] ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ T; Ty.path "alloc::alloc::Global" ]
                            ]
                        ],
                      "map",
                      [],
                      [
                        Ty.apply (Ty.path "&") [] [ T ];
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ T; Ty.path "alloc::alloc::Global" ]
                              ]
                          ]
                          (Ty.apply (Ty.path "&") [] [ T ])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ T; Ty.path "alloc::alloc::Global" ]
                              ]
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ T; Ty.path "alloc::alloc::Global" ]
                            ],
                          "as_ref",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ T; Ty.path "alloc::alloc::Global" ]
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::index::Index",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ T; Ty.path "alloc::alloc::Global" ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [ Ty.path "usize" ],
                                  "index",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::system::memory::paged_vec::PagedVec",
                                      "pages"
                                    |)
                                  |);
                                  M.read (| page_idx |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply (Ty.path "&") [] [ T ],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ T; Ty.path "alloc::alloc::Global" ]
                                      ],
                                    α0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let page :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ T; Ty.path "alloc::alloc::Global" ]
                                              ],
                                            γ
                                          |) in
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply (Ty.path "&") [] [ T ],
                                              M.get_trait_method (|
                                                "core::ops::index::Index",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ T; Ty.path "alloc::alloc::Global" ],
                                                [],
                                                [ Ty.path "usize" ],
                                                "index",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| page |) |)
                                                |);
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.rem,
                                                  [ M.read (| index |); PAGE_SIZE ]
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_get :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsAssociatedFunction.C (Self PAGE_SIZE T) "get" (get PAGE_SIZE T).
        Admitted.
        Global Typeclasses Opaque get.
        
        (*
            pub fn get_mut(&mut self, index: usize) -> Option<&mut T> {
                let page_idx = index / PAGE_SIZE;
                self.pages[page_idx]
                    .as_mut()
                    .map(|page| &mut page[index % PAGE_SIZE])
            }
        *)
        Definition get_mut
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [], [], [ self; index ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                        [ PAGE_SIZE ]
                        [ T ]
                    ],
                  self
                |) in
              let index := M.alloc (| Ty.path "usize", index |) in
              M.read (|
                let~ page_idx : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.div,
                    [ M.read (| index |); PAGE_SIZE ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "core::option::Option")
                    []
                    [ Ty.apply (Ty.path "&mut") [] [ T ] ],
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.apply (Ty.path "&mut") [] [ T ] ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ T; Ty.path "alloc::alloc::Global" ]
                            ]
                        ],
                      "map",
                      [],
                      [
                        Ty.apply (Ty.path "&mut") [] [ T ];
                        Ty.function
                          [
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ T; Ty.path "alloc::alloc::Global" ]
                              ]
                          ]
                          (Ty.apply (Ty.path "&mut") [] [ T ])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ T; Ty.path "alloc::alloc::Global" ]
                              ]
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ T; Ty.path "alloc::alloc::Global" ]
                            ],
                          "as_mut",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ T; Ty.path "alloc::alloc::Global" ]
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::index::IndexMut",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ T; Ty.path "alloc::alloc::Global" ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [ Ty.path "usize" ],
                                  "index_mut",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::system::memory::paged_vec::PagedVec",
                                      "pages"
                                    |)
                                  |);
                                  M.read (| page_idx |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.apply (Ty.path "&mut") [] [ T ],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ T; Ty.path "alloc::alloc::Global" ]
                                      ],
                                    α0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let page :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ T; Ty.path "alloc::alloc::Global" ]
                                              ],
                                            γ
                                          |) in
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply (Ty.path "&mut") [] [ T ],
                                              M.get_trait_method (|
                                                "core::ops::index::IndexMut",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ T; Ty.path "alloc::alloc::Global" ],
                                                [],
                                                [ Ty.path "usize" ],
                                                "index_mut",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (| M.read (| page |) |)
                                                |);
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.rem,
                                                  [ M.read (| index |); PAGE_SIZE ]
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_get_mut :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsAssociatedFunction.C (Self PAGE_SIZE T) "get_mut" (get_mut PAGE_SIZE T).
        Admitted.
        Global Typeclasses Opaque get_mut.
        
        (*
            pub fn set(&mut self, index: usize, value: T) -> Option<T> {
                let page_idx = index / PAGE_SIZE;
                if let Some(page) = self.pages[page_idx].as_mut() {
                    Some(std::mem::replace(&mut page[index % PAGE_SIZE], value))
                } else {
                    let page = self.pages[page_idx].get_or_insert_with(|| vec![T::default(); PAGE_SIZE]);
                    page[index % PAGE_SIZE] = value;
                    None
                }
            }
        *)
        Definition set
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [], [], [ self; index; value ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                        [ PAGE_SIZE ]
                        [ T ]
                    ],
                  self
                |) in
              let index := M.alloc (| Ty.path "usize", index |) in
              let value := M.alloc (| T, value |) in
              M.read (|
                let~ page_idx : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.div,
                    [ M.read (| index |); PAGE_SIZE ]
                  |) in
                M.alloc (|
                  Ty.apply (Ty.path "core::option::Option") [] [ T ],
                  M.match_operator (|
                    Ty.apply (Ty.path "core::option::Option") [] [ T ],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ T; Ty.path "alloc::alloc::Global" ]
                                    ]
                                ],
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ T; Ty.path "alloc::alloc::Global" ]
                                      ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ T; Ty.path "alloc::alloc::Global" ]
                                    ],
                                  "as_mut",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ T; Ty.path "alloc::alloc::Global" ]
                                              ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::index::IndexMut",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ T; Ty.path "alloc::alloc::Global" ]
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          [ Ty.path "usize" ],
                                          "index_mut",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::paged_vec::PagedVec",
                                              "pages"
                                            |)
                                          |);
                                          M.read (| page_idx |)
                                        ]
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            |) in
                          let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::option::Option::Some",
                              0
                            |) in
                          let page :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ T; Ty.path "alloc::alloc::Global" ]
                                ],
                              γ0_0
                            |) in
                          Value.StructTuple
                            "core::option::Option::Some"
                            []
                            [ T ]
                            [
                              M.call_closure (|
                                T,
                                M.get_function (| "core::mem::replace", [], [ T ] |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply (Ty.path "&mut") [] [ T ],
                                            M.get_trait_method (|
                                              "core::ops::index::IndexMut",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ T; Ty.path "alloc::alloc::Global" ],
                                              [],
                                              [ Ty.path "usize" ],
                                              "index_mut",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (| M.read (| page |) |)
                                              |);
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.rem,
                                                [ M.read (| index |); PAGE_SIZE ]
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  |);
                                  M.read (| value |)
                                ]
                              |)
                            ]));
                      fun γ =>
                        ltac:(M.monadic
                          (M.read (|
                            let~ page :
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ T; Ty.path "alloc::alloc::Global" ]
                                  ] :=
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ T; Ty.path "alloc::alloc::Global" ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ T; Ty.path "alloc::alloc::Global" ]
                                    ],
                                  "get_or_insert_with",
                                  [],
                                  [
                                    Ty.function
                                      []
                                      (Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ T; Ty.path "alloc::alloc::Global" ])
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ T; Ty.path "alloc::alloc::Global" ]
                                              ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::index::IndexMut",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ T; Ty.path "alloc::alloc::Global" ]
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          [ Ty.path "usize" ],
                                          "index_mut",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::paged_vec::PagedVec",
                                              "pages"
                                            |)
                                          |);
                                          M.read (| page_idx |)
                                        ]
                                      |)
                                    |)
                                  |);
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          ltac:(M.monadic
                                            (M.match_operator (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [ T; Ty.path "alloc::alloc::Global" ],
                                              M.alloc (| Ty.tuple [], α0 |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [ T; Ty.path "alloc::alloc::Global" ],
                                                      M.get_function (|
                                                        "alloc::vec::from_elem",
                                                        [],
                                                        [ T ]
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          T,
                                                          M.get_trait_method (|
                                                            "core::default::Default",
                                                            T,
                                                            [],
                                                            [],
                                                            "default",
                                                            [],
                                                            []
                                                          |),
                                                          []
                                                        |);
                                                        PAGE_SIZE
                                                      ]
                                                    |)))
                                              ]
                                            |)))
                                        | _ => M.impossible "wrong number of arguments"
                                        end))
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.write (|
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply (Ty.path "&mut") [] [ T ],
                                    M.get_trait_method (|
                                      "core::ops::index::IndexMut",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ T; Ty.path "alloc::alloc::Global" ],
                                      [],
                                      [ Ty.path "usize" ],
                                      "index_mut",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.read (| page |) |)
                                      |);
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.rem,
                                        [ M.read (| index |); PAGE_SIZE ]
                                      |)
                                    ]
                                  |)
                                |),
                                M.read (| value |)
                              |) in
                            M.alloc (|
                              Ty.apply (Ty.path "core::option::Option") [] [ T ],
                              Value.StructTuple "core::option::Option::None" [] [ T ] []
                            |)
                          |)))
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_set :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsAssociatedFunction.C (Self PAGE_SIZE T) "set" (set PAGE_SIZE T).
        Admitted.
        Global Typeclasses Opaque set.
        
        (*
            pub fn range_vec(&self, range: Range<usize>) -> Vec<T> {
                let len = range.end - range.start;
                // Create a vector for uninitialized values.
                let mut result: Vec<MaybeUninit<T>> = Vec::with_capacity(len);
                // SAFETY: We set the length and then initialize every element via read_range_generic.
                unsafe {
                    result.set_len(len);
                    self.read_range_generic(range.start, len, result.as_mut_ptr() as *mut T);
                    std::mem::transmute::<Vec<MaybeUninit<T>>, Vec<T>>(result)
                }
            }
        *)
        Definition range_vec
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [], [], [ self; range ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                        [ PAGE_SIZE ]
                        [ T ]
                    ],
                  self
                |) in
              let range :=
                M.alloc (|
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                  range
                |) in
              M.read (|
                let~ len : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.sub,
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          range,
                          "core::ops::range::Range",
                          "end"
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          range,
                          "core::ops::range::Range",
                          "start"
                        |)
                      |)
                    ]
                  |) in
                let~ result :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ];
                        Ty.path "alloc::alloc::Global"
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "with_capacity",
                      [],
                      []
                    |),
                    [ M.read (| len |) ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "set_len",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.MutRef, result |); M.read (| len |) ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                        [ PAGE_SIZE ]
                        [ T ],
                      "read_range_generic",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          range,
                          "core::ops::range::Range",
                          "start"
                        |)
                      |);
                      M.read (| len |);
                      M.cast
                        (Ty.apply (Ty.path "*mut") [] [ T ])
                        (M.call_closure (|
                          Ty.apply
                            (Ty.path "*mut")
                            []
                            [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ] ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "as_mut_ptr",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, result |) ]
                        |))
                    ]
                  |) in
                M.alloc (|
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
                    M.get_function (|
                      "core::intrinsics::transmute",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ T; Ty.path "alloc::alloc::Global" ]
                      ]
                    |),
                    [ M.read (| result |) ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_range_vec :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsAssociatedFunction.C (Self PAGE_SIZE T) "range_vec" (range_vec PAGE_SIZE T).
        Admitted.
        Global Typeclasses Opaque range_vec.
        
        (*
            pub fn set_range(&mut self, range: Range<usize>, values: &[T]) -> Vec<T> {
                let len = range.end - range.start;
                assert_eq!(values.len(), len);
                let mut result: Vec<MaybeUninit<T>> = Vec::with_capacity(len);
                // SAFETY: We will write to every element in result via set_range_generic.
                unsafe {
                    result.set_len(len);
                    self.set_range_generic(
                        range.start,
                        len,
                        values.as_ptr(),
                        result.as_mut_ptr() as *mut T,
                    );
                    std::mem::transmute::<Vec<MaybeUninit<T>>, Vec<T>>(result)
                }
            }
        *)
        Definition set_range
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [], [], [ self; range; values ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                        [ PAGE_SIZE ]
                        [ T ]
                    ],
                  self
                |) in
              let range :=
                M.alloc (|
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                  range
                |) in
              let values :=
                M.alloc (|
                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                  values
                |) in
              M.read (|
                let~ len : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.sub,
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          range,
                          "core::ops::range::Range",
                          "end"
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          range,
                          "core::ops::range::Range",
                          "start"
                        |)
                      |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                        ],
                      Value.Tuple
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.path "usize",
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ T ],
                                  "len",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| values |) |) |)
                                ]
                              |)
                            |)
                          |);
                          M.borrow (| Pointer.Kind.Ref, len |)
                        ]
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let left_val :=
                            M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                          let right_val :=
                            M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_1 |) in
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        Ty.path "bool",
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.eq,
                                            [
                                              M.read (| M.deref (| M.read (| left_val |) |) |);
                                              M.read (| M.deref (| M.read (| right_val |) |) |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.never_to_any (|
                                    M.read (|
                                      let~ kind : Ty.path "core::panicking::AssertKind" :=
                                        Value.StructTuple
                                          "core::panicking::AssertKind::Eq"
                                          []
                                          []
                                          [] in
                                      M.alloc (|
                                        Ty.path "never",
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (|
                                            "core::panicking::assert_failed",
                                            [],
                                            [ Ty.path "usize"; Ty.path "usize" ]
                                          |),
                                          [
                                            M.read (| kind |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| left_val |) |)
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| right_val |) |)
                                                |)
                                              |)
                                            |);
                                            Value.StructTuple
                                              "core::option::Option::None"
                                              []
                                              [ Ty.path "core::fmt::Arguments" ]
                                              []
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (Value.Tuple []))
                            ]
                          |)))
                    ]
                  |) in
                let~ result :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ];
                        Ty.path "alloc::alloc::Global"
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "with_capacity",
                      [],
                      []
                    |),
                    [ M.read (| len |) ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "set_len",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.MutRef, result |); M.read (| len |) ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                        [ PAGE_SIZE ]
                        [ T ],
                      "set_range_generic",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          range,
                          "core::ops::range::Range",
                          "start"
                        |)
                      |);
                      M.read (| len |);
                      M.call_closure (|
                        Ty.apply (Ty.path "*const") [] [ T ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ T ],
                          "as_ptr",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| values |) |) |) ]
                      |);
                      M.cast
                        (Ty.apply (Ty.path "*mut") [] [ T ])
                        (M.call_closure (|
                          Ty.apply
                            (Ty.path "*mut")
                            []
                            [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ] ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "as_mut_ptr",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, result |) ]
                        |))
                    ]
                  |) in
                M.alloc (|
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ T; Ty.path "alloc::alloc::Global" ],
                    M.get_function (|
                      "core::intrinsics::transmute",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ T; Ty.path "alloc::alloc::Global" ]
                      ]
                    |),
                    [ M.read (| result |) ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_set_range :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsAssociatedFunction.C (Self PAGE_SIZE T) "set_range" (set_range PAGE_SIZE T).
        Admitted.
        Global Typeclasses Opaque set_range.
        
        (*
            pub fn memory_size(&self) -> usize {
                self.pages.len() * PAGE_SIZE
            }
        *)
        Definition memory_size
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                        [ PAGE_SIZE ]
                        [ T ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.path "usize",
                BinOp.Wrap.mul,
                [
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ T; Ty.path "alloc::alloc::Global" ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "len",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::paged_vec::PagedVec",
                          "pages"
                        |)
                      |)
                    ]
                  |);
                  PAGE_SIZE
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_memory_size :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsAssociatedFunction.C (Self PAGE_SIZE T) "memory_size" (memory_size PAGE_SIZE T).
        Admitted.
        Global Typeclasses Opaque memory_size.
        
        (*
            pub fn is_empty(&self) -> bool {
                self.pages.iter().all(|page| page.is_none())
            }
        *)
        Definition is_empty
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                        [ PAGE_SIZE ]
                        [ T ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.path "bool",
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::slice::iter::Iter")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ T; Ty.path "alloc::alloc::Global" ]
                        ]
                    ],
                  [],
                  [],
                  "all",
                  [],
                  [
                    Ty.function
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ T; Ty.path "alloc::alloc::Global" ]
                              ]
                          ]
                      ]
                      (Ty.path "bool")
                  ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ T; Ty.path "alloc::alloc::Global" ]
                            ]
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ T; Ty.path "alloc::alloc::Global" ]
                              ]
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ T; Ty.path "alloc::alloc::Global" ]
                                ]
                            ],
                          "iter",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ T; Ty.path "alloc::alloc::Global" ]
                                          ]
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [ T; Ty.path "alloc::alloc::Global" ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::system::memory::paged_vec::PagedVec",
                                      "pages"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.path "bool",
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ T; Ty.path "alloc::alloc::Global" ]
                                      ]
                                  ],
                                α0
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let page :=
                                      M.copy (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ T; Ty.path "alloc::alloc::Global" ]
                                              ]
                                          ],
                                        γ
                                      |) in
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [ T; Ty.path "alloc::alloc::Global" ]
                                          ],
                                        "is_none",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| page |) |)
                                        |)
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_is_empty :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsAssociatedFunction.C (Self PAGE_SIZE T) "is_empty" (is_empty PAGE_SIZE T).
        Admitted.
        Global Typeclasses Opaque is_empty.
        (*
            pub fn range_array<const N: usize>(&self, from: usize) -> [T; N] {
                // Create an uninitialized array of MaybeUninit<T>
                let mut result: [MaybeUninit<T>; N] = unsafe {
                    // SAFETY: An uninitialized `[MaybeUninit<T>; N]` is valid.
                    MaybeUninit::uninit().assume_init()
                };
                self.read_range_generic(from, N, result.as_mut_ptr() as *mut T);
                // SAFETY: All elements have been initialized.
                unsafe { ptr::read(&result as *const _ as *const [T; N]) }
            }
        *)
        Definition range_array
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [ N ], [], [ self; from ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                        [ PAGE_SIZE ]
                        [ T ]
                    ],
                  self
                |) in
              let from := M.alloc (| Ty.path "usize", from |) in
              M.read (|
                let~ result :
                    Ty.apply
                      (Ty.path "array")
                      [ N ]
                      [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ] ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "array")
                      [ N ]
                      [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ] ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ N ]
                            [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ] ]
                        ],
                      "assume_init",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ N ]
                              [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ] ]
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ N ]
                                [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ]
                                ]
                            ],
                          "uninit",
                          [],
                          []
                        |),
                        []
                      |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                        [ PAGE_SIZE ]
                        [ T ],
                      "read_range_generic",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                      M.read (| from |);
                      N;
                      M.cast
                        (Ty.apply (Ty.path "*mut") [] [ T ])
                        (M.call_closure (|
                          Ty.apply
                            (Ty.path "*mut")
                            []
                            [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ] ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ]
                              ],
                            "as_mut_ptr",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                        []
                                        [ T ]
                                    ]
                                ],
                              M.pointer_coercion
                                M.PointerCoercion.Unsize
                                (Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ N ]
                                      [
                                        Ty.apply
                                          (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                          []
                                          [ T ]
                                      ]
                                  ])
                                (Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                          []
                                          [ T ]
                                      ]
                                  ]),
                              [ M.borrow (| Pointer.Kind.MutRef, result |) ]
                            |)
                          ]
                        |))
                    ]
                  |) in
                M.alloc (|
                  Ty.apply (Ty.path "array") [ N ] [ T ],
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ N ] [ T ],
                    M.get_function (|
                      "core::ptr::read",
                      [],
                      [ Ty.apply (Ty.path "array") [ N ] [ T ] ]
                    |),
                    [
                      M.cast
                        (Ty.apply (Ty.path "*const") [] [ Ty.apply (Ty.path "array") [ N ] [ T ] ])
                        (M.read (|
                          M.use
                            (M.alloc (|
                              Ty.apply
                                (Ty.path "*const")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ N ]
                                    [
                                      Ty.apply
                                        (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                        []
                                        [ T ]
                                    ]
                                ],
                              M.borrow (|
                                Pointer.Kind.ConstPointer,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, result |) |)
                              |)
                            |))
                        |))
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_range_array :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsAssociatedFunction.C (Self PAGE_SIZE T) "range_array" (range_array PAGE_SIZE T).
        Admitted.
        Global Typeclasses Opaque range_array.
        
        (*
            pub fn set_range_array<const N: usize>(&mut self, from: usize, values: &[T; N]) -> [T; N] {
                // Create an uninitialized array for old values.
                let mut result: [MaybeUninit<T>; N] = unsafe { MaybeUninit::uninit().assume_init() };
                self.set_range_generic(from, N, values.as_ptr(), result.as_mut_ptr() as *mut T);
                unsafe { ptr::read(&result as *const _ as *const [T; N]) }
            }
        *)
        Definition set_range_array
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [ N ], [], [ self; from; values ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                        [ PAGE_SIZE ]
                        [ T ]
                    ],
                  self
                |) in
              let from := M.alloc (| Ty.path "usize", from |) in
              let values :=
                M.alloc (|
                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "array") [ N ] [ T ] ],
                  values
                |) in
              M.read (|
                let~ result :
                    Ty.apply
                      (Ty.path "array")
                      [ N ]
                      [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ] ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "array")
                      [ N ]
                      [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ] ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ N ]
                            [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ] ]
                        ],
                      "assume_init",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ N ]
                              [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ] ]
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ N ]
                                [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ]
                                ]
                            ],
                          "uninit",
                          [],
                          []
                        |),
                        []
                      |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                        [ PAGE_SIZE ]
                        [ T ],
                      "set_range_generic",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |);
                      M.read (| from |);
                      N;
                      M.call_closure (|
                        Ty.apply (Ty.path "*const") [] [ T ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ T ],
                          "as_ptr",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "array") [ N ] [ T ] ])
                              (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| values |) |) |) ]
                          |)
                        ]
                      |);
                      M.cast
                        (Ty.apply (Ty.path "*mut") [] [ T ])
                        (M.call_closure (|
                          Ty.apply
                            (Ty.path "*mut")
                            []
                            [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ] ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "core::mem::maybe_uninit::MaybeUninit") [] [ T ]
                              ],
                            "as_mut_ptr",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                        []
                                        [ T ]
                                    ]
                                ],
                              M.pointer_coercion
                                M.PointerCoercion.Unsize
                                (Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ N ]
                                      [
                                        Ty.apply
                                          (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                          []
                                          [ T ]
                                      ]
                                  ])
                                (Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                          []
                                          [ T ]
                                      ]
                                  ]),
                              [ M.borrow (| Pointer.Kind.MutRef, result |) ]
                            |)
                          ]
                        |))
                    ]
                  |) in
                M.alloc (|
                  Ty.apply (Ty.path "array") [ N ] [ T ],
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ N ] [ T ],
                    M.get_function (|
                      "core::ptr::read",
                      [],
                      [ Ty.apply (Ty.path "array") [ N ] [ T ] ]
                    |),
                    [
                      M.cast
                        (Ty.apply (Ty.path "*const") [] [ Ty.apply (Ty.path "array") [ N ] [ T ] ])
                        (M.read (|
                          M.use
                            (M.alloc (|
                              Ty.apply
                                (Ty.path "*const")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ N ]
                                    [
                                      Ty.apply
                                        (Ty.path "core::mem::maybe_uninit::MaybeUninit")
                                        []
                                        [ T ]
                                    ]
                                ],
                              M.borrow (|
                                Pointer.Kind.ConstPointer,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, result |) |)
                              |)
                            |))
                        |))
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_set_range_array :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsAssociatedFunction.C
            (Self PAGE_SIZE T)
            "set_range_array"
            (set_range_array PAGE_SIZE T).
        Admitted.
        Global Typeclasses Opaque set_range_array.
        (*
            pub fn iter(&self) -> PagedVecIter<'_, T, PAGE_SIZE> {
                PagedVecIter {
                    vec: self,
                    current_page: 0,
                    current_index_in_page: 0,
                }
            }
        *)
        Definition iter
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                        [ PAGE_SIZE ]
                        [ T ]
                    ],
                  self
                |) in
              Value.mkStructRecord
                "openvm_circuit::system::memory::paged_vec::PagedVecIter"
                [ PAGE_SIZE ]
                [ T ]
                [
                  ("vec", M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |));
                  ("current_page", Value.Integer IntegerKind.Usize 0);
                  ("current_index_in_page", Value.Integer IntegerKind.Usize 0)
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_iter :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsAssociatedFunction.C (Self PAGE_SIZE T) "iter" (iter PAGE_SIZE T).
        Admitted.
        Global Typeclasses Opaque iter.
      End Impl_openvm_circuit_system_memory_paged_vec_PagedVec_PAGE_SIZE_T.
      
      
      
      
      (* StructRecord
        {
          name := "PagedVecIter";
          const_params := [ "PAGE_SIZE" ];
          ty_params := [ "T" ];
          fields :=
            [
              ("vec",
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                      [ PAGE_SIZE ]
                      [ T ]
                  ]);
              ("current_page", Ty.path "usize");
              ("current_index_in_page", Ty.path "usize")
            ];
        } *)
      
      Module Impl_core_iter_traits_iterator_Iterator_where_core_clone_Clone_T_for_openvm_circuit_system_memory_paged_vec_PagedVecIter_PAGE_SIZE_T.
        Definition Self (PAGE_SIZE : Value.t) (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVecIter")
            [ PAGE_SIZE ]
            [ T ].
        
        (*     type Item = (usize, T); *)
        Definition _Item (PAGE_SIZE : Value.t) (T : Ty.t) : Ty.t := Ty.tuple [ Ty.path "usize"; T ].
        
        (*
            fn next(&mut self) -> Option<Self::Item> {
                while self.current_page < self.vec.pages.len()
                    && self.vec.pages[self.current_page].is_none()
                {
                    self.current_page += 1;
                    debug_assert_eq!(self.current_index_in_page, 0);
                    self.current_index_in_page = 0;
                }
                if self.current_page >= self.vec.pages.len() {
                    return None;
                }
                let global_index = self.current_page * PAGE_SIZE + self.current_index_in_page;
        
                let page = self.vec.pages[self.current_page].as_ref()?;
                let value = page[self.current_index_in_page].clone();
        
                self.current_index_in_page += 1;
                if self.current_index_in_page == PAGE_SIZE {
                    self.current_page += 1;
                    self.current_index_in_page = 0;
                }
                Some((global_index, value))
            }
        *)
        Definition next
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVecIter")
                        [ PAGE_SIZE ]
                        [ T ]
                    ],
                  self
                |) in
              M.catch_return
                (Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [
                    Ty.associated_in_trait
                      "core::iter::traits::iterator::Iterator"
                      []
                      []
                      (Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVecIter")
                        [ PAGE_SIZE ]
                        [ T ])
                      "Item"
                  ]) (|
                ltac:(M.monadic
                  (M.read (|
                    let~ _ : Ty.tuple [] :=
                      M.read (|
                        M.loop (|
                          Ty.tuple [],
                          ltac:(M.monadic
                            (M.alloc (|
                              Ty.tuple [],
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            Ty.path "bool",
                                            LogicalOp.and (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.lt,
                                                [
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| self |) |),
                                                      "openvm_circuit::system::memory::paged_vec::PagedVecIter",
                                                      "current_page"
                                                    |)
                                                  |);
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [ T; Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "len",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (|
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (| M.read (| self |) |),
                                                                "openvm_circuit::system::memory::paged_vec::PagedVecIter",
                                                                "vec"
                                                              |)
                                                            |)
                                                          |),
                                                          "openvm_circuit::system::memory::paged_vec::PagedVec",
                                                          "pages"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |),
                                              ltac:(M.monadic
                                                (M.call_closure (|
                                                  Ty.path "bool",
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [ T; Ty.path "alloc::alloc::Global" ]
                                                      ],
                                                    "is_none",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      T;
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ]
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::ops::index::Index",
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        T;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            [],
                                                            [ Ty.path "usize" ],
                                                            "index",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (|
                                                                  M.read (|
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.deref (|
                                                                        M.read (| self |)
                                                                      |),
                                                                      "openvm_circuit::system::memory::paged_vec::PagedVecIter",
                                                                      "vec"
                                                                    |)
                                                                  |)
                                                                |),
                                                                "openvm_circuit::system::memory::paged_vec::PagedVec",
                                                                "pages"
                                                              |)
                                                            |);
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (| M.read (| self |) |),
                                                                "openvm_circuit::system::memory::paged_vec::PagedVecIter",
                                                                "current_page"
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)))
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          let β :=
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::paged_vec::PagedVecIter",
                                              "current_page"
                                            |) in
                                          M.write (|
                                            β,
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.add,
                                              [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                                            |)
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        Ty.path "bool",
                                                        Value.Bool true
                                                      |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.read (|
                                                    let~ _ : Ty.tuple [] :=
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (|
                                                          Ty.tuple
                                                            [
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "usize" ];
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "usize" ]
                                                            ],
                                                          Value.Tuple
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.deref (| M.read (| self |) |),
                                                                  "openvm_circuit::system::memory::paged_vec::PagedVecIter",
                                                                  "current_index_in_page"
                                                                |)
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Ty.path "usize",
                                                                  Value.Integer IntegerKind.Usize 0
                                                                |)
                                                              |)
                                                            ]
                                                        |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ0_0 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ,
                                                                  0
                                                                |) in
                                                              let γ0_1 :=
                                                                M.SubPointer.get_tuple_field (|
                                                                  γ,
                                                                  1
                                                                |) in
                                                              let left_val :=
                                                                M.copy (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [ Ty.path "usize" ],
                                                                  γ0_0
                                                                |) in
                                                              let right_val :=
                                                                M.copy (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [ Ty.path "usize" ],
                                                                  γ0_1
                                                                |) in
                                                              M.match_operator (|
                                                                Ty.tuple [],
                                                                M.alloc (|
                                                                  Ty.tuple [],
                                                                  Value.Tuple []
                                                                |),
                                                                [
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (let γ :=
                                                                        M.use
                                                                          (M.alloc (|
                                                                            Ty.path "bool",
                                                                            UnOp.not (|
                                                                              M.call_closure (|
                                                                                Ty.path "bool",
                                                                                BinOp.eq,
                                                                                [
                                                                                  M.read (|
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        left_val
                                                                                      |)
                                                                                    |)
                                                                                  |);
                                                                                  M.read (|
                                                                                    M.deref (|
                                                                                      M.read (|
                                                                                        right_val
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            |)
                                                                          |)) in
                                                                      let _ :=
                                                                        is_constant_or_break_match (|
                                                                          M.read (| γ |),
                                                                          Value.Bool true
                                                                        |) in
                                                                      M.never_to_any (|
                                                                        M.read (|
                                                                          let~ kind :
                                                                              Ty.path
                                                                                "core::panicking::AssertKind" :=
                                                                            Value.StructTuple
                                                                              "core::panicking::AssertKind::Eq"
                                                                              []
                                                                              []
                                                                              [] in
                                                                          M.alloc (|
                                                                            Ty.path "never",
                                                                            M.call_closure (|
                                                                              Ty.path "never",
                                                                              M.get_function (|
                                                                                "core::panicking::assert_failed",
                                                                                [],
                                                                                [
                                                                                  Ty.path "usize";
                                                                                  Ty.path "usize"
                                                                                ]
                                                                              |),
                                                                              [
                                                                                M.read (| kind |);
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          left_val
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                |);
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          right_val
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  |)
                                                                                |);
                                                                                Value.StructTuple
                                                                                  "core::option::Option::None"
                                                                                  []
                                                                                  [
                                                                                    Ty.path
                                                                                      "core::fmt::Arguments"
                                                                                  ]
                                                                                  []
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |)));
                                                                  fun γ =>
                                                                    ltac:(M.monadic
                                                                      (Value.Tuple []))
                                                                ]
                                                              |)))
                                                        ]
                                                      |) in
                                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                  |)));
                                              fun γ => ltac:(M.monadic (Value.Tuple []))
                                            ]
                                          |) in
                                        let~ _ : Ty.tuple [] :=
                                          M.write (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::paged_vec::PagedVecIter",
                                              "current_index_in_page"
                                            |),
                                            Value.Integer IntegerKind.Usize 0
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.never_to_any (|
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.never_to_any (| M.read (| M.break (||) |) |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)
                                      |)))
                                ]
                              |)
                            |)))
                        |)
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    Ty.path "bool",
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.ge,
                                      [
                                        M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::system::memory::paged_vec::PagedVecIter",
                                            "current_page"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ T; Ty.path "alloc::alloc::Global" ]
                                                  ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (|
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| self |) |),
                                                      "openvm_circuit::system::memory::paged_vec::PagedVecIter",
                                                      "vec"
                                                    |)
                                                  |)
                                                |),
                                                "openvm_circuit::system::memory::paged_vec::PagedVec",
                                                "pages"
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    Value.StructTuple
                                      "core::option::Option::None"
                                      []
                                      [ Ty.tuple [ Ty.path "usize"; T ] ]
                                      []
                                  |)
                                |)
                              |)));
                          fun γ => ltac:(M.monadic (Value.Tuple []))
                        ]
                      |) in
                    let~ global_index : Ty.path "usize" :=
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.add,
                        [
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.mul,
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::paged_vec::PagedVecIter",
                                  "current_page"
                                |)
                              |);
                              PAGE_SIZE
                            ]
                          |);
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::paged_vec::PagedVecIter",
                              "current_index_in_page"
                            |)
                          |)
                        ]
                      |) in
                    let~ page :
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ T; Ty.path "alloc::alloc::Global" ]
                          ] :=
                      M.match_operator (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ T; Ty.path "alloc::alloc::Global" ]
                          ],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.path "core::convert::Infallible" ];
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ T; Ty.path "alloc::alloc::Global" ]
                                ]
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.path "core::convert::Infallible" ];
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ T; Ty.path "alloc::alloc::Global" ]
                                  ]
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ T; Ty.path "alloc::alloc::Global" ]
                                    ]
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ T; Ty.path "alloc::alloc::Global" ]
                                      ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ T; Ty.path "alloc::alloc::Global" ]
                                    ],
                                  "as_ref",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [ T; Ty.path "alloc::alloc::Global" ]
                                              ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::index::Index",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ T; Ty.path "alloc::alloc::Global" ]
                                                ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          [ Ty.path "usize" ],
                                          "index",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (|
                                                M.read (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "openvm_circuit::system::memory::paged_vec::PagedVecIter",
                                                    "vec"
                                                  |)
                                                |)
                                              |),
                                              "openvm_circuit::system::memory::paged_vec::PagedVec",
                                              "pages"
                                            |)
                                          |);
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::paged_vec::PagedVecIter",
                                              "current_page"
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.path "core::convert::Infallible" ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.tuple [ Ty.path "usize"; T ] ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.tuple [ Ty.path "usize"; T ] ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "core::convert::Infallible" ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [ T; Ty.path "alloc::alloc::Global" ]
                                    ],
                                  γ0_0
                                |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ value : T :=
                      M.call_closure (|
                        T,
                        M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply (Ty.path "&") [] [ T ],
                                M.get_trait_method (|
                                  "core::ops::index::Index",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [ T; Ty.path "alloc::alloc::Global" ],
                                  [],
                                  [ Ty.path "usize" ],
                                  "index",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| page |) |) |);
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::system::memory::paged_vec::PagedVecIter",
                                      "current_index_in_page"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      let β :=
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::paged_vec::PagedVecIter",
                          "current_index_in_page"
                        |) in
                      M.write (|
                        β,
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.add,
                          [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                        |)
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    Ty.path "bool",
                                    M.call_closure (|
                                      Ty.path "bool",
                                      BinOp.eq,
                                      [
                                        M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::system::memory::paged_vec::PagedVecIter",
                                            "current_index_in_page"
                                          |)
                                        |);
                                        PAGE_SIZE
                                      ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  let β :=
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::system::memory::paged_vec::PagedVecIter",
                                      "current_page"
                                    |) in
                                  M.write (|
                                    β,
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.add,
                                      [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                                    |)
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.write (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::system::memory::paged_vec::PagedVecIter",
                                      "current_index_in_page"
                                    |),
                                    Value.Integer IntegerKind.Usize 0
                                  |) in
                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                              |)));
                          fun γ => ltac:(M.monadic (Value.Tuple []))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.tuple [ Ty.path "usize"; T ] ],
                      Value.StructTuple
                        "core::option::Option::Some"
                        []
                        [ Ty.tuple [ Ty.path "usize"; T ] ]
                        [ Value.Tuple [ M.read (| global_index |); M.read (| value |) ] ]
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsTraitInstance
            "core::iter::traits::iterator::Iterator"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self PAGE_SIZE T)
            (* Instance *)
            [
              ("Item", InstanceField.Ty (_Item PAGE_SIZE T));
              ("next", InstanceField.Method (next PAGE_SIZE T))
            ].
      End Impl_core_iter_traits_iterator_Iterator_where_core_clone_Clone_T_for_openvm_circuit_system_memory_paged_vec_PagedVecIter_PAGE_SIZE_T.
      
      (* StructRecord
        {
          name := "AddressMap";
          const_params := [ "PAGE_SIZE" ];
          ty_params := [ "T" ];
          fields :=
            [
              ("paged_vecs",
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                      [ PAGE_SIZE ]
                      [ T ];
                    Ty.path "alloc::alloc::Global"
                  ]);
              ("as_offset", Ty.path "u32")
            ];
        } *)
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_circuit_system_memory_paged_vec_AddressMap_PAGE_SIZE_T.
        Definition Self (PAGE_SIZE : Value.t) (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
            [ PAGE_SIZE ]
            [ T ].
        
        (* Debug *)
        Definition fmt
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                        [ PAGE_SIZE ]
                        [ T ]
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field2_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "AddressMap" |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "paged_vecs" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                                [ PAGE_SIZE ]
                                [ T ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::paged_vec::AddressMap",
                              "paged_vecs"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "as_offset" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::paged_vec::AddressMap",
                                  "as_offset"
                                |)
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self PAGE_SIZE T)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt PAGE_SIZE T)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_circuit_system_memory_paged_vec_AddressMap_PAGE_SIZE_T.
      
      Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_circuit_system_memory_paged_vec_AddressMap_PAGE_SIZE_T.
        Definition Self (PAGE_SIZE : Value.t) (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
            [ PAGE_SIZE ]
            [ T ].
        
        (* Clone *)
        Definition clone
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                        [ PAGE_SIZE ]
                        [ T ]
                    ],
                  self
                |) in
              Value.mkStructRecord
                "openvm_circuit::system::memory::paged_vec::AddressMap"
                [ PAGE_SIZE ]
                [ T ]
                [
                  ("paged_vecs",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                            [ PAGE_SIZE ]
                            [ T ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                              [ PAGE_SIZE ]
                              [ T ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::paged_vec::AddressMap",
                                "paged_vecs"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("as_offset",
                    M.call_closure (|
                      Ty.path "u32",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "u32",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::paged_vec::AddressMap",
                                "as_offset"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self PAGE_SIZE T)
            (* Instance *) [ ("clone", InstanceField.Method (clone PAGE_SIZE T)) ].
      End Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_circuit_system_memory_paged_vec_AddressMap_PAGE_SIZE_T.
      
      
      
      Module Impl_core_default_Default_where_core_clone_Clone_T_where_core_default_Default_T_for_openvm_circuit_system_memory_paged_vec_AddressMap_PAGE_SIZE_T.
        Definition Self (PAGE_SIZE : Value.t) (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
            [ PAGE_SIZE ]
            [ T ].
        
        (*
            fn default() -> Self {
                Self::from_mem_config(&MemoryConfig::default())
            }
        *)
        Definition default
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [], [], [] =>
            ltac:(M.monadic
              (M.call_closure (|
                Ty.apply
                  (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                  [ PAGE_SIZE ]
                  [ T ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                    [ PAGE_SIZE ]
                    [ T ],
                  "from_mem_config",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Ty.path "openvm_circuit::arch::config::MemoryConfig",
                          M.call_closure (|
                            Ty.path "openvm_circuit::arch::config::MemoryConfig",
                            M.get_trait_method (|
                              "core::default::Default",
                              Ty.path "openvm_circuit::arch::config::MemoryConfig",
                              [],
                              [],
                              "default",
                              [],
                              []
                            |),
                            []
                          |)
                        |)
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsTraitInstance
            "core::default::Default"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self PAGE_SIZE T)
            (* Instance *) [ ("default", InstanceField.Method (default PAGE_SIZE T)) ].
      End Impl_core_default_Default_where_core_clone_Clone_T_where_core_default_Default_T_for_openvm_circuit_system_memory_paged_vec_AddressMap_PAGE_SIZE_T.
      
      Module Impl_openvm_circuit_system_memory_paged_vec_AddressMap_PAGE_SIZE_T.
        Definition Self (PAGE_SIZE : Value.t) (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
            [ PAGE_SIZE ]
            [ T ].
        
        (*
            pub fn new(as_offset: u32, as_cnt: usize, mem_size: usize) -> Self {
                Self {
                    paged_vecs: vec![PagedVec::new(mem_size.div_ceil(PAGE_SIZE)); as_cnt],
                    as_offset,
                }
            }
        *)
        Definition new
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [], [], [ as_offset; as_cnt; mem_size ] =>
            ltac:(M.monadic
              (let as_offset := M.alloc (| Ty.path "u32", as_offset |) in
              let as_cnt := M.alloc (| Ty.path "usize", as_cnt |) in
              let mem_size := M.alloc (| Ty.path "usize", mem_size |) in
              Value.mkStructRecord
                "openvm_circuit::system::memory::paged_vec::AddressMap"
                [ PAGE_SIZE ]
                [ T ]
                [
                  ("paged_vecs",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                            [ PAGE_SIZE ]
                            [ T ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_function (|
                        "alloc::vec::from_elem",
                        [],
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                            [ PAGE_SIZE ]
                            [ T ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                            [ PAGE_SIZE ]
                            [ T ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                              [ PAGE_SIZE ]
                              [ T ],
                            "new",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (| Ty.path "usize", "div_ceil", [], [] |),
                              [ M.read (| mem_size |); PAGE_SIZE ]
                            |)
                          ]
                        |);
                        M.read (| as_cnt |)
                      ]
                    |));
                  ("as_offset", M.read (| as_offset |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_new :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsAssociatedFunction.C (Self PAGE_SIZE T) "new" (new PAGE_SIZE T).
        Admitted.
        Global Typeclasses Opaque new.
        
        (*
            pub fn from_mem_config(mem_config: &MemoryConfig) -> Self {
                Self::new(
                    mem_config.as_offset,
                    1 << mem_config.as_height,
                    1 << mem_config.pointer_max_bits,
                )
            }
        *)
        Definition from_mem_config
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [], [], [ mem_config ] =>
            ltac:(M.monadic
              (let mem_config :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::arch::config::MemoryConfig" ],
                  mem_config
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                  [ PAGE_SIZE ]
                  [ T ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                    [ PAGE_SIZE ]
                    [ T ],
                  "new",
                  [],
                  []
                |),
                [
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| mem_config |) |),
                      "openvm_circuit::arch::config::MemoryConfig",
                      "as_offset"
                    |)
                  |);
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.shl,
                    [
                      Value.Integer IntegerKind.Usize 1;
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| mem_config |) |),
                          "openvm_circuit::arch::config::MemoryConfig",
                          "as_height"
                        |)
                      |)
                    ]
                  |);
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.shl,
                    [
                      Value.Integer IntegerKind.Usize 1;
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| mem_config |) |),
                          "openvm_circuit::arch::config::MemoryConfig",
                          "pointer_max_bits"
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_from_mem_config :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsAssociatedFunction.C
            (Self PAGE_SIZE T)
            "from_mem_config"
            (from_mem_config PAGE_SIZE T).
        Admitted.
        Global Typeclasses Opaque from_mem_config.
        
        (*
            pub fn items(&self) -> impl Iterator<Item = (Address, T)> + '_ {
                self.paged_vecs
                    .iter()
                    .enumerate()
                    .flat_map(move |(as_idx, page)| {
                        page.iter()
                            .map(move |(ptr_idx, x)| ((as_idx as u32 + self.as_offset, ptr_idx as u32), x))
                    })
            }
        *)
        Definition items
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                        [ PAGE_SIZE ]
                        [ T ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::iter::adapters::flatten::FlatMap")
                  []
                  [
                    Ty.apply
                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                              [ PAGE_SIZE ]
                              [ T ]
                          ]
                      ];
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVecIter")
                          [ PAGE_SIZE ]
                          [ T ];
                        Ty.function
                          [ Ty.tuple [ Ty.path "usize"; T ] ]
                          (Ty.tuple [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; T ])
                      ];
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.path "usize";
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                                  [ PAGE_SIZE ]
                                  [ T ]
                              ]
                          ]
                      ]
                      (Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVecIter")
                            [ PAGE_SIZE ]
                            [ T ];
                          Ty.function
                            [ Ty.tuple [ Ty.path "usize"; T ] ]
                            (Ty.tuple [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; T ])
                        ])
                  ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                            [ PAGE_SIZE ]
                            [ T ]
                        ]
                    ],
                  [],
                  [],
                  "flat_map",
                  [],
                  [
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVecIter")
                          [ PAGE_SIZE ]
                          [ T ];
                        Ty.function
                          [ Ty.tuple [ Ty.path "usize"; T ] ]
                          (Ty.tuple [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; T ])
                      ];
                    Ty.function
                      [
                        Ty.tuple
                          [
                            Ty.path "usize";
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                                  [ PAGE_SIZE ]
                                  [ T ]
                              ]
                          ]
                      ]
                      (Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVecIter")
                            [ PAGE_SIZE ]
                            [ T ];
                          Ty.function
                            [ Ty.tuple [ Ty.path "usize"; T ] ]
                            (Ty.tuple [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; T ])
                        ])
                  ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                              [ PAGE_SIZE ]
                              [ T ]
                          ]
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                            [ PAGE_SIZE ]
                            [ T ]
                        ],
                      [],
                      [],
                      "enumerate",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                              [ PAGE_SIZE ]
                              [ T ]
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                                [ PAGE_SIZE ]
                                [ T ]
                            ],
                          "iter",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::paged_vec::PagedVec")
                                          [ PAGE_SIZE ]
                                          [ T ]
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::paged_vec::PagedVec")
                                        [ PAGE_SIZE ]
                                        [ T ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::system::memory::paged_vec::AddressMap",
                                      "paged_vecs"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    ]
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::map::Map")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::paged_vec::PagedVecIter")
                                    [ PAGE_SIZE ]
                                    [ T ];
                                  Ty.function
                                    [ Ty.tuple [ Ty.path "usize"; T ] ]
                                    (Ty.tuple [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; T ])
                                ],
                              M.alloc (|
                                Ty.tuple
                                  [
                                    Ty.path "usize";
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::paged_vec::PagedVec")
                                          [ PAGE_SIZE ]
                                          [ T ]
                                      ]
                                  ],
                                α0
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let as_idx := M.copy (| Ty.path "usize", γ0_0 |) in
                                    let page :=
                                      M.copy (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::paged_vec::PagedVec")
                                              [ PAGE_SIZE ]
                                              [ T ]
                                          ],
                                        γ0_1
                                      |) in
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::map::Map")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::paged_vec::PagedVecIter")
                                            [ PAGE_SIZE ]
                                            [ T ];
                                          Ty.function
                                            [ Ty.tuple [ Ty.path "usize"; T ] ]
                                            (Ty.tuple
                                              [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; T ])
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::paged_vec::PagedVecIter")
                                          [ PAGE_SIZE ]
                                          [ T ],
                                        [],
                                        [],
                                        "map",
                                        [],
                                        [
                                          Ty.tuple [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; T ];
                                          Ty.function
                                            [ Ty.tuple [ Ty.path "usize"; T ] ]
                                            (Ty.tuple
                                              [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; T ])
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::paged_vec::PagedVecIter")
                                            [ PAGE_SIZE ]
                                            [ T ],
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::paged_vec::PagedVec")
                                              [ PAGE_SIZE ]
                                              [ T ],
                                            "iter",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| page |) |)
                                            |)
                                          ]
                                        |);
                                        M.closure
                                          (fun γ =>
                                            ltac:(M.monadic
                                              match γ with
                                              | [ α0 ] =>
                                                ltac:(M.monadic
                                                  (M.match_operator (|
                                                    Ty.tuple
                                                      [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; T
                                                      ],
                                                    M.alloc (|
                                                      Ty.tuple [ Ty.path "usize"; T ],
                                                      α0
                                                    |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ0_0 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              0
                                                            |) in
                                                          let γ0_1 :=
                                                            M.SubPointer.get_tuple_field (|
                                                              γ,
                                                              1
                                                            |) in
                                                          let ptr_idx :=
                                                            M.copy (| Ty.path "usize", γ0_0 |) in
                                                          let x := M.copy (| T, γ0_1 |) in
                                                          Value.Tuple
                                                            [
                                                              Value.Tuple
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.path "u32",
                                                                    BinOp.Wrap.add,
                                                                    [
                                                                      M.cast
                                                                        (Ty.path "u32")
                                                                        (M.read (| as_idx |));
                                                                      M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          M.deref (|
                                                                            M.read (| self |)
                                                                          |),
                                                                          "openvm_circuit::system::memory::paged_vec::AddressMap",
                                                                          "as_offset"
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.cast
                                                                    (Ty.path "u32")
                                                                    (M.read (| ptr_idx |))
                                                                ];
                                                              M.read (| x |)
                                                            ]))
                                                    ]
                                                  |)))
                                              | _ => M.impossible "wrong number of arguments"
                                              end))
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_items :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsAssociatedFunction.C (Self PAGE_SIZE T) "items" (items PAGE_SIZE T).
        Admitted.
        Global Typeclasses Opaque items.
        
        (*
            pub fn get(&self, address: &Address) -> Option<&T> {
                self.paged_vecs[(address.0 - self.as_offset) as usize].get(address.1 as usize)
            }
        *)
        Definition get
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [], [], [ self; address ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                        [ PAGE_SIZE ]
                        [ T ]
                    ],
                  self
                |) in
              let address :=
                M.alloc (|
                  Ty.apply (Ty.path "&") [] [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ],
                  address
                |) in
              M.call_closure (|
                Ty.apply (Ty.path "core::option::Option") [] [ Ty.apply (Ty.path "&") [] [ T ] ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                    [ PAGE_SIZE ]
                    [ T ],
                  "get",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                              [ PAGE_SIZE ]
                              [ T ]
                          ],
                        M.get_trait_method (|
                          "core::ops::index::Index",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                                [ PAGE_SIZE ]
                                [ T ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          [ Ty.path "usize" ],
                          "index",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::paged_vec::AddressMap",
                              "paged_vecs"
                            |)
                          |);
                          M.cast
                            (Ty.path "usize")
                            (M.call_closure (|
                              Ty.path "u32",
                              BinOp.Wrap.sub,
                              [
                                M.read (|
                                  M.SubPointer.get_tuple_field (|
                                    M.deref (| M.read (| address |) |),
                                    0
                                  |)
                                |);
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::system::memory::paged_vec::AddressMap",
                                    "as_offset"
                                  |)
                                |)
                              ]
                            |))
                        ]
                      |)
                    |)
                  |);
                  M.cast
                    (Ty.path "usize")
                    (M.read (|
                      M.SubPointer.get_tuple_field (| M.deref (| M.read (| address |) |), 1 |)
                    |))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_get :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsAssociatedFunction.C (Self PAGE_SIZE T) "get" (get PAGE_SIZE T).
        Admitted.
        Global Typeclasses Opaque get.
        
        (*
            pub fn get_mut(&mut self, address: &Address) -> Option<&mut T> {
                self.paged_vecs[(address.0 - self.as_offset) as usize].get_mut(address.1 as usize)
            }
        *)
        Definition get_mut
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [], [], [ self; address ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                        [ PAGE_SIZE ]
                        [ T ]
                    ],
                  self
                |) in
              let address :=
                M.alloc (|
                  Ty.apply (Ty.path "&") [] [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ],
                  address
                |) in
              M.call_closure (|
                Ty.apply (Ty.path "core::option::Option") [] [ Ty.apply (Ty.path "&mut") [] [ T ] ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                    [ PAGE_SIZE ]
                    [ T ],
                  "get_mut",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                              [ PAGE_SIZE ]
                              [ T ]
                          ],
                        M.get_trait_method (|
                          "core::ops::index::IndexMut",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                                [ PAGE_SIZE ]
                                [ T ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          [ Ty.path "usize" ],
                          "index_mut",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::paged_vec::AddressMap",
                              "paged_vecs"
                            |)
                          |);
                          M.cast
                            (Ty.path "usize")
                            (M.call_closure (|
                              Ty.path "u32",
                              BinOp.Wrap.sub,
                              [
                                M.read (|
                                  M.SubPointer.get_tuple_field (|
                                    M.deref (| M.read (| address |) |),
                                    0
                                  |)
                                |);
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::system::memory::paged_vec::AddressMap",
                                    "as_offset"
                                  |)
                                |)
                              ]
                            |))
                        ]
                      |)
                    |)
                  |);
                  M.cast
                    (Ty.path "usize")
                    (M.read (|
                      M.SubPointer.get_tuple_field (| M.deref (| M.read (| address |) |), 1 |)
                    |))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_get_mut :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsAssociatedFunction.C (Self PAGE_SIZE T) "get_mut" (get_mut PAGE_SIZE T).
        Admitted.
        Global Typeclasses Opaque get_mut.
        
        (*
            pub fn insert(&mut self, address: &Address, data: T) -> Option<T> {
                self.paged_vecs[(address.0 - self.as_offset) as usize].set(address.1 as usize, data)
            }
        *)
        Definition insert
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [], [], [ self; address; data ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                        [ PAGE_SIZE ]
                        [ T ]
                    ],
                  self
                |) in
              let address :=
                M.alloc (|
                  Ty.apply (Ty.path "&") [] [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ],
                  address
                |) in
              let data := M.alloc (| T, data |) in
              M.call_closure (|
                Ty.apply (Ty.path "core::option::Option") [] [ T ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                    [ PAGE_SIZE ]
                    [ T ],
                  "set",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                              [ PAGE_SIZE ]
                              [ T ]
                          ],
                        M.get_trait_method (|
                          "core::ops::index::IndexMut",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                                [ PAGE_SIZE ]
                                [ T ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          [ Ty.path "usize" ],
                          "index_mut",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::paged_vec::AddressMap",
                              "paged_vecs"
                            |)
                          |);
                          M.cast
                            (Ty.path "usize")
                            (M.call_closure (|
                              Ty.path "u32",
                              BinOp.Wrap.sub,
                              [
                                M.read (|
                                  M.SubPointer.get_tuple_field (|
                                    M.deref (| M.read (| address |) |),
                                    0
                                  |)
                                |);
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::system::memory::paged_vec::AddressMap",
                                    "as_offset"
                                  |)
                                |)
                              ]
                            |))
                        ]
                      |)
                    |)
                  |);
                  M.cast
                    (Ty.path "usize")
                    (M.read (|
                      M.SubPointer.get_tuple_field (| M.deref (| M.read (| address |) |), 1 |)
                    |));
                  M.read (| data |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_insert :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsAssociatedFunction.C (Self PAGE_SIZE T) "insert" (insert PAGE_SIZE T).
        Admitted.
        Global Typeclasses Opaque insert.
        
        (*
            pub fn is_empty(&self) -> bool {
                self.paged_vecs.iter().all(|page| page.is_empty())
            }
        *)
        Definition is_empty
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                        [ PAGE_SIZE ]
                        [ T ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.path "bool",
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::slice::iter::Iter")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                        [ PAGE_SIZE ]
                        [ T ]
                    ],
                  [],
                  [],
                  "all",
                  [],
                  [
                    Ty.function
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                              [ PAGE_SIZE ]
                              [ T ]
                          ]
                      ]
                      (Ty.path "bool")
                  ]
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                            [ PAGE_SIZE ]
                            [ T ]
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::slice::iter::Iter")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                              [ PAGE_SIZE ]
                              [ T ]
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                                [ PAGE_SIZE ]
                                [ T ]
                            ],
                          "iter",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::paged_vec::PagedVec")
                                          [ PAGE_SIZE ]
                                          [ T ]
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::paged_vec::PagedVec")
                                        [ PAGE_SIZE ]
                                        [ T ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::system::memory::paged_vec::AddressMap",
                                      "paged_vecs"
                                    |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |);
                  M.closure
                    (fun γ =>
                      ltac:(M.monadic
                        match γ with
                        | [ α0 ] =>
                          ltac:(M.monadic
                            (M.match_operator (|
                              Ty.path "bool",
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::paged_vec::PagedVec")
                                      [ PAGE_SIZE ]
                                      [ T ]
                                  ],
                                α0
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let page :=
                                      M.copy (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::paged_vec::PagedVec")
                                              [ PAGE_SIZE ]
                                              [ T ]
                                          ],
                                        γ
                                      |) in
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::paged_vec::PagedVec")
                                          [ PAGE_SIZE ]
                                          [ T ],
                                        "is_empty",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| page |) |)
                                        |)
                                      ]
                                    |)))
                              ]
                            |)))
                        | _ => M.impossible "wrong number of arguments"
                        end))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_is_empty :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsAssociatedFunction.C (Self PAGE_SIZE T) "is_empty" (is_empty PAGE_SIZE T).
        Admitted.
        Global Typeclasses Opaque is_empty.
        
        (*
            pub fn from_iter(
                as_offset: u32,
                as_cnt: usize,
                mem_size: usize,
                iter: impl IntoIterator<Item = (Address, T)>,
            ) -> Self {
                let mut vec = Self::new(as_offset, as_cnt, mem_size);
                for (address, data) in iter {
                    vec.insert(&address, data);
                }
                vec
            }
        *)
        Definition from_iter
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [], [ impl_IntoIterator_Item____Address__T__ ], [ as_offset; as_cnt; mem_size; iter ] =>
            ltac:(M.monadic
              (let as_offset := M.alloc (| Ty.path "u32", as_offset |) in
              let as_cnt := M.alloc (| Ty.path "usize", as_cnt |) in
              let mem_size := M.alloc (| Ty.path "usize", mem_size |) in
              let iter := M.alloc (| impl_IntoIterator_Item____Address__T__, iter |) in
              M.read (|
                let~ vec :
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                      [ PAGE_SIZE ]
                      [ T ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                      [ PAGE_SIZE ]
                      [ T ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                        [ PAGE_SIZE ]
                        [ T ],
                      "new",
                      [],
                      []
                    |),
                    [ M.read (| as_offset |); M.read (| as_cnt |); M.read (| mem_size |) ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.read (|
                    M.use
                      (M.alloc (|
                        Ty.tuple [],
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.associated_in_trait
                              "core::iter::traits::collect::IntoIterator"
                              []
                              []
                              impl_IntoIterator_Item____Address__T__
                              "IntoIter",
                            M.call_closure (|
                              Ty.associated_in_trait
                                "core::iter::traits::collect::IntoIterator"
                                []
                                []
                                impl_IntoIterator_Item____Address__T__
                                "IntoIter",
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                impl_IntoIterator_Item____Address__T__,
                                [],
                                [],
                                "into_iter",
                                [],
                                []
                              |),
                              [ M.read (| iter |) ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter :=
                                  M.copy (|
                                    Ty.associated_in_trait
                                      "core::iter::traits::collect::IntoIterator"
                                      []
                                      []
                                      impl_IntoIterator_Item____Address__T__
                                      "IntoIter",
                                    γ
                                  |) in
                                M.read (|
                                  M.loop (|
                                    Ty.tuple [],
                                    ltac:(M.monadic
                                      (let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.tuple
                                                  [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; T ]
                                              ],
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.tuple
                                                    [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; T ]
                                                ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.associated_in_trait
                                                  "core::iter::traits::collect::IntoIterator"
                                                  []
                                                  []
                                                  impl_IntoIterator_Item____Address__T__
                                                  "IntoIter",
                                                [],
                                                [],
                                                "next",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (|
                                                    M.borrow (| Pointer.Kind.MutRef, iter |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let _ :=
                                                  M.is_struct_tuple (|
                                                    γ,
                                                    "core::option::Option::None"
                                                  |) in
                                                M.never_to_any (| M.read (| M.break (||) |) |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let γ1_0 :=
                                                  M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                                let γ1_1 :=
                                                  M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                                let address :=
                                                  M.copy (|
                                                    Ty.tuple [ Ty.path "u32"; Ty.path "u32" ],
                                                    γ1_0
                                                  |) in
                                                let data := M.copy (| T, γ1_1 |) in
                                                M.read (|
                                                  let~ _ :
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [ T ] :=
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [ T ],
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::system::memory::paged_vec::AddressMap")
                                                          [ PAGE_SIZE ]
                                                          [ T ],
                                                        "insert",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (| Pointer.Kind.MutRef, vec |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (| Pointer.Kind.Ref, address |)
                                                          |)
                                                        |);
                                                        M.read (| data |)
                                                      ]
                                                    |) in
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                  |)
                                |)))
                          ]
                        |)
                      |))
                  |) in
                vec
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_from_iter :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsAssociatedFunction.C (Self PAGE_SIZE T) "from_iter" (from_iter PAGE_SIZE T).
        Admitted.
        Global Typeclasses Opaque from_iter.
        (*
            pub fn get_range<const N: usize>(&self, address: &Address) -> [T; N] {
                self.paged_vecs[(address.0 - self.as_offset) as usize].range_array(address.1 as usize)
            }
        *)
        Definition get_range
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [ N ], [], [ self; address ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                        [ PAGE_SIZE ]
                        [ T ]
                    ],
                  self
                |) in
              let address :=
                M.alloc (|
                  Ty.apply (Ty.path "&") [] [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ],
                  address
                |) in
              M.call_closure (|
                Ty.apply (Ty.path "array") [ N ] [ T ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                    [ PAGE_SIZE ]
                    [ T ],
                  "range_array",
                  [ N ],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                              [ PAGE_SIZE ]
                              [ T ]
                          ],
                        M.get_trait_method (|
                          "core::ops::index::Index",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                                [ PAGE_SIZE ]
                                [ T ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          [ Ty.path "usize" ],
                          "index",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::paged_vec::AddressMap",
                              "paged_vecs"
                            |)
                          |);
                          M.cast
                            (Ty.path "usize")
                            (M.call_closure (|
                              Ty.path "u32",
                              BinOp.Wrap.sub,
                              [
                                M.read (|
                                  M.SubPointer.get_tuple_field (|
                                    M.deref (| M.read (| address |) |),
                                    0
                                  |)
                                |);
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::system::memory::paged_vec::AddressMap",
                                    "as_offset"
                                  |)
                                |)
                              ]
                            |))
                        ]
                      |)
                    |)
                  |);
                  M.cast
                    (Ty.path "usize")
                    (M.read (|
                      M.SubPointer.get_tuple_field (| M.deref (| M.read (| address |) |), 1 |)
                    |))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_get_range :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsAssociatedFunction.C (Self PAGE_SIZE T) "get_range" (get_range PAGE_SIZE T).
        Admitted.
        Global Typeclasses Opaque get_range.
        
        (*
            pub fn set_range<const N: usize>(&mut self, address: &Address, values: &[T; N]) -> [T; N] {
                self.paged_vecs[(address.0 - self.as_offset) as usize]
                    .set_range_array(address.1 as usize, values)
            }
        *)
        Definition set_range
            (PAGE_SIZE : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self PAGE_SIZE T in
          match ε, τ, α with
          | [ N ], [], [ self; address; values ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                        [ PAGE_SIZE ]
                        [ T ]
                    ],
                  self
                |) in
              let address :=
                M.alloc (|
                  Ty.apply (Ty.path "&") [] [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ],
                  address
                |) in
              let values :=
                M.alloc (|
                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "array") [ N ] [ T ] ],
                  values
                |) in
              M.call_closure (|
                Ty.apply (Ty.path "array") [ N ] [ T ],
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                    [ PAGE_SIZE ]
                    [ T ],
                  "set_range_array",
                  [ N ],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                              [ PAGE_SIZE ]
                              [ T ]
                          ],
                        M.get_trait_method (|
                          "core::ops::index::IndexMut",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::paged_vec::PagedVec")
                                [ PAGE_SIZE ]
                                [ T ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          [ Ty.path "usize" ],
                          "index_mut",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::paged_vec::AddressMap",
                              "paged_vecs"
                            |)
                          |);
                          M.cast
                            (Ty.path "usize")
                            (M.call_closure (|
                              Ty.path "u32",
                              BinOp.Wrap.sub,
                              [
                                M.read (|
                                  M.SubPointer.get_tuple_field (|
                                    M.deref (| M.read (| address |) |),
                                    0
                                  |)
                                |);
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::system::memory::paged_vec::AddressMap",
                                    "as_offset"
                                  |)
                                |)
                              ]
                            |))
                        ]
                      |)
                    |)
                  |);
                  M.cast
                    (Ty.path "usize")
                    (M.read (|
                      M.SubPointer.get_tuple_field (| M.deref (| M.read (| address |) |), 1 |)
                    |));
                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| values |) |) |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_set_range :
          forall (PAGE_SIZE : Value.t) (T : Ty.t),
          M.IsAssociatedFunction.C (Self PAGE_SIZE T) "set_range" (set_range PAGE_SIZE T).
        Admitted.
        Global Typeclasses Opaque set_range.
      End Impl_openvm_circuit_system_memory_paged_vec_AddressMap_PAGE_SIZE_T.
      
    End paged_vec.
  End memory.
End system.
