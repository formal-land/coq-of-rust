(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module system.
  Module memory.
    Module persistent.
      (* StructRecord
        {
          name := "PersistentBoundaryCols";
          const_params := [ "CHUNK" ];
          ty_params := [ "T" ];
          fields :=
            [
              ("expand_direction", T);
              ("address_space", T);
              ("leaf_label", T);
              ("values", Ty.apply (Ty.path "array") [ CHUNK ] [ T ]);
              ("hash", Ty.apply (Ty.path "array") [ CHUNK ] [ T ]);
              ("timestamp", T)
            ];
        } *)
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_circuit_system_memory_persistent_PersistentBoundaryCols_CHUNK_T.
        Definition Self (CHUNK : Value.t) (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
            [ CHUNK ]
            [ T ].
        
        (* Debug *)
        Definition fmt
            (CHUNK : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK T in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                        [ CHUNK ]
                        [ T ]
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.read (|
                let~ names :
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 6 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                      ] :=
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 6 ]
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                          Value.Array
                            [
                              mk_str (| "expand_direction" |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| mk_str (| "address_space" |) |)
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| mk_str (| "leaf_label" |) |)
                              |);
                              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "values" |) |) |);
                              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "hash" |) |) |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| mk_str (| "timestamp" |) |)
                              |)
                            ]
                        |)
                      |)
                    |)
                  |) in
                let~ values :
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 6 ]
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                            ]
                        ])
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                            ]
                        ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 6 ]
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                                ],
                              Value.Array
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply (Ty.path "&") [] [ T ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                                              "expand_direction"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply (Ty.path "&") [] [ T ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                                              "address_space"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply (Ty.path "&") [] [ T ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                                              "leaf_label"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "array") [ CHUNK ] [ T ] ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                                              "values"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "array") [ CHUNK ] [ T ] ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                                              "hash"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "&") [] [ T ] ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Ty.apply (Ty.path "&") [] [ T ],
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                                                  "timestamp"
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                            |)
                          |)
                        |)
                      |)
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "debug_struct_fields_finish",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| mk_str (| "PersistentBoundaryCols" |) |)
                      |);
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ],
                        M.pointer_coercion
                          M.PointerCoercion.Unsize
                          (Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 6 ]
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                            ])
                          (Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                            ]),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| names |) |) |) ]
                      |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| values |) |) |)
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (CHUNK : Value.t) (T : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self CHUNK T)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt CHUNK T)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_circuit_system_memory_persistent_PersistentBoundaryCols_CHUNK_T.
      
      Module Impl_core_borrow_Borrow_openvm_circuit_system_memory_persistent_PersistentBoundaryCols_CHUNK_T_for_slice_T.
        Definition Self (CHUNK : Value.t) (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ T ].
        
        (* AlignedBorrow *)
        Definition borrow
            (CHUNK : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                  self
                |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.tuple
                                    [
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                    ],
                                  Value.Tuple
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.path "usize",
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_associated_function (|
                                              Ty.apply (Ty.path "slice") [] [ T ],
                                              "len",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| self |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.path "usize",
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                                                [ CHUNK ]
                                                [ T ],
                                              "width",
                                              [],
                                              []
                                            |),
                                            []
                                          |)
                                        |)
                                      |)
                                    ]
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                      let left_val :=
                                        M.copy (|
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                          γ0_0
                                        |) in
                                      let right_val :=
                                        M.copy (|
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                          γ0_1
                                        |) in
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    Ty.path "bool",
                                                    UnOp.not (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        BinOp.eq,
                                                        [
                                                          M.read (|
                                                            M.deref (| M.read (| left_val |) |)
                                                          |);
                                                          M.read (|
                                                            M.deref (| M.read (| right_val |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)) in
                                              let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.never_to_any (|
                                                M.read (|
                                                  let~ kind :
                                                      Ty.path "core::panicking::AssertKind" :=
                                                    Value.StructTuple
                                                      "core::panicking::AssertKind::Eq"
                                                      []
                                                      []
                                                      [] in
                                                  M.alloc (|
                                                    Ty.path "never",
                                                    M.call_closure (|
                                                      Ty.path "never",
                                                      M.get_function (|
                                                        "core::panicking::assert_failed",
                                                        [],
                                                        [ Ty.path "usize"; Ty.path "usize" ]
                                                      |),
                                                      [
                                                        M.read (| kind |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| left_val |) |)
                                                            |)
                                                          |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| right_val |) |)
                                                            |)
                                                          |)
                                                        |);
                                                        Value.StructTuple
                                                          "core::option::Option::None"
                                                          []
                                                          [ Ty.path "core::fmt::Arguments" ]
                                                          []
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ => ltac:(M.monadic (Value.Tuple []))
                                        ]
                                      |)))
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                        [ CHUNK ]
                        [ T ]
                    ],
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                          [ CHUNK ]
                          [ T ]
                      ],
                    M.alloc (|
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                                    [ CHUNK ]
                                    [ T ]
                                ]
                            ];
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                        ],
                      M.call_closure (|
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                                      [ CHUNK ]
                                      [ T ]
                                  ]
                              ];
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                          ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ T ],
                          "align_to",
                          [],
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                              [ CHUNK ]
                              [ T ]
                          ]
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                          let prefix :=
                            M.copy (|
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                              γ0_0
                            |) in
                          let shorts :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                                        [ CHUNK ]
                                        [ T ]
                                    ]
                                ],
                              γ0_1
                            |) in
                          let _suffix :=
                            M.copy (|
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                              γ0_2
                            |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        Ty.path "bool",
                                                        UnOp.not (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_associated_function (|
                                                              Ty.apply (Ty.path "slice") [] [ T ],
                                                              "is_empty",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| prefix |) |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.never_to_any (|
                                                    M.call_closure (|
                                                      Ty.path "never",
                                                      M.get_function (|
                                                        "core::panicking::panic_fmt",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::Arguments",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::Arguments",
                                                            "new_const",
                                                            [ Value.Integer IntegerKind.Usize 1 ],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.alloc (|
                                                                    Ty.apply
                                                                      (Ty.path "array")
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          1
                                                                      ]
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ Ty.path "str" ]
                                                                      ],
                                                                    Value.Array
                                                                      [
                                                                        mk_str (|
                                                                          "Alignment should match"
                                                                        |)
                                                                      ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |)));
                                              fun γ => ltac:(M.monadic (Value.Tuple []))
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                      |)));
                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              Ty.tuple
                                                [
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                ],
                                              Value.Tuple
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.path "usize",
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                                                                [ CHUNK ]
                                                                [ T ]
                                                            ],
                                                          "len",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| shorts |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.path "usize",
                                                      Value.Integer IntegerKind.Usize 1
                                                    |)
                                                  |)
                                                ]
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                  let γ0_1 :=
                                                    M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                  let left_val :=
                                                    M.copy (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                      γ0_0
                                                    |) in
                                                  let right_val :=
                                                    M.copy (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                      γ0_1
                                                    |) in
                                                  M.match_operator (|
                                                    Ty.tuple [],
                                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                Ty.path "bool",
                                                                UnOp.not (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.eq,
                                                                    [
                                                                      M.read (|
                                                                        M.deref (|
                                                                          M.read (| left_val |)
                                                                        |)
                                                                      |);
                                                                      M.read (|
                                                                        M.deref (|
                                                                          M.read (| right_val |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.never_to_any (|
                                                            M.read (|
                                                              let~ kind :
                                                                  Ty.path
                                                                    "core::panicking::AssertKind" :=
                                                                Value.StructTuple
                                                                  "core::panicking::AssertKind::Eq"
                                                                  []
                                                                  []
                                                                  [] in
                                                              M.alloc (|
                                                                Ty.path "never",
                                                                M.call_closure (|
                                                                  Ty.path "never",
                                                                  M.get_function (|
                                                                    "core::panicking::assert_failed",
                                                                    [],
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.path "usize"
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.read (| kind |);
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| left_val |)
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |);
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| right_val |)
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |);
                                                                    Value.StructTuple
                                                                      "core::option::Option::None"
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "core::fmt::Arguments"
                                                                      ]
                                                                      []
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ => ltac:(M.monadic (Value.Tuple []))
                                                    ]
                                                  |)))
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                      |)));
                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                ]
                              |) in
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                                    [ CHUNK ]
                                    [ T ]
                                ],
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_array_field (|
                                      M.deref (| M.read (| shorts |) |),
                                      Value.Integer IntegerKind.Usize 0
                                    |)
                                  |)
                                |)
                              |)
                            |)
                          |)))
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (CHUNK : Value.t) (T : Ty.t),
          M.IsTraitInstance
            "core::borrow::Borrow"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                [ CHUNK ]
                [ T ]
            ]
            (Self CHUNK T)
            (* Instance *) [ ("borrow", InstanceField.Method (borrow CHUNK T)) ].
      End Impl_core_borrow_Borrow_openvm_circuit_system_memory_persistent_PersistentBoundaryCols_CHUNK_T_for_slice_T.
      
      Module Impl_core_borrow_BorrowMut_openvm_circuit_system_memory_persistent_PersistentBoundaryCols_CHUNK_T_for_slice_T.
        Definition Self (CHUNK : Value.t) (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ T ].
        
        (* AlignedBorrow *)
        Definition borrow_mut
            (CHUNK : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                  self
                |) in
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.read (|
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (|
                                      Ty.tuple
                                        [
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                        ],
                                      Value.Tuple
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Ty.path "usize",
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [] [ T ],
                                                  "len",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| self |) |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Ty.path "usize",
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                                                    [ CHUNK ]
                                                    [ T ],
                                                  "width",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |)
                                            |)
                                          |)
                                        ]
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                          let left_val :=
                                            M.copy (|
                                              Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                              γ0_0
                                            |) in
                                          let right_val :=
                                            M.copy (|
                                              Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                              γ0_1
                                            |) in
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        Ty.path "bool",
                                                        UnOp.not (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            BinOp.eq,
                                                            [
                                                              M.read (|
                                                                M.deref (| M.read (| left_val |) |)
                                                              |);
                                                              M.read (|
                                                                M.deref (| M.read (| right_val |) |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.never_to_any (|
                                                    M.read (|
                                                      let~ kind :
                                                          Ty.path "core::panicking::AssertKind" :=
                                                        Value.StructTuple
                                                          "core::panicking::AssertKind::Eq"
                                                          []
                                                          []
                                                          [] in
                                                      M.alloc (|
                                                        Ty.path "never",
                                                        M.call_closure (|
                                                          Ty.path "never",
                                                          M.get_function (|
                                                            "core::panicking::assert_failed",
                                                            [],
                                                            [ Ty.path "usize"; Ty.path "usize" ]
                                                          |),
                                                          [
                                                            M.read (| kind |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |)
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              |)
                                                            |);
                                                            Value.StructTuple
                                                              "core::option::Option::None"
                                                              []
                                                              [ Ty.path "core::fmt::Arguments" ]
                                                              []
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ => ltac:(M.monadic (Value.Tuple []))
                                            ]
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                              |)));
                          fun γ => ltac:(M.monadic (Value.Tuple []))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                            [ CHUNK ]
                            [ T ]
                        ],
                      M.match_operator (|
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                              [ CHUNK ]
                              [ T ]
                          ],
                        M.alloc (|
                          Ty.tuple
                            [
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                                        [ CHUNK ]
                                        [ T ]
                                    ]
                                ];
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                            ],
                          M.call_closure (|
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ];
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                                          [ CHUNK ]
                                          [ T ]
                                      ]
                                  ];
                                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                              ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ T ],
                              "align_to_mut",
                              [],
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                                  [ CHUNK ]
                                  [ T ]
                              ]
                            |),
                            [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                              let prefix :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                  γ0_0
                                |) in
                              let shorts :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                                            [ CHUNK ]
                                            [ T ]
                                        ]
                                    ],
                                  γ0_1
                                |) in
                              let _suffix :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                  γ0_2
                                |) in
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.read (|
                                            let~ _ : Ty.tuple [] :=
                                              M.match_operator (|
                                                Ty.tuple [],
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            Ty.path "bool",
                                                            UnOp.not (|
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ T ],
                                                                  "is_empty",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| prefix |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.never_to_any (|
                                                        M.call_closure (|
                                                          Ty.path "never",
                                                          M.get_function (|
                                                            "core::panicking::panic_fmt",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              Ty.path "core::fmt::Arguments",
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::Arguments",
                                                                "new_const",
                                                                [ Value.Integer IntegerKind.Usize 1
                                                                ],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.alloc (|
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              1
                                                                          ]
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [ Ty.path "str" ]
                                                                          ],
                                                                        Value.Array
                                                                          [
                                                                            mk_str (|
                                                                              "Alignment should match"
                                                                            |)
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |)));
                                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                                ]
                                              |) in
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                          |)));
                                      fun γ => ltac:(M.monadic (Value.Tuple []))
                                    ]
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.read (|
                                            let~ _ : Ty.tuple [] :=
                                              M.match_operator (|
                                                Ty.tuple [],
                                                M.alloc (|
                                                  Ty.tuple
                                                    [
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                    ],
                                                  Value.Tuple
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Ty.path "usize",
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                                                                    [ CHUNK ]
                                                                    [ T ]
                                                                ],
                                                              "len",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| shorts |) |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Ty.path "usize",
                                                          Value.Integer IntegerKind.Usize 1
                                                        |)
                                                      |)
                                                    ]
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                      let γ0_1 :=
                                                        M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                      let left_val :=
                                                        M.copy (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          γ0_0
                                                        |) in
                                                      let right_val :=
                                                        M.copy (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          γ0_1
                                                        |) in
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ :=
                                                                M.use
                                                                  (M.alloc (|
                                                                    Ty.path "bool",
                                                                    UnOp.not (|
                                                                      M.call_closure (|
                                                                        Ty.path "bool",
                                                                        BinOp.eq,
                                                                        [
                                                                          M.read (|
                                                                            M.deref (|
                                                                              M.read (| left_val |)
                                                                            |)
                                                                          |);
                                                                          M.read (|
                                                                            M.deref (|
                                                                              M.read (| right_val |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)) in
                                                              let _ :=
                                                                is_constant_or_break_match (|
                                                                  M.read (| γ |),
                                                                  Value.Bool true
                                                                |) in
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  let~ kind :
                                                                      Ty.path
                                                                        "core::panicking::AssertKind" :=
                                                                    Value.StructTuple
                                                                      "core::panicking::AssertKind::Eq"
                                                                      []
                                                                      []
                                                                      [] in
                                                                  M.alloc (|
                                                                    Ty.path "never",
                                                                    M.call_closure (|
                                                                      Ty.path "never",
                                                                      M.get_function (|
                                                                        "core::panicking::assert_failed",
                                                                        [],
                                                                        [
                                                                          Ty.path "usize";
                                                                          Ty.path "usize"
                                                                        ]
                                                                      |),
                                                                      [
                                                                        M.read (| kind |);
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  left_val
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  right_val
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        Value.StructTuple
                                                                          "core::option::Option::None"
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "core::fmt::Arguments"
                                                                          ]
                                                                          []
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)));
                                                          fun γ => ltac:(M.monadic (Value.Tuple []))
                                                        ]
                                                      |)))
                                                ]
                                              |) in
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                          |)));
                                      fun γ => ltac:(M.monadic (Value.Tuple []))
                                    ]
                                  |) in
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                                        [ CHUNK ]
                                        [ T ]
                                    ],
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.SubPointer.get_array_field (|
                                          M.deref (| M.read (| shorts |) |),
                                          Value.Integer IntegerKind.Usize 0
                                        |)
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |)
                    |)
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (CHUNK : Value.t) (T : Ty.t),
          M.IsTraitInstance
            "core::borrow::BorrowMut"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                [ CHUNK ]
                [ T ]
            ]
            (Self CHUNK T)
            (* Instance *) [ ("borrow_mut", InstanceField.Method (borrow_mut CHUNK T)) ].
      End Impl_core_borrow_BorrowMut_openvm_circuit_system_memory_persistent_PersistentBoundaryCols_CHUNK_T_for_slice_T.
      
      Module Impl_openvm_circuit_system_memory_persistent_PersistentBoundaryCols_CHUNK_T.
        Definition Self (CHUNK : Value.t) (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
            [ CHUNK ]
            [ T ].
        
        (* AlignedBorrow *)
        Definition width
            (CHUNK : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK T in
          match ε, τ, α with
          | [], [], [] =>
            ltac:(M.monadic
              (M.call_closure (|
                Ty.path "usize",
                M.get_function (|
                  "core::mem::size_of",
                  [],
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                      [ CHUNK ]
                      [ Ty.path "u8" ]
                  ]
                |),
                []
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_width :
          forall (CHUNK : Value.t) (T : Ty.t),
          M.IsAssociatedFunction.C (Self CHUNK T) "width" (width CHUNK T).
        Admitted.
        Global Typeclasses Opaque width.
      End Impl_openvm_circuit_system_memory_persistent_PersistentBoundaryCols_CHUNK_T.
      
      (* StructRecord
        {
          name := "PersistentBoundaryAir";
          const_params := [ "CHUNK" ];
          ty_params := [];
          fields :=
            [
              ("memory_dims",
                Ty.path "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions");
              ("memory_bus",
                Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus");
              ("merkle_bus", Ty.path "openvm_stark_backend::interaction::PermutationCheckBus");
              ("compression_bus", Ty.path "openvm_stark_backend::interaction::PermutationCheckBus")
            ];
        } *)
      
      Module Impl_core_clone_Clone_for_openvm_circuit_system_memory_persistent_PersistentBoundaryAir_CHUNK.
        Definition Self (CHUNK : Value.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::persistent::PersistentBoundaryAir")
            [ CHUNK ]
            [].
        
        (* Clone *)
        Definition clone
            (CHUNK : Value.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::persistent::PersistentBoundaryAir")
                        [ CHUNK ]
                        []
                    ],
                  self
                |) in
              Value.mkStructRecord
                "openvm_circuit::system::memory::persistent::PersistentBoundaryAir"
                [ CHUNK ]
                []
                [
                  ("memory_dims",
                    M.call_closure (|
                      Ty.path
                        "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path
                          "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::persistent::PersistentBoundaryAir",
                                "memory_dims"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("memory_bus",
                    M.call_closure (|
                      Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::persistent::PersistentBoundaryAir",
                                "memory_bus"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("merkle_bus",
                    M.call_closure (|
                      Ty.path "openvm_stark_backend::interaction::PermutationCheckBus",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "openvm_stark_backend::interaction::PermutationCheckBus",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::persistent::PersistentBoundaryAir",
                                "merkle_bus"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("compression_bus",
                    M.call_closure (|
                      Ty.path "openvm_stark_backend::interaction::PermutationCheckBus",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "openvm_stark_backend::interaction::PermutationCheckBus",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::persistent::PersistentBoundaryAir",
                                "compression_bus"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (CHUNK : Value.t),
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self CHUNK)
            (* Instance *) [ ("clone", InstanceField.Method (clone CHUNK)) ].
      End Impl_core_clone_Clone_for_openvm_circuit_system_memory_persistent_PersistentBoundaryAir_CHUNK.
      
      Module Impl_core_fmt_Debug_for_openvm_circuit_system_memory_persistent_PersistentBoundaryAir_CHUNK.
        Definition Self (CHUNK : Value.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::persistent::PersistentBoundaryAir")
            [ CHUNK ]
            [].
        
        (* Debug *)
        Definition fmt
            (CHUNK : Value.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::persistent::PersistentBoundaryAir")
                        [ CHUNK ]
                        []
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field4_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| mk_str (| "PersistentBoundaryAir" |) |)
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "memory_dims" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.path
                            "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions"
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::persistent::PersistentBoundaryAir",
                              "memory_dims"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "memory_bus" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus"
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::persistent::PersistentBoundaryAir",
                              "memory_bus"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "merkle_bus" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.path "openvm_stark_backend::interaction::PermutationCheckBus" ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::persistent::PersistentBoundaryAir",
                              "merkle_bus"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "compression_bus" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.path "openvm_stark_backend::interaction::PermutationCheckBus" ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.path "openvm_stark_backend::interaction::PermutationCheckBus"
                                ],
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::persistent::PersistentBoundaryAir",
                                  "compression_bus"
                                |)
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (CHUNK : Value.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self CHUNK)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt CHUNK)) ].
      End Impl_core_fmt_Debug_for_openvm_circuit_system_memory_persistent_PersistentBoundaryAir_CHUNK.
      
      Module Impl_p3_air_air_BaseAir_F_for_openvm_circuit_system_memory_persistent_PersistentBoundaryAir_CHUNK.
        Definition Self (CHUNK : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::persistent::PersistentBoundaryAir")
            [ CHUNK ]
            [].
        
        (*
            fn width(&self) -> usize {
                PersistentBoundaryCols::<F, CHUNK>::width()
            }
        *)
        Definition width
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::persistent::PersistentBoundaryAir")
                        [ CHUNK ]
                        []
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                    [ CHUNK ]
                    [ F ],
                  "width",
                  [],
                  []
                |),
                []
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsTraitInstance
            "p3_air::air::BaseAir"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self CHUNK F)
            (* Instance *) [ ("width", InstanceField.Method (width CHUNK F)) ].
      End Impl_p3_air_air_BaseAir_F_for_openvm_circuit_system_memory_persistent_PersistentBoundaryAir_CHUNK.
      
      Module Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_F_for_openvm_circuit_system_memory_persistent_PersistentBoundaryAir_CHUNK.
        Definition Self (CHUNK : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::persistent::PersistentBoundaryAir")
            [ CHUNK ]
            [].
        
        Axiom Implements :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsTraitInstance
            "openvm_stark_backend::rap::BaseAirWithPublicValues"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self CHUNK F)
            (* Instance *) [].
      End Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_F_for_openvm_circuit_system_memory_persistent_PersistentBoundaryAir_CHUNK.
      
      Module Impl_openvm_stark_backend_rap_PartitionedBaseAir_F_for_openvm_circuit_system_memory_persistent_PersistentBoundaryAir_CHUNK.
        Definition Self (CHUNK : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::persistent::PersistentBoundaryAir")
            [ CHUNK ]
            [].
        
        Axiom Implements :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsTraitInstance
            "openvm_stark_backend::rap::PartitionedBaseAir"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self CHUNK F)
            (* Instance *) [].
      End Impl_openvm_stark_backend_rap_PartitionedBaseAir_F_for_openvm_circuit_system_memory_persistent_PersistentBoundaryAir_CHUNK.
      
      Module Impl_p3_air_air_Air_where_openvm_stark_backend_interaction_InteractionBuilder_AB_AB_for_openvm_circuit_system_memory_persistent_PersistentBoundaryAir_CHUNK.
        Definition Self (CHUNK : Value.t) (AB : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::persistent::PersistentBoundaryAir")
            [ CHUNK ]
            [].
        
        (*
            fn eval(&self, builder: &mut AB) {
                let main = builder.main();
                let local = main.row_slice(0);
                let local: &PersistentBoundaryCols<AB::Var, CHUNK> = ( *local).borrow();
        
                // `direction` should be -1, 0, 1
                builder.assert_eq(
                    local.expand_direction,
                    local.expand_direction * local.expand_direction * local.expand_direction,
                );
        
                // Constrain that an "initial" row has timestamp zero.
                // Since `direction` is constrained to be in {-1, 0, 1}, we can select `direction == 1`
                // with the constraint below.
                builder
                    .when(local.expand_direction * (local.expand_direction + AB::F::ONE))
                    .assert_zero(local.timestamp);
        
                let mut expand_fields = vec![
                    // direction =  1 => is_final = 0
                    // direction = -1 => is_final = 1
                    local.expand_direction.into(),
                    AB::Expr::ZERO,
                    local.address_space - AB::F::from_canonical_u32(self.memory_dims.as_offset),
                    local.leaf_label.into(),
                ];
                expand_fields.extend(local.hash.map(Into::into));
                self.merkle_bus
                    .interact(builder, expand_fields, local.expand_direction.into());
        
                self.compression_bus.interact(
                    builder,
                    iter::empty()
                        .chain(local.values.map(Into::into))
                        .chain(iter::repeat_n(AB::Expr::ZERO, CHUNK))
                        .chain(local.hash.map(Into::into)),
                    local.expand_direction * local.expand_direction,
                );
        
                self.memory_bus
                    .send(
                        MemoryAddress::new(
                            local.address_space,
                            local.leaf_label * AB::F::from_canonical_usize(CHUNK),
                        ),
                        local.values.to_vec(),
                        local.timestamp,
                    )
                    .eval(builder, local.expand_direction);
            }
        *)
        Definition eval
            (CHUNK : Value.t)
            (AB : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK AB in
          match ε, τ, α with
          | [], [], [ self; builder ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::persistent::PersistentBoundaryAir")
                        [ CHUNK ]
                        []
                    ],
                  self
                |) in
              let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
              M.read (|
                let~ main : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M" :=
                  M.call_closure (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M",
                    M.get_trait_method (| "p3_air::air::AirBuilder", AB, [], [], "main", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| builder |) |) |) ]
                  |) in
                let~ local :
                    Ty.associated_in_trait
                      "p3_matrix::Matrix"
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                      "{{synthetic}}'2" :=
                  M.call_closure (|
                    Ty.associated_in_trait
                      "p3_matrix::Matrix"
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                      "{{synthetic}}'2",
                    M.get_trait_method (|
                      "p3_matrix::Matrix",
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M",
                      [],
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                      "row_slice",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, main |); Value.Integer IntegerKind.Usize 0 ]
                  |) in
                let~ local :
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                          [ CHUNK ]
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      ] :=
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                              [ CHUNK ]
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                          ],
                        M.get_trait_method (|
                          "core::borrow::Borrow",
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                          [],
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                              [ CHUNK ]
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                          ],
                          "borrow",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.associated_in_trait
                                    "p3_matrix::Matrix"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ]
                                    (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                                    "{{synthetic}}'2",
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, local |) ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "p3_air::air::AirBuilder",
                      AB,
                      [],
                      [],
                      "assert_eq",
                      [],
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                      ]
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| local |) |),
                          "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                          "expand_direction"
                        |)
                      |);
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        M.get_trait_method (|
                          "core::ops::arith::Mul",
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          [],
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                          "mul",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            M.get_trait_method (|
                              "core::ops::arith::Mul",
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                              [],
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                              "mul",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| local |) |),
                                  "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                                  "expand_direction"
                                |)
                              |);
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| local |) |),
                                  "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                                  "expand_direction"
                                |)
                              |)
                            ]
                          |);
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| local |) |),
                              "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                              "expand_direction"
                            |)
                          |)
                        ]
                      |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "p3_air::air::AirBuilder",
                      Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                      [],
                      [],
                      "assert_zero",
                      [],
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.alloc (|
                          Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                          M.call_closure (|
                            Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                            M.get_trait_method (|
                              "p3_air::air::AirBuilder",
                              AB,
                              [],
                              [],
                              "when",
                              [],
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (| M.read (| builder |) |)
                              |);
                              M.call_closure (|
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                M.get_trait_method (|
                                  "core::ops::arith::Mul",
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                  [],
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ],
                                  "mul",
                                  [],
                                  []
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| local |) |),
                                      "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                                      "expand_direction"
                                    |)
                                  |);
                                  M.call_closure (|
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    M.get_trait_method (|
                                      "core::ops::arith::Add",
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var",
                                      [],
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "F"
                                      ],
                                      "add",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| local |) |),
                                          "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                                          "expand_direction"
                                        |)
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "p3_field::field::FieldAlgebra::ONE",
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "F"
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| local |) |),
                          "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                          "timestamp"
                        |)
                      |)
                    ]
                  |) in
                let~ expand_fields :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.path "alloc::alloc::Global"
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                      "into_vec",
                      [],
                      [ Ty.path "alloc::alloc::Global" ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::boxed::Box")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.pointer_coercion
                          M.PointerCoercion.Unsize
                          (Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 4 ]
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ])
                          (Ty.apply
                            (Ty.path "alloc::boxed::Box")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ]),
                        [
                          M.read (|
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::boxed::Box")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::boxed::Box")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 4 ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                "new",
                                [],
                                []
                              |),
                              [
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                  Value.Array
                                    [
                                      M.call_closure (|
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr",
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var",
                                          [],
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr"
                                          ],
                                          "into",
                                          [],
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| local |) |),
                                              "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                                              "expand_direction"
                                            |)
                                          |)
                                        ]
                                      |);
                                      M.read (|
                                        get_constant (|
                                          "p3_field::field::FieldAlgebra::ZERO",
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        |)
                                      |);
                                      M.call_closure (|
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr",
                                        M.get_trait_method (|
                                          "core::ops::arith::Sub",
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var",
                                          [],
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "F"
                                          ],
                                          "sub",
                                          [],
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| local |) |),
                                              "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                                              "address_space"
                                            |)
                                          |);
                                          M.call_closure (|
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "F",
                                            M.get_trait_method (|
                                              "p3_field::field::FieldAlgebra",
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "F",
                                              [],
                                              [],
                                              "from_canonical_u32",
                                              [],
                                              []
                                            |),
                                            [
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "openvm_circuit::system::memory::persistent::PersistentBoundaryAir",
                                                    "memory_dims"
                                                  |),
                                                  "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                                                  "as_offset"
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |);
                                      M.call_closure (|
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr",
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var",
                                          [],
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr"
                                          ],
                                          "into",
                                          [],
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| local |) |),
                                              "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                                              "leaf_label"
                                            |)
                                          |)
                                        ]
                                      |)
                                    ]
                                |)
                              ]
                            |)
                          |)
                        ]
                      |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "core::iter::traits::collect::Extend",
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                      "extend",
                      [],
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ CHUNK ]
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                      ]
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, expand_fields |);
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "array")
                          [ CHUNK ]
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "array")
                            [ CHUNK ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                          "map",
                          [],
                          [
                            Ty.function
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                              (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr");
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                          ]
                        |),
                        [
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| local |) |),
                              "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                              "hash"
                            |)
                          |);
                          M.get_trait_method (|
                            "core::convert::Into",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                            "into",
                            [],
                            []
                          |)
                        ]
                      |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.path "openvm_stark_backend::interaction::PermutationCheckBus",
                      "interact",
                      [],
                      [
                        AB;
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                      ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::persistent::PersistentBoundaryAir",
                          "merkle_bus"
                        |)
                      |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                      M.read (| expand_fields |);
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        M.get_trait_method (|
                          "core::convert::Into",
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                          [],
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                          "into",
                          [],
                          []
                        |),
                        [
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| local |) |),
                              "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                              "expand_direction"
                            |)
                          |)
                        ]
                      |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.path "openvm_stark_backend::interaction::PermutationCheckBus",
                      "interact",
                      [],
                      [
                        AB;
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.apply
                          (Ty.path "core::iter::adapters::chain::Chain")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::sources::empty::Empty")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ];
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ CHUNK ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                  ];
                                Ty.apply
                                  (Ty.path "core::iter::sources::repeat_n::RepeatN")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "core::array::iter::IntoIter")
                              [ CHUNK ]
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          ];
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                      ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::persistent::PersistentBoundaryAir",
                          "compression_bus"
                        |)
                      |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::chain::Chain")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::sources::empty::Empty")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ];
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ CHUNK ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                  ];
                                Ty.apply
                                  (Ty.path "core::iter::sources::repeat_n::RepeatN")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ]
                              ];
                            Ty.apply
                              (Ty.path "core::array::iter::IntoIter")
                              [ CHUNK ]
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::chain::Chain")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::sources::empty::Empty")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ];
                                  Ty.apply
                                    (Ty.path "core::array::iter::IntoIter")
                                    [ CHUNK ]
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ]
                                ];
                              Ty.apply
                                (Ty.path "core::iter::sources::repeat_n::RepeatN")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                            ],
                          [],
                          [],
                          "chain",
                          [],
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ CHUNK ]
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::chain::Chain")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::sources::empty::Empty")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ];
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ CHUNK ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                  ];
                                Ty.apply
                                  (Ty.path "core::iter::sources::repeat_n::RepeatN")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ]
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::sources::empty::Empty")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ];
                                  Ty.apply
                                    (Ty.path "core::array::iter::IntoIter")
                                    [ CHUNK ]
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ]
                                ],
                              [],
                              [],
                              "chain",
                              [],
                              [
                                Ty.apply
                                  (Ty.path "core::iter::sources::repeat_n::RepeatN")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ]
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::sources::empty::Empty")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ];
                                    Ty.apply
                                      (Ty.path "core::array::iter::IntoIter")
                                      [ CHUNK ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::iter::sources::empty::Empty")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                  [],
                                  [],
                                  "chain",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ CHUNK ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::iter::sources::empty::Empty")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ],
                                    M.get_function (|
                                      "core::iter::sources::empty::empty",
                                      [],
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                    |),
                                    []
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ CHUNK ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "array")
                                        [ CHUNK ]
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ],
                                      "map",
                                      [],
                                      [
                                        Ty.function
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ]
                                          (Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr");
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                    |),
                                    [
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| local |) |),
                                          "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                                          "values"
                                        |)
                                      |);
                                      M.get_trait_method (|
                                        "core::convert::Into",
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var",
                                        [],
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        ],
                                        "into",
                                        [],
                                        []
                                      |)
                                    ]
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::sources::repeat_n::RepeatN")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ],
                                M.get_function (|
                                  "core::iter::sources::repeat_n::repeat_n",
                                  [],
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ]
                                |),
                                [
                                  M.read (|
                                    get_constant (|
                                      "p3_field::field::FieldAlgebra::ZERO",
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    |)
                                  |);
                                  CHUNK
                                ]
                              |)
                            ]
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "array")
                              [ CHUNK ]
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "array")
                                [ CHUNK ]
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                              "map",
                              [],
                              [
                                Ty.function
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ]
                                  (Ty.associated_in_trait
                                    "p3_air::air::AirBuilder"
                                    []
                                    []
                                    AB
                                    "Expr");
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                              ]
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| local |) |),
                                  "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                                  "hash"
                                |)
                              |);
                              M.get_trait_method (|
                                "core::convert::Into",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                                "into",
                                [],
                                []
                              |)
                            ]
                          |)
                        ]
                      |);
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        M.get_trait_method (|
                          "core::ops::arith::Mul",
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                          [],
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                          "mul",
                          [],
                          []
                        |),
                        [
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| local |) |),
                              "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                              "expand_direction"
                            |)
                          |);
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| local |) |),
                              "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                              "expand_direction"
                            |)
                          |)
                        ]
                      |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                      "eval",
                      [],
                      [ AB; Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                        M.get_associated_function (|
                          Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                          "send",
                          [],
                          [
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                          ]
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::persistent::PersistentBoundaryAir",
                              "memory_bus"
                            |)
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                              []
                              [
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                                []
                                [
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                              "new",
                              [],
                              []
                            |),
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| local |) |),
                                  "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                                  "address_space"
                                |)
                              |);
                              M.call_closure (|
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                M.get_trait_method (|
                                  "core::ops::arith::Mul",
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                  [],
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ],
                                  "mul",
                                  [],
                                  []
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| local |) |),
                                      "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                                      "leaf_label"
                                    |)
                                  |);
                                  M.call_closure (|
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                                    M.get_trait_method (|
                                      "p3_field::field::FieldAlgebra",
                                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                                      [],
                                      [],
                                      "from_canonical_usize",
                                      [],
                                      []
                                    |),
                                    [ CHUNK ]
                                  |)
                                ]
                              |)
                            ]
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                              "to_vec",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                  ],
                                M.pointer_coercion
                                  M.PointerCoercion.Unsize
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ CHUNK ]
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ]
                                    ])
                                  (Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ]
                                    ]),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| local |) |),
                                      "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                                      "values"
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |);
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| local |) |),
                              "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                              "timestamp"
                            |)
                          |)
                        ]
                      |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| local |) |),
                          "openvm_circuit::system::memory::persistent::PersistentBoundaryCols",
                          "expand_direction"
                        |)
                      |)
                    ]
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (CHUNK : Value.t) (AB : Ty.t),
          M.IsTraitInstance
            "p3_air::air::Air"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ AB ]
            (Self CHUNK AB)
            (* Instance *) [ ("eval", InstanceField.Method (eval CHUNK AB)) ].
      End Impl_p3_air_air_Air_where_openvm_stark_backend_interaction_InteractionBuilder_AB_AB_for_openvm_circuit_system_memory_persistent_PersistentBoundaryAir_CHUNK.
      
      (* StructRecord
        {
          name := "PersistentBoundaryChip";
          const_params := [ "CHUNK" ];
          ty_params := [ "F" ];
          fields :=
            [
              ("air",
                Ty.apply
                  (Ty.path "openvm_circuit::system::memory::persistent::PersistentBoundaryAir")
                  [ CHUNK ]
                  []);
              ("touched_labels",
                Ty.apply
                  (Ty.path "openvm_circuit::system::memory::persistent::TouchedLabels")
                  [ CHUNK ]
                  [ F ]);
              ("overridden_height",
                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ])
            ];
        } *)
      
      (*
      Enum TouchedLabels
      {
        const_params := [ "CHUNK" ];
        ty_params := [ "F" ];
        variants :=
          [
            {
              name := "Running";
              item :=
                StructTuple
                  [
                    Ty.apply
                      (Ty.path "std::collections::hash::set::HashSet")
                      []
                      [
                        Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                        Ty.path "rustc_hash::FxBuildHasher"
                      ]
                  ];
            };
            {
              name := "Final";
              item :=
                StructTuple
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                          [ CHUNK ]
                          [ F ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ];
            }
          ];
      }
      *)
      
      Axiom IsDiscriminant_TouchedLabels_Running :
        M.IsDiscriminant "openvm_circuit::system::memory::persistent::TouchedLabels::Running" 0.
      Axiom IsDiscriminant_TouchedLabels_Final :
        M.IsDiscriminant "openvm_circuit::system::memory::persistent::TouchedLabels::Final" 1.
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_circuit_system_memory_persistent_TouchedLabels_CHUNK_F.
        Definition Self (CHUNK : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::persistent::TouchedLabels")
            [ CHUNK ]
            [ F ].
        
        (* Debug *)
        Definition fmt
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::persistent::TouchedLabels")
                        [ CHUNK ]
                        [ F ]
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::persistent::TouchedLabels::Running",
                          0
                        |) in
                      let __self_0 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "std::collections::hash::set::HashSet")
                                []
                                [
                                  Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                  Ty.path "rustc_hash::FxBuildHasher"
                                ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Running" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "std::collections::hash::set::HashSet")
                                        []
                                        [
                                          Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                          Ty.path "rustc_hash::FxBuildHasher"
                                        ]
                                    ]
                                ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::persistent::TouchedLabels::Final",
                          0
                        |) in
                      let __self_0 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                    [ CHUNK ]
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_tuple_field1_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Final" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                            [ CHUNK ]
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self CHUNK F)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt CHUNK F)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_circuit_system_memory_persistent_TouchedLabels_CHUNK_F.
      
      (* StructRecord
        {
          name := "FinalTouchedLabel";
          const_params := [ "CHUNK" ];
          ty_params := [ "F" ];
          fields :=
            [
              ("address_space", Ty.path "u32");
              ("label", Ty.path "u32");
              ("init_values", Ty.apply (Ty.path "array") [ CHUNK ] [ F ]);
              ("final_values", Ty.apply (Ty.path "array") [ CHUNK ] [ F ]);
              ("init_hash", Ty.apply (Ty.path "array") [ CHUNK ] [ F ]);
              ("final_hash", Ty.apply (Ty.path "array") [ CHUNK ] [ F ]);
              ("final_timestamp", Ty.path "u32")
            ];
        } *)
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_circuit_system_memory_persistent_FinalTouchedLabel_CHUNK_F.
        Definition Self (CHUNK : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
            [ CHUNK ]
            [ F ].
        
        (* Debug *)
        Definition fmt
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                        [ CHUNK ]
                        [ F ]
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.read (|
                let~ names :
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 7 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                      ] :=
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 7 ]
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                          Value.Array
                            [
                              mk_str (| "address_space" |);
                              M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "label" |) |) |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| mk_str (| "init_values" |) |)
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| mk_str (| "final_values" |) |)
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| mk_str (| "init_hash" |) |)
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| mk_str (| "final_hash" |) |)
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| mk_str (| "final_timestamp" |) |)
                              |)
                            ]
                        |)
                      |)
                    |)
                  |) in
                let~ values :
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 7 ]
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                            ]
                        ])
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                            ]
                        ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 7 ]
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                                ],
                              Value.Array
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply (Ty.path "&") [] [ Ty.path "u32" ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::persistent::FinalTouchedLabel",
                                              "address_space"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply (Ty.path "&") [] [ Ty.path "u32" ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::persistent::FinalTouchedLabel",
                                              "label"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::persistent::FinalTouchedLabel",
                                              "init_values"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::persistent::FinalTouchedLabel",
                                              "final_values"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::persistent::FinalTouchedLabel",
                                              "init_hash"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::persistent::FinalTouchedLabel",
                                              "final_hash"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "openvm_circuit::system::memory::persistent::FinalTouchedLabel",
                                                  "final_timestamp"
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                            |)
                          |)
                        |)
                      |)
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "debug_struct_fields_finish",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| mk_str (| "FinalTouchedLabel" |) |)
                      |);
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ],
                        M.pointer_coercion
                          M.PointerCoercion.Unsize
                          (Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 7 ]
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                            ])
                          (Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                            ]),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| names |) |) |) ]
                      |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| values |) |) |)
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self CHUNK F)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt CHUNK F)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_circuit_system_memory_persistent_FinalTouchedLabel_CHUNK_F.
      
      Module Impl_core_default_Default_where_p3_field_field_PrimeField32_F_for_openvm_circuit_system_memory_persistent_TouchedLabels_CHUNK_F.
        Definition Self (CHUNK : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::persistent::TouchedLabels")
            [ CHUNK ]
            [ F ].
        
        (*
            fn default() -> Self {
                Self::Running(FxHashSet::default())
            }
        *)
        Definition default
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [], [], [] =>
            ltac:(M.monadic
              (Value.StructTuple
                "openvm_circuit::system::memory::persistent::TouchedLabels::Running"
                [ CHUNK ]
                [ F ]
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "std::collections::hash::set::HashSet")
                      []
                      [
                        Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                        Ty.path "rustc_hash::FxBuildHasher"
                      ],
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply
                        (Ty.path "std::collections::hash::set::HashSet")
                        []
                        [
                          Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                          Ty.path "rustc_hash::FxBuildHasher"
                        ],
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |)
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsTraitInstance
            "core::default::Default"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self CHUNK F)
            (* Instance *) [ ("default", InstanceField.Method (default CHUNK F)) ].
      End Impl_core_default_Default_where_p3_field_field_PrimeField32_F_for_openvm_circuit_system_memory_persistent_TouchedLabels_CHUNK_F.
      
      Module Impl_openvm_circuit_system_memory_persistent_TouchedLabels_CHUNK_F.
        Definition Self (CHUNK : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::persistent::TouchedLabels")
            [ CHUNK ]
            [ F ].
        
        (*
            fn touch(&mut self, address_space: u32, label: u32) {
                match self {
                    TouchedLabels::Running(touched_labels) => {
                        touched_labels.insert((address_space, label));
                    }
                    _ => panic!("Cannot touch after finalization"),
                }
            }
        *)
        Definition touch
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [], [], [ self; address_space; label ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::persistent::TouchedLabels")
                        [ CHUNK ]
                        [ F ]
                    ],
                  self
                |) in
              let address_space := M.alloc (| Ty.path "u32", address_space |) in
              let label := M.alloc (| Ty.path "u32", label |) in
              M.match_operator (|
                Ty.tuple [],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::persistent::TouchedLabels::Running",
                          0
                        |) in
                      let touched_labels :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path "std::collections::hash::set::HashSet")
                                []
                                [
                                  Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                  Ty.path "rustc_hash::FxBuildHasher"
                                ]
                            ],
                          γ1_0
                        |) in
                      M.read (|
                        let~ _ : Ty.path "bool" :=
                          M.call_closure (|
                            Ty.path "bool",
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "std::collections::hash::set::HashSet")
                                []
                                [
                                  Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                  Ty.path "rustc_hash::FxBuildHasher"
                                ],
                              "insert",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (| M.read (| touched_labels |) |)
                              |);
                              Value.Tuple [ M.read (| address_space |); M.read (| label |) ]
                            ]
                          |) in
                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.never_to_any (|
                        M.call_closure (|
                          Ty.path "never",
                          M.get_function (| "core::panicking::panic_fmt", [], [] |),
                          [
                            M.call_closure (|
                              Ty.path "core::fmt::Arguments",
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_const",
                                [ Value.Integer IntegerKind.Usize 1 ],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 1 ]
                                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                        Value.Array
                                          [ mk_str (| "Cannot touch after finalization" |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_touch :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsAssociatedFunction.C (Self CHUNK F) "touch" (touch CHUNK F).
        Admitted.
        Global Typeclasses Opaque touch.
        
        (*
            fn len(&self) -> usize {
                match self {
                    TouchedLabels::Running(touched_labels) => touched_labels.len(),
                    TouchedLabels::Final(touched_labels) => touched_labels.len(),
                }
            }
        *)
        Definition len
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::persistent::TouchedLabels")
                        [ CHUNK ]
                        [ F ]
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.path "usize",
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::persistent::TouchedLabels::Running",
                          0
                        |) in
                      let touched_labels :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "std::collections::hash::set::HashSet")
                                []
                                [
                                  Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                  Ty.path "rustc_hash::FxBuildHasher"
                                ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "std::collections::hash::set::HashSet")
                            []
                            [
                              Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                              Ty.path "rustc_hash::FxBuildHasher"
                            ],
                          "len",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| touched_labels |) |) |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::persistent::TouchedLabels::Final",
                          0
                        |) in
                      let touched_labels :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                    [ CHUNK ]
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                [ CHUNK ]
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "len",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| touched_labels |) |) |)
                        ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_len :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsAssociatedFunction.C (Self CHUNK F) "len" (len CHUNK F).
        Admitted.
        Global Typeclasses Opaque len.
      End Impl_openvm_circuit_system_memory_persistent_TouchedLabels_CHUNK_F.
      
      Module Impl_openvm_circuit_system_memory_persistent_PersistentBoundaryChip_CHUNK_F.
        Definition Self (CHUNK : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
            [ CHUNK ]
            [ F ].
        
        (*
            pub fn new(
                memory_dimensions: MemoryDimensions,
                memory_bus: MemoryBus,
                merkle_bus: PermutationCheckBus,
                compression_bus: PermutationCheckBus,
            ) -> Self {
                Self {
                    air: PersistentBoundaryAir {
                        memory_dims: memory_dimensions,
                        memory_bus,
                        merkle_bus,
                        compression_bus,
                    },
                    touched_labels: Default::default(),
                    overridden_height: None,
                }
            }
        *)
        Definition new
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [], [], [ memory_dimensions; memory_bus; merkle_bus; compression_bus ] =>
            ltac:(M.monadic
              (let memory_dimensions :=
                M.alloc (|
                  Ty.path
                    "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                  memory_dimensions
                |) in
              let memory_bus :=
                M.alloc (|
                  Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                  memory_bus
                |) in
              let merkle_bus :=
                M.alloc (|
                  Ty.path "openvm_stark_backend::interaction::PermutationCheckBus",
                  merkle_bus
                |) in
              let compression_bus :=
                M.alloc (|
                  Ty.path "openvm_stark_backend::interaction::PermutationCheckBus",
                  compression_bus
                |) in
              Value.mkStructRecord
                "openvm_circuit::system::memory::persistent::PersistentBoundaryChip"
                [ CHUNK ]
                [ F ]
                [
                  ("air",
                    Value.mkStructRecord
                      "openvm_circuit::system::memory::persistent::PersistentBoundaryAir"
                      [ CHUNK ]
                      []
                      [
                        ("memory_dims", M.read (| memory_dimensions |));
                        ("memory_bus", M.read (| memory_bus |));
                        ("merkle_bus", M.read (| merkle_bus |));
                        ("compression_bus", M.read (| compression_bus |))
                      ]);
                  ("touched_labels",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::persistent::TouchedLabels")
                        [ CHUNK ]
                        [ F ],
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::persistent::TouchedLabels")
                          [ CHUNK ]
                          [ F ],
                        [],
                        [],
                        "default",
                        [],
                        []
                      |),
                      []
                    |));
                  ("overridden_height",
                    Value.StructTuple "core::option::Option::None" [] [ Ty.path "usize" ] [])
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_new :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsAssociatedFunction.C (Self CHUNK F) "new" (new CHUNK F).
        Admitted.
        Global Typeclasses Opaque new.
        
        (*
            pub fn set_overridden_height(&mut self, overridden_height: usize) {
                self.overridden_height = Some(overridden_height);
            }
        *)
        Definition set_overridden_height
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [], [], [ self; overridden_height ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
                        [ CHUNK ]
                        [ F ]
                    ],
                  self
                |) in
              let overridden_height := M.alloc (| Ty.path "usize", overridden_height |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.write (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::persistent::PersistentBoundaryChip",
                      "overridden_height"
                    |),
                    Value.StructTuple
                      "core::option::Option::Some"
                      []
                      [ Ty.path "usize" ]
                      [ M.read (| overridden_height |) ]
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_set_overridden_height :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsAssociatedFunction.C
            (Self CHUNK F)
            "set_overridden_height"
            (set_overridden_height CHUNK F).
        Admitted.
        Global Typeclasses Opaque set_overridden_height.
        
        (*
            pub fn touch_range(&mut self, address_space: u32, pointer: u32, len: u32) {
                let start_label = pointer / CHUNK as u32;
                let end_label = (pointer + len - 1) / CHUNK as u32;
                for label in start_label..=end_label {
                    self.touched_labels.touch(address_space, label);
                }
            }
        *)
        Definition touch_range
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [], [], [ self; address_space; pointer; len ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
                        [ CHUNK ]
                        [ F ]
                    ],
                  self
                |) in
              let address_space := M.alloc (| Ty.path "u32", address_space |) in
              let pointer := M.alloc (| Ty.path "u32", pointer |) in
              let len := M.alloc (| Ty.path "u32", len |) in
              M.read (|
                let~ start_label : Ty.path "u32" :=
                  M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.div,
                    [ M.read (| pointer |); M.cast (Ty.path "u32") CHUNK ]
                  |) in
                let~ end_label : Ty.path "u32" :=
                  M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.div,
                    [
                      M.call_closure (|
                        Ty.path "u32",
                        BinOp.Wrap.sub,
                        [
                          M.call_closure (|
                            Ty.path "u32",
                            BinOp.Wrap.add,
                            [ M.read (| pointer |); M.read (| len |) ]
                          |);
                          Value.Integer IntegerKind.U32 1
                        ]
                      |);
                      M.cast (Ty.path "u32") CHUNK
                    ]
                  |) in
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply (Ty.path "core::ops::range::RangeInclusive") [] [ Ty.path "u32" ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::range::RangeInclusive")
                            []
                            [ Ty.path "u32" ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "core::ops::range::RangeInclusive")
                              []
                              [ Ty.path "u32" ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::range::RangeInclusive")
                                []
                                [ Ty.path "u32" ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::ops::range::RangeInclusive")
                                  []
                                  [ Ty.path "u32" ],
                                "new",
                                [],
                                []
                              |),
                              [ M.read (| start_label |); M.read (| end_label |) ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::ops::range::RangeInclusive")
                                  []
                                  [ Ty.path "u32" ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [ Ty.path "u32" ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "u32" ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::ops::range::RangeInclusive")
                                              []
                                              [ Ty.path "u32" ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let label := M.copy (| Ty.path "u32", γ0_0 |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.call_closure (|
                                                  Ty.tuple [],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::persistent::TouchedLabels")
                                                      [ CHUNK ]
                                                      [ F ],
                                                    "touch",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.MutRef,
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| self |) |),
                                                        "openvm_circuit::system::memory::persistent::PersistentBoundaryChip",
                                                        "touched_labels"
                                                      |)
                                                    |);
                                                    M.read (| address_space |);
                                                    M.read (| label |)
                                                  ]
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_touch_range :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsAssociatedFunction.C (Self CHUNK F) "touch_range" (touch_range CHUNK F).
        Admitted.
        Global Typeclasses Opaque touch_range.
        
        (*
            pub fn finalize<H>(
                &mut self,
                initial_memory: &MemoryImage<F>,
                final_memory: &TimestampedEquipartition<F, CHUNK>,
                hasher: &mut H,
            ) where
                H: Hasher<CHUNK, F> + Sync + for<'a> SerialReceiver<&'a [F]>,
            {
                match &mut self.touched_labels {
                    TouchedLabels::Running(touched_labels) => {
                        let final_touched_labels: Vec<_> = touched_labels
                            .par_iter()
                            .map(|&(address_space, label)| {
                                let pointer = label * CHUNK as u32;
                                let init_values = array::from_fn(|i| {
                                    *initial_memory
                                        .get(&(address_space, pointer + i as u32))
                                        .unwrap_or(&F::ZERO)
                                });
                                let initial_hash = hasher.hash(&init_values);
                                let timestamped_values = final_memory.get(&(address_space, label)).unwrap();
                                let final_hash = hasher.hash(&timestamped_values.values);
                                FinalTouchedLabel {
                                    address_space,
                                    label,
                                    init_values,
                                    final_values: timestamped_values.values,
                                    init_hash: initial_hash,
                                    final_hash,
                                    final_timestamp: timestamped_values.timestamp,
                                }
                            })
                            .collect();
                        for l in &final_touched_labels {
                            hasher.receive(&l.init_values);
                            hasher.receive(&l.final_values);
                        }
                        self.touched_labels = TouchedLabels::Final(final_touched_labels);
                    }
                    _ => panic!("Cannot finalize after finalization"),
                }
            }
        *)
        Definition finalize
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [], [ H ], [ self; initial_memory; final_memory; hasher ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
                        [ CHUNK ]
                        [ F ]
                    ],
                  self
                |) in
              let initial_memory :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                        [
                          M.unevaluated_const
                            (mk_str (|
                              "openvm_circuit_system_memory_controller_MemoryImage_discriminant"
                            |))
                        ]
                        [ F ]
                    ],
                  initial_memory
                |) in
              let final_memory :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::collections::btree::map::BTreeMap")
                        []
                        [
                          Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::controller::TimestampedValues")
                            [ CHUNK ]
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ]
                    ],
                  final_memory
                |) in
              let hasher := M.alloc (| Ty.apply (Ty.path "&mut") [] [ H ], hasher |) in
              M.match_operator (|
                Ty.tuple [],
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::persistent::TouchedLabels")
                        [ CHUNK ]
                        [ F ]
                    ],
                  M.borrow (|
                    Pointer.Kind.MutRef,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::persistent::PersistentBoundaryChip",
                      "touched_labels"
                    |)
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "openvm_circuit::system::memory::persistent::TouchedLabels::Running",
                          0
                        |) in
                      let touched_labels :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&mut")
                            []
                            [
                              Ty.apply
                                (Ty.path "std::collections::hash::set::HashSet")
                                []
                                [
                                  Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                  Ty.path "rustc_hash::FxBuildHasher"
                                ]
                            ],
                          γ1_0
                        |) in
                      M.read (|
                        let~ final_touched_labels :
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                  [ CHUNK ]
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ] :=
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                  [ CHUNK ]
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_trait_method (|
                              "rayon::iter::ParallelIterator",
                              Ty.apply
                                (Ty.path "rayon::iter::map::Map")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "rayon::collections::hash_set::Iter")
                                    []
                                    [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ];
                                  Ty.function
                                    [
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ]
                                    ]
                                    (Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                      [ CHUNK ]
                                      [ F ])
                                ],
                              [],
                              [],
                              "collect",
                              [],
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                      [ CHUNK ]
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ]
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "rayon::iter::map::Map")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "rayon::collections::hash_set::Iter")
                                      []
                                      [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ];
                                    Ty.function
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ]
                                      ]
                                      (Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                        [ CHUNK ]
                                        [ F ])
                                  ],
                                M.get_trait_method (|
                                  "rayon::iter::ParallelIterator",
                                  Ty.apply
                                    (Ty.path "rayon::collections::hash_set::Iter")
                                    []
                                    [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ],
                                  [],
                                  [],
                                  "map",
                                  [],
                                  [
                                    Ty.function
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ]
                                      ]
                                      (Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                        [ CHUNK ]
                                        [ F ]);
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                      [ CHUNK ]
                                      [ F ]
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "rayon::collections::hash_set::Iter")
                                      []
                                      [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ],
                                    M.get_trait_method (|
                                      "rayon::iter::IntoParallelRefIterator",
                                      Ty.apply
                                        (Ty.path "std::collections::hash::set::HashSet")
                                        []
                                        [
                                          Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                          Ty.path "rustc_hash::FxBuildHasher"
                                        ],
                                      [],
                                      [],
                                      "par_iter",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| touched_labels |) |)
                                      |)
                                    ]
                                  |);
                                  M.closure
                                    (fun γ =>
                                      ltac:(M.monadic
                                        match γ with
                                        | [ α0 ] =>
                                          ltac:(M.monadic
                                            (M.match_operator (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                                [ CHUNK ]
                                                [ F ],
                                              M.alloc (|
                                                Ty.apply
                                                  (Ty.path "&")
                                                  []
                                                  [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ],
                                                α0
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ := M.deref (| M.read (| γ |) |) in
                                                    let γ1_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ1_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let address_space :=
                                                      M.copy (| Ty.path "u32", γ1_0 |) in
                                                    let label := M.copy (| Ty.path "u32", γ1_1 |) in
                                                    M.read (|
                                                      let~ pointer : Ty.path "u32" :=
                                                        M.call_closure (|
                                                          Ty.path "u32",
                                                          BinOp.Wrap.mul,
                                                          [
                                                            M.read (| label |);
                                                            M.cast (Ty.path "u32") CHUNK
                                                          ]
                                                        |) in
                                                      let~ init_values :
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ CHUNK ]
                                                            [ F ] :=
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ CHUNK ]
                                                            [ F ],
                                                          M.get_function (|
                                                            "core::array::from_fn",
                                                            [ CHUNK ],
                                                            [ F; Ty.function [ Ty.path "usize" ] F ]
                                                          |),
                                                          [
                                                            M.closure
                                                              (fun γ =>
                                                                ltac:(M.monadic
                                                                  match γ with
                                                                  | [ α0 ] =>
                                                                    ltac:(M.monadic
                                                                      (M.match_operator (|
                                                                        F,
                                                                        M.alloc (|
                                                                          Ty.path "usize",
                                                                          α0
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let i :=
                                                                                M.copy (|
                                                                                  Ty.path "usize",
                                                                                  γ
                                                                                |) in
                                                                              M.read (|
                                                                                M.deref (|
                                                                                  M.call_closure (|
                                                                                    Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [ F ],
                                                                                    M.get_associated_function (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "core::option::Option")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "&")
                                                                                            []
                                                                                            [ F ]
                                                                                        ],
                                                                                      "unwrap_or",
                                                                                      [],
                                                                                      []
                                                                                    |),
                                                                                    [
                                                                                      M.call_closure (|
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "core::option::Option")
                                                                                          []
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              []
                                                                                              [ F ]
                                                                                          ],
                                                                                        M.get_associated_function (|
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "openvm_circuit::system::memory::paged_vec::AddressMap")
                                                                                            [
                                                                                              Value.Integer
                                                                                                IntegerKind.Usize
                                                                                                4096
                                                                                            ]
                                                                                            [ F ],
                                                                                          "get",
                                                                                          [],
                                                                                          []
                                                                                        |),
                                                                                        [
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            M.deref (|
                                                                                              M.read (|
                                                                                                initial_memory
                                                                                              |)
                                                                                            |)
                                                                                          |);
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            M.deref (|
                                                                                              M.borrow (|
                                                                                                Pointer.Kind.Ref,
                                                                                                M.alloc (|
                                                                                                  Ty.tuple
                                                                                                    [
                                                                                                      Ty.path
                                                                                                        "u32";
                                                                                                      Ty.path
                                                                                                        "u32"
                                                                                                    ],
                                                                                                  Value.Tuple
                                                                                                    [
                                                                                                      M.read (|
                                                                                                        address_space
                                                                                                      |);
                                                                                                      M.call_closure (|
                                                                                                        Ty.path
                                                                                                          "u32",
                                                                                                        BinOp.Wrap.add,
                                                                                                        [
                                                                                                          M.read (|
                                                                                                            pointer
                                                                                                          |);
                                                                                                          M.cast
                                                                                                            (Ty.path
                                                                                                              "u32")
                                                                                                            (M.read (|
                                                                                                              i
                                                                                                            |))
                                                                                                        ]
                                                                                                      |)
                                                                                                    ]
                                                                                                |)
                                                                                              |)
                                                                                            |)
                                                                                          |)
                                                                                        ]
                                                                                      |);
                                                                                      M.borrow (|
                                                                                        Pointer.Kind.Ref,
                                                                                        M.deref (|
                                                                                          M.borrow (|
                                                                                            Pointer.Kind.Ref,
                                                                                            get_constant (|
                                                                                              "p3_field::field::FieldAlgebra::ZERO",
                                                                                              F
                                                                                            |)
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    ]
                                                                                  |)
                                                                                |)
                                                                              |)))
                                                                        ]
                                                                      |)))
                                                                  | _ =>
                                                                    M.impossible
                                                                      "wrong number of arguments"
                                                                  end))
                                                          ]
                                                        |) in
                                                      let~ initial_hash :
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ CHUNK ]
                                                            [ F ] :=
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ CHUNK ]
                                                            [ F ],
                                                          M.get_trait_method (|
                                                            "openvm_circuit::arch::hasher::Hasher",
                                                            H,
                                                            [ CHUNK ],
                                                            [ F ],
                                                            "hash",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| hasher |) |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  init_values
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |) in
                                                      let~ timestamped_values :
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::system::memory::controller::TimestampedValues")
                                                                [ CHUNK ]
                                                                [ F ]
                                                            ] :=
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::system::memory::controller::TimestampedValues")
                                                                [ CHUNK ]
                                                                [ F ]
                                                            ],
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit::system::memory::controller::TimestampedValues")
                                                                      [ CHUNK ]
                                                                      [ F ]
                                                                  ]
                                                              ],
                                                            "unwrap",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_circuit::system::memory::controller::TimestampedValues")
                                                                        [ CHUNK ]
                                                                        [ F ]
                                                                    ]
                                                                ],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "alloc::collections::btree::map::BTreeMap")
                                                                  []
                                                                  [
                                                                    Ty.tuple
                                                                      [ Ty.path "u32"; Ty.path "u32"
                                                                      ];
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit::system::memory::controller::TimestampedValues")
                                                                      [ CHUNK ]
                                                                      [ F ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                "get",
                                                                [],
                                                                [
                                                                  Ty.tuple
                                                                    [ Ty.path "u32"; Ty.path "u32" ]
                                                                ]
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| final_memory |)
                                                                  |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.alloc (|
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.path "u32";
                                                                            Ty.path "u32"
                                                                          ],
                                                                        Value.Tuple
                                                                          [
                                                                            M.read (|
                                                                              address_space
                                                                            |);
                                                                            M.read (| label |)
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |) in
                                                      let~ final_hash :
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ CHUNK ]
                                                            [ F ] :=
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ CHUNK ]
                                                            [ F ],
                                                          M.get_trait_method (|
                                                            "openvm_circuit::arch::hasher::Hasher",
                                                            H,
                                                            [ CHUNK ],
                                                            [ F ],
                                                            "hash",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| hasher |) |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.deref (|
                                                                      M.read (|
                                                                        timestamped_values
                                                                      |)
                                                                    |),
                                                                    "openvm_circuit::system::memory::controller::TimestampedValues",
                                                                    "values"
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |) in
                                                      M.alloc (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                                          [ CHUNK ]
                                                          [ F ],
                                                        Value.mkStructRecord
                                                          "openvm_circuit::system::memory::persistent::FinalTouchedLabel"
                                                          [ CHUNK ]
                                                          [ F ]
                                                          [
                                                            ("address_space",
                                                              M.read (| address_space |));
                                                            ("label", M.read (| label |));
                                                            ("init_values",
                                                              M.read (| init_values |));
                                                            ("final_values",
                                                              M.read (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.deref (|
                                                                    M.read (| timestamped_values |)
                                                                  |),
                                                                  "openvm_circuit::system::memory::controller::TimestampedValues",
                                                                  "values"
                                                                |)
                                                              |));
                                                            ("init_hash",
                                                              M.read (| initial_hash |));
                                                            ("final_hash", M.read (| final_hash |));
                                                            ("final_timestamp",
                                                              M.read (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.deref (|
                                                                    M.read (| timestamped_values |)
                                                                  |),
                                                                  "openvm_circuit::system::memory::controller::TimestampedValues",
                                                                  "timestamp"
                                                                |)
                                                              |))
                                                          ]
                                                      |)
                                                    |)))
                                              ]
                                            |)))
                                        | _ => M.impossible "wrong number of arguments"
                                        end))
                                ]
                              |)
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.read (|
                            M.use
                              (M.alloc (|
                                Ty.tuple [],
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                          [ CHUNK ]
                                          [ F ]
                                      ],
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                            [ CHUNK ]
                                            [ F ]
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::collect::IntoIterator",
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                                  [ CHUNK ]
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ],
                                        [],
                                        [],
                                        "into_iter",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, final_touched_labels |) ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let iter :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                                  [ CHUNK ]
                                                  [ F ]
                                              ],
                                            γ
                                          |) in
                                        M.read (|
                                          M.loop (|
                                            Ty.tuple [],
                                            ltac:(M.monadic
                                              (let~ _ : Ty.tuple [] :=
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                                              [ CHUNK ]
                                                              [ F ]
                                                          ]
                                                      ],
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                                                [ CHUNK ]
                                                                [ F ]
                                                            ]
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::iter::traits::iterator::Iterator",
                                                        Ty.apply
                                                          (Ty.path "core::slice::iter::Iter")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                                              [ CHUNK ]
                                                              [ F ]
                                                          ],
                                                        [],
                                                        [],
                                                        "next",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          M.deref (|
                                                            M.borrow (| Pointer.Kind.MutRef, iter |)
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let _ :=
                                                          M.is_struct_tuple (|
                                                            γ,
                                                            "core::option::Option::None"
                                                          |) in
                                                        M.never_to_any (|
                                                          M.read (| M.break (||) |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ0_0 :=
                                                          M.SubPointer.get_struct_tuple_field (|
                                                            γ,
                                                            "core::option::Option::Some",
                                                            0
                                                          |) in
                                                        let l :=
                                                          M.copy (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                                                  [ CHUNK ]
                                                                  [ F ]
                                                              ],
                                                            γ0_0
                                                          |) in
                                                        M.read (|
                                                          let~ _ : Ty.tuple [] :=
                                                            M.call_closure (|
                                                              Ty.tuple [],
                                                              M.get_trait_method (|
                                                                "openvm_circuit::system::memory::merkle::trace::SerialReceiver",
                                                                H,
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [ F ]
                                                                    ]
                                                                ],
                                                                "receive",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.deref (| M.read (| hasher |) |)
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [ F ]
                                                                    ],
                                                                  M.pointer_coercion
                                                                    M.PointerCoercion.Unsize
                                                                    (Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [ CHUNK ]
                                                                          [ F ]
                                                                      ])
                                                                    (Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ F ]
                                                                      ]),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.deref (|
                                                                              M.read (| l |)
                                                                            |),
                                                                            "openvm_circuit::system::memory::persistent::FinalTouchedLabel",
                                                                            "init_values"
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |) in
                                                          let~ _ : Ty.tuple [] :=
                                                            M.call_closure (|
                                                              Ty.tuple [],
                                                              M.get_trait_method (|
                                                                "openvm_circuit::system::memory::merkle::trace::SerialReceiver",
                                                                H,
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [ F ]
                                                                    ]
                                                                ],
                                                                "receive",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.deref (| M.read (| hasher |) |)
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [ F ]
                                                                    ],
                                                                  M.pointer_coercion
                                                                    M.PointerCoercion.Unsize
                                                                    (Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [ CHUNK ]
                                                                          [ F ]
                                                                      ])
                                                                    (Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "slice")
                                                                          []
                                                                          [ F ]
                                                                      ]),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.SubPointer.get_struct_record_field (|
                                                                            M.deref (|
                                                                              M.read (| l |)
                                                                            |),
                                                                            "openvm_circuit::system::memory::persistent::FinalTouchedLabel",
                                                                            "final_values"
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |) in
                                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                        |)))
                                                  ]
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                          |)
                                        |)))
                                  ]
                                |)
                              |))
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.write (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::persistent::PersistentBoundaryChip",
                              "touched_labels"
                            |),
                            Value.StructTuple
                              "openvm_circuit::system::memory::persistent::TouchedLabels::Final"
                              [ CHUNK ]
                              [ F ]
                              [ M.read (| final_touched_labels |) ]
                          |) in
                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.never_to_any (|
                        M.call_closure (|
                          Ty.path "never",
                          M.get_function (| "core::panicking::panic_fmt", [], [] |),
                          [
                            M.call_closure (|
                              Ty.path "core::fmt::Arguments",
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_const",
                                [ Value.Integer IntegerKind.Usize 1 ],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 1 ]
                                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                        Value.Array
                                          [ mk_str (| "Cannot finalize after finalization" |) ]
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_finalize :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsAssociatedFunction.C (Self CHUNK F) "finalize" (finalize CHUNK F).
        Admitted.
        Global Typeclasses Opaque finalize.
      End Impl_openvm_circuit_system_memory_persistent_PersistentBoundaryChip_CHUNK_F.
      
      Module Impl_openvm_stark_backend_chip_Chip_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_field_field_PrimeField32_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val_SC_for_openvm_circuit_system_memory_persistent_PersistentBoundaryChip_CHUNK_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val.
        Definition Self (CHUNK : Value.t) (SC : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
            [ CHUNK ]
            [
              Ty.associated_in_trait
                "p3_commit::domain::PolynomialSpace"
                []
                []
                (Ty.associated_in_trait
                  "p3_commit::pcs::Pcs"
                  []
                  [
                    Ty.associated_in_trait
                      "openvm_stark_backend::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenge";
                    Ty.associated_in_trait
                      "openvm_stark_backend::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenger"
                  ]
                  (Ty.associated_in_trait
                    "openvm_stark_backend::config::StarkGenericConfig"
                    []
                    []
                    SC
                    "Pcs")
                  "Domain")
                "Val"
            ].
        
        (*
            fn air(&self) -> AirRef<SC> {
                Arc::new(self.air.clone())
            }
        *)
        Definition air
            (CHUNK : Value.t)
            (SC : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK SC in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
                        [ CHUNK ]
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val"
                        ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ])
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ]),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::persistent::PersistentBoundaryAir")
                            [ CHUNK ]
                            [];
                          Ty.path "alloc::alloc::Global"
                        ])
                      (Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                          Ty.path "alloc::alloc::Global"
                        ]),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::persistent::PersistentBoundaryAir")
                              [ CHUNK ]
                              [];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::persistent::PersistentBoundaryAir")
                                [ CHUNK ]
                                [];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::persistent::PersistentBoundaryAir")
                              [ CHUNK ]
                              [],
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::persistent::PersistentBoundaryAir")
                                [ CHUNK ]
                                [],
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::persistent::PersistentBoundaryChip",
                                  "air"
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn generate_air_proof_input(self) -> AirProofInput<SC> {
                let trace = {
                    let width = PersistentBoundaryCols::<Val<SC>, CHUNK>::width();
                    // Boundary AIR should always present in order to fix the AIR ID of merkle AIR.
                    let mut height = (2 * self.touched_labels.len()).next_power_of_two();
                    if let Some(mut oh) = self.overridden_height {
                        oh = oh.next_power_of_two();
                        assert!(
                            oh >= height,
                            "Overridden height is less than the required height"
                        );
                        height = oh;
                    }
                    let mut rows = Val::<SC>::zero_vec(height * width);
        
                    let touched_labels = match self.touched_labels {
                        TouchedLabels::Final(touched_labels) => touched_labels,
                        _ => panic!("Cannot generate trace before finalization"),
                    };
        
                    rows.par_chunks_mut(2 * width)
                        .zip(touched_labels.into_par_iter())
                        .for_each(|(row, touched_label)| {
                            let (initial_row, final_row) = row.split_at_mut(width);
                            *initial_row.borrow_mut() = PersistentBoundaryCols {
                                expand_direction: Val::<SC>::ONE,
                                address_space: Val::<SC>::from_canonical_u32(touched_label.address_space),
                                leaf_label: Val::<SC>::from_canonical_u32(touched_label.label),
                                values: touched_label.init_values,
                                hash: touched_label.init_hash,
                                timestamp: Val::<SC>::from_canonical_u32(INITIAL_TIMESTAMP),
                            };
        
                            *final_row.borrow_mut() = PersistentBoundaryCols {
                                expand_direction: Val::<SC>::NEG_ONE,
                                address_space: Val::<SC>::from_canonical_u32(touched_label.address_space),
                                leaf_label: Val::<SC>::from_canonical_u32(touched_label.label),
                                values: touched_label.final_values,
                                hash: touched_label.final_hash,
                                timestamp: Val::<SC>::from_canonical_u32(touched_label.final_timestamp),
                            };
                        });
                    RowMajorMatrix::new(rows, width)
                };
                AirProofInput::simple_no_pis(trace)
            }
        *)
        Definition generate_air_proof_input
            (CHUNK : Value.t)
            (SC : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK SC in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
                    [ CHUNK ]
                    [
                      Ty.associated_in_trait
                        "p3_commit::domain::PolynomialSpace"
                        []
                        []
                        (Ty.associated_in_trait
                          "p3_commit::pcs::Pcs"
                          []
                          [
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge";
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenger"
                          ]
                          (Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Pcs")
                          "Domain")
                        "Val"
                    ],
                  self
                |) in
              M.read (|
                let~ trace :
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val";
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val";
                            Ty.path "alloc::alloc::Global"
                          ]
                      ] :=
                  M.read (|
                    let~ width : Ty.path "usize" :=
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                            [ CHUNK ]
                            [
                              Ty.associated_in_trait
                                "p3_commit::domain::PolynomialSpace"
                                []
                                []
                                (Ty.associated_in_trait
                                  "p3_commit::pcs::Pcs"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Pcs")
                                  "Domain")
                                "Val"
                            ],
                          "width",
                          [],
                          []
                        |),
                        []
                      |) in
                    let~ height : Ty.path "usize" :=
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.path "usize",
                          "next_power_of_two",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.mul,
                            [
                              Value.Integer IntegerKind.Usize 2;
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::persistent::TouchedLabels")
                                    [ CHUNK ]
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val"
                                    ],
                                  "len",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      self,
                                      "openvm_circuit::system::memory::persistent::PersistentBoundaryChip",
                                      "touched_labels"
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "openvm_circuit::system::memory::persistent::PersistentBoundaryChip",
                                  "overridden_height"
                                |) in
                              let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::option::Option::Some",
                                  0
                                |) in
                              let oh := M.copy (| Ty.path "usize", γ0_0 |) in
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.write (|
                                    oh,
                                    M.call_closure (|
                                      Ty.path "usize",
                                      M.get_associated_function (|
                                        Ty.path "usize",
                                        "next_power_of_two",
                                        [],
                                        []
                                      |),
                                      [ M.read (| oh |) ]
                                    |)
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use
                                              (M.alloc (|
                                                Ty.path "bool",
                                                UnOp.not (|
                                                  M.call_closure (|
                                                    Ty.path "bool",
                                                    BinOp.ge,
                                                    [ M.read (| oh |); M.read (| height |) ]
                                                  |)
                                                |)
                                              |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.never_to_any (|
                                            M.call_closure (|
                                              Ty.path "never",
                                              M.get_function (|
                                                "core::panicking::panic_fmt",
                                                [],
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::Arguments",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::Arguments",
                                                    "new_const",
                                                    [ Value.Integer IntegerKind.Usize 1 ],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 1 ]
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.path "str" ]
                                                              ],
                                                            Value.Array
                                                              [
                                                                mk_str (|
                                                                  "Overridden height is less than the required height"
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |)));
                                      fun γ => ltac:(M.monadic (Value.Tuple []))
                                    ]
                                  |) in
                                let~ _ : Ty.tuple [] := M.write (| height, M.read (| oh |) |) in
                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                              |)));
                          fun γ => ltac:(M.monadic (Value.Tuple []))
                        ]
                      |) in
                    let~ rows :
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val";
                            Ty.path "alloc::alloc::Global"
                          ] :=
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val";
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_trait_method (|
                          "p3_field::field::FieldAlgebra",
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val",
                          [],
                          [],
                          "zero_vec",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.path "usize",
                            BinOp.Wrap.mul,
                            [ M.read (| height |); M.read (| width |) ]
                          |)
                        ]
                      |) in
                    let~ touched_labels :
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                              [ CHUNK ]
                              [
                                Ty.associated_in_trait
                                  "p3_commit::domain::PolynomialSpace"
                                  []
                                  []
                                  (Ty.associated_in_trait
                                    "p3_commit::pcs::Pcs"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenge";
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenger"
                                    ]
                                    (Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Pcs")
                                    "Domain")
                                  "Val"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ] :=
                      M.match_operator (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                              [ CHUNK ]
                              [
                                Ty.associated_in_trait
                                  "p3_commit::domain::PolynomialSpace"
                                  []
                                  []
                                  (Ty.associated_in_trait
                                    "p3_commit::pcs::Pcs"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenge";
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenger"
                                    ]
                                    (Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Pcs")
                                    "Domain")
                                  "Val"
                              ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "openvm_circuit::system::memory::persistent::PersistentBoundaryChip",
                          "touched_labels"
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "openvm_circuit::system::memory::persistent::TouchedLabels::Final",
                                  0
                                |) in
                              let touched_labels :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                        [ CHUNK ]
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  γ0_0
                                |) in
                              M.read (| touched_labels |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.never_to_any (|
                                M.call_closure (|
                                  Ty.path "never",
                                  M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                  [
                                    M.call_closure (|
                                      Ty.path "core::fmt::Arguments",
                                      M.get_associated_function (|
                                        Ty.path "core::fmt::Arguments",
                                        "new_const",
                                        [ Value.Integer IntegerKind.Usize 1 ],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 1 ]
                                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                                Value.Array
                                                  [
                                                    mk_str (|
                                                      "Cannot generate trace before finalization"
                                                    |)
                                                  ]
                                              |)
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.call_closure (|
                        Ty.tuple [],
                        M.get_trait_method (|
                          "rayon::iter::ParallelIterator",
                          Ty.apply
                            (Ty.path "rayon::iter::zip::Zip")
                            []
                            [
                              Ty.apply
                                (Ty.path "rayon::slice::chunks::ChunksMut")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val"
                                ];
                              Ty.apply
                                (Ty.path "rayon::vec::IntoIter")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                    [ CHUNK ]
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val"
                                    ]
                                ]
                            ],
                          [],
                          [],
                          "for_each",
                          [],
                          [
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val"
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                      [ CHUNK ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val"
                                      ]
                                  ]
                              ]
                              (Ty.tuple [])
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "rayon::iter::zip::Zip")
                              []
                              [
                                Ty.apply
                                  (Ty.path "rayon::slice::chunks::ChunksMut")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val"
                                  ];
                                Ty.apply
                                  (Ty.path "rayon::vec::IntoIter")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                      [ CHUNK ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val"
                                      ]
                                  ]
                              ],
                            M.get_trait_method (|
                              "rayon::iter::IndexedParallelIterator",
                              Ty.apply
                                (Ty.path "rayon::slice::chunks::ChunksMut")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val"
                                ],
                              [],
                              [],
                              "zip",
                              [],
                              [
                                Ty.apply
                                  (Ty.path "rayon::vec::IntoIter")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                      [ CHUNK ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val"
                                      ]
                                  ]
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "rayon::slice::chunks::ChunksMut")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val"
                                  ],
                                M.get_trait_method (|
                                  "rayon::slice::ParallelSliceMut",
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val"
                                    ],
                                  [],
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val"
                                  ],
                                  "par_chunks_mut",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_commit::domain::PolynomialSpace"
                                                  []
                                                  []
                                                  (Ty.associated_in_trait
                                                    "p3_commit::pcs::Pcs"
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenge";
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenger"
                                                    ]
                                                    (Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Pcs")
                                                    "Domain")
                                                  "Val"
                                              ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::deref::DerefMut",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::domain::PolynomialSpace"
                                                []
                                                []
                                                (Ty.associated_in_trait
                                                  "p3_commit::pcs::Pcs"
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenge";
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenger"
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Pcs")
                                                  "Domain")
                                                "Val";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          [],
                                          "deref_mut",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.MutRef, rows |) ]
                                      |)
                                    |)
                                  |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.mul,
                                    [ Value.Integer IntegerKind.Usize 2; M.read (| width |) ]
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "rayon::vec::IntoIter")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                      [ CHUNK ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val"
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "rayon::iter::IntoParallelIterator",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                        [ CHUNK ]
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val"
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [],
                                  "into_par_iter",
                                  [],
                                  []
                                |),
                                [ M.read (| touched_labels |) ]
                              |)
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_commit::domain::PolynomialSpace"
                                                      []
                                                      []
                                                      (Ty.associated_in_trait
                                                        "p3_commit::pcs::Pcs"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenge";
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenger"
                                                        ]
                                                        (Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Pcs")
                                                        "Domain")
                                                      "Val"
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                              [ CHUNK ]
                                              [
                                                Ty.associated_in_trait
                                                  "p3_commit::domain::PolynomialSpace"
                                                  []
                                                  []
                                                  (Ty.associated_in_trait
                                                    "p3_commit::pcs::Pcs"
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenge";
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenger"
                                                    ]
                                                    (Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Pcs")
                                                    "Domain")
                                                  "Val"
                                              ]
                                          ],
                                        α0
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let row :=
                                              M.copy (|
                                                Ty.apply
                                                  (Ty.path "&mut")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::domain::PolynomialSpace"
                                                          []
                                                          []
                                                          (Ty.associated_in_trait
                                                            "p3_commit::pcs::Pcs"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenge";
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenger"
                                                            ]
                                                            (Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Pcs")
                                                            "Domain")
                                                          "Val"
                                                      ]
                                                  ],
                                                γ0_0
                                              |) in
                                            let touched_label :=
                                              M.copy (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::persistent::FinalTouchedLabel")
                                                  [ CHUNK ]
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_commit::domain::PolynomialSpace"
                                                      []
                                                      []
                                                      (Ty.associated_in_trait
                                                        "p3_commit::pcs::Pcs"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenge";
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenger"
                                                        ]
                                                        (Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Pcs")
                                                        "Domain")
                                                      "Val"
                                                  ],
                                                γ0_1
                                              |) in
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (|
                                                Ty.tuple
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_commit::domain::PolynomialSpace"
                                                              []
                                                              []
                                                              (Ty.associated_in_trait
                                                                "p3_commit::pcs::Pcs"
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenge";
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenger"
                                                                ]
                                                                (Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Pcs")
                                                                "Domain")
                                                              "Val"
                                                          ]
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_commit::domain::PolynomialSpace"
                                                              []
                                                              []
                                                              (Ty.associated_in_trait
                                                                "p3_commit::pcs::Pcs"
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenge";
                                                                  Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Challenger"
                                                                ]
                                                                (Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Pcs")
                                                                "Domain")
                                                              "Val"
                                                          ]
                                                      ]
                                                  ],
                                                M.call_closure (|
                                                  Ty.tuple
                                                    [
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_commit::domain::PolynomialSpace"
                                                                []
                                                                []
                                                                (Ty.associated_in_trait
                                                                  "p3_commit::pcs::Pcs"
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenge";
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenger"
                                                                  ]
                                                                  (Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Pcs")
                                                                  "Domain")
                                                                "Val"
                                                            ]
                                                        ];
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_commit::domain::PolynomialSpace"
                                                                []
                                                                []
                                                                (Ty.associated_in_trait
                                                                  "p3_commit::pcs::Pcs"
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenge";
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenger"
                                                                  ]
                                                                  (Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Pcs")
                                                                  "Domain")
                                                                "Val"
                                                            ]
                                                        ]
                                                    ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::domain::PolynomialSpace"
                                                          []
                                                          []
                                                          (Ty.associated_in_trait
                                                            "p3_commit::pcs::Pcs"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenge";
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenger"
                                                            ]
                                                            (Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Pcs")
                                                            "Domain")
                                                          "Val"
                                                      ],
                                                    "split_at_mut",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.MutRef,
                                                      M.deref (| M.read (| row |) |)
                                                    |);
                                                    M.read (| width |)
                                                  ]
                                                |)
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let initial_row :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_commit::domain::PolynomialSpace"
                                                                  []
                                                                  []
                                                                  (Ty.associated_in_trait
                                                                    "p3_commit::pcs::Pcs"
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Challenge";
                                                                      Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Challenger"
                                                                    ]
                                                                    (Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Pcs")
                                                                    "Domain")
                                                                  "Val"
                                                              ]
                                                          ],
                                                        γ0_0
                                                      |) in
                                                    let final_row :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_commit::domain::PolynomialSpace"
                                                                  []
                                                                  []
                                                                  (Ty.associated_in_trait
                                                                    "p3_commit::pcs::Pcs"
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Challenge";
                                                                      Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Challenger"
                                                                    ]
                                                                    (Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Pcs")
                                                                    "Domain")
                                                                  "Val"
                                                              ]
                                                          ],
                                                        γ0_1
                                                      |) in
                                                    M.read (|
                                                      let~ _ : Ty.tuple [] :=
                                                        M.write (|
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&mut")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                                                                    [ CHUNK ]
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_commit::domain::PolynomialSpace"
                                                                        []
                                                                        []
                                                                        (Ty.associated_in_trait
                                                                          "p3_commit::pcs::Pcs"
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenge";
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenger"
                                                                          ]
                                                                          (Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Pcs")
                                                                          "Domain")
                                                                        "Val"
                                                                    ]
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::borrow::BorrowMut",
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::domain::PolynomialSpace"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain")
                                                                      "Val"
                                                                  ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                                                                    [ CHUNK ]
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_commit::domain::PolynomialSpace"
                                                                        []
                                                                        []
                                                                        (Ty.associated_in_trait
                                                                          "p3_commit::pcs::Pcs"
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenge";
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenger"
                                                                          ]
                                                                          (Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Pcs")
                                                                          "Domain")
                                                                        "Val"
                                                                    ]
                                                                ],
                                                                "borrow_mut",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.deref (|
                                                                    M.read (| initial_row |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |),
                                                          Value.mkStructRecord
                                                            "openvm_circuit::system::memory::persistent::PersistentBoundaryCols"
                                                            [ CHUNK ]
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_commit::domain::PolynomialSpace"
                                                                []
                                                                []
                                                                (Ty.associated_in_trait
                                                                  "p3_commit::pcs::Pcs"
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenge";
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenger"
                                                                  ]
                                                                  (Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Pcs")
                                                                  "Domain")
                                                                "Val"
                                                            ]
                                                            [
                                                              ("expand_direction",
                                                                M.read (|
                                                                  get_constant (|
                                                                    "p3_field::field::FieldAlgebra::ONE",
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::domain::PolynomialSpace"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain")
                                                                      "Val"
                                                                  |)
                                                                |));
                                                              ("address_space",
                                                                M.call_closure (|
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::domain::PolynomialSpace"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "p3_commit::pcs::Pcs"
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenger"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Pcs")
                                                                      "Domain")
                                                                    "Val",
                                                                  M.get_trait_method (|
                                                                    "p3_field::field::FieldAlgebra",
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::domain::PolynomialSpace"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain")
                                                                      "Val",
                                                                    [],
                                                                    [],
                                                                    "from_canonical_u32",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        touched_label,
                                                                        "openvm_circuit::system::memory::persistent::FinalTouchedLabel",
                                                                        "address_space"
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |));
                                                              ("leaf_label",
                                                                M.call_closure (|
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::domain::PolynomialSpace"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "p3_commit::pcs::Pcs"
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenger"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Pcs")
                                                                      "Domain")
                                                                    "Val",
                                                                  M.get_trait_method (|
                                                                    "p3_field::field::FieldAlgebra",
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::domain::PolynomialSpace"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain")
                                                                      "Val",
                                                                    [],
                                                                    [],
                                                                    "from_canonical_u32",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        touched_label,
                                                                        "openvm_circuit::system::memory::persistent::FinalTouchedLabel",
                                                                        "label"
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |));
                                                              ("values",
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    touched_label,
                                                                    "openvm_circuit::system::memory::persistent::FinalTouchedLabel",
                                                                    "init_values"
                                                                  |)
                                                                |));
                                                              ("hash",
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    touched_label,
                                                                    "openvm_circuit::system::memory::persistent::FinalTouchedLabel",
                                                                    "init_hash"
                                                                  |)
                                                                |));
                                                              ("timestamp",
                                                                M.call_closure (|
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::domain::PolynomialSpace"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "p3_commit::pcs::Pcs"
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenger"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Pcs")
                                                                      "Domain")
                                                                    "Val",
                                                                  M.get_trait_method (|
                                                                    "p3_field::field::FieldAlgebra",
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::domain::PolynomialSpace"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain")
                                                                      "Val",
                                                                    [],
                                                                    [],
                                                                    "from_canonical_u32",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (|
                                                                      get_constant (|
                                                                        "openvm_circuit::system::memory::offline::INITIAL_TIMESTAMP",
                                                                        Ty.path "u32"
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |))
                                                            ]
                                                        |) in
                                                      let~ _ : Ty.tuple [] :=
                                                        M.write (|
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&mut")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                                                                    [ CHUNK ]
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_commit::domain::PolynomialSpace"
                                                                        []
                                                                        []
                                                                        (Ty.associated_in_trait
                                                                          "p3_commit::pcs::Pcs"
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenge";
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenger"
                                                                          ]
                                                                          (Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Pcs")
                                                                          "Domain")
                                                                        "Val"
                                                                    ]
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::borrow::BorrowMut",
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::domain::PolynomialSpace"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain")
                                                                      "Val"
                                                                  ],
                                                                [],
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                                                                    [ CHUNK ]
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_commit::domain::PolynomialSpace"
                                                                        []
                                                                        []
                                                                        (Ty.associated_in_trait
                                                                          "p3_commit::pcs::Pcs"
                                                                          []
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenge";
                                                                            Ty.associated_in_trait
                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                              []
                                                                              []
                                                                              SC
                                                                              "Challenger"
                                                                          ]
                                                                          (Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Pcs")
                                                                          "Domain")
                                                                        "Val"
                                                                    ]
                                                                ],
                                                                "borrow_mut",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.deref (|
                                                                    M.read (| final_row |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |),
                                                          Value.mkStructRecord
                                                            "openvm_circuit::system::memory::persistent::PersistentBoundaryCols"
                                                            [ CHUNK ]
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_commit::domain::PolynomialSpace"
                                                                []
                                                                []
                                                                (Ty.associated_in_trait
                                                                  "p3_commit::pcs::Pcs"
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenge";
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenger"
                                                                  ]
                                                                  (Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Pcs")
                                                                  "Domain")
                                                                "Val"
                                                            ]
                                                            [
                                                              ("expand_direction",
                                                                M.read (|
                                                                  get_constant (|
                                                                    "p3_field::field::FieldAlgebra::NEG_ONE",
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::domain::PolynomialSpace"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain")
                                                                      "Val"
                                                                  |)
                                                                |));
                                                              ("address_space",
                                                                M.call_closure (|
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::domain::PolynomialSpace"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "p3_commit::pcs::Pcs"
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenger"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Pcs")
                                                                      "Domain")
                                                                    "Val",
                                                                  M.get_trait_method (|
                                                                    "p3_field::field::FieldAlgebra",
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::domain::PolynomialSpace"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain")
                                                                      "Val",
                                                                    [],
                                                                    [],
                                                                    "from_canonical_u32",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        touched_label,
                                                                        "openvm_circuit::system::memory::persistent::FinalTouchedLabel",
                                                                        "address_space"
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |));
                                                              ("leaf_label",
                                                                M.call_closure (|
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::domain::PolynomialSpace"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "p3_commit::pcs::Pcs"
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenger"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Pcs")
                                                                      "Domain")
                                                                    "Val",
                                                                  M.get_trait_method (|
                                                                    "p3_field::field::FieldAlgebra",
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::domain::PolynomialSpace"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain")
                                                                      "Val",
                                                                    [],
                                                                    [],
                                                                    "from_canonical_u32",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        touched_label,
                                                                        "openvm_circuit::system::memory::persistent::FinalTouchedLabel",
                                                                        "label"
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |));
                                                              ("values",
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    touched_label,
                                                                    "openvm_circuit::system::memory::persistent::FinalTouchedLabel",
                                                                    "final_values"
                                                                  |)
                                                                |));
                                                              ("hash",
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    touched_label,
                                                                    "openvm_circuit::system::memory::persistent::FinalTouchedLabel",
                                                                    "final_hash"
                                                                  |)
                                                                |));
                                                              ("timestamp",
                                                                M.call_closure (|
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::domain::PolynomialSpace"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "p3_commit::pcs::Pcs"
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenger"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Pcs")
                                                                      "Domain")
                                                                    "Val",
                                                                  M.get_trait_method (|
                                                                    "p3_field::field::FieldAlgebra",
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::domain::PolynomialSpace"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain")
                                                                      "Val",
                                                                    [],
                                                                    [],
                                                                    "from_canonical_u32",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        touched_label,
                                                                        "openvm_circuit::system::memory::persistent::FinalTouchedLabel",
                                                                        "final_timestamp"
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |))
                                                            ]
                                                        |) in
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                    |)))
                                              ]
                                            |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val";
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.associated_in_trait
                                "p3_commit::domain::PolynomialSpace"
                                []
                                []
                                (Ty.associated_in_trait
                                  "p3_commit::pcs::Pcs"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Pcs")
                                  "Domain")
                                "Val";
                              Ty.path "alloc::alloc::Global"
                            ]
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "p3_matrix::dense::DenseMatrix")
                          []
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val";
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.associated_in_trait
                                  "p3_commit::domain::PolynomialSpace"
                                  []
                                  []
                                  (Ty.associated_in_trait
                                    "p3_commit::pcs::Pcs"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenge";
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenger"
                                    ]
                                    (Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Pcs")
                                    "Domain")
                                  "Val";
                                Ty.path "alloc::alloc::Global"
                              ]
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "p3_matrix::dense::DenseMatrix")
                            []
                            [
                              Ty.associated_in_trait
                                "p3_commit::domain::PolynomialSpace"
                                []
                                []
                                (Ty.associated_in_trait
                                  "p3_commit::pcs::Pcs"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Pcs")
                                  "Domain")
                                "Val";
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val";
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          "new",
                          [],
                          []
                        |),
                        [ M.read (| rows |); M.read (| width |) ]
                      |)
                    |)
                  |) in
                M.alloc (|
                  Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ],
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                        []
                        [ SC ],
                      "simple_no_pis",
                      [],
                      []
                    |),
                    [ M.read (| trace |) ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (CHUNK : Value.t) (SC : Ty.t),
          M.IsTraitInstance
            "openvm_stark_backend::chip::Chip"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ SC ]
            (Self CHUNK SC)
            (* Instance *)
            [
              ("air", InstanceField.Method (air CHUNK SC));
              ("generate_air_proof_input", InstanceField.Method (generate_air_proof_input CHUNK SC))
            ].
      End Impl_openvm_stark_backend_chip_Chip_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_field_field_PrimeField32_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val_SC_for_openvm_circuit_system_memory_persistent_PersistentBoundaryChip_CHUNK_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val.
      
      Module Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_circuit_system_memory_persistent_PersistentBoundaryChip_CHUNK_F.
        Definition Self (CHUNK : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
            [ CHUNK ]
            [ F ].
        
        (*
            fn air_name(&self) -> String {
                "Boundary".to_string()
            }
        *)
        Definition air_name
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
                        [ CHUNK ]
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.path "alloc::string::String",
                M.get_trait_method (|
                  "alloc::string::ToString",
                  Ty.path "str",
                  [],
                  [],
                  "to_string",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Boundary" |) |) |) ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn current_trace_height(&self) -> usize {
                2 * self.touched_labels.len()
            }
        *)
        Definition current_trace_height
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
                        [ CHUNK ]
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.path "usize",
                BinOp.Wrap.mul,
                [
                  Value.Integer IntegerKind.Usize 2;
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::persistent::TouchedLabels")
                        [ CHUNK ]
                        [ F ],
                      "len",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::memory::persistent::PersistentBoundaryChip",
                          "touched_labels"
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn trace_width(&self) -> usize {
                PersistentBoundaryCols::<F, CHUNK>::width()
            }
        *)
        Definition trace_width
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::persistent::PersistentBoundaryChip")
                        [ CHUNK ]
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::persistent::PersistentBoundaryCols")
                    [ CHUNK ]
                    [ F ],
                  "width",
                  [],
                  []
                |),
                []
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsTraitInstance
            "openvm_stark_backend::chip::ChipUsageGetter"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self CHUNK F)
            (* Instance *)
            [
              ("air_name", InstanceField.Method (air_name CHUNK F));
              ("current_trace_height", InstanceField.Method (current_trace_height CHUNK F));
              ("trace_width", InstanceField.Method (trace_width CHUNK F))
            ].
      End Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_circuit_system_memory_persistent_PersistentBoundaryChip_CHUNK_F.
    End persistent.
  End memory.
End system.
