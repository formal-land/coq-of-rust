(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module system.
  Module memory.
    Module tree.
      (*
      Enum MemoryNode
      {
        const_params := [ "CHUNK" ];
        ty_params := [ "F" ];
        variants :=
          [
            {
              name := "Leaf";
              item := StructRecord [ ("values", Ty.apply (Ty.path "array") [ CHUNK ] [ F ]) ];
            };
            {
              name := "NonLeaf";
              item :=
                StructRecord
                  [
                    ("hash", Ty.apply (Ty.path "array") [ CHUNK ] [ F ]);
                    ("left",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                            [ CHUNK ]
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ]);
                    ("right",
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                            [ CHUNK ]
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ])
                  ];
            }
          ];
      }
      *)
      
      Axiom IsDiscriminant_MemoryNode_Leaf :
        M.IsDiscriminant "openvm_circuit::system::memory::tree::MemoryNode::Leaf" 0.
      Axiom IsDiscriminant_MemoryNode_NonLeaf :
        M.IsDiscriminant "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf" 1.
      
      Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_p3_field_field_PrimeField32_F_for_openvm_circuit_system_memory_tree_MemoryNode_CHUNK_F.
        Definition Self (CHUNK : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "openvm_circuit::system::memory::tree::MemoryNode") [ CHUNK ] [ F ].
        
        (* Clone *)
        Definition clone
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                        [ CHUNK ]
                        [ F ]
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                  [ CHUNK ]
                  [ F ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::tree::MemoryNode::Leaf",
                          "values"
                        |) in
                      let __self_0 :=
                        M.alloc (|
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ],
                          γ1_0
                        |) in
                      Value.mkStructRecord
                        "openvm_circuit::system::memory::tree::MemoryNode::Leaf"
                        [ CHUNK ]
                        [ F ]
                        [
                          ("values",
                            M.call_closure (|
                              Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |)
                              ]
                            |))
                        ]));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf",
                          "hash"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf",
                          "left"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf",
                          "right"
                        |) in
                      let __self_0 :=
                        M.alloc (|
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ],
                          γ1_0
                        |) in
                      let __self_1 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                    [ CHUNK ]
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_1
                        |) in
                      let __self_2 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                    [ CHUNK ]
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_2
                        |) in
                      Value.mkStructRecord
                        "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf"
                        [ CHUNK ]
                        [ F ]
                        [
                          ("hash",
                            M.call_closure (|
                              Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |)
                              ]
                            |));
                          ("left",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                    [ CHUNK ]
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                      [ CHUNK ]
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |)
                              ]
                            |));
                          ("right",
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                    [ CHUNK ]
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                      [ CHUNK ]
                                      [ F ];
                                    Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_2 |) |) |)
                              ]
                            |))
                        ]))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self CHUNK F)
            (* Instance *) [ ("clone", InstanceField.Method (clone CHUNK F)) ].
      End Impl_core_clone_Clone_where_core_clone_Clone_F_where_p3_field_field_PrimeField32_F_for_openvm_circuit_system_memory_tree_MemoryNode_CHUNK_F.
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_PrimeField32_F_for_openvm_circuit_system_memory_tree_MemoryNode_CHUNK_F.
        Definition Self (CHUNK : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "openvm_circuit::system::memory::tree::MemoryNode") [ CHUNK ] [ F ].
        
        (* Debug *)
        Definition fmt
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                        [ CHUNK ]
                        [ F ]
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::tree::MemoryNode::Leaf",
                          "values"
                        |) in
                      let __self_0 :=
                        M.alloc (|
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field1_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Leaf" |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "values" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ]
                                ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf",
                          "hash"
                        |) in
                      let γ1_1 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf",
                          "left"
                        |) in
                      let γ1_2 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf",
                          "right"
                        |) in
                      let __self_0 :=
                        M.alloc (|
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ],
                          γ1_0
                        |) in
                      let __self_1 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                    [ CHUNK ]
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_1
                        |) in
                      let __self_2 :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                    [ CHUNK ]
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_2
                        |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                        M.get_associated_function (|
                          Ty.path "core::fmt::Formatter",
                          "debug_struct_field3_finish",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "NonLeaf" |) |) |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "hash" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |) ]
                          |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "left" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                        [ CHUNK ]
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_1 |) |) |) ]
                          |);
                          M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "right" |) |) |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                            M.pointer_coercion
                              M.PointerCoercion.Unsize
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::tree::MemoryNode")
                                            [ CHUNK ]
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ]
                                ])
                              (Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, __self_2 |) |)
                              |)
                            ]
                          |)
                        ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self CHUNK F)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt CHUNK F)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_PrimeField32_F_for_openvm_circuit_system_memory_tree_MemoryNode_CHUNK_F.
      
      Module Impl_core_marker_StructuralPartialEq_where_p3_field_field_PrimeField32_F_for_openvm_circuit_system_memory_tree_MemoryNode_CHUNK_F.
        Definition Self (CHUNK : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "openvm_circuit::system::memory::tree::MemoryNode") [ CHUNK ] [ F ].
        
        Axiom Implements :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsTraitInstance
            "core::marker::StructuralPartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self CHUNK F)
            (* Instance *) [].
      End Impl_core_marker_StructuralPartialEq_where_p3_field_field_PrimeField32_F_for_openvm_circuit_system_memory_tree_MemoryNode_CHUNK_F.
      
      Module Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_F_where_p3_field_field_PrimeField32_F_openvm_circuit_system_memory_tree_MemoryNode_CHUNK_F_for_openvm_circuit_system_memory_tree_MemoryNode_CHUNK_F.
        Definition Self (CHUNK : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "openvm_circuit::system::memory::tree::MemoryNode") [ CHUNK ] [ F ].
        
        (* PartialEq *)
        Definition eq
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [], [], [ self; other ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                        [ CHUNK ]
                        [ F ]
                    ],
                  self
                |) in
              let other :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                        [ CHUNK ]
                        [ F ]
                    ],
                  other
                |) in
              M.read (|
                let~ __self_discr : Ty.path "isize" :=
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                          [ CHUNK ]
                          [ F ]
                      ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                  |) in
                let~ __arg1_discr : Ty.path "isize" :=
                  M.call_closure (|
                    Ty.path "isize",
                    M.get_function (|
                      "core::intrinsics::discriminant_value",
                      [],
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                          [ CHUNK ]
                          [ F ]
                      ]
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| other |) |) |) ]
                  |) in
                M.alloc (|
                  Ty.path "bool",
                  LogicalOp.and (|
                    M.call_closure (|
                      Ty.path "bool",
                      BinOp.eq,
                      [ M.read (| __self_discr |); M.read (| __arg1_discr |) ]
                    |),
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.path "bool",
                        M.alloc (|
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                    [ CHUNK ]
                                    [ F ]
                                ];
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                    [ CHUNK ]
                                    [ F ]
                                ]
                            ],
                          Value.Tuple [ M.read (| self |); M.read (| other |) ]
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.deref (| M.read (| γ0_0 |) |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_circuit::system::memory::tree::MemoryNode::Leaf",
                                  "values"
                                |) in
                              let __self_0 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ],
                                  γ2_0
                                |) in
                              let γ0_1 := M.deref (| M.read (| γ0_1 |) |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_circuit::system::memory::tree::MemoryNode::Leaf",
                                  "values"
                                |) in
                              let __arg1_0 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ],
                                  γ2_0
                                |) in
                              M.call_closure (|
                                Ty.path "bool",
                                M.get_trait_method (|
                                  "core::cmp::PartialEq",
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ],
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ]
                                  ],
                                  "eq",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                  M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                                ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_0 := M.deref (| M.read (| γ0_0 |) |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf",
                                  "hash"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf",
                                  "left"
                                |) in
                              let γ2_2 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_0,
                                  "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf",
                                  "right"
                                |) in
                              let __self_0 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ],
                                  γ2_0
                                |) in
                              let __self_1 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::tree::MemoryNode")
                                            [ CHUNK ]
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  γ2_1
                                |) in
                              let __self_2 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::tree::MemoryNode")
                                            [ CHUNK ]
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  γ2_2
                                |) in
                              let γ0_1 := M.deref (| M.read (| γ0_1 |) |) in
                              let γ2_0 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf",
                                  "hash"
                                |) in
                              let γ2_1 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf",
                                  "left"
                                |) in
                              let γ2_2 :=
                                M.SubPointer.get_struct_record_field (|
                                  γ0_1,
                                  "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf",
                                  "right"
                                |) in
                              let __arg1_0 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ],
                                  γ2_0
                                |) in
                              let __arg1_1 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::tree::MemoryNode")
                                            [ CHUNK ]
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  γ2_1
                                |) in
                              let __arg1_2 :=
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "alloc::sync::Arc")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::tree::MemoryNode")
                                            [ CHUNK ]
                                            [ F ];
                                          Ty.path "alloc::alloc::Global"
                                        ]
                                    ],
                                  γ2_2
                                |) in
                              LogicalOp.and (|
                                LogicalOp.and (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ]
                                      ],
                                      "eq",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.Ref, __self_0 |);
                                      M.borrow (| Pointer.Kind.Ref, __arg1_0 |)
                                    ]
                                  |),
                                  ltac:(M.monadic
                                    (M.call_closure (|
                                      Ty.path "bool",
                                      M.get_trait_method (|
                                        "core::cmp::PartialEq",
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::tree::MemoryNode")
                                                  [ CHUNK ]
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::memory::tree::MemoryNode")
                                                    [ CHUNK ]
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ],
                                        "eq",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (| Pointer.Kind.Ref, __self_1 |);
                                        M.borrow (| Pointer.Kind.Ref, __arg1_1 |)
                                      ]
                                    |)))
                                |),
                                ltac:(M.monadic
                                  (M.call_closure (|
                                    Ty.path "bool",
                                    M.get_trait_method (|
                                      "core::cmp::PartialEq",
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::sync::Arc")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::tree::MemoryNode")
                                                [ CHUNK ]
                                                [ F ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::tree::MemoryNode")
                                                  [ CHUNK ]
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ]
                                      ],
                                      "eq",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (| Pointer.Kind.Ref, __self_2 |);
                                      M.borrow (| Pointer.Kind.Ref, __arg1_2 |)
                                    ]
                                  |)))
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.never_to_any (|
                                M.call_closure (|
                                  Ty.path "never",
                                  M.get_function (| "core::intrinsics::unreachable", [], [] |),
                                  []
                                |)
                              |)))
                        ]
                      |)))
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsTraitInstance
            "core::cmp::PartialEq"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [ Ty.apply (Ty.path "openvm_circuit::system::memory::tree::MemoryNode") [ CHUNK ] [ F ]
            ]
            (Self CHUNK F)
            (* Instance *) [ ("eq", InstanceField.Method (eq CHUNK F)) ].
      End Impl_core_cmp_PartialEq_where_core_cmp_PartialEq_F_where_p3_field_field_PrimeField32_F_openvm_circuit_system_memory_tree_MemoryNode_CHUNK_F_for_openvm_circuit_system_memory_tree_MemoryNode_CHUNK_F.
      
      Module Impl_openvm_circuit_system_memory_tree_MemoryNode_CHUNK_F.
        Definition Self (CHUNK : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply (Ty.path "openvm_circuit::system::memory::tree::MemoryNode") [ CHUNK ] [ F ].
        
        (*
            pub fn hash(&self) -> [F; CHUNK] {
                match self {
                    Leaf { values: hash } => *hash,
                    NonLeaf { hash, .. } => *hash,
                }
            }
        *)
        Definition hash
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                        [ CHUNK ]
                        [ F ]
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                self,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::tree::MemoryNode::Leaf",
                          "values"
                        |) in
                      let hash :=
                        M.alloc (|
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ],
                          γ1_0
                        |) in
                      M.read (| M.deref (| M.read (| hash |) |) |)));
                  fun γ =>
                    ltac:(M.monadic
                      (let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_record_field (|
                          γ,
                          "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf",
                          "hash"
                        |) in
                      let hash :=
                        M.alloc (|
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ],
                          γ1_0
                        |) in
                      M.read (| M.deref (| M.read (| hash |) |) |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_hash :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsAssociatedFunction.C (Self CHUNK F) "hash" (hash CHUNK F).
        Admitted.
        Global Typeclasses Opaque hash.
        
        (*
            pub fn new_leaf(values: [F; CHUNK]) -> Self {
                Leaf { values }
            }
        *)
        Definition new_leaf
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [], [], [ values ] =>
            ltac:(M.monadic
              (let values := M.alloc (| Ty.apply (Ty.path "array") [ CHUNK ] [ F ], values |) in
              Value.mkStructRecord
                "openvm_circuit::system::memory::tree::MemoryNode::Leaf"
                [ CHUNK ]
                [ F ]
                [ ("values", M.read (| values |)) ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_new_leaf :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsAssociatedFunction.C (Self CHUNK F) "new_leaf" (new_leaf CHUNK F).
        Admitted.
        Global Typeclasses Opaque new_leaf.
        
        (*
            pub fn new_nonleaf(
                left: Arc<MemoryNode<CHUNK, F>>,
                right: Arc<MemoryNode<CHUNK, F>>,
                hasher: &mut impl HasherChip<CHUNK, F>,
            ) -> Self {
                NonLeaf {
                    hash: hasher.compress_and_record(&left.hash(), &right.hash()),
                    left,
                    right,
                }
            }
        *)
        Definition new_nonleaf
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [], [ impl_HasherChip_CHUNK__F_ ], [ _ as left; _ as right; hasher ] =>
            ltac:(M.monadic
              (let left :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                        [ CHUNK ]
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  left
                |) in
              let right :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                        [ CHUNK ]
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  right
                |) in
              let hasher :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ impl_HasherChip_CHUNK__F_ ], hasher |) in
              Value.mkStructRecord
                "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf"
                [ CHUNK ]
                [ F ]
                [
                  ("hash",
                    M.call_closure (|
                      Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                      M.get_trait_method (|
                        "openvm_circuit::arch::hasher::HasherChip",
                        impl_HasherChip_CHUNK__F_,
                        [ CHUNK ],
                        [ F ],
                        "compress_and_record",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| hasher |) |) |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                M.call_closure (|
                                  Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                      [ CHUNK ]
                                      [ F ],
                                    "hash",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::tree::MemoryNode")
                                                [ CHUNK ]
                                                [ F ]
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::tree::MemoryNode")
                                                  [ CHUNK ]
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [],
                                            "deref",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, left |) ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          |)
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                M.call_closure (|
                                  Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                      [ CHUNK ]
                                      [ F ],
                                    "hash",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::tree::MemoryNode")
                                                [ CHUNK ]
                                                [ F ]
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::deref::Deref",
                                            Ty.apply
                                              (Ty.path "alloc::sync::Arc")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::tree::MemoryNode")
                                                  [ CHUNK ]
                                                  [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [],
                                            "deref",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, right |) ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("left", M.read (| left |));
                  ("right", M.read (| right |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_new_nonleaf :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsAssociatedFunction.C (Self CHUNK F) "new_nonleaf" (new_nonleaf CHUNK F).
        Admitted.
        Global Typeclasses Opaque new_nonleaf.
        
        (*
            pub fn construct_uniform(
                height: usize,
                leaf_value: [F; CHUNK],
                hasher: &impl Hasher<CHUNK, F>,
            ) -> MemoryNode<CHUNK, F> {
                if height == 0 {
                    Self::new_leaf(leaf_value)
                } else {
                    let child = Arc::new(Self::construct_uniform(height - 1, leaf_value, hasher));
                    NonLeaf {
                        hash: hasher.compress(&child.hash(), &child.hash()),
                        left: child.clone(),
                        right: child,
                    }
                }
            }
        *)
        Definition construct_uniform
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [], [ impl_Hasher_CHUNK__F_ ], [ height; leaf_value; hasher ] =>
            ltac:(M.monadic
              (let height := M.alloc (| Ty.path "usize", height |) in
              let leaf_value :=
                M.alloc (| Ty.apply (Ty.path "array") [ CHUNK ] [ F ], leaf_value |) in
              let hasher :=
                M.alloc (| Ty.apply (Ty.path "&") [] [ impl_Hasher_CHUNK__F_ ], hasher |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                  [ CHUNK ]
                  [ F ],
                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            Ty.path "bool",
                            M.call_closure (|
                              Ty.path "bool",
                              BinOp.eq,
                              [ M.read (| height |); Value.Integer IntegerKind.Usize 0 ]
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                          [ CHUNK ]
                          [ F ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                            [ CHUNK ]
                            [ F ],
                          "new_leaf",
                          [],
                          []
                        |),
                        [ M.read (| leaf_value |) ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.read (|
                        let~ child :
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                  [ CHUNK ]
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ] :=
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                  [ CHUNK ]
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                    [ CHUNK ]
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "new",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                  [ CHUNK ]
                                  [ F ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                    [ CHUNK ]
                                    [ F ],
                                  "construct_uniform",
                                  [],
                                  [ impl_Hasher_CHUNK__F_ ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.sub,
                                    [ M.read (| height |); Value.Integer IntegerKind.Usize 1 ]
                                  |);
                                  M.read (| leaf_value |);
                                  M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| hasher |) |) |)
                                ]
                              |)
                            ]
                          |) in
                        M.alloc (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                            [ CHUNK ]
                            [ F ],
                          Value.mkStructRecord
                            "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf"
                            [ CHUNK ]
                            [ F ]
                            [
                              ("hash",
                                M.call_closure (|
                                  Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                  M.get_trait_method (|
                                    "openvm_circuit::arch::hasher::Hasher",
                                    impl_Hasher_CHUNK__F_,
                                    [ CHUNK ],
                                    [ F ],
                                    "compress",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (| M.read (| hasher |) |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                            M.call_closure (|
                                              Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::tree::MemoryNode")
                                                  [ CHUNK ]
                                                  [ F ],
                                                "hash",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit::system::memory::tree::MemoryNode")
                                                            [ CHUNK ]
                                                            [ F ]
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::ops::deref::Deref",
                                                        Ty.apply
                                                          (Ty.path "alloc::sync::Arc")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_circuit::system::memory::tree::MemoryNode")
                                                              [ CHUNK ]
                                                              [ F ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        [],
                                                        "deref",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.borrow (| Pointer.Kind.Ref, child |) ]
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                            M.call_closure (|
                                              Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::tree::MemoryNode")
                                                  [ CHUNK ]
                                                  [ F ],
                                                "hash",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit::system::memory::tree::MemoryNode")
                                                            [ CHUNK ]
                                                            [ F ]
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::ops::deref::Deref",
                                                        Ty.apply
                                                          (Ty.path "alloc::sync::Arc")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_circuit::system::memory::tree::MemoryNode")
                                                              [ CHUNK ]
                                                              [ F ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        [],
                                                        "deref",
                                                        [],
                                                        []
                                                      |),
                                                      [ M.borrow (| Pointer.Kind.Ref, child |) ]
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |));
                              ("left",
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                        [ CHUNK ]
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  M.get_trait_method (|
                                    "core::clone::Clone",
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::tree::MemoryNode")
                                          [ CHUNK ]
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    [],
                                    "clone",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, child |) ]
                                |));
                              ("right", M.read (| child |))
                            ]
                        |)
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_construct_uniform :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsAssociatedFunction.C (Self CHUNK F) "construct_uniform" (construct_uniform CHUNK F).
        Admitted.
        Global Typeclasses Opaque construct_uniform.
        
        (*
            fn from_memory(
                memory: &[(u64, F)],
                lookup_range: Range<usize>,
                length: u64,
                from: u64,
                hasher: &(impl Hasher<CHUNK, F> + Sync),
                zero_leaf: &MemoryNode<CHUNK, F>,
            ) -> MemoryNode<CHUNK, F> {
                if length == CHUNK as u64 {
                    if lookup_range.is_empty() {
                        zero_leaf.clone()
                    } else {
                        debug_assert_eq!(memory[lookup_range.start].0, from);
                        let mut values = [F::ZERO; CHUNK];
                        for (index, value) in memory[lookup_range].iter() {
                            values[(index % CHUNK as u64) as usize] = *value;
                        }
                        MemoryNode::new_leaf(hasher.hash(&values))
                    }
                } else if lookup_range.is_empty() {
                    let leaf_value = hasher.hash(&[F::ZERO; CHUNK]);
                    MemoryNode::construct_uniform(
                        (length / CHUNK as u64).trailing_zeros() as usize,
                        leaf_value,
                        hasher,
                    )
                } else {
                    let midpoint = from + length / 2;
                    let mid = {
                        let mut left = lookup_range.start;
                        let mut right = lookup_range.end;
                        if memory[left].0 >= midpoint {
                            left
                        } else {
                            while left + 1 < right {
                                let mid = left + (right - left) / 2;
                                if memory[mid].0 < midpoint {
                                    left = mid;
                                } else {
                                    right = mid;
                                }
                            }
                            right
                        }
                    };
                    let (left, right) = join(
                        || {
                            Self::from_memory(
                                memory,
                                lookup_range.start..mid,
                                length >> 1,
                                from,
                                hasher,
                                zero_leaf,
                            )
                        },
                        || {
                            Self::from_memory(
                                memory,
                                mid..lookup_range.end,
                                length >> 1,
                                midpoint,
                                hasher,
                                zero_leaf,
                            )
                        },
                    );
                    NonLeaf {
                        hash: hasher.compress(&left.hash(), &right.hash()),
                        left: Arc::new(left),
                        right: Arc::new(right),
                    }
                }
            }
        *)
        Definition from_memory
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [],
              [ impl_Hasher_CHUNK__F___plus__Sync ],
              [ memory; lookup_range; length; from; hasher; zero_leaf ] =>
            ltac:(M.monadic
              (let memory :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.apply (Ty.path "slice") [] [ Ty.tuple [ Ty.path "u64"; F ] ] ],
                  memory
                |) in
              let lookup_range :=
                M.alloc (|
                  Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                  lookup_range
                |) in
              let length := M.alloc (| Ty.path "u64", length |) in
              let from := M.alloc (| Ty.path "u64", from |) in
              let hasher :=
                M.alloc (|
                  Ty.apply (Ty.path "&") [] [ impl_Hasher_CHUNK__F___plus__Sync ],
                  hasher
                |) in
              let zero_leaf :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                        [ CHUNK ]
                        [ F ]
                    ],
                  zero_leaf
                |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                  [ CHUNK ]
                  [ F ],
                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.use
                          (M.alloc (|
                            Ty.path "bool",
                            M.call_closure (|
                              Ty.path "bool",
                              BinOp.eq,
                              [ M.read (| length |); M.cast (Ty.path "u64") CHUNK ]
                            |)
                          |)) in
                      let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                      M.match_operator (|
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                          [ CHUNK ]
                          [ F ],
                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    Ty.path "bool",
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          []
                                          [ Ty.path "usize" ],
                                        "is_empty",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, lookup_range |) ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                  [ CHUNK ]
                                  [ F ],
                                M.get_trait_method (|
                                  "core::clone::Clone",
                                  Ty.apply
                                    (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                    [ CHUNK ]
                                    [ F ],
                                  [],
                                  [],
                                  "clone",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (| M.read (| zero_leaf |) |)
                                  |)
                                ]
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.read (|
                                            let~ _ : Ty.tuple [] :=
                                              M.match_operator (|
                                                Ty.tuple [],
                                                M.alloc (|
                                                  Ty.tuple
                                                    [
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "u64" ];
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "u64" ]
                                                    ],
                                                  Value.Tuple
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.SubPointer.get_tuple_field (|
                                                          M.SubPointer.get_array_field (|
                                                            M.deref (| M.read (| memory |) |),
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                lookup_range,
                                                                "core::ops::range::Range",
                                                                "start"
                                                              |)
                                                            |)
                                                          |),
                                                          0
                                                        |)
                                                      |);
                                                      M.borrow (| Pointer.Kind.Ref, from |)
                                                    ]
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                      let γ0_1 :=
                                                        M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                      let left_val :=
                                                        M.copy (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "u64" ],
                                                          γ0_0
                                                        |) in
                                                      let right_val :=
                                                        M.copy (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "u64" ],
                                                          γ0_1
                                                        |) in
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ :=
                                                                M.use
                                                                  (M.alloc (|
                                                                    Ty.path "bool",
                                                                    UnOp.not (|
                                                                      M.call_closure (|
                                                                        Ty.path "bool",
                                                                        BinOp.eq,
                                                                        [
                                                                          M.read (|
                                                                            M.deref (|
                                                                              M.read (| left_val |)
                                                                            |)
                                                                          |);
                                                                          M.read (|
                                                                            M.deref (|
                                                                              M.read (| right_val |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)) in
                                                              let _ :=
                                                                is_constant_or_break_match (|
                                                                  M.read (| γ |),
                                                                  Value.Bool true
                                                                |) in
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  let~ kind :
                                                                      Ty.path
                                                                        "core::panicking::AssertKind" :=
                                                                    Value.StructTuple
                                                                      "core::panicking::AssertKind::Eq"
                                                                      []
                                                                      []
                                                                      [] in
                                                                  M.alloc (|
                                                                    Ty.path "never",
                                                                    M.call_closure (|
                                                                      Ty.path "never",
                                                                      M.get_function (|
                                                                        "core::panicking::assert_failed",
                                                                        [],
                                                                        [
                                                                          Ty.path "u64";
                                                                          Ty.path "u64"
                                                                        ]
                                                                      |),
                                                                      [
                                                                        M.read (| kind |);
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  left_val
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  right_val
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        Value.StructTuple
                                                                          "core::option::Option::None"
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "core::fmt::Arguments"
                                                                          ]
                                                                          []
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)));
                                                          fun γ => ltac:(M.monadic (Value.Tuple []))
                                                        ]
                                                      |)))
                                                ]
                                              |) in
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                          |)));
                                      fun γ => ltac:(M.monadic (Value.Tuple []))
                                    ]
                                  |) in
                                let~ values : Ty.apply (Ty.path "array") [ CHUNK ] [ F ] :=
                                  lib.repeat (|
                                    M.read (|
                                      get_constant (| "p3_field::field::FieldAlgebra::ZERO", F |)
                                    |),
                                    CHUNK
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.read (|
                                    M.use
                                      (M.alloc (|
                                        Ty.tuple [],
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [ Ty.tuple [ Ty.path "u64"; F ] ],
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                []
                                                [ Ty.tuple [ Ty.path "u64"; F ] ],
                                              M.get_trait_method (|
                                                "core::iter::traits::collect::IntoIterator",
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  []
                                                  [ Ty.tuple [ Ty.path "u64"; F ] ],
                                                [],
                                                [],
                                                "into_iter",
                                                [],
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [ Ty.tuple [ Ty.path "u64"; F ] ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "slice")
                                                      []
                                                      [ Ty.tuple [ Ty.path "u64"; F ] ],
                                                    "iter",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [ Ty.tuple [ Ty.path "u64"; F ] ]
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::ops::index::Index",
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [ Ty.tuple [ Ty.path "u64"; F ] ],
                                                            [],
                                                            [
                                                              Ty.apply
                                                                (Ty.path "core::ops::range::Range")
                                                                []
                                                                [ Ty.path "usize" ]
                                                            ],
                                                            "index",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| memory |) |)
                                                            |);
                                                            M.read (| lookup_range |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let iter :=
                                                  M.copy (|
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [ Ty.tuple [ Ty.path "u64"; F ] ],
                                                    γ
                                                  |) in
                                                M.read (|
                                                  M.loop (|
                                                    Ty.tuple [],
                                                    ltac:(M.monadic
                                                      (let~ _ : Ty.tuple [] :=
                                                        M.match_operator (|
                                                          Ty.tuple [],
                                                          M.alloc (|
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.tuple [ Ty.path "u64"; F ] ]
                                                              ],
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "core::option::Option")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [ Ty.tuple [ Ty.path "u64"; F ]
                                                                    ]
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::iter::traits::iterator::Iterator",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  []
                                                                  [ Ty.tuple [ Ty.path "u64"; F ] ],
                                                                [],
                                                                [],
                                                                "next",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      iter
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let _ :=
                                                                  M.is_struct_tuple (|
                                                                    γ,
                                                                    "core::option::Option::None"
                                                                  |) in
                                                                M.never_to_any (|
                                                                  M.read (| M.break (||) |)
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ0_0 :=
                                                                  M.SubPointer.get_struct_tuple_field (|
                                                                    γ,
                                                                    "core::option::Option::Some",
                                                                    0
                                                                  |) in
                                                                let γ0_0 :=
                                                                  M.deref (| M.read (| γ0_0 |) |) in
                                                                let γ2_0 :=
                                                                  M.SubPointer.get_tuple_field (|
                                                                    γ0_0,
                                                                    0
                                                                  |) in
                                                                let γ2_1 :=
                                                                  M.SubPointer.get_tuple_field (|
                                                                    γ0_0,
                                                                    1
                                                                  |) in
                                                                let index :=
                                                                  M.alloc (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [ Ty.path "u64" ],
                                                                    γ2_0
                                                                  |) in
                                                                let value :=
                                                                  M.alloc (|
                                                                    Ty.apply (Ty.path "&") [] [ F ],
                                                                    γ2_1
                                                                  |) in
                                                                M.read (|
                                                                  let~ _ : Ty.tuple [] :=
                                                                    M.write (|
                                                                      M.SubPointer.get_array_field (|
                                                                        values,
                                                                        M.cast
                                                                          (Ty.path "usize")
                                                                          (M.call_closure (|
                                                                            Ty.path "u64",
                                                                            M.get_trait_method (|
                                                                              "core::ops::arith::Rem",
                                                                              Ty.apply
                                                                                (Ty.path "&")
                                                                                []
                                                                                [ Ty.path "u64" ],
                                                                              [],
                                                                              [ Ty.path "u64" ],
                                                                              "rem",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.read (| index |);
                                                                              M.cast
                                                                                (Ty.path "u64")
                                                                                CHUNK
                                                                            ]
                                                                          |))
                                                                      |),
                                                                      M.read (|
                                                                        M.deref (|
                                                                          M.read (| value |)
                                                                        |)
                                                                      |)
                                                                    |) in
                                                                  M.alloc (|
                                                                    Ty.tuple [],
                                                                    Value.Tuple []
                                                                  |)
                                                                |)))
                                                          ]
                                                        |) in
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                                  |)
                                                |)))
                                          ]
                                        |)
                                      |))
                                  |) in
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                    [ CHUNK ]
                                    [ F ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                      [ CHUNK ]
                                      [ F ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                        [ CHUNK ]
                                        [ F ],
                                      "new_leaf",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                        M.get_trait_method (|
                                          "openvm_circuit::arch::hasher::Hasher",
                                          impl_Hasher_CHUNK__F___plus__Sync,
                                          [ CHUNK ],
                                          [ F ],
                                          "hash",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| hasher |) |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.borrow (| Pointer.Kind.Ref, values |) |)
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |)
                              |)))
                        ]
                      |)));
                  fun γ =>
                    ltac:(M.monadic
                      (M.match_operator (|
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                          [ CHUNK ]
                          [ F ],
                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ :=
                                M.use
                                  (M.alloc (|
                                    Ty.path "bool",
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          []
                                          [ Ty.path "usize" ],
                                        "is_empty",
                                        [],
                                        []
                                      |),
                                      [ M.borrow (| Pointer.Kind.Ref, lookup_range |) ]
                                    |)
                                  |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.read (|
                                let~ leaf_value : Ty.apply (Ty.path "array") [ CHUNK ] [ F ] :=
                                  M.call_closure (|
                                    Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                    M.get_trait_method (|
                                      "openvm_circuit::arch::hasher::Hasher",
                                      impl_Hasher_CHUNK__F___plus__Sync,
                                      [ CHUNK ],
                                      [ F ],
                                      "hash",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| hasher |) |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                              lib.repeat (|
                                                M.read (|
                                                  get_constant (|
                                                    "p3_field::field::FieldAlgebra::ZERO",
                                                    F
                                                  |)
                                                |),
                                                CHUNK
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |) in
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                    [ CHUNK ]
                                    [ F ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                      [ CHUNK ]
                                      [ F ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                        [ CHUNK ]
                                        [ F ],
                                      "construct_uniform",
                                      [],
                                      [ impl_Hasher_CHUNK__F___plus__Sync ]
                                    |),
                                    [
                                      M.cast
                                        (Ty.path "usize")
                                        (M.call_closure (|
                                          Ty.path "u32",
                                          M.get_associated_function (|
                                            Ty.path "u64",
                                            "trailing_zeros",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.path "u64",
                                              BinOp.Wrap.div,
                                              [ M.read (| length |); M.cast (Ty.path "u64") CHUNK ]
                                            |)
                                          ]
                                        |));
                                      M.read (| leaf_value |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (| M.read (| hasher |) |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (M.read (|
                                let~ midpoint : Ty.path "u64" :=
                                  M.call_closure (|
                                    Ty.path "u64",
                                    BinOp.Wrap.add,
                                    [
                                      M.read (| from |);
                                      M.call_closure (|
                                        Ty.path "u64",
                                        BinOp.Wrap.div,
                                        [ M.read (| length |); Value.Integer IntegerKind.U64 2 ]
                                      |)
                                    ]
                                  |) in
                                let~ mid : Ty.path "usize" :=
                                  M.read (|
                                    let~ left : Ty.path "usize" :=
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          lookup_range,
                                          "core::ops::range::Range",
                                          "start"
                                        |)
                                      |) in
                                    let~ right : Ty.path "usize" :=
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          lookup_range,
                                          "core::ops::range::Range",
                                          "end"
                                        |)
                                      |) in
                                    M.alloc (|
                                      Ty.path "usize",
                                      M.match_operator (|
                                        Ty.path "usize",
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    Ty.path "bool",
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      BinOp.ge,
                                                      [
                                                        M.read (|
                                                          M.SubPointer.get_tuple_field (|
                                                            M.SubPointer.get_array_field (|
                                                              M.deref (| M.read (| memory |) |),
                                                              M.read (| left |)
                                                            |),
                                                            0
                                                          |)
                                                        |);
                                                        M.read (| midpoint |)
                                                      ]
                                                    |)
                                                  |)) in
                                              let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.read (| left |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.read (|
                                                    M.loop (|
                                                      Ty.tuple [],
                                                      ltac:(M.monadic
                                                        (M.alloc (|
                                                          Ty.tuple [],
                                                          M.match_operator (|
                                                            Ty.tuple [],
                                                            M.alloc (|
                                                              Ty.tuple [],
                                                              Value.Tuple []
                                                            |),
                                                            [
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (let γ :=
                                                                    M.use
                                                                      (M.alloc (|
                                                                        Ty.path "bool",
                                                                        M.call_closure (|
                                                                          Ty.path "bool",
                                                                          BinOp.lt,
                                                                          [
                                                                            M.call_closure (|
                                                                              Ty.path "usize",
                                                                              BinOp.Wrap.add,
                                                                              [
                                                                                M.read (| left |);
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  1
                                                                              ]
                                                                            |);
                                                                            M.read (| right |)
                                                                          ]
                                                                        |)
                                                                      |)) in
                                                                  let _ :=
                                                                    is_constant_or_break_match (|
                                                                      M.read (| γ |),
                                                                      Value.Bool true
                                                                    |) in
                                                                  M.read (|
                                                                    let~ mid : Ty.path "usize" :=
                                                                      M.call_closure (|
                                                                        Ty.path "usize",
                                                                        BinOp.Wrap.add,
                                                                        [
                                                                          M.read (| left |);
                                                                          M.call_closure (|
                                                                            Ty.path "usize",
                                                                            BinOp.Wrap.div,
                                                                            [
                                                                              M.call_closure (|
                                                                                Ty.path "usize",
                                                                                BinOp.Wrap.sub,
                                                                                [
                                                                                  M.read (|
                                                                                    right
                                                                                  |);
                                                                                  M.read (| left |)
                                                                                ]
                                                                              |);
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                2
                                                                            ]
                                                                          |)
                                                                        ]
                                                                      |) in
                                                                    M.alloc (|
                                                                      Ty.tuple [],
                                                                      M.match_operator (|
                                                                        Ty.tuple [],
                                                                        M.alloc (|
                                                                          Ty.tuple [],
                                                                          Value.Tuple []
                                                                        |),
                                                                        [
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (let γ :=
                                                                                M.use
                                                                                  (M.alloc (|
                                                                                    Ty.path "bool",
                                                                                    M.call_closure (|
                                                                                      Ty.path
                                                                                        "bool",
                                                                                      BinOp.lt,
                                                                                      [
                                                                                        M.read (|
                                                                                          M.SubPointer.get_tuple_field (|
                                                                                            M.SubPointer.get_array_field (|
                                                                                              M.deref (|
                                                                                                M.read (|
                                                                                                  memory
                                                                                                |)
                                                                                              |),
                                                                                              M.read (|
                                                                                                mid
                                                                                              |)
                                                                                            |),
                                                                                            0
                                                                                          |)
                                                                                        |);
                                                                                        M.read (|
                                                                                          midpoint
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)) in
                                                                              let _ :=
                                                                                is_constant_or_break_match (|
                                                                                  M.read (| γ |),
                                                                                  Value.Bool true
                                                                                |) in
                                                                              M.read (|
                                                                                let~ _ :
                                                                                    Ty.tuple [] :=
                                                                                  M.write (|
                                                                                    left,
                                                                                    M.read (| mid |)
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Ty.tuple [],
                                                                                  Value.Tuple []
                                                                                |)
                                                                              |)));
                                                                          fun γ =>
                                                                            ltac:(M.monadic
                                                                              (M.read (|
                                                                                let~ _ :
                                                                                    Ty.tuple [] :=
                                                                                  M.write (|
                                                                                    right,
                                                                                    M.read (| mid |)
                                                                                  |) in
                                                                                M.alloc (|
                                                                                  Ty.tuple [],
                                                                                  Value.Tuple []
                                                                                |)
                                                                              |)))
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)));
                                                              fun γ =>
                                                                ltac:(M.monadic
                                                                  (M.never_to_any (|
                                                                    M.read (|
                                                                      let~ _ : Ty.tuple [] :=
                                                                        M.never_to_any (|
                                                                          M.read (| M.break (||) |)
                                                                        |) in
                                                                      M.alloc (|
                                                                        Ty.tuple [],
                                                                        Value.Tuple []
                                                                      |)
                                                                    |)
                                                                  |)))
                                                            ]
                                                          |)
                                                        |)))
                                                    |)
                                                  |) in
                                                right
                                              |)))
                                        ]
                                      |)
                                    |)
                                  |) in
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                    [ CHUNK ]
                                    [ F ],
                                  M.match_operator (|
                                    Ty.apply
                                      (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                                      [ CHUNK ]
                                      [ F ],
                                    M.alloc (|
                                      Ty.tuple
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::tree::MemoryNode")
                                            [ CHUNK ]
                                            [ F ];
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::tree::MemoryNode")
                                            [ CHUNK ]
                                            [ F ]
                                        ],
                                      M.call_closure (|
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::tree::MemoryNode")
                                              [ CHUNK ]
                                              [ F ];
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::tree::MemoryNode")
                                              [ CHUNK ]
                                              [ F ]
                                          ],
                                        M.get_function (|
                                          "rayon_core::join::join",
                                          [],
                                          [
                                            Ty.function
                                              []
                                              (Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::tree::MemoryNode")
                                                [ CHUNK ]
                                                [ F ]);
                                            Ty.function
                                              []
                                              (Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::tree::MemoryNode")
                                                [ CHUNK ]
                                                [ F ]);
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::tree::MemoryNode")
                                              [ CHUNK ]
                                              [ F ];
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::tree::MemoryNode")
                                              [ CHUNK ]
                                              [ F ]
                                          ]
                                        |),
                                        [
                                          M.closure
                                            (fun γ =>
                                              ltac:(M.monadic
                                                match γ with
                                                | [ α0 ] =>
                                                  ltac:(M.monadic
                                                    (M.match_operator (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::system::memory::tree::MemoryNode")
                                                        [ CHUNK ]
                                                        [ F ],
                                                      M.alloc (| Ty.tuple [], α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::system::memory::tree::MemoryNode")
                                                                [ CHUNK ]
                                                                [ F ],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit::system::memory::tree::MemoryNode")
                                                                  [ CHUNK ]
                                                                  [ F ],
                                                                "from_memory",
                                                                [],
                                                                [ impl_Hasher_CHUNK__F___plus__Sync
                                                                ]
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| memory |) |)
                                                                |);
                                                                Value.mkStructRecord
                                                                  "core::ops::range::Range"
                                                                  []
                                                                  [ Ty.path "usize" ]
                                                                  [
                                                                    ("start",
                                                                      M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          lookup_range,
                                                                          "core::ops::range::Range",
                                                                          "start"
                                                                        |)
                                                                      |));
                                                                    ("end_", M.read (| mid |))
                                                                  ];
                                                                M.call_closure (|
                                                                  Ty.path "u64",
                                                                  BinOp.Wrap.shr,
                                                                  [
                                                                    M.read (| length |);
                                                                    Value.Integer IntegerKind.I32 1
                                                                  ]
                                                                |);
                                                                M.read (| from |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| hasher |) |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| zero_leaf |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)))
                                                      ]
                                                    |)))
                                                | _ => M.impossible "wrong number of arguments"
                                                end));
                                          M.closure
                                            (fun γ =>
                                              ltac:(M.monadic
                                                match γ with
                                                | [ α0 ] =>
                                                  ltac:(M.monadic
                                                    (M.match_operator (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::system::memory::tree::MemoryNode")
                                                        [ CHUNK ]
                                                        [ F ],
                                                      M.alloc (| Ty.tuple [], α0 |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::system::memory::tree::MemoryNode")
                                                                [ CHUNK ]
                                                                [ F ],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit::system::memory::tree::MemoryNode")
                                                                  [ CHUNK ]
                                                                  [ F ],
                                                                "from_memory",
                                                                [],
                                                                [ impl_Hasher_CHUNK__F___plus__Sync
                                                                ]
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| memory |) |)
                                                                |);
                                                                Value.mkStructRecord
                                                                  "core::ops::range::Range"
                                                                  []
                                                                  [ Ty.path "usize" ]
                                                                  [
                                                                    ("start", M.read (| mid |));
                                                                    ("end_",
                                                                      M.read (|
                                                                        M.SubPointer.get_struct_record_field (|
                                                                          lookup_range,
                                                                          "core::ops::range::Range",
                                                                          "end"
                                                                        |)
                                                                      |))
                                                                  ];
                                                                M.call_closure (|
                                                                  Ty.path "u64",
                                                                  BinOp.Wrap.shr,
                                                                  [
                                                                    M.read (| length |);
                                                                    Value.Integer IntegerKind.I32 1
                                                                  ]
                                                                |);
                                                                M.read (| midpoint |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| hasher |) |)
                                                                |);
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| zero_leaf |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)))
                                                      ]
                                                    |)))
                                                | _ => M.impossible "wrong number of arguments"
                                                end))
                                        ]
                                      |)
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                          let left :=
                                            M.copy (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::tree::MemoryNode")
                                                [ CHUNK ]
                                                [ F ],
                                              γ0_0
                                            |) in
                                          let right :=
                                            M.copy (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::tree::MemoryNode")
                                                [ CHUNK ]
                                                [ F ],
                                              γ0_1
                                            |) in
                                          Value.mkStructRecord
                                            "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf"
                                            [ CHUNK ]
                                            [ F ]
                                            [
                                              ("hash",
                                                M.call_closure (|
                                                  Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                                  M.get_trait_method (|
                                                    "openvm_circuit::arch::hasher::Hasher",
                                                    impl_Hasher_CHUNK__F___plus__Sync,
                                                    [ CHUNK ],
                                                    [ F ],
                                                    "compress",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| hasher |) |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ CHUNK ]
                                                              [ F ],
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ CHUNK ]
                                                                [ F ],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit::system::memory::tree::MemoryNode")
                                                                  [ CHUNK ]
                                                                  [ F ],
                                                                "hash",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  left
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ CHUNK ]
                                                              [ F ],
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ CHUNK ]
                                                                [ F ],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit::system::memory::tree::MemoryNode")
                                                                  [ CHUNK ]
                                                                  [ F ],
                                                                "hash",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  right
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |));
                                              ("left",
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::system::memory::tree::MemoryNode")
                                                        [ CHUNK ]
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::sync::Arc")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::system::memory::tree::MemoryNode")
                                                          [ CHUNK ]
                                                          [ F ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| left |) ]
                                                |));
                                              ("right",
                                                M.call_closure (|
                                                  Ty.apply
                                                    (Ty.path "alloc::sync::Arc")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::system::memory::tree::MemoryNode")
                                                        [ CHUNK ]
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::sync::Arc")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::system::memory::tree::MemoryNode")
                                                          [ CHUNK ]
                                                          [ F ];
                                                        Ty.path "alloc::alloc::Global"
                                                      ],
                                                    "new",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.read (| right |) ]
                                                |))
                                            ]))
                                    ]
                                  |)
                                |)
                              |)))
                        ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_from_memory :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsAssociatedFunction.C (Self CHUNK F) "from_memory" (from_memory CHUNK F).
        Admitted.
        Global Typeclasses Opaque from_memory.
        
        (*
            pub fn tree_from_memory(
                memory_dimensions: MemoryDimensions,
                memory: &MemoryImage<F>,
                hasher: &(impl Hasher<CHUNK, F> + Sync),
            ) -> MemoryNode<CHUNK, F> {
                // Construct a Vec that includes the address space in the label calculation,
                // representing the entire memory tree.
                let memory_items = memory
                    .items()
                    .filter(|((_, ptr), _)| *ptr as usize / CHUNK < (1 << memory_dimensions.address_height))
                    .map(|((address_space, pointer), value)| {
                        (
                            memory_dimensions.label_to_index((address_space, pointer / CHUNK as u32))
                                * CHUNK as u64
                                + (pointer % CHUNK as u32) as u64,
                            value,
                        )
                    })
                    .collect::<Vec<_>>();
                debug_assert!(memory_items.is_sorted_by_key(|(addr, _)| addr));
                debug_assert!(
                    memory_items.last().map_or(0, |(addr, _)| *addr)
                        < ((CHUNK as u64) << memory_dimensions.overall_height())
                );
                let zero_leaf = MemoryNode::new_leaf(hasher.hash(&[F::ZERO; CHUNK]));
                Self::from_memory(
                    &memory_items,
                    0..memory_items.len(),
                    (CHUNK as u64) << memory_dimensions.overall_height(),
                    0,
                    hasher,
                    &zero_leaf,
                )
            }
        *)
        Definition tree_from_memory
            (CHUNK : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self CHUNK F in
          match ε, τ, α with
          | [], [ impl_Hasher_CHUNK__F___plus__Sync ], [ memory_dimensions; memory; hasher ] =>
            ltac:(M.monadic
              (let memory_dimensions :=
                M.alloc (|
                  Ty.path
                    "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                  memory_dimensions
                |) in
              let memory :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                        [
                          M.unevaluated_const
                            (mk_str (|
                              "openvm_circuit_system_memory_controller_MemoryImage_discriminant"
                            |))
                        ]
                        [ F ]
                    ],
                  memory
                |) in
              let hasher :=
                M.alloc (|
                  Ty.apply (Ty.path "&") [] [ impl_Hasher_CHUNK__F___plus__Sync ],
                  hasher
                |) in
              M.read (|
                let~ memory_items :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.tuple [ Ty.path "u64"; F ]; Ty.path "alloc::alloc::Global" ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.tuple [ Ty.path "u64"; F ]; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::iter::adapters::filter::Filter")
                            []
                            [
                              Ty.associated_unknown;
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.tuple [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; F ] ]
                                ]
                                (Ty.path "bool")
                            ];
                          Ty.function
                            [ Ty.tuple [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; F ] ]
                            (Ty.tuple [ Ty.path "u64"; F ])
                        ],
                      [],
                      [],
                      "collect",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.tuple [ Ty.path "u64"; F ]; Ty.path "alloc::alloc::Global" ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::filter::Filter")
                              []
                              [
                                Ty.associated_unknown;
                                Ty.function
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.tuple [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; F ] ]
                                  ]
                                  (Ty.path "bool")
                              ];
                            Ty.function
                              [ Ty.tuple [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; F ] ]
                              (Ty.tuple [ Ty.path "u64"; F ])
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::iter::adapters::filter::Filter")
                            []
                            [
                              Ty.associated_unknown;
                              Ty.function
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.tuple [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; F ] ]
                                ]
                                (Ty.path "bool")
                            ],
                          [],
                          [],
                          "map",
                          [],
                          [
                            Ty.tuple [ Ty.path "u64"; F ];
                            Ty.function
                              [ Ty.tuple [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; F ] ]
                              (Ty.tuple [ Ty.path "u64"; F ])
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::filter::Filter")
                              []
                              [
                                Ty.associated_unknown;
                                Ty.function
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.tuple [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; F ] ]
                                  ]
                                  (Ty.path "bool")
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.associated_unknown,
                              [],
                              [],
                              "filter",
                              [],
                              [
                                Ty.function
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.tuple [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; F ] ]
                                  ]
                                  (Ty.path "bool")
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.associated_unknown,
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::paged_vec::AddressMap")
                                    [ Value.Integer IntegerKind.Usize 4096 ]
                                    [ F ],
                                  "items",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| memory |) |) |)
                                ]
                              |);
                              M.closure
                                (fun γ =>
                                  ltac:(M.monadic
                                    match γ with
                                    | [ α0 ] =>
                                      ltac:(M.monadic
                                        (M.match_operator (|
                                          Ty.path "bool",
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.tuple
                                                  [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; F ]
                                              ],
                                            α0
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ := M.deref (| M.read (| γ |) |) in
                                                let γ1_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ1_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let γ2_0 :=
                                                  M.SubPointer.get_tuple_field (| γ1_0, 0 |) in
                                                let γ2_1 :=
                                                  M.SubPointer.get_tuple_field (| γ1_0, 1 |) in
                                                let ptr :=
                                                  M.alloc (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                                    γ2_1
                                                  |) in
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.lt,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.div,
                                                      [
                                                        M.cast
                                                          (Ty.path "usize")
                                                          (M.read (|
                                                            M.deref (| M.read (| ptr |) |)
                                                          |));
                                                        CHUNK
                                                      ]
                                                    |);
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.shl,
                                                      [
                                                        Value.Integer IntegerKind.Usize 1;
                                                        M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            memory_dimensions,
                                                            "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                                                            "address_height"
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  ]
                                                |)))
                                          ]
                                        |)))
                                    | _ => M.impossible "wrong number of arguments"
                                    end))
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.tuple [ Ty.path "u64"; F ],
                                      M.alloc (|
                                        Ty.tuple [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; F ],
                                        α0
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let γ1_0 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                            let γ1_1 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                            let address_space := M.copy (| Ty.path "u32", γ1_0 |) in
                                            let pointer := M.copy (| Ty.path "u32", γ1_1 |) in
                                            let value := M.copy (| F, γ0_1 |) in
                                            Value.Tuple
                                              [
                                                M.call_closure (|
                                                  Ty.path "u64",
                                                  BinOp.Wrap.add,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "u64",
                                                      BinOp.Wrap.mul,
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "u64",
                                                          M.get_associated_function (|
                                                            Ty.path
                                                              "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                                                            "label_to_index",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              memory_dimensions
                                                            |);
                                                            Value.Tuple
                                                              [
                                                                M.read (| address_space |);
                                                                M.call_closure (|
                                                                  Ty.path "u32",
                                                                  BinOp.Wrap.div,
                                                                  [
                                                                    M.read (| pointer |);
                                                                    M.cast (Ty.path "u32") CHUNK
                                                                  ]
                                                                |)
                                                              ]
                                                          ]
                                                        |);
                                                        M.cast (Ty.path "u64") CHUNK
                                                      ]
                                                    |);
                                                    M.cast
                                                      (Ty.path "u64")
                                                      (M.call_closure (|
                                                        Ty.path "u32",
                                                        BinOp.Wrap.rem,
                                                        [
                                                          M.read (| pointer |);
                                                          M.cast (Ty.path "u32") CHUNK
                                                        ]
                                                      |))
                                                  ]
                                                |);
                                                M.read (| value |)
                                              ]))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            Ty.path "bool",
                                            UnOp.not (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    []
                                                    [ Ty.tuple [ Ty.path "u64"; F ] ],
                                                  "is_sorted_by_key",
                                                  [],
                                                  [
                                                    Ty.function
                                                      [
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.tuple [ Ty.path "u64"; F ] ]
                                                      ]
                                                      (Ty.apply (Ty.path "&") [] [ Ty.path "u64" ]);
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "u64" ]
                                                  ]
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [ Ty.tuple [ Ty.path "u64"; F ] ]
                                                          ],
                                                        M.get_trait_method (|
                                                          "core::ops::deref::Deref",
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [
                                                              Ty.tuple [ Ty.path "u64"; F ];
                                                              Ty.path "alloc::alloc::Global"
                                                            ],
                                                          [],
                                                          [],
                                                          "deref",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            memory_items
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |);
                                                  M.closure
                                                    (fun γ =>
                                                      ltac:(M.monadic
                                                        match γ with
                                                        | [ α0 ] =>
                                                          ltac:(M.monadic
                                                            (M.match_operator (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [ Ty.path "u64" ],
                                                              M.alloc (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.tuple [ Ty.path "u64"; F ] ],
                                                                α0
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ :=
                                                                      M.deref (|
                                                                        M.read (| γ |)
                                                                      |) in
                                                                    let γ1_0 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ,
                                                                        0
                                                                      |) in
                                                                    let γ1_1 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ,
                                                                        1
                                                                      |) in
                                                                    let addr :=
                                                                      M.alloc (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ Ty.path "u64" ],
                                                                        γ1_0
                                                                      |) in
                                                                    M.read (| addr |)))
                                                              ]
                                                            |)))
                                                        | _ =>
                                                          M.impossible "wrong number of arguments"
                                                        end))
                                                ]
                                              |)
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.never_to_any (|
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (| "core::panicking::panic", [], [] |),
                                          [
                                            mk_str (|
                                              "assertion failed: memory_items.is_sorted_by_key(|(addr, _)| addr)"
                                            |)
                                          ]
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            Ty.path "bool",
                                            UnOp.not (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.lt,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "u64",
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.tuple [ Ty.path "u64"; F ] ]
                                                        ],
                                                      "map_or",
                                                      [],
                                                      [
                                                        Ty.path "u64";
                                                        Ty.function
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.tuple [ Ty.path "u64"; F ] ]
                                                          ]
                                                          (Ty.path "u64")
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.tuple [ Ty.path "u64"; F ] ]
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [ Ty.tuple [ Ty.path "u64"; F ] ],
                                                          "last",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [
                                                                        Ty.tuple
                                                                          [ Ty.path "u64"; F ]
                                                                      ]
                                                                  ],
                                                                M.get_trait_method (|
                                                                  "core::ops::deref::Deref",
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Ty.tuple [ Ty.path "u64"; F ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ],
                                                                  [],
                                                                  [],
                                                                  "deref",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    memory_items
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |);
                                                      Value.Integer IntegerKind.U64 0;
                                                      M.closure
                                                        (fun γ =>
                                                          ltac:(M.monadic
                                                            match γ with
                                                            | [ α0 ] =>
                                                              ltac:(M.monadic
                                                                (M.match_operator (|
                                                                  Ty.path "u64",
                                                                  M.alloc (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.tuple
                                                                          [ Ty.path "u64"; F ]
                                                                      ],
                                                                    α0
                                                                  |),
                                                                  [
                                                                    fun γ =>
                                                                      ltac:(M.monadic
                                                                        (let γ :=
                                                                          M.deref (|
                                                                            M.read (| γ |)
                                                                          |) in
                                                                        let γ1_0 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ,
                                                                            0
                                                                          |) in
                                                                        let γ1_1 :=
                                                                          M.SubPointer.get_tuple_field (|
                                                                            γ,
                                                                            1
                                                                          |) in
                                                                        let addr :=
                                                                          M.alloc (|
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [ Ty.path "u64" ],
                                                                            γ1_0
                                                                          |) in
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| addr |)
                                                                          |)
                                                                        |)))
                                                                  ]
                                                                |)))
                                                            | _ =>
                                                              M.impossible
                                                                "wrong number of arguments"
                                                            end))
                                                    ]
                                                  |);
                                                  M.call_closure (|
                                                    Ty.path "u64",
                                                    BinOp.Wrap.shl,
                                                    [
                                                      M.cast (Ty.path "u64") CHUNK;
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        M.get_associated_function (|
                                                          Ty.path
                                                            "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                                                          "overall_height",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            memory_dimensions
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.never_to_any (|
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (| "core::panicking::panic", [], [] |),
                                          [
                                            mk_str (|
                                              "assertion failed: memory_items.last().map_or(0, |(addr, _)| *addr) <
    ((CHUNK as u64) << memory_dimensions.overall_height())"
                                            |)
                                          ]
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ zero_leaf :
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                      [ CHUNK ]
                      [ F ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                      [ CHUNK ]
                      [ F ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                        [ CHUNK ]
                        [ F ],
                      "new_leaf",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                        M.get_trait_method (|
                          "openvm_circuit::arch::hasher::Hasher",
                          impl_Hasher_CHUNK__F___plus__Sync,
                          [ CHUNK ],
                          [ F ],
                          "hash",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| hasher |) |) |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.alloc (|
                                  Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                  lib.repeat (|
                                    M.read (|
                                      get_constant (| "p3_field::field::FieldAlgebra::ZERO", F |)
                                    |),
                                    CHUNK
                                  |)
                                |)
                              |)
                            |)
                          |)
                        ]
                      |)
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                    [ CHUNK ]
                    [ F ],
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                      [ CHUNK ]
                      [ F ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                        [ CHUNK ]
                        [ F ],
                      "from_memory",
                      [],
                      [ impl_Hasher_CHUNK__F___plus__Sync ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "slice") [] [ Ty.tuple [ Ty.path "u64"; F ] ] ],
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ Ty.tuple [ Ty.path "u64"; F ]; Ty.path "alloc::alloc::Global" ],
                              [],
                              [],
                              "deref",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, memory_items |) |)
                              |)
                            ]
                          |)
                        |)
                      |);
                      Value.mkStructRecord
                        "core::ops::range::Range"
                        []
                        [ Ty.path "usize" ]
                        [
                          ("start", Value.Integer IntegerKind.Usize 0);
                          ("end_",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Ty.tuple [ Ty.path "u64"; F ]; Ty.path "alloc::alloc::Global" ],
                                "len",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, memory_items |) ]
                            |))
                        ];
                      M.call_closure (|
                        Ty.path "u64",
                        BinOp.Wrap.shl,
                        [
                          M.cast (Ty.path "u64") CHUNK;
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_associated_function (|
                              Ty.path
                                "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                              "overall_height",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, memory_dimensions |) ]
                          |)
                        ]
                      |);
                      Value.Integer IntegerKind.U64 0;
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| hasher |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| M.borrow (| Pointer.Kind.Ref, zero_leaf |) |)
                      |)
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_tree_from_memory :
          forall (CHUNK : Value.t) (F : Ty.t),
          M.IsAssociatedFunction.C (Self CHUNK F) "tree_from_memory" (tree_from_memory CHUNK F).
        Admitted.
        Global Typeclasses Opaque tree_from_memory.
      End Impl_openvm_circuit_system_memory_tree_MemoryNode_CHUNK_F.
    End tree.
  End memory.
End system.
