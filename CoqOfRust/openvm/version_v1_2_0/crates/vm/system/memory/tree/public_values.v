(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module system.
  Module memory.
    Module tree.
      Module public_values.
        Definition value_PUBLIC_VALUES_ADDRESS_SPACE_OFFSET
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          ltac:(M.monadic (M.alloc (| Ty.path "u32", Value.Integer IntegerKind.U32 2 |))).
        
        Global Instance Instance_IsConstant_value_PUBLIC_VALUES_ADDRESS_SPACE_OFFSET :
          M.IsFunction.C
            "openvm_circuit::system::memory::tree::public_values::PUBLIC_VALUES_ADDRESS_SPACE_OFFSET"
            value_PUBLIC_VALUES_ADDRESS_SPACE_OFFSET.
        Admitted.
        Global Typeclasses Opaque value_PUBLIC_VALUES_ADDRESS_SPACE_OFFSET.
        
        (* StructRecord
          {
            name := "UserPublicValuesProof";
            const_params := [ "CHUNK" ];
            ty_params := [ "F" ];
            fields :=
              [
                ("proof",
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ]; Ty.path "alloc::alloc::Global" ]);
                ("public_values",
                  Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ]);
                ("public_values_commit", Ty.apply (Ty.path "array") [ CHUNK ] [ F ])
              ];
          } *)
        
        Module Impl_core_clone_Clone_where_core_clone_Clone_F_for_openvm_circuit_system_memory_tree_public_values_UserPublicValuesProof_CHUNK_F.
          Definition Self (CHUNK : Value.t) (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof")
              [ CHUNK ]
              [ F ].
          
          (* Clone *)
          Definition clone
              (CHUNK : Value.t)
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self CHUNK F in
            match ε, τ, α with
            | [], [], [ self ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof")
                          [ CHUNK ]
                          [ F ]
                      ],
                    self
                  |) in
                Value.mkStructRecord
                  "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof"
                  [ CHUNK ]
                  [ F ]
                  [
                    ("proof",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.apply (Ty.path "array") [ CHUNK ] [ F ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply (Ty.path "array") [ CHUNK ] [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof",
                                  "proof"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |));
                    ("public_values",
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ F; Ty.path "alloc::alloc::Global" ],
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ F; Ty.path "alloc::alloc::Global" ],
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof",
                                  "public_values"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |));
                    ("public_values_commit",
                      M.call_closure (|
                        Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                        M.get_trait_method (|
                          "core::clone::Clone",
                          Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                          [],
                          [],
                          "clone",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof",
                                  "public_values_commit"
                                |)
                              |)
                            |)
                          |)
                        ]
                      |))
                  ]))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (CHUNK : Value.t) (F : Ty.t),
            M.IsTraitInstance
              "core::clone::Clone"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self CHUNK F)
              (* Instance *) [ ("clone", InstanceField.Method (clone CHUNK F)) ].
        End Impl_core_clone_Clone_where_core_clone_Clone_F_for_openvm_circuit_system_memory_tree_public_values_UserPublicValuesProof_CHUNK_F.
        
        Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_circuit_system_memory_tree_public_values_UserPublicValuesProof_CHUNK_F.
          Definition Self (CHUNK : Value.t) (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof")
              [ CHUNK ]
              [ F ].
          
          (* Debug *)
          Definition fmt
              (CHUNK : Value.t)
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self CHUNK F in
            match ε, τ, α with
            | [], [], [ self; f ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof")
                          [ CHUNK ]
                          [ F ]
                      ],
                    self
                  |) in
                let f :=
                  M.alloc (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ],
                    f
                  |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_field3_finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| mk_str (| "UserPublicValuesProof" |) |)
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "proof" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply (Ty.path "array") [ CHUNK ] [ F ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof",
                                "proof"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "public_values" |) |) |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ F; Ty.path "alloc::alloc::Global" ]
                          ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof",
                                "public_values"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| mk_str (| "public_values_commit" |) |)
                    |);
                    M.call_closure (|
                      Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ]
                          ])
                        (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ],
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof",
                                    "public_values_commit"
                                  |)
                                |)
                              |)
                            |)
                          |)
                        |)
                      ]
                    |)
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (CHUNK : Value.t) (F : Ty.t),
            M.IsTraitInstance
              "core::fmt::Debug"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self CHUNK F)
              (* Instance *) [ ("fmt", InstanceField.Method (fmt CHUNK F)) ].
        End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_circuit_system_memory_tree_public_values_UserPublicValuesProof_CHUNK_F.
        
        Module underscore.
          Module Impl_serde_ser_Serialize_where_serde_ser_Serialize_F_where_serde_ser_Serialize_array_CHUNK_F_for_openvm_circuit_system_memory_tree_public_values_UserPublicValuesProof_CHUNK_F.
            Definition Self (CHUNK : Value.t) (F : Ty.t) : Ty.t :=
              Ty.apply
                (Ty.path
                  "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof")
                [ CHUNK ]
                [ F ].
            
            (* Serialize *)
            Definition serialize
                (CHUNK : Value.t)
                (F : Ty.t)
                (ε : list Value.t)
                (τ : list Ty.t)
                (α : list Value.t)
                : M :=
              let Self : Ty.t := Self CHUNK F in
              match ε, τ, α with
              | [], [ __S ], [ self; __serializer ] =>
                ltac:(M.monadic
                  (let self :=
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof")
                            [ CHUNK ]
                            [ F ]
                        ],
                      self
                    |) in
                  let __serializer := M.alloc (| __S, __serializer |) in
                  M.catch_return
                    (Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                      ]) (|
                    ltac:(M.monadic
                      (M.read (|
                        let~ __serde_state :
                            Ty.associated_in_trait
                              "serde::ser::Serializer"
                              []
                              []
                              __S
                              "SerializeStruct" :=
                          M.match_operator (|
                            Ty.associated_in_trait
                              "serde::ser::Serializer"
                              []
                              []
                              __S
                              "SerializeStruct",
                            M.alloc (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct"
                                ],
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::ops::control_flow::ControlFlow")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct"
                                  ],
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "SerializeStruct";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  [],
                                  [],
                                  "branch",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "SerializeStruct";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "serde::ser::Serializer",
                                      __S,
                                      [],
                                      [],
                                      "serialize_struct",
                                      [],
                                      []
                                    |),
                                    [
                                      M.read (| __serializer |);
                                      mk_str (| "UserPublicValuesProof" |);
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.add,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            BinOp.Wrap.add,
                                            [
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.add,
                                                [
                                                  M.cast (Ty.path "usize") (Value.Bool false);
                                                  Value.Integer IntegerKind.Usize 1
                                                ]
                                              |);
                                              Value.Integer IntegerKind.Usize 1
                                            ]
                                          |);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      γ0_0
                                    |) in
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Ok";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.associated_in_trait
                                                    "serde::ser::Serializer"
                                                    []
                                                    []
                                                    __S
                                                    "Error"
                                                ]
                                            ],
                                            "from_residual",
                                            [],
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val :=
                                    M.copy (|
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "SerializeStruct",
                                      γ0_0
                                    |) in
                                  M.read (| val |)))
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.tuple []
                                ],
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::ops::control_flow::ControlFlow")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ];
                                    Ty.tuple []
                                  ],
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  [],
                                  [],
                                  "branch",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.tuple [];
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "serde::ser::SerializeStruct",
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "SerializeStruct",
                                      [],
                                      [],
                                      "serialize_field",
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [
                                            Ty.apply (Ty.path "array") [ CHUNK ] [ F ];
                                            Ty.path "alloc::alloc::Global"
                                          ]
                                      ]
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                        |)
                                      |);
                                      mk_str (| "proof" |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof",
                                              "proof"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      γ0_0
                                    |) in
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Ok";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.associated_in_trait
                                                    "serde::ser::Serializer"
                                                    []
                                                    []
                                                    __S
                                                    "Error"
                                                ]
                                            ],
                                            "from_residual",
                                            [],
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                  M.read (| val |)))
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.tuple []
                                ],
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::ops::control_flow::ControlFlow")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ];
                                    Ty.tuple []
                                  ],
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  [],
                                  [],
                                  "branch",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.tuple [];
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "serde::ser::SerializeStruct",
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "SerializeStruct",
                                      [],
                                      [],
                                      "serialize_field",
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "alloc::vec::Vec")
                                          []
                                          [ F; Ty.path "alloc::alloc::Global" ]
                                      ]
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                        |)
                                      |);
                                      mk_str (| "public_values" |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof",
                                              "public_values"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      γ0_0
                                    |) in
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Ok";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.associated_in_trait
                                                    "serde::ser::Serializer"
                                                    []
                                                    []
                                                    __S
                                                    "Error"
                                                ]
                                            ],
                                            "from_residual",
                                            [],
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                  M.read (| val |)))
                            ]
                          |) in
                        let~ _ : Ty.tuple [] :=
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.tuple []
                                ],
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::ops::control_flow::ControlFlow")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ];
                                    Ty.tuple []
                                  ],
                                M.get_trait_method (|
                                  "core::ops::try_trait::Try",
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  [],
                                  [],
                                  "branch",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.tuple [];
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    M.get_trait_method (|
                                      "serde::ser::SerializeStruct",
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "SerializeStruct",
                                      [],
                                      [],
                                      "serialize_field",
                                      [],
                                      [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ]
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                        |)
                                      |);
                                      mk_str (| "public_values_commit" |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof",
                                              "public_values_commit"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Break",
                                      0
                                    |) in
                                  let residual :=
                                    M.copy (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.path "core::convert::Infallible";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      γ0_0
                                    |) in
                                  M.never_to_any (|
                                    M.read (|
                                      M.return_ (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::try_trait::FromResidual",
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Ok";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ],
                                            [],
                                            [
                                              Ty.apply
                                                (Ty.path "core::result::Result")
                                                []
                                                [
                                                  Ty.path "core::convert::Infallible";
                                                  Ty.associated_in_trait
                                                    "serde::ser::Serializer"
                                                    []
                                                    []
                                                    __S
                                                    "Error"
                                                ]
                                            ],
                                            "from_residual",
                                            [],
                                            []
                                          |),
                                          [ M.read (| residual |) ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ0_0 :=
                                    M.SubPointer.get_struct_tuple_field (|
                                      γ,
                                      "core::ops::control_flow::ControlFlow::Continue",
                                      0
                                    |) in
                                  let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                  M.read (| val |)))
                            ]
                          |) in
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                                Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                              ],
                            M.get_trait_method (|
                              "serde::ser::SerializeStruct",
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct",
                              [],
                              [],
                              "end",
                              [],
                              []
                            |),
                            [ M.read (| __serde_state |) ]
                          |)
                        |)
                      |)))
                  |)))
              | _, _, _ => M.impossible "wrong number of arguments"
              end.
            
            Axiom Implements :
              forall (CHUNK : Value.t) (F : Ty.t),
              M.IsTraitInstance
                "serde::ser::Serialize"
                (* Trait polymorphic consts *) []
                (* Trait polymorphic types *) []
                (Self CHUNK F)
                (* Instance *) [ ("serialize", InstanceField.Method (serialize CHUNK F)) ].
          End Impl_serde_ser_Serialize_where_serde_ser_Serialize_F_where_serde_ser_Serialize_array_CHUNK_F_for_openvm_circuit_system_memory_tree_public_values_UserPublicValuesProof_CHUNK_F.
          Module Impl_serde_de_Deserialize_where_serde_de_Deserialize_F_where_serde_de_Deserialize_array_CHUNK_F_for_openvm_circuit_system_memory_tree_public_values_UserPublicValuesProof_CHUNK_F.
            Definition Self (CHUNK : Value.t) (F : Ty.t) : Ty.t :=
              Ty.apply
                (Ty.path
                  "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof")
                [ CHUNK ]
                [ F ].
            
            (* Deserialize *)
            Definition deserialize
                (CHUNK : Value.t)
                (F : Ty.t)
                (ε : list Value.t)
                (τ : list Ty.t)
                (α : list Value.t)
                : M :=
              let Self : Ty.t := Self CHUNK F in
              match ε, τ, α with
              | [], [ __D ], [ __deserializer ] =>
                ltac:(M.monadic
                  (let __deserializer := M.alloc (| __D, __deserializer |) in
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof")
                          [ CHUNK ]
                          [ F ];
                        Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                      ],
                    M.get_trait_method (|
                      "serde::de::Deserializer",
                      __D,
                      [],
                      [],
                      "deserialize_struct",
                      [],
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::tree::public_values::_'1::deserialize::__Visitor")
                          [ CHUNK ]
                          [ F ]
                      ]
                    |),
                    [
                      M.read (| __deserializer |);
                      mk_str (| "UserPublicValuesProof" |);
                      M.read (|
                        get_constant (|
                          "openvm_circuit::system::memory::tree::public_values::_'1::deserialize::FIELDS",
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                            ]
                        |)
                      |);
                      Value.mkStructRecord
                        "openvm_circuit::system::memory::tree::public_values::_'1::deserialize::__Visitor"
                        [ CHUNK ]
                        [ F ]
                        [
                          ("marker",
                            Value.StructTuple
                              "core::marker::PhantomData"
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof")
                                  [ CHUNK ]
                                  [ F ]
                              ]
                              []);
                          ("lifetime",
                            Value.StructTuple
                              "core::marker::PhantomData"
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                              [])
                        ]
                    ]
                  |)))
              | _, _, _ => M.impossible "wrong number of arguments"
              end.
            
            Axiom Implements :
              forall (CHUNK : Value.t) (F : Ty.t),
              M.IsTraitInstance
                "serde::de::Deserialize"
                (* Trait polymorphic consts *) []
                (* Trait polymorphic types *) []
                (Self CHUNK F)
                (* Instance *) [ ("deserialize", InstanceField.Method (deserialize CHUNK F)) ].
          End Impl_serde_de_Deserialize_where_serde_de_Deserialize_F_where_serde_de_Deserialize_array_CHUNK_F_for_openvm_circuit_system_memory_tree_public_values_UserPublicValuesProof_CHUNK_F.
        End underscore.
        
        
        (*
        Enum UserPublicValuesProofError
        {
          const_params := [];
          ty_params := [];
          variants :=
            [
              {
                name := "UnexpectedLength";
                item := StructTuple [ Ty.path "usize" ];
              };
              {
                name := "IncorrectProofLength";
                item := StructTuple [ Ty.path "usize"; Ty.path "usize" ];
              };
              {
                name := "UserPublicValuesCommitMismatch";
                item := StructTuple [];
              };
              {
                name := "FinalMemoryRootMismatch";
                item := StructTuple [];
              }
            ];
        }
        *)
        
        Axiom IsDiscriminant_UserPublicValuesProofError_UnexpectedLength :
          M.IsDiscriminant
            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError::UnexpectedLength"
            0.
        Axiom IsDiscriminant_UserPublicValuesProofError_IncorrectProofLength :
          M.IsDiscriminant
            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError::IncorrectProofLength"
            1.
        Axiom IsDiscriminant_UserPublicValuesProofError_UserPublicValuesCommitMismatch :
          M.IsDiscriminant
            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError::UserPublicValuesCommitMismatch"
            2.
        Axiom IsDiscriminant_UserPublicValuesProofError_FinalMemoryRootMismatch :
          M.IsDiscriminant
            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError::FinalMemoryRootMismatch"
            3.
        
        Module Impl_core_error_Error_for_openvm_circuit_system_memory_tree_public_values_UserPublicValuesProofError.
          Definition Self : Ty.t :=
            Ty.path
              "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError".
          
          Axiom Implements :
            M.IsTraitInstance
              "core::error::Error"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [].
        End Impl_core_error_Error_for_openvm_circuit_system_memory_tree_public_values_UserPublicValuesProofError.
        
        Module Impl_core_fmt_Display_for_openvm_circuit_system_memory_tree_public_values_UserPublicValuesProofError.
          Definition Self : Ty.t :=
            Ty.path
              "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError".
          
          (* Error *)
          Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [], [ self; __formatter ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.path
                          "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError"
                      ],
                    self
                  |) in
                let __formatter :=
                  M.alloc (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ],
                    __formatter
                  |) in
                M.match_operator (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.deref (| M.read (| γ |) |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError::UnexpectedLength",
                            0
                          |) in
                        let _0 :=
                          M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_fmt",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.deref (| M.read (| __formatter |) |)
                            |);
                            M.call_closure (|
                              Ty.path "core::fmt::Arguments",
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                [
                                  Value.Integer IntegerKind.Usize 1;
                                  Value.Integer IntegerKind.Usize 1
                                ],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 1 ]
                                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                        Value.Array [ mk_str (| "unexpected length: " |) ]
                                      |)
                                    |)
                                  |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 1 ]
                                          [ Ty.path "core::fmt::rt::Argument" ],
                                        Value.Array
                                          [
                                            M.call_closure (|
                                              Ty.path "core::fmt::rt::Argument",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_display",
                                                [],
                                                [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          M.get_trait_method (|
                                                            "thiserror::display::AsDisplay",
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            [],
                                                            [],
                                                            "as_display",
                                                            [],
                                                            []
                                                          |),
                                                          [ M.borrow (| Pointer.Kind.Ref, _0 |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.deref (| M.read (| γ |) |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError::IncorrectProofLength",
                            0
                          |) in
                        let γ1_1 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError::IncorrectProofLength",
                            1
                          |) in
                        let _0 :=
                          M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                        let _1 :=
                          M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_1 |) in
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_fmt",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.deref (| M.read (| __formatter |) |)
                            |);
                            M.call_closure (|
                              Ty.path "core::fmt::Arguments",
                              M.get_associated_function (|
                                Ty.path "core::fmt::Arguments",
                                "new_v1",
                                [
                                  Value.Integer IntegerKind.Usize 3;
                                  Value.Integer IntegerKind.Usize 2
                                ],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 3 ]
                                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                        Value.Array
                                          [
                                            mk_str (| "incorrect proof length: " |);
                                            mk_str (| " (expected " |);
                                            mk_str (| ")" |)
                                          ]
                                      |)
                                    |)
                                  |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 2 ]
                                          [ Ty.path "core::fmt::rt::Argument" ],
                                        Value.Array
                                          [
                                            M.call_closure (|
                                              Ty.path "core::fmt::rt::Argument",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_display",
                                                [],
                                                [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          M.get_trait_method (|
                                                            "thiserror::display::AsDisplay",
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            [],
                                                            [],
                                                            "as_display",
                                                            [],
                                                            []
                                                          |),
                                                          [ M.borrow (| Pointer.Kind.Ref, _0 |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |);
                                            M.call_closure (|
                                              Ty.path "core::fmt::rt::Argument",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::rt::Argument",
                                                "new_display",
                                                [],
                                                [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          M.get_trait_method (|
                                                            "thiserror::display::AsDisplay",
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "usize" ],
                                                            [],
                                                            [],
                                                            "as_display",
                                                            [],
                                                            []
                                                          |),
                                                          [ M.borrow (| Pointer.Kind.Ref, _1 |) ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.deref (| M.read (| γ |) |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError::UserPublicValuesCommitMismatch"
                          |) in
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_str",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.deref (| M.read (| __formatter |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                mk_str (| "user public values do not match commitment" |)
                              |)
                            |)
                          ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.deref (| M.read (| γ |) |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError::FinalMemoryRootMismatch"
                          |) in
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_str",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.deref (| M.read (| __formatter |) |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "final memory root mismatch" |) |)
                            |)
                          ]
                        |)))
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "core::fmt::Display"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
        End Impl_core_fmt_Display_for_openvm_circuit_system_memory_tree_public_values_UserPublicValuesProofError.
        
        Module Impl_core_fmt_Debug_for_openvm_circuit_system_memory_tree_public_values_UserPublicValuesProofError.
          Definition Self : Ty.t :=
            Ty.path
              "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError".
          
          (* Debug *)
          Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
            match ε, τ, α with
            | [], [], [ self; f ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.path
                          "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError"
                      ],
                    self
                  |) in
                let f :=
                  M.alloc (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ],
                    f
                  |) in
                M.match_operator (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  self,
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.deref (| M.read (| γ |) |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError::UnexpectedLength",
                            0
                          |) in
                        let __self_0 :=
                          M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field1_finish",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "UnexpectedLength" |) |)
                            |);
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                              M.pointer_coercion
                                M.PointerCoercion.Unsize
                                (Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                                (Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.borrow (| Pointer.Kind.Ref, __self_0 |) |)
                                |)
                              ]
                            |)
                          ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.deref (| M.read (| γ |) |) in
                        let γ1_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError::IncorrectProofLength",
                            0
                          |) in
                        let γ1_1 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError::IncorrectProofLength",
                            1
                          |) in
                        let __self_0 :=
                          M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_0 |) in
                        let __self_1 :=
                          M.alloc (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ1_1 |) in
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "debug_tuple_field2_finish",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "IncorrectProofLength" |) |)
                            |);
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                              M.pointer_coercion
                                M.PointerCoercion.Unsize
                                (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                                (Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                              [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| __self_0 |) |) |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                              M.pointer_coercion
                                M.PointerCoercion.Unsize
                                (Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.apply (Ty.path "&") [] [ Ty.path "usize" ] ])
                                (Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.borrow (| Pointer.Kind.Ref, __self_1 |) |)
                                |)
                              ]
                            |)
                          ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.deref (| M.read (| γ |) |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError::UserPublicValuesCommitMismatch"
                          |) in
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_str",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "UserPublicValuesCommitMismatch" |) |)
                            |)
                          ]
                        |)));
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.deref (| M.read (| γ |) |) in
                        let _ :=
                          M.is_struct_tuple (|
                            γ,
                            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError::FinalMemoryRootMismatch"
                          |) in
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                          M.get_associated_function (|
                            Ty.path "core::fmt::Formatter",
                            "write_str",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "FinalMemoryRootMismatch" |) |)
                            |)
                          ]
                        |)))
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            M.IsTraitInstance
              "core::fmt::Debug"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              Self
              (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
        End Impl_core_fmt_Debug_for_openvm_circuit_system_memory_tree_public_values_UserPublicValuesProofError.
        
        Module Impl_openvm_circuit_system_memory_tree_public_values_UserPublicValuesProof_CHUNK_F.
          Definition Self (CHUNK : Value.t) (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof")
              [ CHUNK ]
              [ F ].
          
          (*
              pub fn compute(
                  memory_dimensions: MemoryDimensions,
                  num_public_values: usize,
                  hasher: &(impl Hasher<CHUNK, F> + Sync),
                  final_memory: &MemoryImage<F>,
              ) -> Self {
                  let proof = compute_merkle_proof_to_user_public_values_root(
                      memory_dimensions,
                      num_public_values,
                      hasher,
                      final_memory,
                  );
                  let public_values =
                      extract_public_values(&memory_dimensions, num_public_values, final_memory);
                  let public_values_commit = hasher.merkle_root(&public_values);
                  UserPublicValuesProof {
                      proof,
                      public_values,
                      public_values_commit,
                  }
              }
          *)
          Definition compute
              (CHUNK : Value.t)
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self CHUNK F in
            match ε, τ, α with
            | [],
                [ impl_Hasher_CHUNK__F___plus__Sync ],
                [ memory_dimensions; num_public_values; hasher; final_memory ] =>
              ltac:(M.monadic
                (let memory_dimensions :=
                  M.alloc (|
                    Ty.path
                      "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                    memory_dimensions
                  |) in
                let num_public_values := M.alloc (| Ty.path "usize", num_public_values |) in
                let hasher :=
                  M.alloc (|
                    Ty.apply (Ty.path "&") [] [ impl_Hasher_CHUNK__F___plus__Sync ],
                    hasher
                  |) in
                let final_memory :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                          [
                            M.unevaluated_const
                              (mk_str (|
                                "openvm_circuit_system_memory_controller_MemoryImage_discriminant"
                              |))
                          ]
                          [ F ]
                      ],
                    final_memory
                  |) in
                M.read (|
                  let~ proof :
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ]; Ty.path "alloc::alloc::Global"
                        ] :=
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ]; Ty.path "alloc::alloc::Global"
                        ],
                      M.get_function (|
                        "openvm_circuit::system::memory::tree::public_values::compute_merkle_proof_to_user_public_values_root",
                        [ CHUNK ],
                        [ F; impl_Hasher_CHUNK__F___plus__Sync ]
                      |),
                      [
                        M.read (| memory_dimensions |);
                        M.read (| num_public_values |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| hasher |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| final_memory |) |) |)
                      ]
                    |) in
                  let~ public_values :
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ F; Ty.path "alloc::alloc::Global" ] :=
                    M.call_closure (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                      M.get_function (|
                        "openvm_circuit::system::memory::tree::public_values::extract_public_values",
                        [],
                        [ F ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (| M.borrow (| Pointer.Kind.Ref, memory_dimensions |) |)
                        |);
                        M.read (| num_public_values |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| final_memory |) |) |)
                      ]
                    |) in
                  let~ public_values_commit : Ty.apply (Ty.path "array") [ CHUNK ] [ F ] :=
                    M.call_closure (|
                      Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                      M.get_trait_method (|
                        "openvm_circuit::arch::hasher::Hasher",
                        impl_Hasher_CHUNK__F___plus__Sync,
                        [ CHUNK ],
                        [ F ],
                        "merkle_root",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| hasher |) |) |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.call_closure (|
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                              M.get_trait_method (|
                                "core::ops::deref::Deref",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ F; Ty.path "alloc::alloc::Global" ],
                                [],
                                [],
                                "deref",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.borrow (| Pointer.Kind.Ref, public_values |) |)
                                |)
                              ]
                            |)
                          |)
                        |)
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof")
                      [ CHUNK ]
                      [ F ],
                    Value.mkStructRecord
                      "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof"
                      [ CHUNK ]
                      [ F ]
                      [
                        ("proof", M.read (| proof |));
                        ("public_values", M.read (| public_values |));
                        ("public_values_commit", M.read (| public_values_commit |))
                      ]
                  |)
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_compute :
            forall (CHUNK : Value.t) (F : Ty.t),
            M.IsAssociatedFunction.C (Self CHUNK F) "compute" (compute CHUNK F).
          Admitted.
          Global Typeclasses Opaque compute.
          
          (*
              pub fn verify(
                  &self,
                  hasher: &impl Hasher<CHUNK, F>,
                  memory_dimensions: MemoryDimensions,
                  final_memory_root: [F; CHUNK],
              ) -> Result<(), UserPublicValuesProofError> {
                  // Verify user public values Merkle proof:
                  // 0. Get correct indices for Merkle proof based on memory dimensions
                  // 1. Verify user public values commitment with respect to the final memory root.
                  // 2. Compare user public values commitment with Merkle root of user public values.
                  let pv_commit = self.public_values_commit;
                  // 0.
                  let pv_as = PUBLIC_VALUES_ADDRESS_SPACE_OFFSET + memory_dimensions.as_offset;
                  let pv_start_idx = memory_dimensions.label_to_index((pv_as, 0));
                  let pvs = &self.public_values;
                  if pvs.len() % CHUNK != 0 || !(pvs.len() / CHUNK).is_power_of_two() {
                      return Err(UserPublicValuesProofError::UnexpectedLength(pvs.len()));
                  }
                  let pv_height = log2_strict_usize(pvs.len() / CHUNK);
                  let proof_len = memory_dimensions.overall_height() - pv_height;
                  let idx_prefix = pv_start_idx >> pv_height;
                  // 1.
                  if self.proof.len() != proof_len {
                      return Err(UserPublicValuesProofError::IncorrectProofLength(
                          self.proof.len(),
                          proof_len,
                      ));
                  }
                  let mut curr_root = pv_commit;
                  for (i, sibling_hash) in self.proof.iter().enumerate() {
                      curr_root = if idx_prefix & (1 << i) != 0 {
                          hasher.compress(sibling_hash, &curr_root)
                      } else {
                          hasher.compress(&curr_root, sibling_hash)
                      }
                  }
                  if curr_root != final_memory_root {
                      return Err(UserPublicValuesProofError::FinalMemoryRootMismatch);
                  }
                  // 2. Compute merkle root of public values
                  if hasher.merkle_root(pvs) != pv_commit {
                      return Err(UserPublicValuesProofError::UserPublicValuesCommitMismatch);
                  }
          
                  Ok(())
              }
          *)
          Definition verify
              (CHUNK : Value.t)
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self CHUNK F in
            match ε, τ, α with
            | [],
                [ impl_Hasher_CHUNK__F_ ],
                [ self; hasher; memory_dimensions; final_memory_root ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof")
                          [ CHUNK ]
                          [ F ]
                      ],
                    self
                  |) in
                let hasher :=
                  M.alloc (| Ty.apply (Ty.path "&") [] [ impl_Hasher_CHUNK__F_ ], hasher |) in
                let memory_dimensions :=
                  M.alloc (|
                    Ty.path
                      "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                    memory_dimensions
                  |) in
                let final_memory_root :=
                  M.alloc (| Ty.apply (Ty.path "array") [ CHUNK ] [ F ], final_memory_root |) in
                M.catch_return
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.tuple [];
                      Ty.path
                        "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError"
                    ]) (|
                  ltac:(M.monadic
                    (M.read (|
                      let~ pv_commit : Ty.apply (Ty.path "array") [ CHUNK ] [ F ] :=
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof",
                            "public_values_commit"
                          |)
                        |) in
                      let~ pv_as : Ty.path "u32" :=
                        M.call_closure (|
                          Ty.path "u32",
                          BinOp.Wrap.add,
                          [
                            M.read (|
                              get_constant (|
                                "openvm_circuit::system::memory::tree::public_values::PUBLIC_VALUES_ADDRESS_SPACE_OFFSET",
                                Ty.path "u32"
                              |)
                            |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                memory_dimensions,
                                "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                                "as_offset"
                              |)
                            |)
                          ]
                        |) in
                      let~ pv_start_idx : Ty.path "u64" :=
                        M.call_closure (|
                          Ty.path "u64",
                          M.get_associated_function (|
                            Ty.path
                              "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                            "label_to_index",
                            [],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.Ref, memory_dimensions |);
                            Value.Tuple [ M.read (| pv_as |); Value.Integer IntegerKind.U32 0 ]
                          ]
                        |) in
                      let~ pvs :
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [ F; Ty.path "alloc::alloc::Global" ]
                            ] :=
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof",
                            "public_values"
                          |)
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      Ty.path "bool",
                                      LogicalOp.or (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          BinOp.ne,
                                          [
                                            M.call_closure (|
                                              Ty.path "usize",
                                              BinOp.Wrap.rem,
                                              [
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  M.get_associated_function (|
                                                    Ty.apply
                                                      (Ty.path "alloc::vec::Vec")
                                                      []
                                                      [ F; Ty.path "alloc::alloc::Global" ],
                                                    "len",
                                                    [],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (| M.read (| pvs |) |)
                                                    |)
                                                  ]
                                                |);
                                                CHUNK
                                              ]
                                            |);
                                            Value.Integer IntegerKind.Usize 0
                                          ]
                                        |),
                                        ltac:(M.monadic
                                          (UnOp.not (|
                                            M.call_closure (|
                                              Ty.path "bool",
                                              M.get_associated_function (|
                                                Ty.path "usize",
                                                "is_power_of_two",
                                                [],
                                                []
                                              |),
                                              [
                                                M.call_closure (|
                                                  Ty.path "usize",
                                                  BinOp.Wrap.div,
                                                  [
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [ F; Ty.path "alloc::alloc::Global" ],
                                                        "len",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| pvs |) |)
                                                        |)
                                                      ]
                                                    |);
                                                    CHUNK
                                                  ]
                                                |)
                                              ]
                                            |)
                                          |)))
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      Value.StructTuple
                                        "core::result::Result::Err"
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path
                                            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError"
                                        ]
                                        [
                                          Value.StructTuple
                                            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError::UnexpectedLength"
                                            []
                                            []
                                            [
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [ F; Ty.path "alloc::alloc::Global" ],
                                                  "len",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| pvs |) |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                        ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (Value.Tuple []))
                          ]
                        |) in
                      let~ pv_height : Ty.path "usize" :=
                        M.call_closure (|
                          Ty.path "usize",
                          M.get_function (| "p3_util::log2_strict_usize", [], [] |),
                          [
                            M.call_closure (|
                              Ty.path "usize",
                              BinOp.Wrap.div,
                              [
                                M.call_closure (|
                                  Ty.path "usize",
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [ F; Ty.path "alloc::alloc::Global" ],
                                    "len",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| pvs |) |) |)
                                  ]
                                |);
                                CHUNK
                              ]
                            |)
                          ]
                        |) in
                      let~ proof_len : Ty.path "usize" :=
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.sub,
                          [
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.path
                                  "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                                "overall_height",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, memory_dimensions |) ]
                            |);
                            M.read (| pv_height |)
                          ]
                        |) in
                      let~ idx_prefix : Ty.path "u64" :=
                        M.call_closure (|
                          Ty.path "u64",
                          BinOp.Wrap.shr,
                          [ M.read (| pv_start_idx |); M.read (| pv_height |) ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      Ty.path "bool",
                                      M.call_closure (|
                                        Ty.path "bool",
                                        BinOp.ne,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply (Ty.path "array") [ CHUNK ] [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              "len",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof",
                                                  "proof"
                                                |)
                                              |)
                                            ]
                                          |);
                                          M.read (| proof_len |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      Value.StructTuple
                                        "core::result::Result::Err"
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path
                                            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError"
                                        ]
                                        [
                                          Value.StructTuple
                                            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError::IncorrectProofLength"
                                            []
                                            []
                                            [
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply (Ty.path "array") [ CHUNK ] [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  "len",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| self |) |),
                                                      "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof",
                                                      "proof"
                                                    |)
                                                  |)
                                                ]
                                              |);
                                              M.read (| proof_len |)
                                            ]
                                        ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (Value.Tuple []))
                          ]
                        |) in
                      let~ curr_root : Ty.apply (Ty.path "array") [ CHUNK ] [ F ] :=
                        M.read (| pv_commit |) in
                      let~ _ : Ty.tuple [] :=
                        M.read (|
                          M.use
                            (M.alloc (|
                              Ty.tuple [],
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ]
                                    ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ]
                                      ],
                                    M.get_trait_method (|
                                      "core::iter::traits::collect::IntoIterator",
                                      Ty.apply
                                        (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ]
                                        ],
                                      [],
                                      [],
                                      "into_iter",
                                      [],
                                      []
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ]
                                          ],
                                        M.get_trait_method (|
                                          "core::iter::traits::iterator::Iterator",
                                          Ty.apply
                                            (Ty.path "core::slice::iter::Iter")
                                            []
                                            [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ],
                                          [],
                                          [],
                                          "enumerate",
                                          [],
                                          []
                                        |),
                                        [
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ],
                                              "iter",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ CHUNK ]
                                                              [ F ]
                                                          ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::ops::deref::Deref",
                                                      Ty.apply
                                                        (Ty.path "alloc::vec::Vec")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ CHUNK ]
                                                            [ F ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      [],
                                                      [],
                                                      "deref",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| self |) |),
                                                          "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProof",
                                                          "proof"
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let iter :=
                                        M.copy (|
                                          Ty.apply
                                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                []
                                                [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ]
                                            ],
                                          γ
                                        |) in
                                      M.read (|
                                        M.loop (|
                                          Ty.tuple [],
                                          ltac:(M.monadic
                                            (let~ _ : Ty.tuple [] :=
                                              M.match_operator (|
                                                Ty.tuple [],
                                                M.alloc (|
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    []
                                                    [
                                                      Ty.tuple
                                                        [
                                                          Ty.path "usize";
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ CHUNK ]
                                                                [ F ]
                                                            ]
                                                        ]
                                                    ],
                                                  M.call_closure (|
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [
                                                        Ty.tuple
                                                          [
                                                            Ty.path "usize";
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [ CHUNK ]
                                                                  [ F ]
                                                              ]
                                                          ]
                                                      ],
                                                    M.get_trait_method (|
                                                      "core::iter::traits::iterator::Iterator",
                                                      Ty.apply
                                                        (Ty.path
                                                          "core::iter::adapters::enumerate::Enumerate")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::slice::iter::Iter")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ CHUNK ]
                                                                [ F ]
                                                            ]
                                                        ],
                                                      [],
                                                      [],
                                                      "next",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (|
                                                          M.borrow (| Pointer.Kind.MutRef, iter |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let _ :=
                                                        M.is_struct_tuple (|
                                                          γ,
                                                          "core::option::Option::None"
                                                        |) in
                                                      M.never_to_any (|
                                                        M.read (| M.break (||) |)
                                                      |)));
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_struct_tuple_field (|
                                                          γ,
                                                          "core::option::Option::Some",
                                                          0
                                                        |) in
                                                      let γ1_0 :=
                                                        M.SubPointer.get_tuple_field (|
                                                          γ0_0,
                                                          0
                                                        |) in
                                                      let γ1_1 :=
                                                        M.SubPointer.get_tuple_field (|
                                                          γ0_0,
                                                          1
                                                        |) in
                                                      let i := M.copy (| Ty.path "usize", γ1_0 |) in
                                                      let sibling_hash :=
                                                        M.copy (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "array")
                                                                [ CHUNK ]
                                                                [ F ]
                                                            ],
                                                          γ1_1
                                                        |) in
                                                      M.write (|
                                                        curr_root,
                                                        M.match_operator (|
                                                          Ty.apply
                                                            (Ty.path "array")
                                                            [ CHUNK ]
                                                            [ F ],
                                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let γ :=
                                                                  M.use
                                                                    (M.alloc (|
                                                                      Ty.path "bool",
                                                                      M.call_closure (|
                                                                        Ty.path "bool",
                                                                        BinOp.ne,
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path "u64",
                                                                            BinOp.Wrap.bit_and,
                                                                            [
                                                                              M.read (|
                                                                                idx_prefix
                                                                              |);
                                                                              M.call_closure (|
                                                                                Ty.path "u64",
                                                                                BinOp.Wrap.shl,
                                                                                [
                                                                                  Value.Integer
                                                                                    IntegerKind.U64
                                                                                    1;
                                                                                  M.read (| i |)
                                                                                ]
                                                                              |)
                                                                            ]
                                                                          |);
                                                                          Value.Integer
                                                                            IntegerKind.U64
                                                                            0
                                                                        ]
                                                                      |)
                                                                    |)) in
                                                                let _ :=
                                                                  is_constant_or_break_match (|
                                                                    M.read (| γ |),
                                                                    Value.Bool true
                                                                  |) in
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [ CHUNK ]
                                                                    [ F ],
                                                                  M.get_trait_method (|
                                                                    "openvm_circuit::arch::hasher::Hasher",
                                                                    impl_Hasher_CHUNK__F_,
                                                                    [ CHUNK ],
                                                                    [ F ],
                                                                    "compress",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| hasher |)
                                                                      |)
                                                                    |);
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| sibling_hash |)
                                                                      |)
                                                                    |);
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          curr_root
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)));
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [ CHUNK ]
                                                                    [ F ],
                                                                  M.get_trait_method (|
                                                                    "openvm_circuit::arch::hasher::Hasher",
                                                                    impl_Hasher_CHUNK__F_,
                                                                    [ CHUNK ],
                                                                    [ F ],
                                                                    "compress",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| hasher |)
                                                                      |)
                                                                    |);
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          curr_root
                                                                        |)
                                                                      |)
                                                                    |);
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.read (| sibling_hash |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)
                                                      |)))
                                                ]
                                              |) in
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                        |)
                                      |)))
                                ]
                              |)
                            |))
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      Ty.path "bool",
                                      M.call_closure (|
                                        Ty.path "bool",
                                        M.get_trait_method (|
                                          "core::cmp::PartialEq",
                                          Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                          [],
                                          [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ],
                                          "ne",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (| Pointer.Kind.Ref, curr_root |);
                                          M.borrow (| Pointer.Kind.Ref, final_memory_root |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      Value.StructTuple
                                        "core::result::Result::Err"
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path
                                            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError"
                                        ]
                                        [
                                          Value.StructTuple
                                            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError::FinalMemoryRootMismatch"
                                            []
                                            []
                                            []
                                        ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (Value.Tuple []))
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      Ty.path "bool",
                                      M.call_closure (|
                                        Ty.path "bool",
                                        M.get_trait_method (|
                                          "core::cmp::PartialEq",
                                          Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                          [],
                                          [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ],
                                          "ne",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                              M.call_closure (|
                                                Ty.apply (Ty.path "array") [ CHUNK ] [ F ],
                                                M.get_trait_method (|
                                                  "openvm_circuit::arch::hasher::Hasher",
                                                  impl_Hasher_CHUNK__F_,
                                                  [ CHUNK ],
                                                  [ F ],
                                                  "merkle_root",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| hasher |) |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.apply (Ty.path "slice") [] [ F ] ],
                                                        M.get_trait_method (|
                                                          "core::ops::deref::Deref",
                                                          Ty.apply
                                                            (Ty.path "alloc::vec::Vec")
                                                            []
                                                            [ F; Ty.path "alloc::alloc::Global" ],
                                                          [],
                                                          [],
                                                          "deref",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| pvs |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |);
                                          M.borrow (| Pointer.Kind.Ref, pv_commit |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      Value.StructTuple
                                        "core::result::Result::Err"
                                        []
                                        [
                                          Ty.tuple [];
                                          Ty.path
                                            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError"
                                        ]
                                        [
                                          Value.StructTuple
                                            "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError::UserPublicValuesCommitMismatch"
                                            []
                                            []
                                            []
                                        ]
                                    |)
                                  |)
                                |)));
                            fun γ => ltac:(M.monadic (Value.Tuple []))
                          ]
                        |) in
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.tuple [];
                            Ty.path
                              "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError"
                          ],
                        Value.StructTuple
                          "core::result::Result::Ok"
                          []
                          [
                            Ty.tuple [];
                            Ty.path
                              "openvm_circuit::system::memory::tree::public_values::UserPublicValuesProofError"
                          ]
                          [ Value.Tuple [] ]
                      |)
                    |)))
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Global Instance AssociatedFunction_verify :
            forall (CHUNK : Value.t) (F : Ty.t),
            M.IsAssociatedFunction.C (Self CHUNK F) "verify" (verify CHUNK F).
          Admitted.
          Global Typeclasses Opaque verify.
        End Impl_openvm_circuit_system_memory_tree_public_values_UserPublicValuesProof_CHUNK_F.
        
        (*
        fn compute_merkle_proof_to_user_public_values_root<const CHUNK: usize, F: PrimeField32>(
            memory_dimensions: MemoryDimensions,
            num_public_values: usize,
            hasher: &(impl Hasher<CHUNK, F> + Sync),
            final_memory: &MemoryImage<F>,
        ) -> Vec<[F; CHUNK]> {
            assert_eq!(
                num_public_values % CHUNK,
                0,
                "num_public_values must be a multiple of memory chunk {CHUNK}"
            );
            let root = MemoryNode::tree_from_memory(memory_dimensions, final_memory, hasher);
            let num_pv_chunks: usize = num_public_values / CHUNK;
            // This enforces the number of public values cannot be 0.
            assert!(
                num_pv_chunks.is_power_of_two(),
                "pv_height must be a power of two"
            );
            let pv_height = log2_strict_usize(num_pv_chunks);
            let address_leading_zeros = memory_dimensions.address_height - pv_height;
        
            let mut curr_node = Arc::new(root);
            let mut proof = Vec::with_capacity(memory_dimensions.as_height + address_leading_zeros);
            for i in 0..memory_dimensions.as_height {
                let bit = 1 << (memory_dimensions.as_height - i - 1);
                if let MemoryNode::NonLeaf { left, right, .. } = curr_node.as_ref().clone() {
                    if PUBLIC_VALUES_ADDRESS_SPACE_OFFSET & bit != 0 {
                        curr_node = right;
                        proof.push(left.hash());
                    } else {
                        curr_node = left;
                        proof.push(right.hash());
                    }
                } else {
                    unreachable!()
                }
            }
            for _ in 0..address_leading_zeros {
                if let MemoryNode::NonLeaf { left, right, .. } = curr_node.as_ref().clone() {
                    curr_node = left;
                    proof.push(right.hash());
                } else {
                    unreachable!()
                }
            }
            proof.reverse();
            proof
        }
        *)
        Definition compute_merkle_proof_to_user_public_values_root
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          match ε, τ, α with
          | [ CHUNK ],
              [ F; impl_Hasher_CHUNK__F___plus__Sync ],
              [ memory_dimensions; num_public_values; hasher; final_memory ] =>
            ltac:(M.monadic
              (let memory_dimensions :=
                M.alloc (|
                  Ty.path
                    "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                  memory_dimensions
                |) in
              let num_public_values := M.alloc (| Ty.path "usize", num_public_values |) in
              let hasher :=
                M.alloc (|
                  Ty.apply (Ty.path "&") [] [ impl_Hasher_CHUNK__F___plus__Sync ],
                  hasher
                |) in
              let final_memory :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                        [
                          M.unevaluated_const
                            (mk_str (|
                              "openvm_circuit_system_memory_controller_MemoryImage_discriminant"
                            |))
                        ]
                        [ F ]
                    ],
                  final_memory
                |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                        ],
                      Value.Tuple
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.path "usize",
                              M.call_closure (|
                                Ty.path "usize",
                                BinOp.Wrap.rem,
                                [ M.read (| num_public_values |); CHUNK ]
                              |)
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 0 |)
                          |)
                        ]
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let left_val :=
                            M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                          let right_val :=
                            M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_1 |) in
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        Ty.path "bool",
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.eq,
                                            [
                                              M.read (| M.deref (| M.read (| left_val |) |) |);
                                              M.read (| M.deref (| M.read (| right_val |) |) |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.never_to_any (|
                                    M.read (|
                                      let~ kind : Ty.path "core::panicking::AssertKind" :=
                                        Value.StructTuple
                                          "core::panicking::AssertKind::Eq"
                                          []
                                          []
                                          [] in
                                      M.alloc (|
                                        Ty.path "never",
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (|
                                            "core::panicking::assert_failed",
                                            [],
                                            [ Ty.path "usize"; Ty.path "usize" ]
                                          |),
                                          [
                                            M.read (| kind |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| left_val |) |)
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| right_val |) |)
                                                |)
                                              |)
                                            |);
                                            Value.StructTuple
                                              "core::option::Option::Some"
                                              []
                                              [ Ty.path "core::fmt::Arguments" ]
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::Arguments",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::Arguments",
                                                    "new_v1",
                                                    [
                                                      Value.Integer IntegerKind.Usize 1;
                                                      Value.Integer IntegerKind.Usize 1
                                                    ],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 1 ]
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.path "str" ]
                                                              ],
                                                            Value.Array
                                                              [
                                                                mk_str (|
                                                                  "num_public_values must be a multiple of memory chunk "
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 1 ]
                                                              [ Ty.path "core::fmt::rt::Argument" ],
                                                            Value.Array
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [ Ty.path "usize" ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.alloc (|
                                                                            Ty.path "usize",
                                                                            CHUNK
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (Value.Tuple []))
                            ]
                          |)))
                    ]
                  |) in
                let~ root :
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                      [ CHUNK ]
                      [ F ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                      [ CHUNK ]
                      [ F ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                        [ CHUNK ]
                        [ F ],
                      "tree_from_memory",
                      [],
                      [ impl_Hasher_CHUNK__F___plus__Sync ]
                    |),
                    [
                      M.read (| memory_dimensions |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| final_memory |) |) |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| hasher |) |) |)
                    ]
                  |) in
                let~ num_pv_chunks : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.div,
                    [ M.read (| num_public_values |); CHUNK ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                UnOp.not (|
                                  M.call_closure (|
                                    Ty.path "bool",
                                    M.get_associated_function (|
                                      Ty.path "usize",
                                      "is_power_of_two",
                                      [],
                                      []
                                    |),
                                    [ M.read (| num_pv_chunks |) ]
                                  |)
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.never_to_any (|
                            M.call_closure (|
                              Ty.path "never",
                              M.get_function (| "core::panicking::panic_fmt", [], [] |),
                              [
                                M.call_closure (|
                                  Ty.path "core::fmt::Arguments",
                                  M.get_associated_function (|
                                    Ty.path "core::fmt::Arguments",
                                    "new_const",
                                    [ Value.Integer IntegerKind.Usize 1 ],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 1 ]
                                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                            Value.Array
                                              [ mk_str (| "pv_height must be a power of two" |) ]
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ pv_height : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_function (| "p3_util::log2_strict_usize", [], [] |),
                    [ M.read (| num_pv_chunks |) ]
                  |) in
                let~ address_leading_zeros : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    BinOp.Wrap.sub,
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          memory_dimensions,
                          "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                          "address_height"
                        |)
                      |);
                      M.read (| pv_height |)
                    ]
                  |) in
                let~ curr_node :
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                          [ CHUNK ]
                          [ F ];
                        Ty.path "alloc::alloc::Global"
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                          [ CHUNK ]
                          [ F ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::tree::MemoryNode")
                            [ CHUNK ]
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      [],
                      []
                    |),
                    [ M.read (| root |) ]
                  |) in
                let~ proof :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ]; Ty.path "alloc::alloc::Global"
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ]; Ty.path "alloc::alloc::Global"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ]; Ty.path "alloc::alloc::Global"
                        ],
                      "with_capacity",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.add,
                        [
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              memory_dimensions,
                              "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                              "as_height"
                            |)
                          |);
                          M.read (| address_leading_zeros |)
                        ]
                      |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.read (|
                    M.use
                      (M.alloc (|
                        Ty.tuple [],
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            M.call_closure (|
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                                [],
                                [],
                                "into_iter",
                                [],
                                []
                              |),
                              [
                                Value.mkStructRecord
                                  "core::ops::range::Range"
                                  []
                                  [ Ty.path "usize" ]
                                  [
                                    ("start", Value.Integer IntegerKind.Usize 0);
                                    ("end_",
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          memory_dimensions,
                                          "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                                          "as_height"
                                        |)
                                      |))
                                  ]
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ],
                                    γ
                                  |) in
                                M.read (|
                                  M.loop (|
                                    Ty.tuple [],
                                    ltac:(M.monadic
                                      (let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.path "usize" ],
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.path "usize" ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  []
                                                  [ Ty.path "usize" ],
                                                [],
                                                [],
                                                "next",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (|
                                                    M.borrow (| Pointer.Kind.MutRef, iter |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let _ :=
                                                  M.is_struct_tuple (|
                                                    γ,
                                                    "core::option::Option::None"
                                                  |) in
                                                M.never_to_any (| M.read (| M.break (||) |) |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                                M.read (|
                                                  let~ bit : Ty.path "u32" :=
                                                    M.call_closure (|
                                                      Ty.path "u32",
                                                      BinOp.Wrap.shl,
                                                      [
                                                        Value.Integer IntegerKind.U32 1;
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.sub,
                                                          [
                                                            M.call_closure (|
                                                              Ty.path "usize",
                                                              BinOp.Wrap.sub,
                                                              [
                                                                M.read (|
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    memory_dimensions,
                                                                    "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                                                                    "as_height"
                                                                  |)
                                                                |);
                                                                M.read (| i |)
                                                              ]
                                                            |);
                                                            Value.Integer IntegerKind.Usize 1
                                                          ]
                                                        |)
                                                      ]
                                                    |) in
                                                  M.alloc (|
                                                    Ty.tuple [],
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.alloc (|
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit::system::memory::tree::MemoryNode")
                                                                  [ CHUNK ]
                                                                  [ F ],
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_circuit::system::memory::tree::MemoryNode")
                                                                    [ CHUNK ]
                                                                    [ F ],
                                                                  M.get_trait_method (|
                                                                    "core::clone::Clone",
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit::system::memory::tree::MemoryNode")
                                                                      [ CHUNK ]
                                                                      [ F ],
                                                                    [],
                                                                    [],
                                                                    "clone",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "openvm_circuit::system::memory::tree::MemoryNode")
                                                                                [ CHUNK ]
                                                                                [ F ]
                                                                            ],
                                                                          M.get_trait_method (|
                                                                            "core::convert::AsRef",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::sync::Arc")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "openvm_circuit::system::memory::tree::MemoryNode")
                                                                                  [ CHUNK ]
                                                                                  [ F ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            [],
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "openvm_circuit::system::memory::tree::MemoryNode")
                                                                                [ CHUNK ]
                                                                                [ F ]
                                                                            ],
                                                                            "as_ref",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              curr_node
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |) in
                                                            let γ0_0 :=
                                                              M.SubPointer.get_struct_record_field (|
                                                                γ,
                                                                "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf",
                                                                "left"
                                                              |) in
                                                            let γ0_1 :=
                                                              M.SubPointer.get_struct_record_field (|
                                                                γ,
                                                                "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf",
                                                                "right"
                                                              |) in
                                                            let left :=
                                                              M.copy (|
                                                                Ty.apply
                                                                  (Ty.path "alloc::sync::Arc")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit::system::memory::tree::MemoryNode")
                                                                      [ CHUNK ]
                                                                      [ F ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                γ0_0
                                                              |) in
                                                            let right :=
                                                              M.copy (|
                                                                Ty.apply
                                                                  (Ty.path "alloc::sync::Arc")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit::system::memory::tree::MemoryNode")
                                                                      [ CHUNK ]
                                                                      [ F ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                γ0_1
                                                              |) in
                                                            M.match_operator (|
                                                              Ty.tuple [],
                                                              M.alloc (|
                                                                Ty.tuple [],
                                                                Value.Tuple []
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ :=
                                                                      M.use
                                                                        (M.alloc (|
                                                                          Ty.path "bool",
                                                                          M.call_closure (|
                                                                            Ty.path "bool",
                                                                            BinOp.ne,
                                                                            [
                                                                              M.call_closure (|
                                                                                Ty.path "u32",
                                                                                BinOp.Wrap.bit_and,
                                                                                [
                                                                                  M.read (|
                                                                                    get_constant (|
                                                                                      "openvm_circuit::system::memory::tree::public_values::PUBLIC_VALUES_ADDRESS_SPACE_OFFSET",
                                                                                      Ty.path "u32"
                                                                                    |)
                                                                                  |);
                                                                                  M.read (| bit |)
                                                                                ]
                                                                              |);
                                                                              Value.Integer
                                                                                IntegerKind.U32
                                                                                0
                                                                            ]
                                                                          |)
                                                                        |)) in
                                                                    let _ :=
                                                                      is_constant_or_break_match (|
                                                                        M.read (| γ |),
                                                                        Value.Bool true
                                                                      |) in
                                                                    M.read (|
                                                                      let~ _ : Ty.tuple [] :=
                                                                        M.write (|
                                                                          curr_node,
                                                                          M.read (| right |)
                                                                        |) in
                                                                      let~ _ : Ty.tuple [] :=
                                                                        M.call_closure (|
                                                                          Ty.tuple [],
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "array")
                                                                                  [ CHUNK ]
                                                                                  [ F ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            "push",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.MutRef,
                                                                              proof
                                                                            |);
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path "array")
                                                                                [ CHUNK ]
                                                                                [ F ],
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "openvm_circuit::system::memory::tree::MemoryNode")
                                                                                  [ CHUNK ]
                                                                                  [ F ],
                                                                                "hash",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "openvm_circuit::system::memory::tree::MemoryNode")
                                                                                            [ CHUNK
                                                                                            ]
                                                                                            [ F ]
                                                                                        ],
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::deref::Deref",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::sync::Arc")
                                                                                          []
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "openvm_circuit::system::memory::tree::MemoryNode")
                                                                                              [
                                                                                                CHUNK
                                                                                              ]
                                                                                              [ F ];
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ],
                                                                                        [],
                                                                                        [],
                                                                                        "deref",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          left
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |) in
                                                                      M.alloc (|
                                                                        Ty.tuple [],
                                                                        Value.Tuple []
                                                                      |)
                                                                    |)));
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (M.read (|
                                                                      let~ _ : Ty.tuple [] :=
                                                                        M.write (|
                                                                          curr_node,
                                                                          M.read (| left |)
                                                                        |) in
                                                                      let~ _ : Ty.tuple [] :=
                                                                        M.call_closure (|
                                                                          Ty.tuple [],
                                                                          M.get_associated_function (|
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::vec::Vec")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path "array")
                                                                                  [ CHUNK ]
                                                                                  [ F ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            "push",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.MutRef,
                                                                              proof
                                                                            |);
                                                                            M.call_closure (|
                                                                              Ty.apply
                                                                                (Ty.path "array")
                                                                                [ CHUNK ]
                                                                                [ F ],
                                                                              M.get_associated_function (|
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "openvm_circuit::system::memory::tree::MemoryNode")
                                                                                  [ CHUNK ]
                                                                                  [ F ],
                                                                                "hash",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.apply
                                                                                            (Ty.path
                                                                                              "openvm_circuit::system::memory::tree::MemoryNode")
                                                                                            [ CHUNK
                                                                                            ]
                                                                                            [ F ]
                                                                                        ],
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::deref::Deref",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::sync::Arc")
                                                                                          []
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "openvm_circuit::system::memory::tree::MemoryNode")
                                                                                              [
                                                                                                CHUNK
                                                                                              ]
                                                                                              [ F ];
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ],
                                                                                        [],
                                                                                        [],
                                                                                        "deref",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          right
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          ]
                                                                        |) in
                                                                      M.alloc (|
                                                                        Ty.tuple [],
                                                                        Value.Tuple []
                                                                      |)
                                                                    |)))
                                                              ]
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (M.never_to_any (|
                                                              M.call_closure (|
                                                                Ty.path "never",
                                                                M.get_function (|
                                                                  "core::panicking::panic",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  mk_str (|
                                                                    "internal error: entered unreachable code"
                                                                  |)
                                                                ]
                                                              |)
                                                            |)))
                                                      ]
                                                    |)
                                                  |)
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                  |)
                                |)))
                          ]
                        |)
                      |))
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.read (|
                    M.use
                      (M.alloc (|
                        Ty.tuple [],
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            M.call_closure (|
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                                [],
                                [],
                                "into_iter",
                                [],
                                []
                              |),
                              [
                                Value.mkStructRecord
                                  "core::ops::range::Range"
                                  []
                                  [ Ty.path "usize" ]
                                  [
                                    ("start", Value.Integer IntegerKind.Usize 0);
                                    ("end_", M.read (| address_leading_zeros |))
                                  ]
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ],
                                    γ
                                  |) in
                                M.read (|
                                  M.loop (|
                                    Ty.tuple [],
                                    ltac:(M.monadic
                                      (let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.path "usize" ],
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.path "usize" ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  []
                                                  [ Ty.path "usize" ],
                                                [],
                                                [],
                                                "next",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (|
                                                    M.borrow (| Pointer.Kind.MutRef, iter |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let _ :=
                                                  M.is_struct_tuple (|
                                                    γ,
                                                    "core::option::Option::None"
                                                  |) in
                                                M.never_to_any (| M.read (| M.break (||) |) |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.alloc (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_circuit::system::memory::tree::MemoryNode")
                                                              [ CHUNK ]
                                                              [ F ],
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::system::memory::tree::MemoryNode")
                                                                [ CHUNK ]
                                                                [ F ],
                                                              M.get_trait_method (|
                                                                "core::clone::Clone",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit::system::memory::tree::MemoryNode")
                                                                  [ CHUNK ]
                                                                  [ F ],
                                                                [],
                                                                [],
                                                                "clone",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_circuit::system::memory::tree::MemoryNode")
                                                                            [ CHUNK ]
                                                                            [ F ]
                                                                        ],
                                                                      M.get_trait_method (|
                                                                        "core::convert::AsRef",
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::sync::Arc")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "openvm_circuit::system::memory::tree::MemoryNode")
                                                                              [ CHUNK ]
                                                                              [ F ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        [],
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path
                                                                              "openvm_circuit::system::memory::tree::MemoryNode")
                                                                            [ CHUNK ]
                                                                            [ F ]
                                                                        ],
                                                                        "as_ref",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          curr_node
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |) in
                                                        let γ0_0 :=
                                                          M.SubPointer.get_struct_record_field (|
                                                            γ,
                                                            "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf",
                                                            "left"
                                                          |) in
                                                        let γ0_1 :=
                                                          M.SubPointer.get_struct_record_field (|
                                                            γ,
                                                            "openvm_circuit::system::memory::tree::MemoryNode::NonLeaf",
                                                            "right"
                                                          |) in
                                                        let left :=
                                                          M.copy (|
                                                            Ty.apply
                                                              (Ty.path "alloc::sync::Arc")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit::system::memory::tree::MemoryNode")
                                                                  [ CHUNK ]
                                                                  [ F ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            γ0_0
                                                          |) in
                                                        let right :=
                                                          M.copy (|
                                                            Ty.apply
                                                              (Ty.path "alloc::sync::Arc")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit::system::memory::tree::MemoryNode")
                                                                  [ CHUNK ]
                                                                  [ F ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            γ0_1
                                                          |) in
                                                        M.read (|
                                                          let~ _ : Ty.tuple [] :=
                                                            M.write (|
                                                              curr_node,
                                                              M.read (| left |)
                                                            |) in
                                                          let~ _ : Ty.tuple [] :=
                                                            M.call_closure (|
                                                              Ty.tuple [],
                                                              M.get_associated_function (|
                                                                Ty.apply
                                                                  (Ty.path "alloc::vec::Vec")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "array")
                                                                      [ CHUNK ]
                                                                      [ F ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                "push",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  proof
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [ CHUNK ]
                                                                    [ F ],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit::system::memory::tree::MemoryNode")
                                                                      [ CHUNK ]
                                                                      [ F ],
                                                                    "hash",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.call_closure (|
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "openvm_circuit::system::memory::tree::MemoryNode")
                                                                                [ CHUNK ]
                                                                                [ F ]
                                                                            ],
                                                                          M.get_trait_method (|
                                                                            "core::ops::deref::Deref",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "alloc::sync::Arc")
                                                                              []
                                                                              [
                                                                                Ty.apply
                                                                                  (Ty.path
                                                                                    "openvm_circuit::system::memory::tree::MemoryNode")
                                                                                  [ CHUNK ]
                                                                                  [ F ];
                                                                                Ty.path
                                                                                  "alloc::alloc::Global"
                                                                              ],
                                                                            [],
                                                                            [],
                                                                            "deref",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              right
                                                                            |)
                                                                          ]
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                            |) in
                                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                        |)));
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (M.never_to_any (|
                                                          M.call_closure (|
                                                            Ty.path "never",
                                                            M.get_function (|
                                                              "core::panicking::panic",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              mk_str (|
                                                                "internal error: entered unreachable code"
                                                              |)
                                                            ]
                                                          |)
                                                        |)))
                                                  ]
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                  |)
                                |)))
                          ]
                        |)
                      |))
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ],
                      "reverse",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.apply (Ty.path "array") [ CHUNK ] [ F ] ]
                              ],
                            M.get_trait_method (|
                              "core::ops::deref::DerefMut",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply (Ty.path "array") [ CHUNK ] [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              [],
                              "deref_mut",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.MutRef, proof |) ]
                          |)
                        |)
                      |)
                    ]
                  |) in
                proof
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance Instance_IsFunction_compute_merkle_proof_to_user_public_values_root :
          M.IsFunction.C
            "openvm_circuit::system::memory::tree::public_values::compute_merkle_proof_to_user_public_values_root"
            compute_merkle_proof_to_user_public_values_root.
        Admitted.
        Global Typeclasses Opaque compute_merkle_proof_to_user_public_values_root.
        
        (*
        pub fn extract_public_values<F: PrimeField32>(
            memory_dimensions: &MemoryDimensions,
            num_public_values: usize,
            final_memory: &MemoryImage<F>,
        ) -> Vec<F> {
            // All (addr, value) pairs in the public value address space.
            let f_as_start = PUBLIC_VALUES_ADDRESS_SPACE_OFFSET + memory_dimensions.as_offset;
            let f_as_end = PUBLIC_VALUES_ADDRESS_SPACE_OFFSET + memory_dimensions.as_offset + 1;
        
            // This clones the entire memory. Ideally this should run in time proportional to
            // the size of the PV address space, not entire memory.
            let final_memory: BTreeMap<Address, F> = final_memory.items().collect();
        
            let used_pvs: Vec<_> = final_memory
                .range((f_as_start, 0)..(f_as_end, 0))
                .map(|(&(_, pointer), &value)| (pointer as usize, value))
                .collect();
            if let Some(&last_pv) = used_pvs.last() {
                assert!(
                    last_pv.0 < num_public_values || last_pv.1 == F::ZERO,
                    "Last public value is out of bounds"
                );
            }
            let mut public_values = F::zero_vec(num_public_values);
            for (i, pv) in used_pvs {
                if i < num_public_values {
                    public_values[i] = pv;
                }
            }
            public_values
        }
        *)
        Definition extract_public_values
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          match ε, τ, α with
          | [], [ F ], [ memory_dimensions; num_public_values; final_memory ] =>
            ltac:(M.monadic
              (let memory_dimensions :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.path
                        "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions"
                    ],
                  memory_dimensions
                |) in
              let num_public_values := M.alloc (| Ty.path "usize", num_public_values |) in
              let final_memory :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                        [
                          M.unevaluated_const
                            (mk_str (|
                              "openvm_circuit_system_memory_controller_MemoryImage_discriminant"
                            |))
                        ]
                        [ F ]
                    ],
                  final_memory
                |) in
              M.read (|
                let~ f_as_start : Ty.path "u32" :=
                  M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.add,
                    [
                      M.read (|
                        get_constant (|
                          "openvm_circuit::system::memory::tree::public_values::PUBLIC_VALUES_ADDRESS_SPACE_OFFSET",
                          Ty.path "u32"
                        |)
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| memory_dimensions |) |),
                          "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                          "as_offset"
                        |)
                      |)
                    ]
                  |) in
                let~ f_as_end : Ty.path "u32" :=
                  M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.add,
                    [
                      M.call_closure (|
                        Ty.path "u32",
                        BinOp.Wrap.add,
                        [
                          M.read (|
                            get_constant (|
                              "openvm_circuit::system::memory::tree::public_values::PUBLIC_VALUES_ADDRESS_SPACE_OFFSET",
                              Ty.path "u32"
                            |)
                          |);
                          M.read (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| memory_dimensions |) |),
                              "openvm_circuit::system::memory::controller::dimensions::MemoryDimensions",
                              "as_offset"
                            |)
                          |)
                        ]
                      |);
                      Value.Integer IntegerKind.U32 1
                    ]
                  |) in
                let~ final_memory :
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                      []
                      [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; F; Ty.path "alloc::alloc::Global"
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                      []
                      [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; F; Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.associated_unknown,
                      [],
                      [],
                      "collect",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          []
                          [
                            Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                            F;
                            Ty.path "alloc::alloc::Global"
                          ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.associated_unknown,
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::paged_vec::AddressMap")
                            [ Value.Integer IntegerKind.Usize 4096 ]
                            [ F ],
                          "items",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| final_memory |) |) |) ]
                      |)
                    ]
                  |) in
                let~ used_pvs :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::collections::btree::map::Range")
                            []
                            [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; F ];
                          Ty.function
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ];
                                  Ty.apply (Ty.path "&") [] [ F ]
                                ]
                            ]
                            (Ty.tuple [ Ty.path "usize"; F ])
                        ],
                      [],
                      [],
                      "collect",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::collections::btree::map::Range")
                              []
                              [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; F ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ];
                                    Ty.apply (Ty.path "&") [] [ F ]
                                  ]
                              ]
                              (Ty.tuple [ Ty.path "usize"; F ])
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "alloc::collections::btree::map::Range")
                            []
                            [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; F ],
                          [],
                          [],
                          "map",
                          [],
                          [
                            Ty.tuple [ Ty.path "usize"; F ];
                            Ty.function
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ];
                                    Ty.apply (Ty.path "&") [] [ F ]
                                  ]
                              ]
                              (Ty.tuple [ Ty.path "usize"; F ])
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::collections::btree::map::Range")
                              []
                              [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ]; F ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::collections::btree::map::BTreeMap")
                                []
                                [
                                  Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                  F;
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "range",
                              [],
                              [
                                Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                Ty.apply
                                  (Ty.path "core::ops::range::Range")
                                  []
                                  [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ]
                              ]
                            |),
                            [
                              M.borrow (| Pointer.Kind.Ref, final_memory |);
                              Value.mkStructRecord
                                "core::ops::range::Range"
                                []
                                [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ]
                                [
                                  ("start",
                                    Value.Tuple
                                      [ M.read (| f_as_start |); Value.Integer IntegerKind.U32 0 ]);
                                  ("end_",
                                    Value.Tuple
                                      [ M.read (| f_as_end |); Value.Integer IntegerKind.U32 0 ])
                                ]
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.tuple [ Ty.path "usize"; F ],
                                      M.alloc (|
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [ Ty.tuple [ Ty.path "u32"; Ty.path "u32" ] ];
                                            Ty.apply (Ty.path "&") [] [ F ]
                                          ],
                                        α0
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let γ0_0 := M.deref (| M.read (| γ0_0 |) |) in
                                            let γ2_0 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                            let γ2_1 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                            let pointer := M.copy (| Ty.path "u32", γ2_1 |) in
                                            let γ0_1 := M.deref (| M.read (| γ0_1 |) |) in
                                            let value := M.copy (| F, γ0_1 |) in
                                            Value.Tuple
                                              [
                                                M.cast (Ty.path "usize") (M.read (| pointer |));
                                                M.read (| value |)
                                              ]))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.alloc (|
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.tuple [ Ty.path "usize"; F ] ] ],
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.apply (Ty.path "&") [] [ Ty.tuple [ Ty.path "usize"; F ] ] ],
                                M.get_associated_function (|
                                  Ty.apply (Ty.path "slice") [] [ Ty.tuple [ Ty.path "usize"; F ] ],
                                  "last",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [ Ty.tuple [ Ty.path "usize"; F ] ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::deref::Deref",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.tuple [ Ty.path "usize"; F ];
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          [],
                                          "deref",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.Ref, used_pvs |) ]
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            |) in
                          let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::option::Option::Some",
                              0
                            |) in
                          let γ0_0 := M.deref (| M.read (| γ0_0 |) |) in
                          let last_pv := M.copy (| Ty.tuple [ Ty.path "usize"; F ], γ0_0 |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            Ty.path "bool",
                                            UnOp.not (|
                                              LogicalOp.or (|
                                                M.call_closure (|
                                                  Ty.path "bool",
                                                  BinOp.lt,
                                                  [
                                                    M.read (|
                                                      M.SubPointer.get_tuple_field (| last_pv, 0 |)
                                                    |);
                                                    M.read (| num_public_values |)
                                                  ]
                                                |),
                                                ltac:(M.monadic
                                                  (M.call_closure (|
                                                    Ty.path "bool",
                                                    M.get_trait_method (|
                                                      "core::cmp::PartialEq",
                                                      F,
                                                      [],
                                                      [ F ],
                                                      "eq",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.SubPointer.get_tuple_field (|
                                                          last_pv,
                                                          1
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        get_constant (|
                                                          "p3_field::field::FieldAlgebra::ZERO",
                                                          F
                                                        |)
                                                      |)
                                                    ]
                                                  |)))
                                              |)
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.never_to_any (|
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                          [
                                            M.call_closure (|
                                              Ty.path "core::fmt::Arguments",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::Arguments",
                                                "new_const",
                                                [ Value.Integer IntegerKind.Usize 1 ],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Value.Integer IntegerKind.Usize 1 ]
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "str" ]
                                                          ],
                                                        Value.Array
                                                          [
                                                            mk_str (|
                                                              "Last public value is out of bounds"
                                                            |)
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ public_values :
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] :=
                  M.call_closure (|
                    Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "zero_vec",
                      [],
                      []
                    |),
                    [ M.read (| num_public_values |) ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.read (|
                    M.use
                      (M.alloc (|
                        Ty.tuple [],
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "alloc::vec::into_iter::IntoIter")
                              []
                              [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::vec::into_iter::IntoIter")
                                []
                                [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global" ],
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Ty.tuple [ Ty.path "usize"; F ]; Ty.path "alloc::alloc::Global"
                                  ],
                                [],
                                [],
                                "into_iter",
                                [],
                                []
                              |),
                              [ M.read (| used_pvs |) ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "alloc::vec::into_iter::IntoIter")
                                      []
                                      [
                                        Ty.tuple [ Ty.path "usize"; F ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    γ
                                  |) in
                                M.read (|
                                  M.loop (|
                                    Ty.tuple [],
                                    ltac:(M.monadic
                                      (let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.tuple [ Ty.path "usize"; F ] ],
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.tuple [ Ty.path "usize"; F ] ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::into_iter::IntoIter")
                                                  []
                                                  [
                                                    Ty.tuple [ Ty.path "usize"; F ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                [],
                                                "next",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (|
                                                    M.borrow (| Pointer.Kind.MutRef, iter |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let _ :=
                                                  M.is_struct_tuple (|
                                                    γ,
                                                    "core::option::Option::None"
                                                  |) in
                                                M.never_to_any (| M.read (| M.break (||) |) |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let γ1_0 :=
                                                  M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                                let γ1_1 :=
                                                  M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                                let i := M.copy (| Ty.path "usize", γ1_0 |) in
                                                let pv := M.copy (| F, γ1_1 |) in
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              Ty.path "bool",
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                BinOp.lt,
                                                                [
                                                                  M.read (| i |);
                                                                  M.read (| num_public_values |)
                                                                ]
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.read (|
                                                          let~ _ : Ty.tuple [] :=
                                                            M.write (|
                                                              M.deref (|
                                                                M.call_closure (|
                                                                  Ty.apply
                                                                    (Ty.path "&mut")
                                                                    []
                                                                    [ F ],
                                                                  M.get_trait_method (|
                                                                    "core::ops::index::IndexMut",
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        F;
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ],
                                                                    [],
                                                                    [ Ty.path "usize" ],
                                                                    "index_mut",
                                                                    [],
                                                                    []
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      public_values
                                                                    |);
                                                                    M.read (| i |)
                                                                  ]
                                                                |)
                                                              |),
                                                              M.read (| pv |)
                                                            |) in
                                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                        |)));
                                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                                  ]
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                  |)
                                |)))
                          ]
                        |)
                      |))
                  |) in
                public_values
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance Instance_IsFunction_extract_public_values :
          M.IsFunction.C
            "openvm_circuit::system::memory::tree::public_values::extract_public_values"
            extract_public_values.
        Admitted.
        Global Typeclasses Opaque extract_public_values.
      End public_values.
    End tree.
  End memory.
End system.
