(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module system.
  Module memory.
    Module volatile.
      Definition value_ADDR_ELTS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 2 |))).
      
      Global Instance Instance_IsConstant_value_ADDR_ELTS :
        M.IsFunction.C "openvm_circuit::system::memory::volatile::ADDR_ELTS" value_ADDR_ELTS.
      Admitted.
      Global Typeclasses Opaque value_ADDR_ELTS.
      
      Definition value_NUM_AS_LIMBS (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 1 |))).
      
      Global Instance Instance_IsConstant_value_NUM_AS_LIMBS :
        M.IsFunction.C "openvm_circuit::system::memory::volatile::NUM_AS_LIMBS" value_NUM_AS_LIMBS.
      Admitted.
      Global Typeclasses Opaque value_NUM_AS_LIMBS.
      
      (* StructRecord
        {
          name := "VolatileBoundaryCols";
          const_params := [];
          ty_params := [ "T" ];
          fields :=
            [
              ("addr_space_limbs",
                Ty.apply
                  (Ty.path "array")
                  [
                    M.unevaluated_const
                      (mk_str (|
                        "openvm_circuit_system_memory_volatile_VolatileBoundaryCols_addr_space_limbs_discriminant"
                      |))
                  ]
                  [ T ]);
              ("pointer_limbs",
                Ty.apply
                  (Ty.path "array")
                  [
                    M.unevaluated_const
                      (mk_str (|
                        "openvm_circuit_system_memory_volatile_VolatileBoundaryCols_pointer_limbs_discriminant"
                      |))
                  ]
                  [ T ]);
              ("initial_data", T);
              ("final_data", T);
              ("final_timestamp", T);
              ("is_valid", T);
              ("addr_lt_aux",
                Ty.apply
                  (Ty.path "openvm_circuit_primitives::is_less_than_array::IsLtArrayAuxCols")
                  [
                    M.unevaluated_const
                      (mk_str (|
                        "openvm_circuit_system_memory_volatile_VolatileBoundaryCols_discriminant"
                      |));
                    M.unevaluated_const
                      (mk_str (|
                        "openvm_circuit_system_memory_volatile_VolatileBoundaryCols_discriminant"
                      |))
                  ]
                  [ T ])
            ];
        } *)
      
      Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_circuit_system_memory_volatile_VolatileBoundaryCols_T.
        Definition Self (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
            []
            [ T ].
        
        (* Clone *)
        Definition clone (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                        []
                        [ T ]
                    ],
                  self
                |) in
              Value.mkStructRecord
                "openvm_circuit::system::memory::volatile::VolatileBoundaryCols"
                []
                [ T ]
                [
                  ("addr_space_limbs",
                    M.call_closure (|
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 1 ] [ T ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 1 ] [ T ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                "addr_space_limbs"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("pointer_limbs",
                    M.call_closure (|
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ T ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 2 ] [ T ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                "pointer_limbs"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("initial_data",
                    M.call_closure (|
                      T,
                      M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                "initial_data"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("final_data",
                    M.call_closure (|
                      T,
                      M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                "final_data"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("final_timestamp",
                    M.call_closure (|
                      T,
                      M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                "final_timestamp"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("is_valid",
                    M.call_closure (|
                      T,
                      M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                "is_valid"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("addr_lt_aux",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "openvm_circuit_primitives::is_less_than_array::IsLtArrayAuxCols")
                        [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 2 ]
                        [ T ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path
                            "openvm_circuit_primitives::is_less_than_array::IsLtArrayAuxCols")
                          [ Value.Integer IntegerKind.Usize 2; Value.Integer IntegerKind.Usize 2 ]
                          [ T ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                "addr_lt_aux"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self T)
            (* Instance *) [ ("clone", InstanceField.Method (clone T)) ].
      End Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_circuit_system_memory_volatile_VolatileBoundaryCols_T.
      
      Module Impl_core_marker_Copy_where_core_marker_Copy_T_for_openvm_circuit_system_memory_volatile_VolatileBoundaryCols_T.
        Definition Self (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
            []
            [ T ].
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "core::marker::Copy"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self T)
            (* Instance *) [].
      End Impl_core_marker_Copy_where_core_marker_Copy_T_for_openvm_circuit_system_memory_volatile_VolatileBoundaryCols_T.
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_circuit_system_memory_volatile_VolatileBoundaryCols_T.
        Definition Self (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
            []
            [ T ].
        
        (* Debug *)
        Definition fmt (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                        []
                        [ T ]
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.read (|
                let~ names :
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 7 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                      ] :=
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.alloc (|
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 7 ]
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                          Value.Array
                            [
                              mk_str (| "addr_space_limbs" |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| mk_str (| "pointer_limbs" |) |)
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| mk_str (| "initial_data" |) |)
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| mk_str (| "final_data" |) |)
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| mk_str (| "final_timestamp" |) |)
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| mk_str (| "is_valid" |) |)
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| mk_str (| "addr_lt_aux" |) |)
                              |)
                            ]
                        |)
                      |)
                    |)
                  |) in
                let~ values :
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 7 ]
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                            ]
                        ])
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                            ]
                        ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 7 ]
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                                ],
                              Value.Array
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 1 ]
                                            [ T ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                              "addr_space_limbs"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 2 ]
                                            [ T ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                              "pointer_limbs"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply (Ty.path "&") [] [ T ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                              "initial_data"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply (Ty.path "&") [] [ T ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                              "final_data"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply (Ty.path "&") [] [ T ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                              "final_timestamp"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply (Ty.path "&") [] [ T ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| self |) |),
                                              "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                              "is_valid"
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                    M.pointer_coercion
                                      M.PointerCoercion.Unsize
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit_primitives::is_less_than_array::IsLtArrayAuxCols")
                                                [
                                                  Value.Integer IntegerKind.Usize 2;
                                                  Value.Integer IntegerKind.Usize 2
                                                ]
                                                [ T ]
                                            ]
                                        ])
                                      (Ty.apply
                                        (Ty.path "&")
                                        []
                                        [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit_primitives::is_less_than_array::IsLtArrayAuxCols")
                                                    [
                                                      Value.Integer IntegerKind.Usize 2;
                                                      Value.Integer IntegerKind.Usize 2
                                                    ]
                                                    [ T ]
                                                ],
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| self |) |),
                                                  "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                                  "addr_lt_aux"
                                                |)
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                            |)
                          |)
                        |)
                      |)
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                    M.get_associated_function (|
                      Ty.path "core::fmt::Formatter",
                      "debug_struct_fields_finish",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (| mk_str (| "VolatileBoundaryCols" |) |)
                      |);
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ],
                        M.pointer_coercion
                          M.PointerCoercion.Unsize
                          (Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 7 ]
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                            ])
                          (Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                            ]),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| names |) |) |) ]
                      |);
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| values |) |) |)
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self T)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt T)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_circuit_system_memory_volatile_VolatileBoundaryCols_T.
      
      Module Impl_core_borrow_Borrow_openvm_circuit_system_memory_volatile_VolatileBoundaryCols_T_for_slice_T.
        Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ T ].
        
        (* AlignedBorrow *)
        Definition borrow (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                  self
                |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.tuple
                                    [
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                    ],
                                  Value.Tuple
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.path "usize",
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_associated_function (|
                                              Ty.apply (Ty.path "slice") [] [ T ],
                                              "len",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| self |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.path "usize",
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                                                []
                                                [ T ],
                                              "width",
                                              [],
                                              []
                                            |),
                                            []
                                          |)
                                        |)
                                      |)
                                    ]
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                      let left_val :=
                                        M.copy (|
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                          γ0_0
                                        |) in
                                      let right_val :=
                                        M.copy (|
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                          γ0_1
                                        |) in
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    Ty.path "bool",
                                                    UnOp.not (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        BinOp.eq,
                                                        [
                                                          M.read (|
                                                            M.deref (| M.read (| left_val |) |)
                                                          |);
                                                          M.read (|
                                                            M.deref (| M.read (| right_val |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)) in
                                              let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.never_to_any (|
                                                M.read (|
                                                  let~ kind :
                                                      Ty.path "core::panicking::AssertKind" :=
                                                    Value.StructTuple
                                                      "core::panicking::AssertKind::Eq"
                                                      []
                                                      []
                                                      [] in
                                                  M.alloc (|
                                                    Ty.path "never",
                                                    M.call_closure (|
                                                      Ty.path "never",
                                                      M.get_function (|
                                                        "core::panicking::assert_failed",
                                                        [],
                                                        [ Ty.path "usize"; Ty.path "usize" ]
                                                      |),
                                                      [
                                                        M.read (| kind |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| left_val |) |)
                                                            |)
                                                          |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| right_val |) |)
                                                            |)
                                                          |)
                                                        |);
                                                        Value.StructTuple
                                                          "core::option::Option::None"
                                                          []
                                                          [ Ty.path "core::fmt::Arguments" ]
                                                          []
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ => ltac:(M.monadic (Value.Tuple []))
                                        ]
                                      |)))
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                        []
                        [ T ]
                    ],
                  M.match_operator (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                          []
                          [ T ]
                      ],
                    M.alloc (|
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                                    []
                                    [ T ]
                                ]
                            ];
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                        ],
                      M.call_closure (|
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                                      []
                                      [ T ]
                                  ]
                              ];
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                          ],
                        M.get_associated_function (|
                          Ty.apply (Ty.path "slice") [] [ T ],
                          "align_to",
                          [],
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                              []
                              [ T ]
                          ]
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                          let prefix :=
                            M.copy (|
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                              γ0_0
                            |) in
                          let shorts :=
                            M.copy (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                                        []
                                        [ T ]
                                    ]
                                ],
                              γ0_1
                            |) in
                          let _suffix :=
                            M.copy (|
                              Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                              γ0_2
                            |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        Ty.path "bool",
                                                        UnOp.not (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            M.get_associated_function (|
                                                              Ty.apply (Ty.path "slice") [] [ T ],
                                                              "is_empty",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| prefix |) |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.never_to_any (|
                                                    M.call_closure (|
                                                      Ty.path "never",
                                                      M.get_function (|
                                                        "core::panicking::panic_fmt",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "core::fmt::Arguments",
                                                          M.get_associated_function (|
                                                            Ty.path "core::fmt::Arguments",
                                                            "new_const",
                                                            [ Value.Integer IntegerKind.Usize 1 ],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.alloc (|
                                                                    Ty.apply
                                                                      (Ty.path "array")
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          1
                                                                      ]
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [ Ty.path "str" ]
                                                                      ],
                                                                    Value.Array
                                                                      [
                                                                        mk_str (|
                                                                          "Alignment should match"
                                                                        |)
                                                                      ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |)));
                                              fun γ => ltac:(M.monadic (Value.Tuple []))
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                      |)));
                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (|
                                              Ty.tuple
                                                [
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                  Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                ],
                                              Value.Tuple
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.path "usize",
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        M.get_associated_function (|
                                                          Ty.apply
                                                            (Ty.path "slice")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                                                                []
                                                                [ T ]
                                                            ],
                                                          "len",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| shorts |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.path "usize",
                                                      Value.Integer IntegerKind.Usize 1
                                                    |)
                                                  |)
                                                ]
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                  let γ0_1 :=
                                                    M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                  let left_val :=
                                                    M.copy (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                      γ0_0
                                                    |) in
                                                  let right_val :=
                                                    M.copy (|
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                      γ0_1
                                                    |) in
                                                  M.match_operator (|
                                                    Ty.tuple [],
                                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                    [
                                                      fun γ =>
                                                        ltac:(M.monadic
                                                          (let γ :=
                                                            M.use
                                                              (M.alloc (|
                                                                Ty.path "bool",
                                                                UnOp.not (|
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.eq,
                                                                    [
                                                                      M.read (|
                                                                        M.deref (|
                                                                          M.read (| left_val |)
                                                                        |)
                                                                      |);
                                                                      M.read (|
                                                                        M.deref (|
                                                                          M.read (| right_val |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)) in
                                                          let _ :=
                                                            is_constant_or_break_match (|
                                                              M.read (| γ |),
                                                              Value.Bool true
                                                            |) in
                                                          M.never_to_any (|
                                                            M.read (|
                                                              let~ kind :
                                                                  Ty.path
                                                                    "core::panicking::AssertKind" :=
                                                                Value.StructTuple
                                                                  "core::panicking::AssertKind::Eq"
                                                                  []
                                                                  []
                                                                  [] in
                                                              M.alloc (|
                                                                Ty.path "never",
                                                                M.call_closure (|
                                                                  Ty.path "never",
                                                                  M.get_function (|
                                                                    "core::panicking::assert_failed",
                                                                    [],
                                                                    [
                                                                      Ty.path "usize";
                                                                      Ty.path "usize"
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.read (| kind |);
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| left_val |)
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |);
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| right_val |)
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |);
                                                                    Value.StructTuple
                                                                      "core::option::Option::None"
                                                                      []
                                                                      [
                                                                        Ty.path
                                                                          "core::fmt::Arguments"
                                                                      ]
                                                                      []
                                                                  ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)));
                                                      fun γ => ltac:(M.monadic (Value.Tuple []))
                                                    ]
                                                  |)))
                                            ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                      |)));
                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                ]
                              |) in
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                                    []
                                    [ T ]
                                ],
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_array_field (|
                                      M.deref (| M.read (| shorts |) |),
                                      Value.Integer IntegerKind.Usize 0
                                    |)
                                  |)
                                |)
                              |)
                            |)
                          |)))
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "core::borrow::Borrow"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                []
                [ T ]
            ]
            (Self T)
            (* Instance *) [ ("borrow", InstanceField.Method (borrow T)) ].
      End Impl_core_borrow_Borrow_openvm_circuit_system_memory_volatile_VolatileBoundaryCols_T_for_slice_T.
      
      Module Impl_core_borrow_BorrowMut_openvm_circuit_system_memory_volatile_VolatileBoundaryCols_T_for_slice_T.
        Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ T ].
        
        (* AlignedBorrow *)
        Definition borrow_mut
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                  self
                |) in
              M.borrow (|
                Pointer.Kind.MutRef,
                M.deref (|
                  M.read (|
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                              let _ :=
                                is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (|
                                      Ty.tuple
                                        [
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                        ],
                                      Value.Tuple
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Ty.path "usize",
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_associated_function (|
                                                  Ty.apply (Ty.path "slice") [] [ T ],
                                                  "len",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| self |) |)
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Ty.path "usize",
                                              M.call_closure (|
                                                Ty.path "usize",
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                                                    []
                                                    [ T ],
                                                  "width",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |)
                                            |)
                                          |)
                                        ]
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                          let left_val :=
                                            M.copy (|
                                              Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                              γ0_0
                                            |) in
                                          let right_val :=
                                            M.copy (|
                                              Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                              γ0_1
                                            |) in
                                          M.match_operator (|
                                            Ty.tuple [],
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ :=
                                                    M.use
                                                      (M.alloc (|
                                                        Ty.path "bool",
                                                        UnOp.not (|
                                                          M.call_closure (|
                                                            Ty.path "bool",
                                                            BinOp.eq,
                                                            [
                                                              M.read (|
                                                                M.deref (| M.read (| left_val |) |)
                                                              |);
                                                              M.read (|
                                                                M.deref (| M.read (| right_val |) |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)) in
                                                  let _ :=
                                                    is_constant_or_break_match (|
                                                      M.read (| γ |),
                                                      Value.Bool true
                                                    |) in
                                                  M.never_to_any (|
                                                    M.read (|
                                                      let~ kind :
                                                          Ty.path "core::panicking::AssertKind" :=
                                                        Value.StructTuple
                                                          "core::panicking::AssertKind::Eq"
                                                          []
                                                          []
                                                          [] in
                                                      M.alloc (|
                                                        Ty.path "never",
                                                        M.call_closure (|
                                                          Ty.path "never",
                                                          M.get_function (|
                                                            "core::panicking::assert_failed",
                                                            [],
                                                            [ Ty.path "usize"; Ty.path "usize" ]
                                                          |),
                                                          [
                                                            M.read (| kind |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |)
                                                              |)
                                                            |);
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              |)
                                                            |);
                                                            Value.StructTuple
                                                              "core::option::Option::None"
                                                              []
                                                              [ Ty.path "core::fmt::Arguments" ]
                                                              []
                                                          ]
                                                        |)
                                                      |)
                                                    |)
                                                  |)));
                                              fun γ => ltac:(M.monadic (Value.Tuple []))
                                            ]
                                          |)))
                                    ]
                                  |) in
                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                              |)));
                          fun γ => ltac:(M.monadic (Value.Tuple []))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                            []
                            [ T ]
                        ],
                      M.match_operator (|
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                              []
                              [ T ]
                          ],
                        M.alloc (|
                          Ty.tuple
                            [
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                                        []
                                        [ T ]
                                    ]
                                ];
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                            ],
                          M.call_closure (|
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ];
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                                          []
                                          [ T ]
                                      ]
                                  ];
                                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                              ],
                            M.get_associated_function (|
                              Ty.apply (Ty.path "slice") [] [ T ],
                              "align_to_mut",
                              [],
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                                  []
                                  [ T ]
                              ]
                            |),
                            [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                              let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                              let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                              let prefix :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                  γ0_0
                                |) in
                              let shorts :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                                            []
                                            [ T ]
                                        ]
                                    ],
                                  γ0_1
                                |) in
                              let _suffix :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                  γ0_2
                                |) in
                              M.read (|
                                let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.read (|
                                            let~ _ : Ty.tuple [] :=
                                              M.match_operator (|
                                                Ty.tuple [],
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ :=
                                                        M.use
                                                          (M.alloc (|
                                                            Ty.path "bool",
                                                            UnOp.not (|
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                M.get_associated_function (|
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [ T ],
                                                                  "is_empty",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| prefix |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)
                                                          |)) in
                                                      let _ :=
                                                        is_constant_or_break_match (|
                                                          M.read (| γ |),
                                                          Value.Bool true
                                                        |) in
                                                      M.never_to_any (|
                                                        M.call_closure (|
                                                          Ty.path "never",
                                                          M.get_function (|
                                                            "core::panicking::panic_fmt",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              Ty.path "core::fmt::Arguments",
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::Arguments",
                                                                "new_const",
                                                                [ Value.Integer IntegerKind.Usize 1
                                                                ],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.alloc (|
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              1
                                                                          ]
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "&")
                                                                              []
                                                                              [ Ty.path "str" ]
                                                                          ],
                                                                        Value.Array
                                                                          [
                                                                            mk_str (|
                                                                              "Alignment should match"
                                                                            |)
                                                                          ]
                                                                      |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      |)));
                                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                                ]
                                              |) in
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                          |)));
                                      fun γ => ltac:(M.monadic (Value.Tuple []))
                                    ]
                                  |) in
                                let~ _ : Ty.tuple [] :=
                                  M.match_operator (|
                                    Ty.tuple [],
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let γ :=
                                            M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                          let _ :=
                                            is_constant_or_break_match (|
                                              M.read (| γ |),
                                              Value.Bool true
                                            |) in
                                          M.read (|
                                            let~ _ : Ty.tuple [] :=
                                              M.match_operator (|
                                                Ty.tuple [],
                                                M.alloc (|
                                                  Ty.tuple
                                                    [
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                    ],
                                                  Value.Tuple
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Ty.path "usize",
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                                                                    []
                                                                    [ T ]
                                                                ],
                                                              "len",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| shorts |) |)
                                                              |)
                                                            ]
                                                          |)
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.alloc (|
                                                          Ty.path "usize",
                                                          Value.Integer IntegerKind.Usize 1
                                                        |)
                                                      |)
                                                    ]
                                                |),
                                                [
                                                  fun γ =>
                                                    ltac:(M.monadic
                                                      (let γ0_0 :=
                                                        M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                      let γ0_1 :=
                                                        M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                      let left_val :=
                                                        M.copy (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          γ0_0
                                                        |) in
                                                      let right_val :=
                                                        M.copy (|
                                                          Ty.apply
                                                            (Ty.path "&")
                                                            []
                                                            [ Ty.path "usize" ],
                                                          γ0_1
                                                        |) in
                                                      M.match_operator (|
                                                        Ty.tuple [],
                                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                        [
                                                          fun γ =>
                                                            ltac:(M.monadic
                                                              (let γ :=
                                                                M.use
                                                                  (M.alloc (|
                                                                    Ty.path "bool",
                                                                    UnOp.not (|
                                                                      M.call_closure (|
                                                                        Ty.path "bool",
                                                                        BinOp.eq,
                                                                        [
                                                                          M.read (|
                                                                            M.deref (|
                                                                              M.read (| left_val |)
                                                                            |)
                                                                          |);
                                                                          M.read (|
                                                                            M.deref (|
                                                                              M.read (| right_val |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |)
                                                                  |)) in
                                                              let _ :=
                                                                is_constant_or_break_match (|
                                                                  M.read (| γ |),
                                                                  Value.Bool true
                                                                |) in
                                                              M.never_to_any (|
                                                                M.read (|
                                                                  let~ kind :
                                                                      Ty.path
                                                                        "core::panicking::AssertKind" :=
                                                                    Value.StructTuple
                                                                      "core::panicking::AssertKind::Eq"
                                                                      []
                                                                      []
                                                                      [] in
                                                                  M.alloc (|
                                                                    Ty.path "never",
                                                                    M.call_closure (|
                                                                      Ty.path "never",
                                                                      M.get_function (|
                                                                        "core::panicking::assert_failed",
                                                                        [],
                                                                        [
                                                                          Ty.path "usize";
                                                                          Ty.path "usize"
                                                                        ]
                                                                      |),
                                                                      [
                                                                        M.read (| kind |);
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  left_val
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.deref (|
                                                                                M.read (|
                                                                                  right_val
                                                                                |)
                                                                              |)
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        Value.StructTuple
                                                                          "core::option::Option::None"
                                                                          []
                                                                          [
                                                                            Ty.path
                                                                              "core::fmt::Arguments"
                                                                          ]
                                                                          []
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)));
                                                          fun γ => ltac:(M.monadic (Value.Tuple []))
                                                        ]
                                                      |)))
                                                ]
                                              |) in
                                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                          |)));
                                      fun γ => ltac:(M.monadic (Value.Tuple []))
                                    ]
                                  |) in
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "&mut")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                                        []
                                        [ T ]
                                    ],
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.SubPointer.get_array_field (|
                                          M.deref (| M.read (| shorts |) |),
                                          Value.Integer IntegerKind.Usize 0
                                        |)
                                      |)
                                    |)
                                  |)
                                |)
                              |)))
                        ]
                      |)
                    |)
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (T : Ty.t),
          M.IsTraitInstance
            "core::borrow::BorrowMut"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              Ty.apply
                (Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                []
                [ T ]
            ]
            (Self T)
            (* Instance *) [ ("borrow_mut", InstanceField.Method (borrow_mut T)) ].
      End Impl_core_borrow_BorrowMut_openvm_circuit_system_memory_volatile_VolatileBoundaryCols_T_for_slice_T.
      
      Module Impl_openvm_circuit_system_memory_volatile_VolatileBoundaryCols_T.
        Definition Self (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
            []
            [ T ].
        
        (* AlignedBorrow *)
        Definition width (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [] =>
            ltac:(M.monadic
              (M.call_closure (|
                Ty.path "usize",
                M.get_function (|
                  "core::mem::size_of",
                  [],
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                      []
                      [ Ty.path "u8" ]
                  ]
                |),
                []
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_width :
          forall (T : Ty.t),
          M.IsAssociatedFunction.C (Self T) "width" (width T).
        Admitted.
        Global Typeclasses Opaque width.
      End Impl_openvm_circuit_system_memory_volatile_VolatileBoundaryCols_T.
      
      (* StructRecord
        {
          name := "VolatileBoundaryAir";
          const_params := [];
          ty_params := [];
          fields :=
            [
              ("memory_bus",
                Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus");
              ("addr_lt_air",
                Ty.apply
                  (Ty.path
                    "openvm_circuit_primitives::is_less_than_array::IsLtArrayWhenTransitionAir")
                  [
                    M.unevaluated_const
                      (mk_str (|
                        "openvm_circuit_system_memory_volatile_VolatileBoundaryAir_discriminant"
                      |))
                  ]
                  []);
              ("addr_space_limb_bits",
                Ty.apply
                  (Ty.path "array")
                  [
                    M.unevaluated_const
                      (mk_str (|
                        "openvm_circuit_system_memory_volatile_VolatileBoundaryAir_addr_space_limb_bits_discriminant"
                      |))
                  ]
                  [ Ty.path "usize" ]);
              ("pointer_limb_bits",
                Ty.apply
                  (Ty.path "array")
                  [
                    M.unevaluated_const
                      (mk_str (|
                        "openvm_circuit_system_memory_volatile_VolatileBoundaryAir_pointer_limb_bits_discriminant"
                      |))
                  ]
                  [ Ty.path "usize" ])
            ];
        } *)
      
      Module Impl_core_clone_Clone_for_openvm_circuit_system_memory_volatile_VolatileBoundaryAir.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryAir".
        
        (* Clone *)
        Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryAir" ],
                  self
                |) in
              Value.mkStructRecord
                "openvm_circuit::system::memory::volatile::VolatileBoundaryAir"
                []
                []
                [
                  ("memory_bus",
                    M.call_closure (|
                      Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::volatile::VolatileBoundaryAir",
                                "memory_bus"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("addr_lt_air",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path
                          "openvm_circuit_primitives::is_less_than_array::IsLtArrayWhenTransitionAir")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path
                            "openvm_circuit_primitives::is_less_than_array::IsLtArrayWhenTransitionAir")
                          [ Value.Integer IntegerKind.Usize 2 ]
                          [],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::volatile::VolatileBoundaryAir",
                                "addr_lt_air"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("addr_space_limb_bits",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 1 ]
                        [ Ty.path "usize" ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 1 ]
                          [ Ty.path "usize" ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::volatile::VolatileBoundaryAir",
                                "addr_space_limb_bits"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("pointer_limb_bits",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [ Ty.path "usize" ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 2 ]
                          [ Ty.path "usize" ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::memory::volatile::VolatileBoundaryAir",
                                "pointer_limb_bits"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("clone", InstanceField.Method clone) ].
      End Impl_core_clone_Clone_for_openvm_circuit_system_memory_volatile_VolatileBoundaryAir.
      
      Module Impl_core_fmt_Debug_for_openvm_circuit_system_memory_volatile_VolatileBoundaryAir.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryAir".
        
        (* Debug *)
        Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryAir" ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field4_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "VolatileBoundaryAir" |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "memory_bus" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [ Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus"
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::volatile::VolatileBoundaryAir",
                              "memory_bus"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "addr_lt_air" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_circuit_primitives::is_less_than_array::IsLtArrayWhenTransitionAir")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            []
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::volatile::VolatileBoundaryAir",
                              "addr_lt_air"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| mk_str (| "addr_space_limb_bits" |) |)
                  |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 1 ]
                            [ Ty.path "usize" ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::volatile::VolatileBoundaryAir",
                              "addr_space_limb_bits"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "pointer_limb_bits" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.path "usize" ]
                            ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [ Ty.path "usize" ]
                                ],
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::volatile::VolatileBoundaryAir",
                                  "pointer_limb_bits"
                                |)
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
      End Impl_core_fmt_Debug_for_openvm_circuit_system_memory_volatile_VolatileBoundaryAir.
      
      Module Impl_openvm_circuit_system_memory_volatile_VolatileBoundaryAir.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryAir".
        
        (*
            pub fn new(
                memory_bus: MemoryBus,
                addr_space_max_bits: usize,
                pointer_max_bits: usize,
                range_bus: VariableRangeCheckerBus,
            ) -> Self {
                let addr_lt_air =
                    IsLtArraySubAir::<ADDR_ELTS>::new(range_bus, addr_space_max_bits.max(pointer_max_bits))
                        .when_transition();
                let range_max_bits = range_bus.range_max_bits;
                let mut addr_space_limb_bits = [0; NUM_AS_LIMBS];
                let mut bits_remaining = addr_space_max_bits;
                for limb_bits in &mut addr_space_limb_bits {
                    *limb_bits = min(bits_remaining, range_max_bits);
                    bits_remaining -= *limb_bits;
                }
                assert_eq!(bits_remaining, 0, "addr_space_max_bits={addr_space_max_bits} with {NUM_AS_LIMBS} limbs exceeds range_max_bits={range_max_bits}");
                let mut pointer_limb_bits = [0; AUX_LEN];
                let mut bits_remaining = pointer_max_bits;
                for limb_bits in &mut pointer_limb_bits {
                    *limb_bits = min(bits_remaining, range_max_bits);
                    bits_remaining -= *limb_bits;
                }
                assert_eq!(bits_remaining, 0, "pointer_max_bits={pointer_max_bits} with {AUX_LEN} limbs exceeds range_max_bits={range_max_bits}");
                Self {
                    memory_bus,
                    addr_lt_air,
                    addr_space_limb_bits,
                    pointer_limb_bits,
                }
            }
        *)
        Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ memory_bus; addr_space_max_bits; pointer_max_bits; range_bus ] =>
            ltac:(M.monadic
              (let memory_bus :=
                M.alloc (|
                  Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                  memory_bus
                |) in
              let addr_space_max_bits := M.alloc (| Ty.path "usize", addr_space_max_bits |) in
              let pointer_max_bits := M.alloc (| Ty.path "usize", pointer_max_bits |) in
              let range_bus :=
                M.alloc (|
                  Ty.path "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                  range_bus
                |) in
              M.read (|
                let~ addr_lt_air :
                    Ty.apply
                      (Ty.path
                        "openvm_circuit_primitives::is_less_than_array::IsLtArrayWhenTransitionAir")
                      [ Value.Integer IntegerKind.Usize 2 ]
                      [] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit_primitives::is_less_than_array::IsLtArrayWhenTransitionAir")
                      [ Value.Integer IntegerKind.Usize 2 ]
                      [],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit_primitives::is_less_than_array::IsLtArraySubAir")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [],
                      "when_transition",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "openvm_circuit_primitives::is_less_than_array::IsLtArraySubAir")
                          [ Value.Integer IntegerKind.Usize 2 ]
                          [],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path
                              "openvm_circuit_primitives::is_less_than_array::IsLtArraySubAir")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [],
                          "new",
                          [],
                          []
                        |),
                        [
                          M.read (| range_bus |);
                          M.call_closure (|
                            Ty.path "usize",
                            M.get_trait_method (|
                              "core::cmp::Ord",
                              Ty.path "usize",
                              [],
                              [],
                              "max",
                              [],
                              []
                            |),
                            [ M.read (| addr_space_max_bits |); M.read (| pointer_max_bits |) ]
                          |)
                        ]
                      |)
                    ]
                  |) in
                let~ range_max_bits : Ty.path "usize" :=
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      range_bus,
                      "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                      "range_max_bits"
                    |)
                  |) in
                let~ addr_space_limb_bits :
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 1 ]
                      [ Ty.path "usize" ] :=
                  lib.repeat (|
                    Value.Integer IntegerKind.Usize 0,
                    Value.Integer IntegerKind.Usize 1
                  |) in
                let~ bits_remaining : Ty.path "usize" := M.read (| addr_space_max_bits |) in
                let~ _ : Ty.tuple [] :=
                  M.read (|
                    M.use
                      (M.alloc (|
                        Ty.tuple [],
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "usize" ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::slice::iter::IterMut")
                                []
                                [ Ty.path "usize" ],
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "usize" ]
                                  ],
                                [],
                                [],
                                "into_iter",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.MutRef, addr_space_limb_bits |) ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::slice::iter::IterMut")
                                      []
                                      [ Ty.path "usize" ],
                                    γ
                                  |) in
                                M.read (|
                                  M.loop (|
                                    Ty.tuple [],
                                    ltac:(M.monadic
                                      (let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.apply (Ty.path "&mut") [] [ Ty.path "usize" ] ],
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.apply (Ty.path "&mut") [] [ Ty.path "usize" ]
                                                ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::IterMut")
                                                  []
                                                  [ Ty.path "usize" ],
                                                [],
                                                [],
                                                "next",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (|
                                                    M.borrow (| Pointer.Kind.MutRef, iter |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let _ :=
                                                  M.is_struct_tuple (|
                                                    γ,
                                                    "core::option::Option::None"
                                                  |) in
                                                M.never_to_any (| M.read (| M.break (||) |) |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let limb_bits :=
                                                  M.copy (|
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      []
                                                      [ Ty.path "usize" ],
                                                    γ0_0
                                                  |) in
                                                M.read (|
                                                  let~ _ : Ty.tuple [] :=
                                                    M.write (|
                                                      M.deref (| M.read (| limb_bits |) |),
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        M.get_function (|
                                                          "core::cmp::min",
                                                          [],
                                                          [ Ty.path "usize" ]
                                                        |),
                                                        [
                                                          M.read (| bits_remaining |);
                                                          M.read (| range_max_bits |)
                                                        ]
                                                      |)
                                                    |) in
                                                  let~ _ : Ty.tuple [] :=
                                                    let β := bits_remaining in
                                                    M.write (|
                                                      β,
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.sub,
                                                        [
                                                          M.read (| β |);
                                                          M.read (|
                                                            M.deref (| M.read (| limb_bits |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |) in
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                  |)
                                |)))
                          ]
                        |)
                      |))
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                        ],
                      Value.Tuple
                        [
                          M.borrow (| Pointer.Kind.Ref, bits_remaining |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 0 |)
                          |)
                        ]
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let left_val :=
                            M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                          let right_val :=
                            M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_1 |) in
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        Ty.path "bool",
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.eq,
                                            [
                                              M.read (| M.deref (| M.read (| left_val |) |) |);
                                              M.read (| M.deref (| M.read (| right_val |) |) |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.never_to_any (|
                                    M.read (|
                                      let~ kind : Ty.path "core::panicking::AssertKind" :=
                                        Value.StructTuple
                                          "core::panicking::AssertKind::Eq"
                                          []
                                          []
                                          [] in
                                      M.alloc (|
                                        Ty.path "never",
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (|
                                            "core::panicking::assert_failed",
                                            [],
                                            [ Ty.path "usize"; Ty.path "usize" ]
                                          |),
                                          [
                                            M.read (| kind |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| left_val |) |)
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| right_val |) |)
                                                |)
                                              |)
                                            |);
                                            Value.StructTuple
                                              "core::option::Option::Some"
                                              []
                                              [ Ty.path "core::fmt::Arguments" ]
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::Arguments",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::Arguments",
                                                    "new_v1",
                                                    [
                                                      Value.Integer IntegerKind.Usize 3;
                                                      Value.Integer IntegerKind.Usize 3
                                                    ],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 3 ]
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.path "str" ]
                                                              ],
                                                            Value.Array
                                                              [
                                                                mk_str (| "addr_space_max_bits=" |);
                                                                mk_str (| " with " |);
                                                                mk_str (|
                                                                  " limbs exceeds range_max_bits="
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 3 ]
                                                              [ Ty.path "core::fmt::rt::Argument" ],
                                                            Value.Array
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [ Ty.path "usize" ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          addr_space_max_bits
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [ Ty.path "usize" ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          get_constant (|
                                                                            "openvm_circuit::system::memory::volatile::NUM_AS_LIMBS",
                                                                            Ty.path "usize"
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [ Ty.path "usize" ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          range_max_bits
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (Value.Tuple []))
                            ]
                          |)))
                    ]
                  |) in
                let~ pointer_limb_bits :
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 2 ]
                      [ Ty.path "usize" ] :=
                  lib.repeat (|
                    Value.Integer IntegerKind.Usize 0,
                    Value.Integer IntegerKind.Usize 2
                  |) in
                let~ bits_remaining : Ty.path "usize" := M.read (| pointer_max_bits |) in
                let~ _ : Ty.tuple [] :=
                  M.read (|
                    M.use
                      (M.alloc (|
                        Ty.tuple [],
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ Ty.path "usize" ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::slice::iter::IterMut")
                                []
                                [ Ty.path "usize" ],
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [ Ty.path "usize" ]
                                  ],
                                [],
                                [],
                                "into_iter",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.MutRef, pointer_limb_bits |) ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::slice::iter::IterMut")
                                      []
                                      [ Ty.path "usize" ],
                                    γ
                                  |) in
                                M.read (|
                                  M.loop (|
                                    Ty.tuple [],
                                    ltac:(M.monadic
                                      (let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.apply (Ty.path "&mut") [] [ Ty.path "usize" ] ],
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.apply (Ty.path "&mut") [] [ Ty.path "usize" ]
                                                ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::IterMut")
                                                  []
                                                  [ Ty.path "usize" ],
                                                [],
                                                [],
                                                "next",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (|
                                                    M.borrow (| Pointer.Kind.MutRef, iter |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let _ :=
                                                  M.is_struct_tuple (|
                                                    γ,
                                                    "core::option::Option::None"
                                                  |) in
                                                M.never_to_any (| M.read (| M.break (||) |) |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let limb_bits :=
                                                  M.copy (|
                                                    Ty.apply
                                                      (Ty.path "&mut")
                                                      []
                                                      [ Ty.path "usize" ],
                                                    γ0_0
                                                  |) in
                                                M.read (|
                                                  let~ _ : Ty.tuple [] :=
                                                    M.write (|
                                                      M.deref (| M.read (| limb_bits |) |),
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        M.get_function (|
                                                          "core::cmp::min",
                                                          [],
                                                          [ Ty.path "usize" ]
                                                        |),
                                                        [
                                                          M.read (| bits_remaining |);
                                                          M.read (| range_max_bits |)
                                                        ]
                                                      |)
                                                    |) in
                                                  let~ _ : Ty.tuple [] :=
                                                    let β := bits_remaining in
                                                    M.write (|
                                                      β,
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.sub,
                                                        [
                                                          M.read (| β |);
                                                          M.read (|
                                                            M.deref (| M.read (| limb_bits |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |) in
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                  |)
                                |)))
                          ]
                        |)
                      |))
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                        ],
                      Value.Tuple
                        [
                          M.borrow (| Pointer.Kind.Ref, bits_remaining |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 0 |)
                          |)
                        ]
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                          let left_val :=
                            M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_0 |) in
                          let right_val :=
                            M.copy (| Ty.apply (Ty.path "&") [] [ Ty.path "usize" ], γ0_1 |) in
                          M.match_operator (|
                            Ty.tuple [],
                            M.alloc (| Ty.tuple [], Value.Tuple [] |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (let γ :=
                                    M.use
                                      (M.alloc (|
                                        Ty.path "bool",
                                        UnOp.not (|
                                          M.call_closure (|
                                            Ty.path "bool",
                                            BinOp.eq,
                                            [
                                              M.read (| M.deref (| M.read (| left_val |) |) |);
                                              M.read (| M.deref (| M.read (| right_val |) |) |)
                                            ]
                                          |)
                                        |)
                                      |)) in
                                  let _ :=
                                    is_constant_or_break_match (|
                                      M.read (| γ |),
                                      Value.Bool true
                                    |) in
                                  M.never_to_any (|
                                    M.read (|
                                      let~ kind : Ty.path "core::panicking::AssertKind" :=
                                        Value.StructTuple
                                          "core::panicking::AssertKind::Eq"
                                          []
                                          []
                                          [] in
                                      M.alloc (|
                                        Ty.path "never",
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (|
                                            "core::panicking::assert_failed",
                                            [],
                                            [ Ty.path "usize"; Ty.path "usize" ]
                                          |),
                                          [
                                            M.read (| kind |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| left_val |) |)
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| right_val |) |)
                                                |)
                                              |)
                                            |);
                                            Value.StructTuple
                                              "core::option::Option::Some"
                                              []
                                              [ Ty.path "core::fmt::Arguments" ]
                                              [
                                                M.call_closure (|
                                                  Ty.path "core::fmt::Arguments",
                                                  M.get_associated_function (|
                                                    Ty.path "core::fmt::Arguments",
                                                    "new_v1",
                                                    [
                                                      Value.Integer IntegerKind.Usize 3;
                                                      Value.Integer IntegerKind.Usize 3
                                                    ],
                                                    []
                                                  |),
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 3 ]
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [ Ty.path "str" ]
                                                              ],
                                                            Value.Array
                                                              [
                                                                mk_str (| "pointer_max_bits=" |);
                                                                mk_str (| " with " |);
                                                                mk_str (|
                                                                  " limbs exceeds range_max_bits="
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.alloc (|
                                                            Ty.apply
                                                              (Ty.path "array")
                                                              [ Value.Integer IntegerKind.Usize 3 ]
                                                              [ Ty.path "core::fmt::rt::Argument" ],
                                                            Value.Array
                                                              [
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [ Ty.path "usize" ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          pointer_max_bits
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [ Ty.path "usize" ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          get_constant (|
                                                                            "openvm_circuit::system::memory::offline_checker::bridge::AUX_LEN",
                                                                            Ty.path "usize"
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |);
                                                                M.call_closure (|
                                                                  Ty.path "core::fmt::rt::Argument",
                                                                  M.get_associated_function (|
                                                                    Ty.path
                                                                      "core::fmt::rt::Argument",
                                                                    "new_display",
                                                                    [],
                                                                    [ Ty.path "usize" ]
                                                                  |),
                                                                  [
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      M.deref (|
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          range_max_bits
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]
                                                |)
                                              ]
                                          ]
                                        |)
                                      |)
                                    |)
                                  |)));
                              fun γ => ltac:(M.monadic (Value.Tuple []))
                            ]
                          |)))
                    ]
                  |) in
                M.alloc (|
                  Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryAir",
                  Value.mkStructRecord
                    "openvm_circuit::system::memory::volatile::VolatileBoundaryAir"
                    []
                    []
                    [
                      ("memory_bus", M.read (| memory_bus |));
                      ("addr_lt_air", M.read (| addr_lt_air |));
                      ("addr_space_limb_bits", M.read (| addr_space_limb_bits |));
                      ("pointer_limb_bits", M.read (| pointer_limb_bits |))
                    ]
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
        Admitted.
        Global Typeclasses Opaque new.
        
        (*
            pub fn range_bus(&self) -> VariableRangeCheckerBus {
                self.addr_lt_air.0.lt.bus
            }
        *)
        Definition range_bus (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryAir" ],
                  self
                |) in
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.SubPointer.get_struct_record_field (|
                    M.SubPointer.get_struct_tuple_field (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::system::memory::volatile::VolatileBoundaryAir",
                        "addr_lt_air"
                      |),
                      "openvm_circuit_primitives::is_less_than_array::IsLtArrayWhenTransitionAir",
                      0
                    |),
                    "openvm_circuit_primitives::is_less_than_array::IsLtArraySubAir",
                    "lt"
                  |),
                  "openvm_circuit_primitives::is_less_than::IsLtSubAir",
                  "bus"
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_range_bus :
          M.IsAssociatedFunction.C Self "range_bus" range_bus.
        Admitted.
        Global Typeclasses Opaque range_bus.
      End Impl_openvm_circuit_system_memory_volatile_VolatileBoundaryAir.
      
      Module Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_where_p3_field_field_Field_F_F_for_openvm_circuit_system_memory_volatile_VolatileBoundaryAir.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryAir".
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "openvm_stark_backend::rap::BaseAirWithPublicValues"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self F)
            (* Instance *) [].
      End Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_where_p3_field_field_Field_F_F_for_openvm_circuit_system_memory_volatile_VolatileBoundaryAir.
      
      Module Impl_openvm_stark_backend_rap_PartitionedBaseAir_where_p3_field_field_Field_F_F_for_openvm_circuit_system_memory_volatile_VolatileBoundaryAir.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryAir".
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "openvm_stark_backend::rap::PartitionedBaseAir"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self F)
            (* Instance *) [].
      End Impl_openvm_stark_backend_rap_PartitionedBaseAir_where_p3_field_field_Field_F_F_for_openvm_circuit_system_memory_volatile_VolatileBoundaryAir.
      
      Module Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_circuit_system_memory_volatile_VolatileBoundaryAir.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryAir".
        
        (*
            fn width(&self) -> usize {
                VolatileBoundaryCols::<F>::width()
            }
        *)
        Definition width (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryAir" ],
                  self
                |) in
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                    []
                    [ F ],
                  "width",
                  [],
                  []
                |),
                []
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "p3_air::air::BaseAir"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self F)
            (* Instance *) [ ("width", InstanceField.Method (width F)) ].
      End Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_circuit_system_memory_volatile_VolatileBoundaryAir.
      
      Module Impl_p3_air_air_Air_where_openvm_stark_backend_interaction_InteractionBuilder_AB_AB_for_openvm_circuit_system_memory_volatile_VolatileBoundaryAir.
        Definition Self (AB : Ty.t) : Ty.t :=
          Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryAir".
        
        (*
            fn eval(&self, builder: &mut AB) {
                let main = builder.main();
        
                let [local, next] = [0, 1].map(|i| main.row_slice(i));
                let local: &VolatileBoundaryCols<_> = ( *local).borrow();
                let next: &VolatileBoundaryCols<_> = ( *next).borrow();
        
                builder.assert_bool(local.is_valid);
        
                // Ensuring all non-padding rows are at the bottom
                builder
                    .when_transition()
                    .assert_one(implies(next.is_valid, local.is_valid));
        
                // Range check local.addr_space_limbs to addr_space_max_bits
                for (&limb, limb_bits) in zip_eq(&local.addr_space_limbs, self.addr_space_limb_bits) {
                    self.range_bus()
                        .range_check(limb, limb_bits)
                        .eval(builder, local.is_valid);
                }
                // Range check local.pointer_limbs to pointer_max_bits
                for (&limb, limb_bits) in zip_eq(&local.pointer_limbs, self.pointer_limb_bits) {
                    self.range_bus()
                        .range_check(limb, limb_bits)
                        .eval(builder, local.is_valid);
                }
                let range_max_bits = self.range_bus().range_max_bits;
                // Compose addr_space_limbs and pointer_limbs into addr_space, pointer for both local and
                // next
                let [addr_space, next_addr_space] = [&local.addr_space_limbs, &next.addr_space_limbs]
                    .map(|limbs| compose::<AB::Expr>(limbs, range_max_bits));
                let [pointer, next_pointer] = [&local.pointer_limbs, &next.pointer_limbs]
                    .map(|limbs| compose::<AB::Expr>(limbs, range_max_bits));
        
                // Assert local addr < next addr when next.is_valid
                // This ensures the addresses in non-padding rows are all sorted
                let lt_io = IsLtArrayIo {
                    x: [addr_space.clone(), pointer.clone()],
                    y: [next_addr_space, next_pointer],
                    out: AB::Expr::ONE,
                    count: next.is_valid.into(),
                };
                // N.B.: this will do range checks (but not other constraints) on the last row if the first
                // row has is_valid = 1 due to wraparound
                self.addr_lt_air
                    .eval(builder, (lt_io, (&local.addr_lt_aux).into()));
        
                // Write the initial memory values at initial timestamps
                self.memory_bus
                    .send(
                        MemoryAddress::new(addr_space.clone(), pointer.clone()),
                        vec![local.initial_data],
                        AB::Expr::ZERO,
                    )
                    .eval(builder, local.is_valid);
        
                // Read the final memory values at last timestamps when written to
                self.memory_bus
                    .receive(
                        MemoryAddress::new(addr_space.clone(), pointer.clone()),
                        vec![local.final_data],
                        local.final_timestamp,
                    )
                    .eval(builder, local.is_valid);
            }
        *)
        Definition eval (AB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self AB in
          match ε, τ, α with
          | [], [], [ self; builder ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryAir" ],
                  self
                |) in
              let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
              M.read (|
                let~ main : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M" :=
                  M.call_closure (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M",
                    M.get_trait_method (| "p3_air::air::AirBuilder", AB, [], [], "main", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| builder |) |) |) ]
                  |) in
                M.alloc (|
                  Ty.tuple [],
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (|
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [
                          Ty.associated_in_trait
                            "p3_matrix::Matrix"
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                            (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                            "{{synthetic}}'2"
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 2 ]
                          [
                            Ty.associated_in_trait
                              "p3_matrix::Matrix"
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                              (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                              "{{synthetic}}'2"
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.path "usize" ],
                          "map",
                          [],
                          [
                            Ty.function
                              [ Ty.path "usize" ]
                              (Ty.associated_in_trait
                                "p3_matrix::Matrix"
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                                (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                                "{{synthetic}}'2");
                            Ty.associated_in_trait
                              "p3_matrix::Matrix"
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                              (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                              "{{synthetic}}'2"
                          ]
                        |),
                        [
                          Value.Array
                            [ Value.Integer IntegerKind.Usize 0; Value.Integer IntegerKind.Usize 1
                            ];
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.associated_in_trait
                                        "p3_matrix::Matrix"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ]
                                        (Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "M")
                                        "{{synthetic}}'2",
                                      M.alloc (| Ty.path "usize", α0 |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let i := M.copy (| Ty.path "usize", γ |) in
                                            M.call_closure (|
                                              Ty.associated_in_trait
                                                "p3_matrix::Matrix"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Var"
                                                ]
                                                (Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "M")
                                                "{{synthetic}}'2",
                                              M.get_trait_method (|
                                                "p3_matrix::Matrix",
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "M",
                                                [],
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Var"
                                                ],
                                                "row_slice",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (| Pointer.Kind.Ref, main |);
                                                M.read (| i |)
                                              ]
                                            |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |)
                    |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ0_0 := M.SubPointer.get_slice_index (| γ, 0 |) in
                          let γ0_1 := M.SubPointer.get_slice_index (| γ, 1 |) in
                          let local :=
                            M.copy (|
                              Ty.associated_in_trait
                                "p3_matrix::Matrix"
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                                (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                                "{{synthetic}}'2",
                              γ0_0
                            |) in
                          let next :=
                            M.copy (|
                              Ty.associated_in_trait
                                "p3_matrix::Matrix"
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                                (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                                "{{synthetic}}'2",
                              γ0_1
                            |) in
                          M.read (|
                            let~ local :
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                  ] :=
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::borrow::Borrow",
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ]
                                      ],
                                      "borrow",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Var"
                                                  ]
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.associated_in_trait
                                                "p3_matrix::Matrix"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Var"
                                                ]
                                                (Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "M")
                                                "{{synthetic}}'2",
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, local |) ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |) in
                            let~ next :
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                  ] :=
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::borrow::Borrow",
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ]
                                      ],
                                      "borrow",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Var"
                                                  ]
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.associated_in_trait
                                                "p3_matrix::Matrix"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Var"
                                                ]
                                                (Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "M")
                                                "{{synthetic}}'2",
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, next |) ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_trait_method (|
                                  "p3_air::air::AirBuilder",
                                  AB,
                                  [],
                                  [],
                                  "assert_bool",
                                  [],
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.read (| builder |) |)
                                  |);
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| local |) |),
                                      "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                      "is_valid"
                                    |)
                                  |)
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_trait_method (|
                                  "p3_air::air::AirBuilder",
                                  Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                                  [],
                                  [],
                                  "assert_one",
                                  [],
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "p3_air::air::FilteredAirBuilder")
                                        []
                                        [ AB ],
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "p3_air::air::FilteredAirBuilder")
                                          []
                                          [ AB ],
                                        M.get_trait_method (|
                                          "p3_air::air::AirBuilder",
                                          AB,
                                          [],
                                          [],
                                          "when_transition",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (| M.read (| builder |) |)
                                          |)
                                        ]
                                      |)
                                    |)
                                  |);
                                  M.call_closure (|
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    M.get_function (|
                                      "openvm_circuit_primitives::utils::implies",
                                      [],
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr";
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var";
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                    |),
                                    [
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| next |) |),
                                          "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                          "is_valid"
                                        |)
                                      |);
                                      M.read (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| local |) |),
                                          "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                          "is_valid"
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.read (|
                                M.use
                                  (M.alloc (|
                                    Ty.tuple [],
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "itertools::zip_eq_impl::ZipEq")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Var"
                                              ];
                                            Ty.apply
                                              (Ty.path "core::array::iter::IntoIter")
                                              [ Value.Integer IntegerKind.Usize 1 ]
                                              [ Ty.path "usize" ]
                                          ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "itertools::zip_eq_impl::ZipEq")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Var"
                                                ];
                                              Ty.apply
                                                (Ty.path "core::array::iter::IntoIter")
                                                [ Value.Integer IntegerKind.Usize 1 ]
                                                [ Ty.path "usize" ]
                                            ],
                                          M.get_trait_method (|
                                            "core::iter::traits::collect::IntoIterator",
                                            Ty.apply
                                              (Ty.path "itertools::zip_eq_impl::ZipEq")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Var"
                                                  ];
                                                Ty.apply
                                                  (Ty.path "core::array::iter::IntoIter")
                                                  [ Value.Integer IntegerKind.Usize 1 ]
                                                  [ Ty.path "usize" ]
                                              ],
                                            [],
                                            [],
                                            "into_iter",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "itertools::zip_eq_impl::ZipEq")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Var"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "core::array::iter::IntoIter")
                                                    [ Value.Integer IntegerKind.Usize 1 ]
                                                    [ Ty.path "usize" ]
                                                ],
                                              M.get_function (|
                                                "itertools::zip_eq_impl::zip_eq",
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 1 ]
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Var"
                                                        ]
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Value.Integer IntegerKind.Usize 1 ]
                                                    [ Ty.path "usize" ]
                                                ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| local |) |),
                                                    "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                                    "addr_space_limbs"
                                                  |)
                                                |);
                                                M.read (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "openvm_circuit::system::memory::volatile::VolatileBoundaryAir",
                                                    "addr_space_limb_bits"
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let iter :=
                                              M.copy (|
                                                Ty.apply
                                                  (Ty.path "itertools::zip_eq_impl::ZipEq")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "core::array::iter::IntoIter")
                                                      [ Value.Integer IntegerKind.Usize 1 ]
                                                      [ Ty.path "usize" ]
                                                  ],
                                                γ
                                              |) in
                                            M.read (|
                                              M.loop (|
                                                Ty.tuple [],
                                                ltac:(M.monadic
                                                  (let~ _ : Ty.tuple [] :=
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Var"
                                                                  ];
                                                                Ty.path "usize"
                                                              ]
                                                          ],
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Var"
                                                                    ];
                                                                  Ty.path "usize"
                                                                ]
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "itertools::zip_eq_impl::ZipEq")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Var"
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::array::iter::IntoIter")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      1
                                                                  ]
                                                                  [ Ty.path "usize" ]
                                                              ],
                                                            [],
                                                            [],
                                                            "next",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  iter
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let _ :=
                                                              M.is_struct_tuple (|
                                                                γ,
                                                                "core::option::Option::None"
                                                              |) in
                                                            M.never_to_any (|
                                                              M.read (| M.break (||) |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::option::Option::Some",
                                                                0
                                                              |) in
                                                            let γ1_0 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ0_0,
                                                                0
                                                              |) in
                                                            let γ1_1 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ0_0,
                                                                1
                                                              |) in
                                                            let γ1_0 :=
                                                              M.deref (| M.read (| γ1_0 |) |) in
                                                            let limb :=
                                                              M.copy (|
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Var",
                                                                γ1_0
                                                              |) in
                                                            let limb_bits :=
                                                              M.copy (| Ty.path "usize", γ1_1 |) in
                                                            M.read (|
                                                              let~ _ : Ty.tuple [] :=
                                                                M.call_closure (|
                                                                  Ty.tuple [],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBusInteraction")
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Expr"
                                                                      ],
                                                                    "eval",
                                                                    [],
                                                                    [
                                                                      AB;
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Var"
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBusInteraction")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::AirBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "Expr"
                                                                        ],
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                                                                        "range_check",
                                                                        [],
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::AirBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "Expr";
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::AirBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "Var"
                                                                        ]
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.alloc (|
                                                                            Ty.path
                                                                              "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                                                                            M.call_closure (|
                                                                              Ty.path
                                                                                "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                                                                              M.get_associated_function (|
                                                                                Ty.path
                                                                                  "openvm_circuit::system::memory::volatile::VolatileBoundaryAir",
                                                                                "range_bus",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      self
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        M.read (| limb |);
                                                                        M.read (| limb_bits |)
                                                                      ]
                                                                    |);
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.deref (|
                                                                        M.read (| builder |)
                                                                      |)
                                                                    |);
                                                                    M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.read (| local |)
                                                                        |),
                                                                        "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                                                        "is_valid"
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |) in
                                                              M.alloc (|
                                                                Ty.tuple [],
                                                                Value.Tuple []
                                                              |)
                                                            |)))
                                                      ]
                                                    |) in
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                              |)
                                            |)))
                                      ]
                                    |)
                                  |))
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.read (|
                                M.use
                                  (M.alloc (|
                                    Ty.tuple [],
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "itertools::zip_eq_impl::ZipEq")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "core::slice::iter::Iter")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Var"
                                              ];
                                            Ty.apply
                                              (Ty.path "core::array::iter::IntoIter")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [ Ty.path "usize" ]
                                          ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "itertools::zip_eq_impl::ZipEq")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "core::slice::iter::Iter")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Var"
                                                ];
                                              Ty.apply
                                                (Ty.path "core::array::iter::IntoIter")
                                                [ Value.Integer IntegerKind.Usize 2 ]
                                                [ Ty.path "usize" ]
                                            ],
                                          M.get_trait_method (|
                                            "core::iter::traits::collect::IntoIterator",
                                            Ty.apply
                                              (Ty.path "itertools::zip_eq_impl::ZipEq")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::Iter")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Var"
                                                  ];
                                                Ty.apply
                                                  (Ty.path "core::array::iter::IntoIter")
                                                  [ Value.Integer IntegerKind.Usize 2 ]
                                                  [ Ty.path "usize" ]
                                              ],
                                            [],
                                            [],
                                            "into_iter",
                                            [],
                                            []
                                          |),
                                          [
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "itertools::zip_eq_impl::ZipEq")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::slice::iter::Iter")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Var"
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "core::array::iter::IntoIter")
                                                    [ Value.Integer IntegerKind.Usize 2 ]
                                                    [ Ty.path "usize" ]
                                                ],
                                              M.get_function (|
                                                "itertools::zip_eq_impl::zip_eq",
                                                [],
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 2 ]
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Var"
                                                        ]
                                                    ];
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Value.Integer IntegerKind.Usize 2 ]
                                                    [ Ty.path "usize" ]
                                                ]
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| local |) |),
                                                    "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                                    "pointer_limbs"
                                                  |)
                                                |);
                                                M.read (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    M.deref (| M.read (| self |) |),
                                                    "openvm_circuit::system::memory::volatile::VolatileBoundaryAir",
                                                    "pointer_limb_bits"
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let iter :=
                                              M.copy (|
                                                Ty.apply
                                                  (Ty.path "itertools::zip_eq_impl::ZipEq")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var"
                                                      ];
                                                    Ty.apply
                                                      (Ty.path "core::array::iter::IntoIter")
                                                      [ Value.Integer IntegerKind.Usize 2 ]
                                                      [ Ty.path "usize" ]
                                                  ],
                                                γ
                                              |) in
                                            M.read (|
                                              M.loop (|
                                                Ty.tuple [],
                                                ltac:(M.monadic
                                                  (let~ _ : Ty.tuple [] :=
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (|
                                                        Ty.apply
                                                          (Ty.path "core::option::Option")
                                                          []
                                                          [
                                                            Ty.tuple
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Var"
                                                                  ];
                                                                Ty.path "usize"
                                                              ]
                                                          ],
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [
                                                              Ty.tuple
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "&")
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Var"
                                                                    ];
                                                                  Ty.path "usize"
                                                                ]
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::iter::traits::iterator::Iterator",
                                                            Ty.apply
                                                              (Ty.path
                                                                "itertools::zip_eq_impl::ZipEq")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::slice::iter::Iter")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Var"
                                                                  ];
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "core::array::iter::IntoIter")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      2
                                                                  ]
                                                                  [ Ty.path "usize" ]
                                                              ],
                                                            [],
                                                            [],
                                                            "next",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  iter
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let _ :=
                                                              M.is_struct_tuple (|
                                                                γ,
                                                                "core::option::Option::None"
                                                              |) in
                                                            M.never_to_any (|
                                                              M.read (| M.break (||) |)
                                                            |)));
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ0_0 :=
                                                              M.SubPointer.get_struct_tuple_field (|
                                                                γ,
                                                                "core::option::Option::Some",
                                                                0
                                                              |) in
                                                            let γ1_0 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ0_0,
                                                                0
                                                              |) in
                                                            let γ1_1 :=
                                                              M.SubPointer.get_tuple_field (|
                                                                γ0_0,
                                                                1
                                                              |) in
                                                            let γ1_0 :=
                                                              M.deref (| M.read (| γ1_0 |) |) in
                                                            let limb :=
                                                              M.copy (|
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Var",
                                                                γ1_0
                                                              |) in
                                                            let limb_bits :=
                                                              M.copy (| Ty.path "usize", γ1_1 |) in
                                                            M.read (|
                                                              let~ _ : Ty.tuple [] :=
                                                                M.call_closure (|
                                                                  Ty.tuple [],
                                                                  M.get_associated_function (|
                                                                    Ty.apply
                                                                      (Ty.path
                                                                        "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBusInteraction")
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Expr"
                                                                      ],
                                                                    "eval",
                                                                    [],
                                                                    [
                                                                      AB;
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Var"
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBusInteraction")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::AirBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "Expr"
                                                                        ],
                                                                      M.get_associated_function (|
                                                                        Ty.path
                                                                          "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                                                                        "range_check",
                                                                        [],
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::AirBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "Expr";
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::AirBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "Var"
                                                                        ]
                                                                      |),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.alloc (|
                                                                            Ty.path
                                                                              "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                                                                            M.call_closure (|
                                                                              Ty.path
                                                                                "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                                                                              M.get_associated_function (|
                                                                                Ty.path
                                                                                  "openvm_circuit::system::memory::volatile::VolatileBoundaryAir",
                                                                                "range_bus",
                                                                                [],
                                                                                []
                                                                              |),
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      self
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                            |)
                                                                          |)
                                                                        |);
                                                                        M.read (| limb |);
                                                                        M.read (| limb_bits |)
                                                                      ]
                                                                    |);
                                                                    M.borrow (|
                                                                      Pointer.Kind.MutRef,
                                                                      M.deref (|
                                                                        M.read (| builder |)
                                                                      |)
                                                                    |);
                                                                    M.read (|
                                                                      M.SubPointer.get_struct_record_field (|
                                                                        M.deref (|
                                                                          M.read (| local |)
                                                                        |),
                                                                        "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                                                        "is_valid"
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |) in
                                                              M.alloc (|
                                                                Ty.tuple [],
                                                                Value.Tuple []
                                                              |)
                                                            |)))
                                                      ]
                                                    |) in
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                              |)
                                            |)))
                                      ]
                                    |)
                                  |))
                              |) in
                            let~ range_max_bits : Ty.path "usize" :=
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.alloc (|
                                    Ty.path
                                      "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                                    M.call_closure (|
                                      Ty.path
                                        "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                                      M.get_associated_function (|
                                        Ty.path
                                          "openvm_circuit::system::memory::volatile::VolatileBoundaryAir",
                                        "range_bus",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| self |) |)
                                        |)
                                      ]
                                    |)
                                  |),
                                  "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                                  "range_max_bits"
                                |)
                              |) in
                            M.alloc (|
                              Ty.tuple [],
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 2 ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 2 ]
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 1 ]
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Var"
                                                ]
                                            ]
                                        ],
                                      "map",
                                      [],
                                      [
                                        Ty.function
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 1 ]
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Var"
                                                  ]
                                              ]
                                          ]
                                          (Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr");
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                    |),
                                    [
                                      Value.Array
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| local |) |),
                                              "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                              "addr_space_limbs"
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| next |) |),
                                                  "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                                  "addr_space_limbs"
                                                |)
                                              |)
                                            |)
                                          |)
                                        ];
                                      M.closure
                                        (fun γ =>
                                          ltac:(M.monadic
                                            match γ with
                                            | [ α0 ] =>
                                              ltac:(M.monadic
                                                (M.match_operator (|
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Expr",
                                                  M.alloc (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Value.Integer IntegerKind.Usize 1 ]
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Var"
                                                          ]
                                                      ],
                                                    α0
                                                  |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let limbs :=
                                                          M.copy (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      1
                                                                  ]
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Var"
                                                                  ]
                                                              ],
                                                            γ
                                                          |) in
                                                        M.call_closure (|
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          M.get_function (|
                                                            "openvm_circuit_primitives::utils::compose",
                                                            [],
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr";
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Var"
                                                            ]
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "slice")
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Var"
                                                                    ]
                                                                ],
                                                              M.pointer_coercion
                                                                M.PointerCoercion.Unsize
                                                                (Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "array")
                                                                      [
                                                                        Value.Integer
                                                                          IntegerKind.Usize
                                                                          1
                                                                      ]
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Var"
                                                                      ]
                                                                  ])
                                                                (Ty.apply
                                                                  (Ty.path "&")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Var"
                                                                      ]
                                                                  ]),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| limbs |) |)
                                                                |)
                                                              ]
                                                            |);
                                                            M.read (| range_max_bits |)
                                                          ]
                                                        |)))
                                                  ]
                                                |)))
                                            | _ => M.impossible "wrong number of arguments"
                                            end))
                                    ]
                                  |)
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 := M.SubPointer.get_slice_index (| γ, 0 |) in
                                      let γ0_1 := M.SubPointer.get_slice_index (| γ, 1 |) in
                                      let addr_space :=
                                        M.copy (|
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr",
                                          γ0_0
                                        |) in
                                      let next_addr_space :=
                                        M.copy (|
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr",
                                          γ0_1
                                        |) in
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 2 ]
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Expr"
                                            ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "array")
                                              [ Value.Integer IntegerKind.Usize 2 ]
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Expr"
                                              ],
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 2 ]
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "array")
                                                        [ Value.Integer IntegerKind.Usize 2 ]
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Var"
                                                        ]
                                                    ]
                                                ],
                                              "map",
                                              [],
                                              [
                                                Ty.function
                                                  [
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Value.Integer IntegerKind.Usize 2 ]
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Var"
                                                          ]
                                                      ]
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Expr");
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Expr"
                                              ]
                                            |),
                                            [
                                              Value.Array
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| local |) |),
                                                      "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                                      "pointer_limbs"
                                                    |)
                                                  |);
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (|
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| next |) |),
                                                          "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                                          "pointer_limbs"
                                                        |)
                                                      |)
                                                    |)
                                                  |)
                                                ];
                                              M.closure
                                                (fun γ =>
                                                  ltac:(M.monadic
                                                    match γ with
                                                    | [ α0 ] =>
                                                      ltac:(M.monadic
                                                        (M.match_operator (|
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          M.alloc (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      2
                                                                  ]
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Var"
                                                                  ]
                                                              ],
                                                            α0
                                                          |),
                                                          [
                                                            fun γ =>
                                                              ltac:(M.monadic
                                                                (let limbs :=
                                                                  M.copy (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path "array")
                                                                          [
                                                                            Value.Integer
                                                                              IntegerKind.Usize
                                                                              2
                                                                          ]
                                                                          [
                                                                            Ty.associated_in_trait
                                                                              "p3_air::air::AirBuilder"
                                                                              []
                                                                              []
                                                                              AB
                                                                              "Var"
                                                                          ]
                                                                      ],
                                                                    γ
                                                                  |) in
                                                                M.call_closure (|
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr",
                                                                  M.get_function (|
                                                                    "openvm_circuit_primitives::utils::compose",
                                                                    [],
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Expr";
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Var"
                                                                    ]
                                                                  |),
                                                                  [
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "slice")
                                                                            []
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::AirBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "Var"
                                                                            ]
                                                                        ],
                                                                      M.pointer_coercion
                                                                        M.PointerCoercion.Unsize
                                                                        (Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "array")
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  2
                                                                              ]
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::AirBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "Var"
                                                                              ]
                                                                          ])
                                                                        (Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::AirBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "Var"
                                                                              ]
                                                                          ]),
                                                                      [
                                                                        M.borrow (|
                                                                          Pointer.Kind.Ref,
                                                                          M.deref (|
                                                                            M.read (| limbs |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |);
                                                                    M.read (| range_max_bits |)
                                                                  ]
                                                                |)))
                                                          ]
                                                        |)))
                                                    | _ => M.impossible "wrong number of arguments"
                                                    end))
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_slice_index (| γ, 0 |) in
                                              let γ0_1 := M.SubPointer.get_slice_index (| γ, 1 |) in
                                              let pointer :=
                                                M.copy (|
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Expr",
                                                  γ0_0
                                                |) in
                                              let next_pointer :=
                                                M.copy (|
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Expr",
                                                  γ0_1
                                                |) in
                                              M.read (|
                                                let~ lt_io :
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit_primitives::is_less_than_array::IsLtArrayIo")
                                                      [ Value.Integer IntegerKind.Usize 2 ]
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ] :=
                                                  Value.mkStructRecord
                                                    "openvm_circuit_primitives::is_less_than_array::IsLtArrayIo"
                                                    [ Value.Integer IntegerKind.Usize 2 ]
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr"
                                                    ]
                                                    [
                                                      ("x",
                                                        Value.Array
                                                          [
                                                            M.call_closure (|
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr",
                                                              M.get_trait_method (|
                                                                "core::clone::Clone",
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr",
                                                                [],
                                                                [],
                                                                "clone",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  addr_space
                                                                |)
                                                              ]
                                                            |);
                                                            M.call_closure (|
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr",
                                                              M.get_trait_method (|
                                                                "core::clone::Clone",
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr",
                                                                [],
                                                                [],
                                                                "clone",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  pointer
                                                                |)
                                                              ]
                                                            |)
                                                          ]);
                                                      ("y",
                                                        Value.Array
                                                          [
                                                            M.read (| next_addr_space |);
                                                            M.read (| next_pointer |)
                                                          ]);
                                                      ("out",
                                                        M.read (|
                                                          get_constant (|
                                                            "p3_field::field::FieldAlgebra::ONE",
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          |)
                                                        |));
                                                      ("count",
                                                        M.call_closure (|
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          M.get_trait_method (|
                                                            "core::convert::Into",
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Var",
                                                            [],
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr"
                                                            ],
                                                            "into",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.deref (| M.read (| next |) |),
                                                                "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                                                "is_valid"
                                                              |)
                                                            |)
                                                          ]
                                                        |))
                                                    ] in
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_trait_method (|
                                                      "openvm_circuit_primitives::sub_air::SubAir",
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit_primitives::is_less_than_array::IsLtArrayWhenTransitionAir")
                                                        [ Value.Integer IntegerKind.Usize 2 ]
                                                        [],
                                                      [],
                                                      [ AB ],
                                                      "eval",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| self |) |),
                                                          "openvm_circuit::system::memory::volatile::VolatileBoundaryAir",
                                                          "addr_lt_air"
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (| M.read (| builder |) |)
                                                      |);
                                                      Value.Tuple
                                                        [
                                                          M.read (| lt_io |);
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_circuit_primitives::is_less_than_array::IsLtArrayAuxColsRef")
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Var"
                                                              ],
                                                            M.get_trait_method (|
                                                              "core::convert::Into",
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path
                                                                      "openvm_circuit_primitives::is_less_than_array::IsLtArrayAuxCols")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        2;
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        2
                                                                    ]
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "p3_air::air::AirBuilder"
                                                                        []
                                                                        []
                                                                        AB
                                                                        "Var"
                                                                    ]
                                                                ],
                                                              [],
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_circuit_primitives::is_less_than_array::IsLtArrayAuxColsRef")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_air::air::AirBuilder"
                                                                      []
                                                                      []
                                                                      AB
                                                                      "Var"
                                                                  ]
                                                              ],
                                                              "into",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.SubPointer.get_struct_record_field (|
                                                                      M.deref (|
                                                                        M.read (| local |)
                                                                      |),
                                                                      "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                                                      "addr_lt_aux"
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr"
                                                        ],
                                                      "eval",
                                                      [],
                                                      [
                                                        AB;
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var"
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.path
                                                            "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                                                          "send",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr";
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr";
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr";
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Var";
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ]
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (| M.read (| self |) |),
                                                              "openvm_circuit::system::memory::volatile::VolatileBoundaryAir",
                                                              "memory_bus"
                                                            |)
                                                          |);
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_circuit::system::memory::MemoryAddress")
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr";
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr"
                                                              ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::system::memory::MemoryAddress")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr";
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr"
                                                                ],
                                                              "new",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr",
                                                                M.get_trait_method (|
                                                                  "core::clone::Clone",
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr",
                                                                  [],
                                                                  [],
                                                                  "clone",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    addr_space
                                                                  |)
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr",
                                                                M.get_trait_method (|
                                                                  "core::clone::Clone",
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr",
                                                                  [],
                                                                  [],
                                                                  "clone",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    pointer
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |);
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Var";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Var"
                                                                ],
                                                              "into_vec",
                                                              [],
                                                              [ Ty.path "alloc::alloc::Global" ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "alloc::boxed::Box")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Var"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                M.pointer_coercion
                                                                  M.PointerCoercion.Unsize
                                                                  (Ty.apply
                                                                    (Ty.path "alloc::boxed::Box")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::AirBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "Var"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ])
                                                                  (Ty.apply
                                                                    (Ty.path "alloc::boxed::Box")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::AirBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "Var"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]),
                                                                [
                                                                  M.read (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::boxed::Box")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                1
                                                                            ]
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::AirBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "Var"
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::boxed::Box")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "array")
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  1
                                                                              ]
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::AirBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "Var"
                                                                              ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        "new",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.alloc (|
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                1
                                                                            ]
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::AirBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "Var"
                                                                            ],
                                                                          Value.Array
                                                                            [
                                                                              M.read (|
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      local
                                                                                    |)
                                                                                  |),
                                                                                  "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                                                                  "initial_data"
                                                                                |)
                                                                              |)
                                                                            ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |);
                                                          M.read (|
                                                            get_constant (|
                                                              "p3_field::field::FieldAlgebra::ZERO",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr"
                                                            |)
                                                          |)
                                                        ]
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (| M.read (| builder |) |)
                                                      |);
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| local |) |),
                                                          "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                                          "is_valid"
                                                        |)
                                                      |)
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr"
                                                        ],
                                                      "eval",
                                                      [],
                                                      [
                                                        AB;
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var"
                                                      ]
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path
                                                            "openvm_circuit::system::memory::offline_checker::bus::MemoryBusInteraction")
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ],
                                                        M.get_associated_function (|
                                                          Ty.path
                                                            "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                                                          "receive",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr";
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr";
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr";
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Var";
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Var"
                                                          ]
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (| M.read (| self |) |),
                                                              "openvm_circuit::system::memory::volatile::VolatileBoundaryAir",
                                                              "memory_bus"
                                                            |)
                                                          |);
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_circuit::system::memory::MemoryAddress")
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr";
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr"
                                                              ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::system::memory::MemoryAddress")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr";
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr"
                                                                ],
                                                              "new",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr",
                                                                M.get_trait_method (|
                                                                  "core::clone::Clone",
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr",
                                                                  [],
                                                                  [],
                                                                  "clone",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    addr_space
                                                                  |)
                                                                ]
                                                              |);
                                                              M.call_closure (|
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr",
                                                                M.get_trait_method (|
                                                                  "core::clone::Clone",
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr",
                                                                  [],
                                                                  [],
                                                                  "clone",
                                                                  [],
                                                                  []
                                                                |),
                                                                [
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    pointer
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |);
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Var";
                                                                Ty.path "alloc::alloc::Global"
                                                              ],
                                                            M.get_associated_function (|
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Var"
                                                                ],
                                                              "into_vec",
                                                              [],
                                                              [ Ty.path "alloc::alloc::Global" ]
                                                            |),
                                                            [
                                                              M.call_closure (|
                                                                Ty.apply
                                                                  (Ty.path "alloc::boxed::Box")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "slice")
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "p3_air::air::AirBuilder"
                                                                          []
                                                                          []
                                                                          AB
                                                                          "Var"
                                                                      ];
                                                                    Ty.path "alloc::alloc::Global"
                                                                  ],
                                                                M.pointer_coercion
                                                                  M.PointerCoercion.Unsize
                                                                  (Ty.apply
                                                                    (Ty.path "alloc::boxed::Box")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::AirBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "Var"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ])
                                                                  (Ty.apply
                                                                    (Ty.path "alloc::boxed::Box")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "slice")
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "p3_air::air::AirBuilder"
                                                                            []
                                                                            []
                                                                            AB
                                                                            "Var"
                                                                        ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]),
                                                                [
                                                                  M.read (|
                                                                    M.call_closure (|
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "alloc::boxed::Box")
                                                                        []
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                1
                                                                            ]
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::AirBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "Var"
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      M.get_associated_function (|
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "alloc::boxed::Box")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "array")
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  1
                                                                              ]
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::AirBuilder"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "Var"
                                                                              ];
                                                                            Ty.path
                                                                              "alloc::alloc::Global"
                                                                          ],
                                                                        "new",
                                                                        [],
                                                                        []
                                                                      |),
                                                                      [
                                                                        M.alloc (|
                                                                          Ty.apply
                                                                            (Ty.path "array")
                                                                            [
                                                                              Value.Integer
                                                                                IntegerKind.Usize
                                                                                1
                                                                            ]
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_air::air::AirBuilder"
                                                                                []
                                                                                []
                                                                                AB
                                                                                "Var"
                                                                            ],
                                                                          Value.Array
                                                                            [
                                                                              M.read (|
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.deref (|
                                                                                    M.read (|
                                                                                      local
                                                                                    |)
                                                                                  |),
                                                                                  "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                                                                  "final_data"
                                                                                |)
                                                                              |)
                                                                            ]
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            ]
                                                          |);
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (| M.read (| local |) |),
                                                              "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                                              "final_timestamp"
                                                            |)
                                                          |)
                                                        ]
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (| M.read (| builder |) |)
                                                      |);
                                                      M.read (|
                                                        M.SubPointer.get_struct_record_field (|
                                                          M.deref (| M.read (| local |) |),
                                                          "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                                          "is_valid"
                                                        |)
                                                      |)
                                                    ]
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                              |)))
                                        ]
                                      |)))
                                ]
                              |)
                            |)
                          |)))
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (AB : Ty.t),
          M.IsTraitInstance
            "p3_air::air::Air"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ AB ]
            (Self AB)
            (* Instance *) [ ("eval", InstanceField.Method (eval AB)) ].
      End Impl_p3_air_air_Air_where_openvm_stark_backend_interaction_InteractionBuilder_AB_AB_for_openvm_circuit_system_memory_volatile_VolatileBoundaryAir.
      
      (* StructRecord
        {
          name := "VolatileBoundaryChip";
          const_params := [];
          ty_params := [ "F" ];
          fields :=
            [
              ("air", Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryAir");
              ("range_checker",
                Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip");
              ("overridden_height",
                Ty.apply (Ty.path "core::option::Option") [] [ Ty.path "usize" ]);
              ("final_memory",
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                      []
                      [
                        Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::controller::TimestampedValues")
                          [ Value.Integer IntegerKind.Usize 1 ]
                          [ F ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ]);
              ("addr_space_max_bits", Ty.path "usize");
              ("pointer_max_bits", Ty.path "usize")
            ];
        } *)
      
      Module Impl_openvm_circuit_system_memory_volatile_VolatileBoundaryChip_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
            []
            [ F ].
        
        (*
            pub fn new(
                memory_bus: MemoryBus,
                addr_space_max_bits: usize,
                pointer_max_bits: usize,
                range_checker: SharedVariableRangeCheckerChip,
            ) -> Self {
                let range_bus = range_checker.bus();
                Self {
                    air: VolatileBoundaryAir::new(
                        memory_bus,
                        addr_space_max_bits,
                        pointer_max_bits,
                        range_bus,
                    ),
                    range_checker,
                    overridden_height: None,
                    final_memory: None,
                    addr_space_max_bits,
                    pointer_max_bits,
                }
            }
        *)
        Definition new (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ memory_bus; addr_space_max_bits; pointer_max_bits; range_checker ] =>
            ltac:(M.monadic
              (let memory_bus :=
                M.alloc (|
                  Ty.path "openvm_circuit::system::memory::offline_checker::bus::MemoryBus",
                  memory_bus
                |) in
              let addr_space_max_bits := M.alloc (| Ty.path "usize", addr_space_max_bits |) in
              let pointer_max_bits := M.alloc (| Ty.path "usize", pointer_max_bits |) in
              let range_checker :=
                M.alloc (|
                  Ty.path "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                  range_checker
                |) in
              M.read (|
                let~ range_bus :
                    Ty.path "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus" :=
                  M.call_closure (|
                    Ty.path "openvm_circuit_primitives::var_range::bus::VariableRangeCheckerBus",
                    M.get_associated_function (|
                      Ty.path
                        "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                      "bus",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, range_checker |) ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
                    []
                    [ F ],
                  Value.mkStructRecord
                    "openvm_circuit::system::memory::volatile::VolatileBoundaryChip"
                    []
                    [ F ]
                    [
                      ("air",
                        M.call_closure (|
                          Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryAir",
                          M.get_associated_function (|
                            Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryAir",
                            "new",
                            [],
                            []
                          |),
                          [
                            M.read (| memory_bus |);
                            M.read (| addr_space_max_bits |);
                            M.read (| pointer_max_bits |);
                            M.read (| range_bus |)
                          ]
                        |));
                      ("range_checker", M.read (| range_checker |));
                      ("overridden_height",
                        Value.StructTuple "core::option::Option::None" [] [ Ty.path "usize" ] []);
                      ("final_memory",
                        Value.StructTuple
                          "core::option::Option::None"
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::collections::btree::map::BTreeMap")
                              []
                              [
                                Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::controller::TimestampedValues")
                                  [ Value.Integer IntegerKind.Usize 1 ]
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ]
                          []);
                      ("addr_space_max_bits", M.read (| addr_space_max_bits |));
                      ("pointer_max_bits", M.read (| pointer_max_bits |))
                    ]
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_new :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "new" (new F).
        Admitted.
        Global Typeclasses Opaque new.
        (*
            pub fn set_overridden_height(&mut self, overridden_height: usize) {
                self.overridden_height = Some(overridden_height);
            }
        *)
        Definition set_overridden_height
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; overridden_height ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let overridden_height := M.alloc (| Ty.path "usize", overridden_height |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.write (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::volatile::VolatileBoundaryChip",
                      "overridden_height"
                    |),
                    Value.StructTuple
                      "core::option::Option::Some"
                      []
                      [ Ty.path "usize" ]
                      [ M.read (| overridden_height |) ]
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_set_overridden_height :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "set_overridden_height" (set_overridden_height F).
        Admitted.
        Global Typeclasses Opaque set_overridden_height.
        
        (*
            pub fn finalize(&mut self, final_memory: TimestampedEquipartition<F, 1>) {
                self.final_memory = Some(final_memory);
            }
        *)
        Definition finalize (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; final_memory ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let final_memory :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                    []
                    [
                      Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::controller::TimestampedValues")
                        [ Value.Integer IntegerKind.Usize 1 ]
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  final_memory
                |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.write (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::memory::volatile::VolatileBoundaryChip",
                      "final_memory"
                    |),
                    Value.StructTuple
                      "core::option::Option::Some"
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::collections::btree::map::BTreeMap")
                          []
                          [
                            Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::controller::TimestampedValues")
                              [ Value.Integer IntegerKind.Usize 1 ]
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ]
                      [ M.read (| final_memory |) ]
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_finalize :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "finalize" (finalize F).
        Admitted.
        Global Typeclasses Opaque finalize.
      End Impl_openvm_circuit_system_memory_volatile_VolatileBoundaryChip_F.
      
      
      Module Impl_openvm_stark_backend_chip_Chip_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_field_field_PrimeField32_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val_SC_for_openvm_circuit_system_memory_volatile_VolatileBoundaryChip_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val.
        Definition Self (SC : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
            []
            [
              Ty.associated_in_trait
                "p3_commit::domain::PolynomialSpace"
                []
                []
                (Ty.associated_in_trait
                  "p3_commit::pcs::Pcs"
                  []
                  [
                    Ty.associated_in_trait
                      "openvm_stark_backend::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenge";
                    Ty.associated_in_trait
                      "openvm_stark_backend::config::StarkGenericConfig"
                      []
                      []
                      SC
                      "Challenger"
                  ]
                  (Ty.associated_in_trait
                    "openvm_stark_backend::config::StarkGenericConfig"
                    []
                    []
                    SC
                    "Pcs")
                  "Domain")
                "Val"
            ].
        
        (*
            fn air(&self) -> AirRef<SC> {
                Arc::new(self.air.clone())
            }
        *)
        Definition air (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self SC in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val"
                        ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.pointer_coercion
                  M.PointerCoercion.Unsize
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ])
                  (Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ]),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryAir";
                          Ty.path "alloc::alloc::Global"
                        ])
                      (Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                          Ty.path "alloc::alloc::Global"
                        ]),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryAir";
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.path
                                "openvm_circuit::system::memory::volatile::VolatileBoundaryAir";
                              Ty.path "alloc::alloc::Global"
                            ],
                          "new",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryAir",
                            M.get_trait_method (|
                              "core::clone::Clone",
                              Ty.path
                                "openvm_circuit::system::memory::volatile::VolatileBoundaryAir",
                              [],
                              [],
                              "clone",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::memory::volatile::VolatileBoundaryChip",
                                  "air"
                                |)
                              |)
                            ]
                          |)
                        ]
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn generate_air_proof_input(self) -> AirProofInput<SC> {
                // Volatile memory requires the starting and final memory to be in equipartition with block
                // size `1`. When block size is `1`, then the `label` is the same as the address
                // pointer.
                let width = self.trace_width();
                let air = Arc::new(self.air);
                let final_memory = self
                    .final_memory
                    .expect("Trace generation should be called after finalize");
                let trace_height = if let Some(height) = self.overridden_height {
                    assert!(
                        height >= final_memory.len(),
                        "Overridden height is less than the required height"
                    );
                    height
                } else {
                    final_memory.len()
                };
                let trace_height = trace_height.next_power_of_two();
        
                // Collect into Vec to sort from BTreeMap and also so we can look at adjacent entries
                let sorted_final_memory: Vec<_> = final_memory.into_par_iter().collect();
                let memory_len = sorted_final_memory.len();
        
                let range_checker = self.range_checker.as_ref();
                let mut rows = Val::<SC>::zero_vec(trace_height * width);
                rows.par_chunks_mut(width)
                    .zip(sorted_final_memory.par_iter())
                    .enumerate()
                    .for_each(|(i, (row, ((addr_space, ptr), timestamped_values)))| {
                        // `pointer` is the same as `label` since the equipartition has block size 1
                        let [data] = timestamped_values.values;
                        let row: &mut VolatileBoundaryCols<_> = row.borrow_mut();
                        range_checker.decompose(
                            *addr_space,
                            self.addr_space_max_bits,
                            &mut row.addr_space_limbs,
                        );
                        range_checker.decompose( *ptr, self.pointer_max_bits, &mut row.pointer_limbs);
                        row.initial_data = Val::<SC>::ZERO;
                        row.final_data = data;
                        row.final_timestamp = Val::<SC>::from_canonical_u32(timestamped_values.timestamp);
                        row.is_valid = Val::<SC>::ONE;
        
                        // If next.is_valid == 1:
                        if i != memory_len - 1 {
                            let (next_addr_space, next_ptr) = sorted_final_memory[i + 1].0;
                            let mut out = Val::<SC>::ZERO;
                            air.addr_lt_air.0.generate_subrow(
                                (
                                    self.range_checker.as_ref(),
                                    &[
                                        Val::<SC>::from_canonical_u32( *addr_space),
                                        Val::<SC>::from_canonical_u32( *ptr),
                                    ],
                                    &[
                                        Val::<SC>::from_canonical_u32(next_addr_space),
                                        Val::<SC>::from_canonical_u32(next_ptr),
                                    ],
                                ),
                                ((&mut row.addr_lt_aux).into(), &mut out),
                            );
                            debug_assert_eq!(out, Val::<SC>::ONE, "Addresses are not sorted");
                        }
                    });
                // Always do a dummy range check on the last row due to wraparound
                if memory_len > 0 {
                    let mut out = Val::<SC>::ZERO;
                    let row: &mut VolatileBoundaryCols<_> = rows[width * (trace_height - 1)..].borrow_mut();
                    air.addr_lt_air.0.generate_subrow(
                        (
                            self.range_checker.as_ref(),
                            &[Val::<SC>::ZERO, Val::<SC>::ZERO],
                            &[Val::<SC>::ZERO, Val::<SC>::ZERO],
                        ),
                        ((&mut row.addr_lt_aux).into(), &mut out),
                    );
                }
        
                let trace = RowMajorMatrix::new(rows, width);
                AirProofInput::simple_no_pis(trace)
            }
        *)
        Definition generate_air_proof_input
            (SC : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self SC in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
                    []
                    [
                      Ty.associated_in_trait
                        "p3_commit::domain::PolynomialSpace"
                        []
                        []
                        (Ty.associated_in_trait
                          "p3_commit::pcs::Pcs"
                          []
                          [
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge";
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenger"
                          ]
                          (Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Pcs")
                          "Domain")
                        "Val"
                    ],
                  self
                |) in
              M.read (|
                let~ width : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "openvm_stark_backend::chip::ChipUsageGetter",
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val"
                        ],
                      [],
                      [],
                      "trace_width",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, self |) ]
                  |) in
                let~ air :
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryAir";
                        Ty.path "alloc::alloc::Global"
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryAir";
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryAir";
                          Ty.path "alloc::alloc::Global"
                        ],
                      "new",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "openvm_circuit::system::memory::volatile::VolatileBoundaryChip",
                          "air"
                        |)
                      |)
                    ]
                  |) in
                let~ final_memory :
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                      []
                      [
                        Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::controller::TimestampedValues")
                          [ Value.Integer IntegerKind.Usize 1 ]
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::collections::btree::map::BTreeMap")
                      []
                      [
                        Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                        Ty.apply
                          (Ty.path "openvm_circuit::system::memory::controller::TimestampedValues")
                          [ Value.Integer IntegerKind.Usize 1 ]
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val"
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                            []
                            [
                              Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::controller::TimestampedValues")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ],
                      "expect",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "openvm_circuit::system::memory::volatile::VolatileBoundaryChip",
                          "final_memory"
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          mk_str (| "Trace generation should be called after finalize" |)
                        |)
                      |)
                    ]
                  |) in
                let~ trace_height : Ty.path "usize" :=
                  M.match_operator (|
                    Ty.path "usize",
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.SubPointer.get_struct_record_field (|
                              self,
                              "openvm_circuit::system::memory::volatile::VolatileBoundaryChip",
                              "overridden_height"
                            |) in
                          let γ0_0 :=
                            M.SubPointer.get_struct_tuple_field (|
                              γ,
                              "core::option::Option::Some",
                              0
                            |) in
                          let height := M.copy (| Ty.path "usize", γ0_0 |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            Ty.path "bool",
                                            UnOp.not (|
                                              M.call_closure (|
                                                Ty.path "bool",
                                                BinOp.ge,
                                                [
                                                  M.read (| height |);
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    M.get_associated_function (|
                                                      Ty.apply
                                                        (Ty.path
                                                          "alloc::collections::btree::map::BTreeMap")
                                                        []
                                                        [
                                                          Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit::system::memory::controller::TimestampedValues")
                                                            [ Value.Integer IntegerKind.Usize 1 ]
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_commit::domain::PolynomialSpace"
                                                                []
                                                                []
                                                                (Ty.associated_in_trait
                                                                  "p3_commit::pcs::Pcs"
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenge";
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenger"
                                                                  ]
                                                                  (Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Pcs")
                                                                  "Domain")
                                                                "Val"
                                                            ];
                                                          Ty.path "alloc::alloc::Global"
                                                        ],
                                                      "len",
                                                      [],
                                                      []
                                                    |),
                                                    [ M.borrow (| Pointer.Kind.Ref, final_memory |)
                                                    ]
                                                  |)
                                                ]
                                              |)
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.never_to_any (|
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                          [
                                            M.call_closure (|
                                              Ty.path "core::fmt::Arguments",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::Arguments",
                                                "new_const",
                                                [ Value.Integer IntegerKind.Usize 1 ],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Value.Integer IntegerKind.Usize 1 ]
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "str" ]
                                                          ],
                                                        Value.Array
                                                          [
                                                            mk_str (|
                                                              "Overridden height is less than the required height"
                                                            |)
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |)));
                                  fun γ => ltac:(M.monadic (Value.Tuple []))
                                ]
                              |) in
                            height
                          |)));
                      fun γ =>
                        ltac:(M.monadic
                          (M.call_closure (|
                            Ty.path "usize",
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "alloc::collections::btree::map::BTreeMap")
                                []
                                [
                                  Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::controller::TimestampedValues")
                                    [ Value.Integer IntegerKind.Usize 1 ]
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val"
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              "len",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, final_memory |) ]
                          |)))
                    ]
                  |) in
                let~ trace_height : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (| Ty.path "usize", "next_power_of_two", [], [] |),
                    [ M.read (| trace_height |) ]
                  |) in
                let~ sorted_final_memory :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.tuple
                          [
                            Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::controller::TimestampedValues")
                              [ Value.Integer IntegerKind.Usize 1 ]
                              [
                                Ty.associated_in_trait
                                  "p3_commit::domain::PolynomialSpace"
                                  []
                                  []
                                  (Ty.associated_in_trait
                                    "p3_commit::pcs::Pcs"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenge";
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenger"
                                    ]
                                    (Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Pcs")
                                    "Domain")
                                  "Val"
                              ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.tuple
                          [
                            Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::controller::TimestampedValues")
                              [ Value.Integer IntegerKind.Usize 1 ]
                              [
                                Ty.associated_in_trait
                                  "p3_commit::domain::PolynomialSpace"
                                  []
                                  []
                                  (Ty.associated_in_trait
                                    "p3_commit::pcs::Pcs"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenge";
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenger"
                                    ]
                                    (Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Pcs")
                                    "Domain")
                                  "Val"
                              ]
                          ];
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "rayon::iter::ParallelIterator",
                      Ty.apply
                        (Ty.path "rayon::collections::btree_map::IntoIter")
                        []
                        [
                          Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::memory::controller::TimestampedValues")
                            [ Value.Integer IntegerKind.Usize 1 ]
                            [
                              Ty.associated_in_trait
                                "p3_commit::domain::PolynomialSpace"
                                []
                                []
                                (Ty.associated_in_trait
                                  "p3_commit::pcs::Pcs"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Pcs")
                                  "Domain")
                                "Val"
                            ]
                        ],
                      [],
                      [],
                      "collect",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::controller::TimestampedValues")
                                  [ Value.Integer IntegerKind.Usize 1 ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val"
                                  ]
                              ];
                            Ty.path "alloc::alloc::Global"
                          ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "rayon::collections::btree_map::IntoIter")
                          []
                          [
                            Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::controller::TimestampedValues")
                              [ Value.Integer IntegerKind.Usize 1 ]
                              [
                                Ty.associated_in_trait
                                  "p3_commit::domain::PolynomialSpace"
                                  []
                                  []
                                  (Ty.associated_in_trait
                                    "p3_commit::pcs::Pcs"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenge";
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenger"
                                    ]
                                    (Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Pcs")
                                    "Domain")
                                  "Val"
                              ]
                          ],
                        M.get_trait_method (|
                          "rayon::iter::IntoParallelIterator",
                          Ty.apply
                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                            []
                            [
                              Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::controller::TimestampedValues")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val"
                                ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          [],
                          "into_par_iter",
                          [],
                          []
                        |),
                        [ M.read (| final_memory |) ]
                      |)
                    ]
                  |) in
                let~ memory_len : Ty.path "usize" :=
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::controller::TimestampedValues")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val"
                                ]
                            ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      "len",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, sorted_final_memory |) ]
                  |) in
                let~ range_checker :
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_circuit_primitives::var_range::VariableRangeCheckerChip"
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_circuit_primitives::var_range::VariableRangeCheckerChip" ],
                    M.get_trait_method (|
                      "core::convert::AsRef",
                      Ty.path
                        "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                      [],
                      [ Ty.path "openvm_circuit_primitives::var_range::VariableRangeCheckerChip" ],
                      "as_ref",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "openvm_circuit::system::memory::volatile::VolatileBoundaryChip",
                          "range_checker"
                        |)
                      |)
                    ]
                  |) in
                let~ rows :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val";
                        Ty.path "alloc::alloc::Global"
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val";
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      Ty.associated_in_trait
                        "p3_commit::domain::PolynomialSpace"
                        []
                        []
                        (Ty.associated_in_trait
                          "p3_commit::pcs::Pcs"
                          []
                          [
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenge";
                            Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Challenger"
                          ]
                          (Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Pcs")
                          "Domain")
                        "Val",
                      [],
                      [],
                      "zero_vec",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.mul,
                        [ M.read (| trace_height |); M.read (| width |) ]
                      |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "rayon::iter::ParallelIterator",
                      Ty.apply
                        (Ty.path "rayon::iter::enumerate::Enumerate")
                        []
                        [
                          Ty.apply
                            (Ty.path "rayon::iter::zip::Zip")
                            []
                            [
                              Ty.apply
                                (Ty.path "rayon::slice::chunks::ChunksMut")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val"
                                ];
                              Ty.apply
                                (Ty.path "rayon::slice::Iter")
                                []
                                [
                                  Ty.tuple
                                    [
                                      Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::controller::TimestampedValues")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val"
                                        ]
                                    ]
                                ]
                            ]
                        ],
                      [],
                      [],
                      "for_each",
                      [],
                      [
                        Ty.function
                          [
                            Ty.tuple
                              [
                                Ty.path "usize";
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val"
                                          ]
                                      ];
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.tuple
                                          [
                                            Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::system::memory::controller::TimestampedValues")
                                              [ Value.Integer IntegerKind.Usize 1 ]
                                              [
                                                Ty.associated_in_trait
                                                  "p3_commit::domain::PolynomialSpace"
                                                  []
                                                  []
                                                  (Ty.associated_in_trait
                                                    "p3_commit::pcs::Pcs"
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenge";
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenger"
                                                    ]
                                                    (Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Pcs")
                                                    "Domain")
                                                  "Val"
                                              ]
                                          ]
                                      ]
                                  ]
                              ]
                          ]
                          (Ty.tuple [])
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "rayon::iter::enumerate::Enumerate")
                          []
                          [
                            Ty.apply
                              (Ty.path "rayon::iter::zip::Zip")
                              []
                              [
                                Ty.apply
                                  (Ty.path "rayon::slice::chunks::ChunksMut")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val"
                                  ];
                                Ty.apply
                                  (Ty.path "rayon::slice::Iter")
                                  []
                                  [
                                    Ty.tuple
                                      [
                                        Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::controller::TimestampedValues")
                                          [ Value.Integer IntegerKind.Usize 1 ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val"
                                          ]
                                      ]
                                  ]
                              ]
                          ],
                        M.get_trait_method (|
                          "rayon::iter::IndexedParallelIterator",
                          Ty.apply
                            (Ty.path "rayon::iter::zip::Zip")
                            []
                            [
                              Ty.apply
                                (Ty.path "rayon::slice::chunks::ChunksMut")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val"
                                ];
                              Ty.apply
                                (Ty.path "rayon::slice::Iter")
                                []
                                [
                                  Ty.tuple
                                    [
                                      Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::controller::TimestampedValues")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val"
                                        ]
                                    ]
                                ]
                            ],
                          [],
                          [],
                          "enumerate",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "rayon::iter::zip::Zip")
                              []
                              [
                                Ty.apply
                                  (Ty.path "rayon::slice::chunks::ChunksMut")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val"
                                  ];
                                Ty.apply
                                  (Ty.path "rayon::slice::Iter")
                                  []
                                  [
                                    Ty.tuple
                                      [
                                        Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::controller::TimestampedValues")
                                          [ Value.Integer IntegerKind.Usize 1 ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val"
                                          ]
                                      ]
                                  ]
                              ],
                            M.get_trait_method (|
                              "rayon::iter::IndexedParallelIterator",
                              Ty.apply
                                (Ty.path "rayon::slice::chunks::ChunksMut")
                                []
                                [
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val"
                                ],
                              [],
                              [],
                              "zip",
                              [],
                              [
                                Ty.apply
                                  (Ty.path "rayon::slice::Iter")
                                  []
                                  [
                                    Ty.tuple
                                      [
                                        Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::controller::TimestampedValues")
                                          [ Value.Integer IntegerKind.Usize 1 ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val"
                                          ]
                                      ]
                                  ]
                              ]
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "rayon::slice::chunks::ChunksMut")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val"
                                  ],
                                M.get_trait_method (|
                                  "rayon::slice::ParallelSliceMut",
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_commit::domain::PolynomialSpace"
                                        []
                                        []
                                        (Ty.associated_in_trait
                                          "p3_commit::pcs::Pcs"
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenge";
                                            Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Challenger"
                                          ]
                                          (Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Pcs")
                                          "Domain")
                                        "Val"
                                    ],
                                  [],
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val"
                                  ],
                                  "par_chunks_mut",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&mut")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_commit::domain::PolynomialSpace"
                                                  []
                                                  []
                                                  (Ty.associated_in_trait
                                                    "p3_commit::pcs::Pcs"
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenge";
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenger"
                                                    ]
                                                    (Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Pcs")
                                                    "Domain")
                                                  "Val"
                                              ]
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::deref::DerefMut",
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::domain::PolynomialSpace"
                                                []
                                                []
                                                (Ty.associated_in_trait
                                                  "p3_commit::pcs::Pcs"
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenge";
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenger"
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Pcs")
                                                  "Domain")
                                                "Val";
                                              Ty.path "alloc::alloc::Global"
                                            ],
                                          [],
                                          [],
                                          "deref_mut",
                                          [],
                                          []
                                        |),
                                        [ M.borrow (| Pointer.Kind.MutRef, rows |) ]
                                      |)
                                    |)
                                  |);
                                  M.read (| width |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "rayon::slice::Iter")
                                  []
                                  [
                                    Ty.tuple
                                      [
                                        Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::controller::TimestampedValues")
                                          [ Value.Integer IntegerKind.Usize 1 ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val"
                                          ]
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "rayon::iter::IntoParallelRefIterator",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.tuple
                                        [
                                          Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::controller::TimestampedValues")
                                            [ Value.Integer IntegerKind.Usize 1 ]
                                            [
                                              Ty.associated_in_trait
                                                "p3_commit::domain::PolynomialSpace"
                                                []
                                                []
                                                (Ty.associated_in_trait
                                                  "p3_commit::pcs::Pcs"
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenge";
                                                    Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Challenger"
                                                  ]
                                                  (Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Pcs")
                                                  "Domain")
                                                "Val"
                                            ]
                                        ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [],
                                  "par_iter",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, sorted_final_memory |) ]
                              |)
                            ]
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.tuple
                                      [
                                        Ty.path "usize";
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_commit::domain::PolynomialSpace"
                                                      []
                                                      []
                                                      (Ty.associated_in_trait
                                                        "p3_commit::pcs::Pcs"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenge";
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenger"
                                                        ]
                                                        (Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Pcs")
                                                        "Domain")
                                                      "Val"
                                                  ]
                                              ];
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_circuit::system::memory::controller::TimestampedValues")
                                                      [ Value.Integer IntegerKind.Usize 1 ]
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_commit::domain::PolynomialSpace"
                                                          []
                                                          []
                                                          (Ty.associated_in_trait
                                                            "p3_commit::pcs::Pcs"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenge";
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenger"
                                                            ]
                                                            (Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Pcs")
                                                            "Domain")
                                                          "Val"
                                                      ]
                                                  ]
                                              ]
                                          ]
                                      ],
                                    α0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                        let γ1_0 := M.SubPointer.get_tuple_field (| γ0_1, 0 |) in
                                        let γ1_1 := M.SubPointer.get_tuple_field (| γ0_1, 1 |) in
                                        let row :=
                                          M.copy (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_commit::domain::PolynomialSpace"
                                                      []
                                                      []
                                                      (Ty.associated_in_trait
                                                        "p3_commit::pcs::Pcs"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenge";
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenger"
                                                        ]
                                                        (Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Pcs")
                                                        "Domain")
                                                      "Val"
                                                  ]
                                              ],
                                            γ1_0
                                          |) in
                                        let γ1_1 := M.deref (| M.read (| γ1_1 |) |) in
                                        let γ3_0 := M.SubPointer.get_tuple_field (| γ1_1, 0 |) in
                                        let γ3_1 := M.SubPointer.get_tuple_field (| γ1_1, 1 |) in
                                        let γ4_0 := M.SubPointer.get_tuple_field (| γ3_0, 0 |) in
                                        let γ4_1 := M.SubPointer.get_tuple_field (| γ3_0, 1 |) in
                                        let addr_space :=
                                          M.alloc (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                            γ4_0
                                          |) in
                                        let ptr :=
                                          M.alloc (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                            γ4_1
                                          |) in
                                        let timestamped_values :=
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_circuit::system::memory::controller::TimestampedValues")
                                                  [ Value.Integer IntegerKind.Usize 1 ]
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_commit::domain::PolynomialSpace"
                                                      []
                                                      []
                                                      (Ty.associated_in_trait
                                                        "p3_commit::pcs::Pcs"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenge";
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenger"
                                                        ]
                                                        (Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Pcs")
                                                        "Domain")
                                                      "Val"
                                                  ]
                                              ],
                                            γ3_1
                                          |) in
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| timestamped_values |) |),
                                            "openvm_circuit::system::memory::controller::TimestampedValues",
                                            "values"
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_slice_index (| γ, 0 |) in
                                                let data :=
                                                  M.copy (|
                                                    Ty.associated_in_trait
                                                      "p3_commit::domain::PolynomialSpace"
                                                      []
                                                      []
                                                      (Ty.associated_in_trait
                                                        "p3_commit::pcs::Pcs"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenge";
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenger"
                                                        ]
                                                        (Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Pcs")
                                                        "Domain")
                                                      "Val",
                                                    γ0_0
                                                  |) in
                                                M.read (|
                                                  let~ row :
                                                      Ty.apply
                                                        (Ty.path "&mut")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path
                                                              "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_commit::domain::PolynomialSpace"
                                                                []
                                                                []
                                                                (Ty.associated_in_trait
                                                                  "p3_commit::pcs::Pcs"
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenge";
                                                                    Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Challenger"
                                                                  ]
                                                                  (Ty.associated_in_trait
                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                    []
                                                                    []
                                                                    SC
                                                                    "Pcs")
                                                                  "Domain")
                                                                "Val"
                                                            ]
                                                        ] :=
                                                    M.borrow (|
                                                      Pointer.Kind.MutRef,
                                                      M.deref (|
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&mut")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::domain::PolynomialSpace"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "p3_commit::pcs::Pcs"
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenger"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Pcs")
                                                                      "Domain")
                                                                    "Val"
                                                                ]
                                                            ],
                                                          M.get_trait_method (|
                                                            "core::borrow::BorrowMut",
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_commit::domain::PolynomialSpace"
                                                                  []
                                                                  []
                                                                  (Ty.associated_in_trait
                                                                    "p3_commit::pcs::Pcs"
                                                                    []
                                                                    [
                                                                      Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Challenge";
                                                                      Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Challenger"
                                                                    ]
                                                                    (Ty.associated_in_trait
                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                      []
                                                                      []
                                                                      SC
                                                                      "Pcs")
                                                                    "Domain")
                                                                  "Val"
                                                              ],
                                                            [],
                                                            [
                                                              Ty.apply
                                                                (Ty.path
                                                                  "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::domain::PolynomialSpace"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "p3_commit::pcs::Pcs"
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenger"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Pcs")
                                                                      "Domain")
                                                                    "Val"
                                                                ]
                                                            ],
                                                            "borrow_mut",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.deref (| M.read (| row |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |) in
                                                  let~ _ : Ty.tuple [] :=
                                                    M.call_closure (|
                                                      Ty.tuple [],
                                                      M.get_associated_function (|
                                                        Ty.path
                                                          "openvm_circuit_primitives::var_range::VariableRangeCheckerChip",
                                                        "decompose",
                                                        [],
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_commit::domain::PolynomialSpace"
                                                            []
                                                            []
                                                            (Ty.associated_in_trait
                                                              "p3_commit::pcs::Pcs"
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenge";
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenger"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Pcs")
                                                              "Domain")
                                                            "Val"
                                                        ]
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| range_checker |) |)
                                                        |);
                                                        M.read (|
                                                          M.deref (| M.read (| addr_space |) |)
                                                        |);
                                                        M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            self,
                                                            "openvm_circuit::system::memory::volatile::VolatileBoundaryChip",
                                                            "addr_space_max_bits"
                                                          |)
                                                        |);
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&mut")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::domain::PolynomialSpace"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "p3_commit::pcs::Pcs"
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenger"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Pcs")
                                                                      "Domain")
                                                                    "Val"
                                                                ]
                                                            ],
                                                          M.pointer_coercion
                                                            M.PointerCoercion.Unsize
                                                            (Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      1
                                                                  ]
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::domain::PolynomialSpace"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain")
                                                                      "Val"
                                                                  ]
                                                              ])
                                                            (Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::domain::PolynomialSpace"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain")
                                                                      "Val"
                                                                  ]
                                                              ]),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.deref (| M.read (| row |) |),
                                                                    "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                                                    "addr_space_limbs"
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |) in
                                                  let~ _ : Ty.tuple [] :=
                                                    M.call_closure (|
                                                      Ty.tuple [],
                                                      M.get_associated_function (|
                                                        Ty.path
                                                          "openvm_circuit_primitives::var_range::VariableRangeCheckerChip",
                                                        "decompose",
                                                        [],
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_commit::domain::PolynomialSpace"
                                                            []
                                                            []
                                                            (Ty.associated_in_trait
                                                              "p3_commit::pcs::Pcs"
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenge";
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenger"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Pcs")
                                                              "Domain")
                                                            "Val"
                                                        ]
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| range_checker |) |)
                                                        |);
                                                        M.read (| M.deref (| M.read (| ptr |) |) |);
                                                        M.read (|
                                                          M.SubPointer.get_struct_record_field (|
                                                            self,
                                                            "openvm_circuit::system::memory::volatile::VolatileBoundaryChip",
                                                            "pointer_max_bits"
                                                          |)
                                                        |);
                                                        M.call_closure (|
                                                          Ty.apply
                                                            (Ty.path "&mut")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "slice")
                                                                []
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_commit::domain::PolynomialSpace"
                                                                    []
                                                                    []
                                                                    (Ty.associated_in_trait
                                                                      "p3_commit::pcs::Pcs"
                                                                      []
                                                                      [
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenge";
                                                                        Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Challenger"
                                                                      ]
                                                                      (Ty.associated_in_trait
                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                        []
                                                                        []
                                                                        SC
                                                                        "Pcs")
                                                                      "Domain")
                                                                    "Val"
                                                                ]
                                                            ],
                                                          M.pointer_coercion
                                                            M.PointerCoercion.Unsize
                                                            (Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "array")
                                                                  [
                                                                    Value.Integer
                                                                      IntegerKind.Usize
                                                                      2
                                                                  ]
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::domain::PolynomialSpace"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain")
                                                                      "Val"
                                                                  ]
                                                              ])
                                                            (Ty.apply
                                                              (Ty.path "&mut")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "slice")
                                                                  []
                                                                  [
                                                                    Ty.associated_in_trait
                                                                      "p3_commit::domain::PolynomialSpace"
                                                                      []
                                                                      []
                                                                      (Ty.associated_in_trait
                                                                        "p3_commit::pcs::Pcs"
                                                                        []
                                                                        [
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenge";
                                                                          Ty.associated_in_trait
                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                            []
                                                                            []
                                                                            SC
                                                                            "Challenger"
                                                                        ]
                                                                        (Ty.associated_in_trait
                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                          []
                                                                          []
                                                                          SC
                                                                          "Pcs")
                                                                        "Domain")
                                                                      "Val"
                                                                  ]
                                                              ]),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.MutRef,
                                                              M.deref (|
                                                                M.borrow (|
                                                                  Pointer.Kind.MutRef,
                                                                  M.SubPointer.get_struct_record_field (|
                                                                    M.deref (| M.read (| row |) |),
                                                                    "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                                                    "pointer_limbs"
                                                                  |)
                                                                |)
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |) in
                                                  let~ _ : Ty.tuple [] :=
                                                    M.write (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| row |) |),
                                                        "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                                        "initial_data"
                                                      |),
                                                      M.read (|
                                                        get_constant (|
                                                          "p3_field::field::FieldAlgebra::ZERO",
                                                          Ty.associated_in_trait
                                                            "p3_commit::domain::PolynomialSpace"
                                                            []
                                                            []
                                                            (Ty.associated_in_trait
                                                              "p3_commit::pcs::Pcs"
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenge";
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenger"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Pcs")
                                                              "Domain")
                                                            "Val"
                                                        |)
                                                      |)
                                                    |) in
                                                  let~ _ : Ty.tuple [] :=
                                                    M.write (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| row |) |),
                                                        "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                                        "final_data"
                                                      |),
                                                      M.read (| data |)
                                                    |) in
                                                  let~ _ : Ty.tuple [] :=
                                                    M.write (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| row |) |),
                                                        "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                                        "final_timestamp"
                                                      |),
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_commit::domain::PolynomialSpace"
                                                          []
                                                          []
                                                          (Ty.associated_in_trait
                                                            "p3_commit::pcs::Pcs"
                                                            []
                                                            [
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenge";
                                                              Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Challenger"
                                                            ]
                                                            (Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Pcs")
                                                            "Domain")
                                                          "Val",
                                                        M.get_trait_method (|
                                                          "p3_field::field::FieldAlgebra",
                                                          Ty.associated_in_trait
                                                            "p3_commit::domain::PolynomialSpace"
                                                            []
                                                            []
                                                            (Ty.associated_in_trait
                                                              "p3_commit::pcs::Pcs"
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenge";
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenger"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Pcs")
                                                              "Domain")
                                                            "Val",
                                                          [],
                                                          [],
                                                          "from_canonical_u32",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              M.deref (|
                                                                M.read (| timestamped_values |)
                                                              |),
                                                              "openvm_circuit::system::memory::controller::TimestampedValues",
                                                              "timestamp"
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |) in
                                                  let~ _ : Ty.tuple [] :=
                                                    M.write (|
                                                      M.SubPointer.get_struct_record_field (|
                                                        M.deref (| M.read (| row |) |),
                                                        "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                                        "is_valid"
                                                      |),
                                                      M.read (|
                                                        get_constant (|
                                                          "p3_field::field::FieldAlgebra::ONE",
                                                          Ty.associated_in_trait
                                                            "p3_commit::domain::PolynomialSpace"
                                                            []
                                                            []
                                                            (Ty.associated_in_trait
                                                              "p3_commit::pcs::Pcs"
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenge";
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenger"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Pcs")
                                                              "Domain")
                                                            "Val"
                                                        |)
                                                      |)
                                                    |) in
                                                  M.alloc (|
                                                    Ty.tuple [],
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  Ty.path "bool",
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    BinOp.ne,
                                                                    [
                                                                      M.read (| i |);
                                                                      M.call_closure (|
                                                                        Ty.path "usize",
                                                                        BinOp.Wrap.sub,
                                                                        [
                                                                          M.read (| memory_len |);
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.match_operator (|
                                                              Ty.tuple [],
                                                              M.SubPointer.get_tuple_field (|
                                                                M.deref (|
                                                                  M.call_closure (|
                                                                    Ty.apply
                                                                      (Ty.path "&")
                                                                      []
                                                                      [
                                                                        Ty.tuple
                                                                          [
                                                                            Ty.tuple
                                                                              [
                                                                                Ty.path "u32";
                                                                                Ty.path "u32"
                                                                              ];
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "openvm_circuit::system::memory::controller::TimestampedValues")
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  1
                                                                              ]
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                  []
                                                                                  []
                                                                                  (Ty.associated_in_trait
                                                                                    "p3_commit::pcs::Pcs"
                                                                                    []
                                                                                    [
                                                                                      Ty.associated_in_trait
                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                        []
                                                                                        []
                                                                                        SC
                                                                                        "Challenge";
                                                                                      Ty.associated_in_trait
                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                        []
                                                                                        []
                                                                                        SC
                                                                                        "Challenger"
                                                                                    ]
                                                                                    (Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Pcs")
                                                                                    "Domain")
                                                                                  "Val"
                                                                              ]
                                                                          ]
                                                                      ],
                                                                    M.get_trait_method (|
                                                                      "core::ops::index::Index",
                                                                      Ty.apply
                                                                        (Ty.path "alloc::vec::Vec")
                                                                        []
                                                                        [
                                                                          Ty.tuple
                                                                            [
                                                                              Ty.tuple
                                                                                [
                                                                                  Ty.path "u32";
                                                                                  Ty.path "u32"
                                                                                ];
                                                                              Ty.apply
                                                                                (Ty.path
                                                                                  "openvm_circuit::system::memory::controller::TimestampedValues")
                                                                                [
                                                                                  Value.Integer
                                                                                    IntegerKind.Usize
                                                                                    1
                                                                                ]
                                                                                [
                                                                                  Ty.associated_in_trait
                                                                                    "p3_commit::domain::PolynomialSpace"
                                                                                    []
                                                                                    []
                                                                                    (Ty.associated_in_trait
                                                                                      "p3_commit::pcs::Pcs"
                                                                                      []
                                                                                      [
                                                                                        Ty.associated_in_trait
                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                          []
                                                                                          []
                                                                                          SC
                                                                                          "Challenge";
                                                                                        Ty.associated_in_trait
                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                          []
                                                                                          []
                                                                                          SC
                                                                                          "Challenger"
                                                                                      ]
                                                                                      (Ty.associated_in_trait
                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                        []
                                                                                        []
                                                                                        SC
                                                                                        "Pcs")
                                                                                      "Domain")
                                                                                    "Val"
                                                                                ]
                                                                            ];
                                                                          Ty.path
                                                                            "alloc::alloc::Global"
                                                                        ],
                                                                      [],
                                                                      [ Ty.path "usize" ],
                                                                      "index",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        sorted_final_memory
                                                                      |);
                                                                      M.call_closure (|
                                                                        Ty.path "usize",
                                                                        BinOp.Wrap.add,
                                                                        [
                                                                          M.read (| i |);
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                      |)
                                                                    ]
                                                                  |)
                                                                |),
                                                                0
                                                              |),
                                                              [
                                                                fun γ =>
                                                                  ltac:(M.monadic
                                                                    (let γ0_0 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ,
                                                                        0
                                                                      |) in
                                                                    let γ0_1 :=
                                                                      M.SubPointer.get_tuple_field (|
                                                                        γ,
                                                                        1
                                                                      |) in
                                                                    let next_addr_space :=
                                                                      M.copy (|
                                                                        Ty.path "u32",
                                                                        γ0_0
                                                                      |) in
                                                                    let next_ptr :=
                                                                      M.copy (|
                                                                        Ty.path "u32",
                                                                        γ0_1
                                                                      |) in
                                                                    M.read (|
                                                                      let~ out :
                                                                          Ty.associated_in_trait
                                                                            "p3_commit::domain::PolynomialSpace"
                                                                            []
                                                                            []
                                                                            (Ty.associated_in_trait
                                                                              "p3_commit::pcs::Pcs"
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenge";
                                                                                Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Challenger"
                                                                              ]
                                                                              (Ty.associated_in_trait
                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                []
                                                                                []
                                                                                SC
                                                                                "Pcs")
                                                                              "Domain")
                                                                            "Val" :=
                                                                        M.read (|
                                                                          get_constant (|
                                                                            "p3_field::field::FieldAlgebra::ZERO",
                                                                            Ty.associated_in_trait
                                                                              "p3_commit::domain::PolynomialSpace"
                                                                              []
                                                                              []
                                                                              (Ty.associated_in_trait
                                                                                "p3_commit::pcs::Pcs"
                                                                                []
                                                                                [
                                                                                  Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Challenge";
                                                                                  Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Challenger"
                                                                                ]
                                                                                (Ty.associated_in_trait
                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                  []
                                                                                  []
                                                                                  SC
                                                                                  "Pcs")
                                                                                "Domain")
                                                                              "Val"
                                                                          |)
                                                                        |) in
                                                                      let~ _ : Ty.tuple [] :=
                                                                        M.call_closure (|
                                                                          Ty.tuple [],
                                                                          M.get_trait_method (|
                                                                            "openvm_circuit_primitives::sub_air::TraceSubRowGenerator",
                                                                            Ty.apply
                                                                              (Ty.path
                                                                                "openvm_circuit_primitives::is_less_than_array::IsLtArraySubAir")
                                                                              [
                                                                                Value.Integer
                                                                                  IntegerKind.Usize
                                                                                  2
                                                                              ]
                                                                              [],
                                                                            [],
                                                                            [
                                                                              Ty.associated_in_trait
                                                                                "p3_commit::domain::PolynomialSpace"
                                                                                []
                                                                                []
                                                                                (Ty.associated_in_trait
                                                                                  "p3_commit::pcs::Pcs"
                                                                                  []
                                                                                  [
                                                                                    Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Challenge";
                                                                                    Ty.associated_in_trait
                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                      []
                                                                                      []
                                                                                      SC
                                                                                      "Challenger"
                                                                                  ]
                                                                                  (Ty.associated_in_trait
                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                    []
                                                                                    []
                                                                                    SC
                                                                                    "Pcs")
                                                                                  "Domain")
                                                                                "Val"
                                                                            ],
                                                                            "generate_subrow",
                                                                            [],
                                                                            []
                                                                          |),
                                                                          [
                                                                            M.borrow (|
                                                                              Pointer.Kind.Ref,
                                                                              M.SubPointer.get_struct_tuple_field (|
                                                                                M.SubPointer.get_struct_record_field (|
                                                                                  M.deref (|
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "openvm_circuit::system::memory::volatile::VolatileBoundaryAir"
                                                                                        ],
                                                                                      M.get_trait_method (|
                                                                                        "core::ops::deref::Deref",
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "alloc::sync::Arc")
                                                                                          []
                                                                                          [
                                                                                            Ty.path
                                                                                              "openvm_circuit::system::memory::volatile::VolatileBoundaryAir";
                                                                                            Ty.path
                                                                                              "alloc::alloc::Global"
                                                                                          ],
                                                                                        [],
                                                                                        [],
                                                                                        "deref",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          air
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |),
                                                                                  "openvm_circuit::system::memory::volatile::VolatileBoundaryAir",
                                                                                  "addr_lt_air"
                                                                                |),
                                                                                "openvm_circuit_primitives::is_less_than_array::IsLtArrayWhenTransitionAir",
                                                                                0
                                                                              |)
                                                                            |);
                                                                            Value.Tuple
                                                                              [
                                                                                M.borrow (|
                                                                                  Pointer.Kind.Ref,
                                                                                  M.deref (|
                                                                                    M.call_closure (|
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "&")
                                                                                        []
                                                                                        [
                                                                                          Ty.path
                                                                                            "openvm_circuit_primitives::var_range::VariableRangeCheckerChip"
                                                                                        ],
                                                                                      M.get_trait_method (|
                                                                                        "core::convert::AsRef",
                                                                                        Ty.path
                                                                                          "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                                                                        [],
                                                                                        [
                                                                                          Ty.path
                                                                                            "openvm_circuit_primitives::var_range::VariableRangeCheckerChip"
                                                                                        ],
                                                                                        "as_ref",
                                                                                        [],
                                                                                        []
                                                                                      |),
                                                                                      [
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                            self,
                                                                                            "openvm_circuit::system::memory::volatile::VolatileBoundaryChip",
                                                                                            "range_checker"
                                                                                          |)
                                                                                        |)
                                                                                      ]
                                                                                    |)
                                                                                  |)
                                                                                |);
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "slice")
                                                                                        []
                                                                                        [
                                                                                          Ty.associated_in_trait
                                                                                            "p3_commit::domain::PolynomialSpace"
                                                                                            []
                                                                                            []
                                                                                            (Ty.associated_in_trait
                                                                                              "p3_commit::pcs::Pcs"
                                                                                              []
                                                                                              [
                                                                                                Ty.associated_in_trait
                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                  []
                                                                                                  []
                                                                                                  SC
                                                                                                  "Challenge";
                                                                                                Ty.associated_in_trait
                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                  []
                                                                                                  []
                                                                                                  SC
                                                                                                  "Challenger"
                                                                                              ]
                                                                                              (Ty.associated_in_trait
                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                []
                                                                                                []
                                                                                                SC
                                                                                                "Pcs")
                                                                                              "Domain")
                                                                                            "Val"
                                                                                        ]
                                                                                    ],
                                                                                  M.pointer_coercion
                                                                                    M.PointerCoercion.Unsize
                                                                                    (Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "array")
                                                                                          [
                                                                                            Value.Integer
                                                                                              IntegerKind.Usize
                                                                                              2
                                                                                          ]
                                                                                          [
                                                                                            Ty.associated_in_trait
                                                                                              "p3_commit::domain::PolynomialSpace"
                                                                                              []
                                                                                              []
                                                                                              (Ty.associated_in_trait
                                                                                                "p3_commit::pcs::Pcs"
                                                                                                []
                                                                                                [
                                                                                                  Ty.associated_in_trait
                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                    []
                                                                                                    []
                                                                                                    SC
                                                                                                    "Challenge";
                                                                                                  Ty.associated_in_trait
                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                    []
                                                                                                    []
                                                                                                    SC
                                                                                                    "Challenger"
                                                                                                ]
                                                                                                (Ty.associated_in_trait
                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                  []
                                                                                                  []
                                                                                                  SC
                                                                                                  "Pcs")
                                                                                                "Domain")
                                                                                              "Val"
                                                                                          ]
                                                                                      ])
                                                                                    (Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "slice")
                                                                                          []
                                                                                          [
                                                                                            Ty.associated_in_trait
                                                                                              "p3_commit::domain::PolynomialSpace"
                                                                                              []
                                                                                              []
                                                                                              (Ty.associated_in_trait
                                                                                                "p3_commit::pcs::Pcs"
                                                                                                []
                                                                                                [
                                                                                                  Ty.associated_in_trait
                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                    []
                                                                                                    []
                                                                                                    SC
                                                                                                    "Challenge";
                                                                                                  Ty.associated_in_trait
                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                    []
                                                                                                    []
                                                                                                    SC
                                                                                                    "Challenger"
                                                                                                ]
                                                                                                (Ty.associated_in_trait
                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                  []
                                                                                                  []
                                                                                                  SC
                                                                                                  "Pcs")
                                                                                                "Domain")
                                                                                              "Val"
                                                                                          ]
                                                                                      ]),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.alloc (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "array")
                                                                                              [
                                                                                                Value.Integer
                                                                                                  IntegerKind.Usize
                                                                                                  2
                                                                                              ]
                                                                                              [
                                                                                                Ty.associated_in_trait
                                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                                  []
                                                                                                  []
                                                                                                  (Ty.associated_in_trait
                                                                                                    "p3_commit::pcs::Pcs"
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.associated_in_trait
                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                        []
                                                                                                        []
                                                                                                        SC
                                                                                                        "Challenge";
                                                                                                      Ty.associated_in_trait
                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                        []
                                                                                                        []
                                                                                                        SC
                                                                                                        "Challenger"
                                                                                                    ]
                                                                                                    (Ty.associated_in_trait
                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                      []
                                                                                                      []
                                                                                                      SC
                                                                                                      "Pcs")
                                                                                                    "Domain")
                                                                                                  "Val"
                                                                                              ],
                                                                                            Value.Array
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  Ty.associated_in_trait
                                                                                                    "p3_commit::domain::PolynomialSpace"
                                                                                                    []
                                                                                                    []
                                                                                                    (Ty.associated_in_trait
                                                                                                      "p3_commit::pcs::Pcs"
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.associated_in_trait
                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                          []
                                                                                                          []
                                                                                                          SC
                                                                                                          "Challenge";
                                                                                                        Ty.associated_in_trait
                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                          []
                                                                                                          []
                                                                                                          SC
                                                                                                          "Challenger"
                                                                                                      ]
                                                                                                      (Ty.associated_in_trait
                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                        []
                                                                                                        []
                                                                                                        SC
                                                                                                        "Pcs")
                                                                                                      "Domain")
                                                                                                    "Val",
                                                                                                  M.get_trait_method (|
                                                                                                    "p3_field::field::FieldAlgebra",
                                                                                                    Ty.associated_in_trait
                                                                                                      "p3_commit::domain::PolynomialSpace"
                                                                                                      []
                                                                                                      []
                                                                                                      (Ty.associated_in_trait
                                                                                                        "p3_commit::pcs::Pcs"
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.associated_in_trait
                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                            []
                                                                                                            []
                                                                                                            SC
                                                                                                            "Challenge";
                                                                                                          Ty.associated_in_trait
                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                            []
                                                                                                            []
                                                                                                            SC
                                                                                                            "Challenger"
                                                                                                        ]
                                                                                                        (Ty.associated_in_trait
                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                          []
                                                                                                          []
                                                                                                          SC
                                                                                                          "Pcs")
                                                                                                        "Domain")
                                                                                                      "Val",
                                                                                                    [],
                                                                                                    [],
                                                                                                    "from_canonical_u32",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      M.deref (|
                                                                                                        M.read (|
                                                                                                          addr_space
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  Ty.associated_in_trait
                                                                                                    "p3_commit::domain::PolynomialSpace"
                                                                                                    []
                                                                                                    []
                                                                                                    (Ty.associated_in_trait
                                                                                                      "p3_commit::pcs::Pcs"
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.associated_in_trait
                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                          []
                                                                                                          []
                                                                                                          SC
                                                                                                          "Challenge";
                                                                                                        Ty.associated_in_trait
                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                          []
                                                                                                          []
                                                                                                          SC
                                                                                                          "Challenger"
                                                                                                      ]
                                                                                                      (Ty.associated_in_trait
                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                        []
                                                                                                        []
                                                                                                        SC
                                                                                                        "Pcs")
                                                                                                      "Domain")
                                                                                                    "Val",
                                                                                                  M.get_trait_method (|
                                                                                                    "p3_field::field::FieldAlgebra",
                                                                                                    Ty.associated_in_trait
                                                                                                      "p3_commit::domain::PolynomialSpace"
                                                                                                      []
                                                                                                      []
                                                                                                      (Ty.associated_in_trait
                                                                                                        "p3_commit::pcs::Pcs"
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.associated_in_trait
                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                            []
                                                                                                            []
                                                                                                            SC
                                                                                                            "Challenge";
                                                                                                          Ty.associated_in_trait
                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                            []
                                                                                                            []
                                                                                                            SC
                                                                                                            "Challenger"
                                                                                                        ]
                                                                                                        (Ty.associated_in_trait
                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                          []
                                                                                                          []
                                                                                                          SC
                                                                                                          "Pcs")
                                                                                                        "Domain")
                                                                                                      "Val",
                                                                                                    [],
                                                                                                    [],
                                                                                                    "from_canonical_u32",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      M.deref (|
                                                                                                        M.read (|
                                                                                                          ptr
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path "&")
                                                                                    []
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "slice")
                                                                                        []
                                                                                        [
                                                                                          Ty.associated_in_trait
                                                                                            "p3_commit::domain::PolynomialSpace"
                                                                                            []
                                                                                            []
                                                                                            (Ty.associated_in_trait
                                                                                              "p3_commit::pcs::Pcs"
                                                                                              []
                                                                                              [
                                                                                                Ty.associated_in_trait
                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                  []
                                                                                                  []
                                                                                                  SC
                                                                                                  "Challenge";
                                                                                                Ty.associated_in_trait
                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                  []
                                                                                                  []
                                                                                                  SC
                                                                                                  "Challenger"
                                                                                              ]
                                                                                              (Ty.associated_in_trait
                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                []
                                                                                                []
                                                                                                SC
                                                                                                "Pcs")
                                                                                              "Domain")
                                                                                            "Val"
                                                                                        ]
                                                                                    ],
                                                                                  M.pointer_coercion
                                                                                    M.PointerCoercion.Unsize
                                                                                    (Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "array")
                                                                                          [
                                                                                            Value.Integer
                                                                                              IntegerKind.Usize
                                                                                              2
                                                                                          ]
                                                                                          [
                                                                                            Ty.associated_in_trait
                                                                                              "p3_commit::domain::PolynomialSpace"
                                                                                              []
                                                                                              []
                                                                                              (Ty.associated_in_trait
                                                                                                "p3_commit::pcs::Pcs"
                                                                                                []
                                                                                                [
                                                                                                  Ty.associated_in_trait
                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                    []
                                                                                                    []
                                                                                                    SC
                                                                                                    "Challenge";
                                                                                                  Ty.associated_in_trait
                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                    []
                                                                                                    []
                                                                                                    SC
                                                                                                    "Challenger"
                                                                                                ]
                                                                                                (Ty.associated_in_trait
                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                  []
                                                                                                  []
                                                                                                  SC
                                                                                                  "Pcs")
                                                                                                "Domain")
                                                                                              "Val"
                                                                                          ]
                                                                                      ])
                                                                                    (Ty.apply
                                                                                      (Ty.path "&")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "slice")
                                                                                          []
                                                                                          [
                                                                                            Ty.associated_in_trait
                                                                                              "p3_commit::domain::PolynomialSpace"
                                                                                              []
                                                                                              []
                                                                                              (Ty.associated_in_trait
                                                                                                "p3_commit::pcs::Pcs"
                                                                                                []
                                                                                                [
                                                                                                  Ty.associated_in_trait
                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                    []
                                                                                                    []
                                                                                                    SC
                                                                                                    "Challenge";
                                                                                                  Ty.associated_in_trait
                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                    []
                                                                                                    []
                                                                                                    SC
                                                                                                    "Challenger"
                                                                                                ]
                                                                                                (Ty.associated_in_trait
                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                  []
                                                                                                  []
                                                                                                  SC
                                                                                                  "Pcs")
                                                                                                "Domain")
                                                                                              "Val"
                                                                                          ]
                                                                                      ]),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.Ref,
                                                                                      M.deref (|
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.Ref,
                                                                                          M.alloc (|
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "array")
                                                                                              [
                                                                                                Value.Integer
                                                                                                  IntegerKind.Usize
                                                                                                  2
                                                                                              ]
                                                                                              [
                                                                                                Ty.associated_in_trait
                                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                                  []
                                                                                                  []
                                                                                                  (Ty.associated_in_trait
                                                                                                    "p3_commit::pcs::Pcs"
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.associated_in_trait
                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                        []
                                                                                                        []
                                                                                                        SC
                                                                                                        "Challenge";
                                                                                                      Ty.associated_in_trait
                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                        []
                                                                                                        []
                                                                                                        SC
                                                                                                        "Challenger"
                                                                                                    ]
                                                                                                    (Ty.associated_in_trait
                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                      []
                                                                                                      []
                                                                                                      SC
                                                                                                      "Pcs")
                                                                                                    "Domain")
                                                                                                  "Val"
                                                                                              ],
                                                                                            Value.Array
                                                                                              [
                                                                                                M.call_closure (|
                                                                                                  Ty.associated_in_trait
                                                                                                    "p3_commit::domain::PolynomialSpace"
                                                                                                    []
                                                                                                    []
                                                                                                    (Ty.associated_in_trait
                                                                                                      "p3_commit::pcs::Pcs"
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.associated_in_trait
                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                          []
                                                                                                          []
                                                                                                          SC
                                                                                                          "Challenge";
                                                                                                        Ty.associated_in_trait
                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                          []
                                                                                                          []
                                                                                                          SC
                                                                                                          "Challenger"
                                                                                                      ]
                                                                                                      (Ty.associated_in_trait
                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                        []
                                                                                                        []
                                                                                                        SC
                                                                                                        "Pcs")
                                                                                                      "Domain")
                                                                                                    "Val",
                                                                                                  M.get_trait_method (|
                                                                                                    "p3_field::field::FieldAlgebra",
                                                                                                    Ty.associated_in_trait
                                                                                                      "p3_commit::domain::PolynomialSpace"
                                                                                                      []
                                                                                                      []
                                                                                                      (Ty.associated_in_trait
                                                                                                        "p3_commit::pcs::Pcs"
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.associated_in_trait
                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                            []
                                                                                                            []
                                                                                                            SC
                                                                                                            "Challenge";
                                                                                                          Ty.associated_in_trait
                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                            []
                                                                                                            []
                                                                                                            SC
                                                                                                            "Challenger"
                                                                                                        ]
                                                                                                        (Ty.associated_in_trait
                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                          []
                                                                                                          []
                                                                                                          SC
                                                                                                          "Pcs")
                                                                                                        "Domain")
                                                                                                      "Val",
                                                                                                    [],
                                                                                                    [],
                                                                                                    "from_canonical_u32",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      next_addr_space
                                                                                                    |)
                                                                                                  ]
                                                                                                |);
                                                                                                M.call_closure (|
                                                                                                  Ty.associated_in_trait
                                                                                                    "p3_commit::domain::PolynomialSpace"
                                                                                                    []
                                                                                                    []
                                                                                                    (Ty.associated_in_trait
                                                                                                      "p3_commit::pcs::Pcs"
                                                                                                      []
                                                                                                      [
                                                                                                        Ty.associated_in_trait
                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                          []
                                                                                                          []
                                                                                                          SC
                                                                                                          "Challenge";
                                                                                                        Ty.associated_in_trait
                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                          []
                                                                                                          []
                                                                                                          SC
                                                                                                          "Challenger"
                                                                                                      ]
                                                                                                      (Ty.associated_in_trait
                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                        []
                                                                                                        []
                                                                                                        SC
                                                                                                        "Pcs")
                                                                                                      "Domain")
                                                                                                    "Val",
                                                                                                  M.get_trait_method (|
                                                                                                    "p3_field::field::FieldAlgebra",
                                                                                                    Ty.associated_in_trait
                                                                                                      "p3_commit::domain::PolynomialSpace"
                                                                                                      []
                                                                                                      []
                                                                                                      (Ty.associated_in_trait
                                                                                                        "p3_commit::pcs::Pcs"
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.associated_in_trait
                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                            []
                                                                                                            []
                                                                                                            SC
                                                                                                            "Challenge";
                                                                                                          Ty.associated_in_trait
                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                            []
                                                                                                            []
                                                                                                            SC
                                                                                                            "Challenger"
                                                                                                        ]
                                                                                                        (Ty.associated_in_trait
                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                          []
                                                                                                          []
                                                                                                          SC
                                                                                                          "Pcs")
                                                                                                        "Domain")
                                                                                                      "Val",
                                                                                                    [],
                                                                                                    [],
                                                                                                    "from_canonical_u32",
                                                                                                    [],
                                                                                                    []
                                                                                                  |),
                                                                                                  [
                                                                                                    M.read (|
                                                                                                      next_ptr
                                                                                                    |)
                                                                                                  ]
                                                                                                |)
                                                                                              ]
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |)
                                                                              ];
                                                                            Value.Tuple
                                                                              [
                                                                                M.call_closure (|
                                                                                  Ty.apply
                                                                                    (Ty.path
                                                                                      "openvm_circuit_primitives::is_less_than_array::IsLtArrayAuxColsMut")
                                                                                    []
                                                                                    [
                                                                                      Ty.associated_in_trait
                                                                                        "p3_commit::domain::PolynomialSpace"
                                                                                        []
                                                                                        []
                                                                                        (Ty.associated_in_trait
                                                                                          "p3_commit::pcs::Pcs"
                                                                                          []
                                                                                          [
                                                                                            Ty.associated_in_trait
                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                              []
                                                                                              []
                                                                                              SC
                                                                                              "Challenge";
                                                                                            Ty.associated_in_trait
                                                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                                                              []
                                                                                              []
                                                                                              SC
                                                                                              "Challenger"
                                                                                          ]
                                                                                          (Ty.associated_in_trait
                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                            []
                                                                                            []
                                                                                            SC
                                                                                            "Pcs")
                                                                                          "Domain")
                                                                                        "Val"
                                                                                    ],
                                                                                  M.get_trait_method (|
                                                                                    "core::convert::Into",
                                                                                    Ty.apply
                                                                                      (Ty.path
                                                                                        "&mut")
                                                                                      []
                                                                                      [
                                                                                        Ty.apply
                                                                                          (Ty.path
                                                                                            "openvm_circuit_primitives::is_less_than_array::IsLtArrayAuxCols")
                                                                                          [
                                                                                            Value.Integer
                                                                                              IntegerKind.Usize
                                                                                              2;
                                                                                            Value.Integer
                                                                                              IntegerKind.Usize
                                                                                              2
                                                                                          ]
                                                                                          [
                                                                                            Ty.associated_in_trait
                                                                                              "p3_commit::domain::PolynomialSpace"
                                                                                              []
                                                                                              []
                                                                                              (Ty.associated_in_trait
                                                                                                "p3_commit::pcs::Pcs"
                                                                                                []
                                                                                                [
                                                                                                  Ty.associated_in_trait
                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                    []
                                                                                                    []
                                                                                                    SC
                                                                                                    "Challenge";
                                                                                                  Ty.associated_in_trait
                                                                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                    []
                                                                                                    []
                                                                                                    SC
                                                                                                    "Challenger"
                                                                                                ]
                                                                                                (Ty.associated_in_trait
                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                  []
                                                                                                  []
                                                                                                  SC
                                                                                                  "Pcs")
                                                                                                "Domain")
                                                                                              "Val"
                                                                                          ]
                                                                                      ],
                                                                                    [],
                                                                                    [
                                                                                      Ty.apply
                                                                                        (Ty.path
                                                                                          "openvm_circuit_primitives::is_less_than_array::IsLtArrayAuxColsMut")
                                                                                        []
                                                                                        [
                                                                                          Ty.associated_in_trait
                                                                                            "p3_commit::domain::PolynomialSpace"
                                                                                            []
                                                                                            []
                                                                                            (Ty.associated_in_trait
                                                                                              "p3_commit::pcs::Pcs"
                                                                                              []
                                                                                              [
                                                                                                Ty.associated_in_trait
                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                  []
                                                                                                  []
                                                                                                  SC
                                                                                                  "Challenge";
                                                                                                Ty.associated_in_trait
                                                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                  []
                                                                                                  []
                                                                                                  SC
                                                                                                  "Challenger"
                                                                                              ]
                                                                                              (Ty.associated_in_trait
                                                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                []
                                                                                                []
                                                                                                SC
                                                                                                "Pcs")
                                                                                              "Domain")
                                                                                            "Val"
                                                                                        ]
                                                                                    ],
                                                                                    "into",
                                                                                    [],
                                                                                    []
                                                                                  |),
                                                                                  [
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.MutRef,
                                                                                      M.deref (|
                                                                                        M.borrow (|
                                                                                          Pointer.Kind.MutRef,
                                                                                          M.SubPointer.get_struct_record_field (|
                                                                                            M.deref (|
                                                                                              M.read (|
                                                                                                row
                                                                                              |)
                                                                                            |),
                                                                                            "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                                                                            "addr_lt_aux"
                                                                                          |)
                                                                                        |)
                                                                                      |)
                                                                                    |)
                                                                                  ]
                                                                                |);
                                                                                M.borrow (|
                                                                                  Pointer.Kind.MutRef,
                                                                                  M.deref (|
                                                                                    M.borrow (|
                                                                                      Pointer.Kind.MutRef,
                                                                                      out
                                                                                    |)
                                                                                  |)
                                                                                |)
                                                                              ]
                                                                          ]
                                                                        |) in
                                                                      let~ _ : Ty.tuple [] :=
                                                                        M.match_operator (|
                                                                          Ty.tuple [],
                                                                          M.alloc (|
                                                                            Ty.tuple [],
                                                                            Value.Tuple []
                                                                          |),
                                                                          [
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (let γ :=
                                                                                  M.use
                                                                                    (M.alloc (|
                                                                                      Ty.path
                                                                                        "bool",
                                                                                      Value.Bool
                                                                                        true
                                                                                    |)) in
                                                                                let _ :=
                                                                                  is_constant_or_break_match (|
                                                                                    M.read (| γ |),
                                                                                    Value.Bool true
                                                                                  |) in
                                                                                M.read (|
                                                                                  let~ _ :
                                                                                      Ty.tuple [] :=
                                                                                    M.match_operator (|
                                                                                      Ty.tuple [],
                                                                                      M.alloc (|
                                                                                        Ty.tuple
                                                                                          [
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              []
                                                                                              [
                                                                                                Ty.associated_in_trait
                                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                                  []
                                                                                                  []
                                                                                                  (Ty.associated_in_trait
                                                                                                    "p3_commit::pcs::Pcs"
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.associated_in_trait
                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                        []
                                                                                                        []
                                                                                                        SC
                                                                                                        "Challenge";
                                                                                                      Ty.associated_in_trait
                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                        []
                                                                                                        []
                                                                                                        SC
                                                                                                        "Challenger"
                                                                                                    ]
                                                                                                    (Ty.associated_in_trait
                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                      []
                                                                                                      []
                                                                                                      SC
                                                                                                      "Pcs")
                                                                                                    "Domain")
                                                                                                  "Val"
                                                                                              ];
                                                                                            Ty.apply
                                                                                              (Ty.path
                                                                                                "&")
                                                                                              []
                                                                                              [
                                                                                                Ty.associated_in_trait
                                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                                  []
                                                                                                  []
                                                                                                  (Ty.associated_in_trait
                                                                                                    "p3_commit::pcs::Pcs"
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.associated_in_trait
                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                        []
                                                                                                        []
                                                                                                        SC
                                                                                                        "Challenge";
                                                                                                      Ty.associated_in_trait
                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                        []
                                                                                                        []
                                                                                                        SC
                                                                                                        "Challenger"
                                                                                                    ]
                                                                                                    (Ty.associated_in_trait
                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                      []
                                                                                                      []
                                                                                                      SC
                                                                                                      "Pcs")
                                                                                                    "Domain")
                                                                                                  "Val"
                                                                                              ]
                                                                                          ],
                                                                                        Value.Tuple
                                                                                          [
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.Ref,
                                                                                              out
                                                                                            |);
                                                                                            M.borrow (|
                                                                                              Pointer.Kind.Ref,
                                                                                              get_constant (|
                                                                                                "p3_field::field::FieldAlgebra::ONE",
                                                                                                Ty.associated_in_trait
                                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                                  []
                                                                                                  []
                                                                                                  (Ty.associated_in_trait
                                                                                                    "p3_commit::pcs::Pcs"
                                                                                                    []
                                                                                                    [
                                                                                                      Ty.associated_in_trait
                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                        []
                                                                                                        []
                                                                                                        SC
                                                                                                        "Challenge";
                                                                                                      Ty.associated_in_trait
                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                        []
                                                                                                        []
                                                                                                        SC
                                                                                                        "Challenger"
                                                                                                    ]
                                                                                                    (Ty.associated_in_trait
                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                      []
                                                                                                      []
                                                                                                      SC
                                                                                                      "Pcs")
                                                                                                    "Domain")
                                                                                                  "Val"
                                                                                              |)
                                                                                            |)
                                                                                          ]
                                                                                      |),
                                                                                      [
                                                                                        fun γ =>
                                                                                          ltac:(M.monadic
                                                                                            (let
                                                                                                  γ0_0 :=
                                                                                              M.SubPointer.get_tuple_field (|
                                                                                                γ,
                                                                                                0
                                                                                              |) in
                                                                                            let
                                                                                                  γ0_1 :=
                                                                                              M.SubPointer.get_tuple_field (|
                                                                                                γ,
                                                                                                1
                                                                                              |) in
                                                                                            let
                                                                                                  left_val :=
                                                                                              M.copy (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.associated_in_trait
                                                                                                      "p3_commit::domain::PolynomialSpace"
                                                                                                      []
                                                                                                      []
                                                                                                      (Ty.associated_in_trait
                                                                                                        "p3_commit::pcs::Pcs"
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.associated_in_trait
                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                            []
                                                                                                            []
                                                                                                            SC
                                                                                                            "Challenge";
                                                                                                          Ty.associated_in_trait
                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                            []
                                                                                                            []
                                                                                                            SC
                                                                                                            "Challenger"
                                                                                                        ]
                                                                                                        (Ty.associated_in_trait
                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                          []
                                                                                                          []
                                                                                                          SC
                                                                                                          "Pcs")
                                                                                                        "Domain")
                                                                                                      "Val"
                                                                                                  ],
                                                                                                γ0_0
                                                                                              |) in
                                                                                            let
                                                                                                  right_val :=
                                                                                              M.copy (|
                                                                                                Ty.apply
                                                                                                  (Ty.path
                                                                                                    "&")
                                                                                                  []
                                                                                                  [
                                                                                                    Ty.associated_in_trait
                                                                                                      "p3_commit::domain::PolynomialSpace"
                                                                                                      []
                                                                                                      []
                                                                                                      (Ty.associated_in_trait
                                                                                                        "p3_commit::pcs::Pcs"
                                                                                                        []
                                                                                                        [
                                                                                                          Ty.associated_in_trait
                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                            []
                                                                                                            []
                                                                                                            SC
                                                                                                            "Challenge";
                                                                                                          Ty.associated_in_trait
                                                                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                            []
                                                                                                            []
                                                                                                            SC
                                                                                                            "Challenger"
                                                                                                        ]
                                                                                                        (Ty.associated_in_trait
                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                          []
                                                                                                          []
                                                                                                          SC
                                                                                                          "Pcs")
                                                                                                        "Domain")
                                                                                                      "Val"
                                                                                                  ],
                                                                                                γ0_1
                                                                                              |) in
                                                                                            M.match_operator (|
                                                                                              Ty.tuple
                                                                                                [],
                                                                                              M.alloc (|
                                                                                                Ty.tuple
                                                                                                  [],
                                                                                                Value.Tuple
                                                                                                  []
                                                                                              |),
                                                                                              [
                                                                                                fun
                                                                                                    γ =>
                                                                                                  ltac:(M.monadic
                                                                                                    (let
                                                                                                          γ :=
                                                                                                      M.use
                                                                                                        (M.alloc (|
                                                                                                          Ty.path
                                                                                                            "bool",
                                                                                                          UnOp.not (|
                                                                                                            M.call_closure (|
                                                                                                              Ty.path
                                                                                                                "bool",
                                                                                                              M.get_trait_method (|
                                                                                                                "core::cmp::PartialEq",
                                                                                                                Ty.associated_in_trait
                                                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                                                  []
                                                                                                                  []
                                                                                                                  (Ty.associated_in_trait
                                                                                                                    "p3_commit::pcs::Pcs"
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.associated_in_trait
                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                        []
                                                                                                                        []
                                                                                                                        SC
                                                                                                                        "Challenge";
                                                                                                                      Ty.associated_in_trait
                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                        []
                                                                                                                        []
                                                                                                                        SC
                                                                                                                        "Challenger"
                                                                                                                    ]
                                                                                                                    (Ty.associated_in_trait
                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                      []
                                                                                                                      []
                                                                                                                      SC
                                                                                                                      "Pcs")
                                                                                                                    "Domain")
                                                                                                                  "Val",
                                                                                                                [],
                                                                                                                [
                                                                                                                  Ty.associated_in_trait
                                                                                                                    "p3_commit::domain::PolynomialSpace"
                                                                                                                    []
                                                                                                                    []
                                                                                                                    (Ty.associated_in_trait
                                                                                                                      "p3_commit::pcs::Pcs"
                                                                                                                      []
                                                                                                                      [
                                                                                                                        Ty.associated_in_trait
                                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                          []
                                                                                                                          []
                                                                                                                          SC
                                                                                                                          "Challenge";
                                                                                                                        Ty.associated_in_trait
                                                                                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                          []
                                                                                                                          []
                                                                                                                          SC
                                                                                                                          "Challenger"
                                                                                                                      ]
                                                                                                                      (Ty.associated_in_trait
                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                        []
                                                                                                                        []
                                                                                                                        SC
                                                                                                                        "Pcs")
                                                                                                                      "Domain")
                                                                                                                    "Val"
                                                                                                                ],
                                                                                                                "eq",
                                                                                                                [],
                                                                                                                []
                                                                                                              |),
                                                                                                              [
                                                                                                                M.borrow (|
                                                                                                                  Pointer.Kind.Ref,
                                                                                                                  M.deref (|
                                                                                                                    M.read (|
                                                                                                                      left_val
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                |);
                                                                                                                M.borrow (|
                                                                                                                  Pointer.Kind.Ref,
                                                                                                                  M.deref (|
                                                                                                                    M.read (|
                                                                                                                      right_val
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                |)
                                                                                                              ]
                                                                                                            |)
                                                                                                          |)
                                                                                                        |)) in
                                                                                                    let
                                                                                                          _ :=
                                                                                                      is_constant_or_break_match (|
                                                                                                        M.read (|
                                                                                                          γ
                                                                                                        |),
                                                                                                        Value.Bool
                                                                                                          true
                                                                                                      |) in
                                                                                                    M.never_to_any (|
                                                                                                      M.read (|
                                                                                                        let~
                                                                                                              kind :
                                                                                                            Ty.path
                                                                                                              "core::panicking::AssertKind" :=
                                                                                                          Value.StructTuple
                                                                                                            "core::panicking::AssertKind::Eq"
                                                                                                            []
                                                                                                            []
                                                                                                            [] in
                                                                                                        M.alloc (|
                                                                                                          Ty.path
                                                                                                            "never",
                                                                                                          M.call_closure (|
                                                                                                            Ty.path
                                                                                                              "never",
                                                                                                            M.get_function (|
                                                                                                              "core::panicking::assert_failed",
                                                                                                              [],
                                                                                                              [
                                                                                                                Ty.associated_in_trait
                                                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                                                  []
                                                                                                                  []
                                                                                                                  (Ty.associated_in_trait
                                                                                                                    "p3_commit::pcs::Pcs"
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.associated_in_trait
                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                        []
                                                                                                                        []
                                                                                                                        SC
                                                                                                                        "Challenge";
                                                                                                                      Ty.associated_in_trait
                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                        []
                                                                                                                        []
                                                                                                                        SC
                                                                                                                        "Challenger"
                                                                                                                    ]
                                                                                                                    (Ty.associated_in_trait
                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                      []
                                                                                                                      []
                                                                                                                      SC
                                                                                                                      "Pcs")
                                                                                                                    "Domain")
                                                                                                                  "Val";
                                                                                                                Ty.associated_in_trait
                                                                                                                  "p3_commit::domain::PolynomialSpace"
                                                                                                                  []
                                                                                                                  []
                                                                                                                  (Ty.associated_in_trait
                                                                                                                    "p3_commit::pcs::Pcs"
                                                                                                                    []
                                                                                                                    [
                                                                                                                      Ty.associated_in_trait
                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                        []
                                                                                                                        []
                                                                                                                        SC
                                                                                                                        "Challenge";
                                                                                                                      Ty.associated_in_trait
                                                                                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                        []
                                                                                                                        []
                                                                                                                        SC
                                                                                                                        "Challenger"
                                                                                                                    ]
                                                                                                                    (Ty.associated_in_trait
                                                                                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                                                                                      []
                                                                                                                      []
                                                                                                                      SC
                                                                                                                      "Pcs")
                                                                                                                    "Domain")
                                                                                                                  "Val"
                                                                                                              ]
                                                                                                            |),
                                                                                                            [
                                                                                                              M.read (|
                                                                                                                kind
                                                                                                              |);
                                                                                                              M.borrow (|
                                                                                                                Pointer.Kind.Ref,
                                                                                                                M.deref (|
                                                                                                                  M.borrow (|
                                                                                                                    Pointer.Kind.Ref,
                                                                                                                    M.deref (|
                                                                                                                      M.read (|
                                                                                                                        left_val
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                |)
                                                                                                              |);
                                                                                                              M.borrow (|
                                                                                                                Pointer.Kind.Ref,
                                                                                                                M.deref (|
                                                                                                                  M.borrow (|
                                                                                                                    Pointer.Kind.Ref,
                                                                                                                    M.deref (|
                                                                                                                      M.read (|
                                                                                                                        right_val
                                                                                                                      |)
                                                                                                                    |)
                                                                                                                  |)
                                                                                                                |)
                                                                                                              |);
                                                                                                              Value.StructTuple
                                                                                                                "core::option::Option::Some"
                                                                                                                []
                                                                                                                [
                                                                                                                  Ty.path
                                                                                                                    "core::fmt::Arguments"
                                                                                                                ]
                                                                                                                [
                                                                                                                  M.call_closure (|
                                                                                                                    Ty.path
                                                                                                                      "core::fmt::Arguments",
                                                                                                                    M.get_associated_function (|
                                                                                                                      Ty.path
                                                                                                                        "core::fmt::Arguments",
                                                                                                                      "new_const",
                                                                                                                      [
                                                                                                                        Value.Integer
                                                                                                                          IntegerKind.Usize
                                                                                                                          1
                                                                                                                      ],
                                                                                                                      []
                                                                                                                    |),
                                                                                                                    [
                                                                                                                      M.borrow (|
                                                                                                                        Pointer.Kind.Ref,
                                                                                                                        M.deref (|
                                                                                                                          M.borrow (|
                                                                                                                            Pointer.Kind.Ref,
                                                                                                                            M.alloc (|
                                                                                                                              Ty.apply
                                                                                                                                (Ty.path
                                                                                                                                  "array")
                                                                                                                                [
                                                                                                                                  Value.Integer
                                                                                                                                    IntegerKind.Usize
                                                                                                                                    1
                                                                                                                                ]
                                                                                                                                [
                                                                                                                                  Ty.apply
                                                                                                                                    (Ty.path
                                                                                                                                      "&")
                                                                                                                                    []
                                                                                                                                    [
                                                                                                                                      Ty.path
                                                                                                                                        "str"
                                                                                                                                    ]
                                                                                                                                ],
                                                                                                                              Value.Array
                                                                                                                                [
                                                                                                                                  mk_str (|
                                                                                                                                    "Addresses are not sorted"
                                                                                                                                  |)
                                                                                                                                ]
                                                                                                                            |)
                                                                                                                          |)
                                                                                                                        |)
                                                                                                                      |)
                                                                                                                    ]
                                                                                                                  |)
                                                                                                                ]
                                                                                                            ]
                                                                                                          |)
                                                                                                        |)
                                                                                                      |)
                                                                                                    |)));
                                                                                                fun
                                                                                                    γ =>
                                                                                                  ltac:(M.monadic
                                                                                                    (Value.Tuple
                                                                                                      []))
                                                                                              ]
                                                                                            |)))
                                                                                      ]
                                                                                    |) in
                                                                                  M.alloc (|
                                                                                    Ty.tuple [],
                                                                                    Value.Tuple []
                                                                                  |)
                                                                                |)));
                                                                            fun γ =>
                                                                              ltac:(M.monadic
                                                                                (Value.Tuple []))
                                                                          ]
                                                                        |) in
                                                                      M.alloc (|
                                                                        Ty.tuple [],
                                                                        Value.Tuple []
                                                                      |)
                                                                    |)))
                                                              ]
                                                            |)));
                                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                                      ]
                                                    |)
                                                  |)
                                                |)))
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ :=
                            M.use
                              (M.alloc (|
                                Ty.path "bool",
                                M.call_closure (|
                                  Ty.path "bool",
                                  BinOp.gt,
                                  [ M.read (| memory_len |); Value.Integer IntegerKind.Usize 0 ]
                                |)
                              |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.read (|
                            let~ out :
                                Ty.associated_in_trait
                                  "p3_commit::domain::PolynomialSpace"
                                  []
                                  []
                                  (Ty.associated_in_trait
                                    "p3_commit::pcs::Pcs"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenge";
                                      Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Challenger"
                                    ]
                                    (Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Pcs")
                                    "Domain")
                                  "Val" :=
                              M.read (|
                                get_constant (|
                                  "p3_field::field::FieldAlgebra::ZERO",
                                  Ty.associated_in_trait
                                    "p3_commit::domain::PolynomialSpace"
                                    []
                                    []
                                    (Ty.associated_in_trait
                                      "p3_commit::pcs::Pcs"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenge";
                                        Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Challenger"
                                      ]
                                      (Ty.associated_in_trait
                                        "openvm_stark_backend::config::StarkGenericConfig"
                                        []
                                        []
                                        SC
                                        "Pcs")
                                      "Domain")
                                    "Val"
                                |)
                              |) in
                            let~ row :
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val"
                                      ]
                                  ] :=
                              M.borrow (|
                                Pointer.Kind.MutRef,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&mut")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val"
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::borrow::BorrowMut",
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_commit::domain::PolynomialSpace"
                                            []
                                            []
                                            (Ty.associated_in_trait
                                              "p3_commit::pcs::Pcs"
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenge";
                                                Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Challenger"
                                              ]
                                              (Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Pcs")
                                              "Domain")
                                            "Val"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val"
                                          ]
                                      ],
                                      "borrow_mut",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&mut")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "slice")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_commit::domain::PolynomialSpace"
                                                      []
                                                      []
                                                      (Ty.associated_in_trait
                                                        "p3_commit::pcs::Pcs"
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenge";
                                                          Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Challenger"
                                                        ]
                                                        (Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Pcs")
                                                        "Domain")
                                                      "Val"
                                                  ]
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::index::IndexMut",
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_commit::domain::PolynomialSpace"
                                                    []
                                                    []
                                                    (Ty.associated_in_trait
                                                      "p3_commit::pcs::Pcs"
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenge";
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenger"
                                                      ]
                                                      (Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Pcs")
                                                      "Domain")
                                                    "Val";
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              [
                                                Ty.apply
                                                  (Ty.path "core::ops::range::RangeFrom")
                                                  []
                                                  [ Ty.path "usize" ]
                                              ],
                                              "index_mut",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (| Pointer.Kind.MutRef, rows |);
                                              Value.mkStructRecord
                                                "core::ops::range::RangeFrom"
                                                []
                                                [ Ty.path "usize" ]
                                                [
                                                  ("start",
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.mul,
                                                      [
                                                        M.read (| width |);
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.sub,
                                                          [
                                                            M.read (| trace_height |);
                                                            Value.Integer IntegerKind.Usize 1
                                                          ]
                                                        |)
                                                      ]
                                                    |))
                                                ]
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |) in
                            let~ _ : Ty.tuple [] :=
                              M.call_closure (|
                                Ty.tuple [],
                                M.get_trait_method (|
                                  "openvm_circuit_primitives::sub_air::TraceSubRowGenerator",
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit_primitives::is_less_than_array::IsLtArraySubAir")
                                    [ Value.Integer IntegerKind.Usize 2 ]
                                    [],
                                  [],
                                  [
                                    Ty.associated_in_trait
                                      "p3_commit::domain::PolynomialSpace"
                                      []
                                      []
                                      (Ty.associated_in_trait
                                        "p3_commit::pcs::Pcs"
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenge";
                                          Ty.associated_in_trait
                                            "openvm_stark_backend::config::StarkGenericConfig"
                                            []
                                            []
                                            SC
                                            "Challenger"
                                        ]
                                        (Ty.associated_in_trait
                                          "openvm_stark_backend::config::StarkGenericConfig"
                                          []
                                          []
                                          SC
                                          "Pcs")
                                        "Domain")
                                      "Val"
                                  ],
                                  "generate_subrow",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_tuple_field (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_circuit::system::memory::volatile::VolatileBoundaryAir"
                                              ],
                                            M.get_trait_method (|
                                              "core::ops::deref::Deref",
                                              Ty.apply
                                                (Ty.path "alloc::sync::Arc")
                                                []
                                                [
                                                  Ty.path
                                                    "openvm_circuit::system::memory::volatile::VolatileBoundaryAir";
                                                  Ty.path "alloc::alloc::Global"
                                                ],
                                              [],
                                              [],
                                              "deref",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, air |) ]
                                          |)
                                        |),
                                        "openvm_circuit::system::memory::volatile::VolatileBoundaryAir",
                                        "addr_lt_air"
                                      |),
                                      "openvm_circuit_primitives::is_less_than_array::IsLtArrayWhenTransitionAir",
                                      0
                                    |)
                                  |);
                                  Value.Tuple
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_circuit_primitives::var_range::VariableRangeCheckerChip"
                                              ],
                                            M.get_trait_method (|
                                              "core::convert::AsRef",
                                              Ty.path
                                                "openvm_circuit_primitives::var_range::SharedVariableRangeCheckerChip",
                                              [],
                                              [
                                                Ty.path
                                                  "openvm_circuit_primitives::var_range::VariableRangeCheckerChip"
                                              ],
                                              "as_ref",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.SubPointer.get_struct_record_field (|
                                                  self,
                                                  "openvm_circuit::system::memory::volatile::VolatileBoundaryChip",
                                                  "range_checker"
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |);
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_commit::domain::PolynomialSpace"
                                                  []
                                                  []
                                                  (Ty.associated_in_trait
                                                    "p3_commit::pcs::Pcs"
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenge";
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenger"
                                                    ]
                                                    (Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Pcs")
                                                    "Domain")
                                                  "Val"
                                              ]
                                          ],
                                        M.pointer_coercion
                                          M.PointerCoercion.Unsize
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 2 ]
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_commit::domain::PolynomialSpace"
                                                    []
                                                    []
                                                    (Ty.associated_in_trait
                                                      "p3_commit::pcs::Pcs"
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenge";
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenger"
                                                      ]
                                                      (Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Pcs")
                                                      "Domain")
                                                    "Val"
                                                ]
                                            ])
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_commit::domain::PolynomialSpace"
                                                    []
                                                    []
                                                    (Ty.associated_in_trait
                                                      "p3_commit::pcs::Pcs"
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenge";
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenger"
                                                      ]
                                                      (Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Pcs")
                                                      "Domain")
                                                    "Val"
                                                ]
                                            ]),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.alloc (|
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Value.Integer IntegerKind.Usize 2 ]
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_commit::domain::PolynomialSpace"
                                                        []
                                                        []
                                                        (Ty.associated_in_trait
                                                          "p3_commit::pcs::Pcs"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenge";
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenger"
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Pcs")
                                                          "Domain")
                                                        "Val"
                                                    ],
                                                  Value.Array
                                                    [
                                                      M.read (|
                                                        get_constant (|
                                                          "p3_field::field::FieldAlgebra::ZERO",
                                                          Ty.associated_in_trait
                                                            "p3_commit::domain::PolynomialSpace"
                                                            []
                                                            []
                                                            (Ty.associated_in_trait
                                                              "p3_commit::pcs::Pcs"
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenge";
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenger"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Pcs")
                                                              "Domain")
                                                            "Val"
                                                        |)
                                                      |);
                                                      M.read (|
                                                        get_constant (|
                                                          "p3_field::field::FieldAlgebra::ZERO",
                                                          Ty.associated_in_trait
                                                            "p3_commit::domain::PolynomialSpace"
                                                            []
                                                            []
                                                            (Ty.associated_in_trait
                                                              "p3_commit::pcs::Pcs"
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenge";
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenger"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Pcs")
                                                              "Domain")
                                                            "Val"
                                                        |)
                                                      |)
                                                    ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        ]
                                      |);
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "slice")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_commit::domain::PolynomialSpace"
                                                  []
                                                  []
                                                  (Ty.associated_in_trait
                                                    "p3_commit::pcs::Pcs"
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenge";
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenger"
                                                    ]
                                                    (Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Pcs")
                                                    "Domain")
                                                  "Val"
                                              ]
                                          ],
                                        M.pointer_coercion
                                          M.PointerCoercion.Unsize
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 2 ]
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_commit::domain::PolynomialSpace"
                                                    []
                                                    []
                                                    (Ty.associated_in_trait
                                                      "p3_commit::pcs::Pcs"
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenge";
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenger"
                                                      ]
                                                      (Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Pcs")
                                                      "Domain")
                                                    "Val"
                                                ]
                                            ])
                                          (Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_commit::domain::PolynomialSpace"
                                                    []
                                                    []
                                                    (Ty.associated_in_trait
                                                      "p3_commit::pcs::Pcs"
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenge";
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenger"
                                                      ]
                                                      (Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Pcs")
                                                      "Domain")
                                                    "Val"
                                                ]
                                            ]),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.alloc (|
                                                  Ty.apply
                                                    (Ty.path "array")
                                                    [ Value.Integer IntegerKind.Usize 2 ]
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_commit::domain::PolynomialSpace"
                                                        []
                                                        []
                                                        (Ty.associated_in_trait
                                                          "p3_commit::pcs::Pcs"
                                                          []
                                                          [
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenge";
                                                            Ty.associated_in_trait
                                                              "openvm_stark_backend::config::StarkGenericConfig"
                                                              []
                                                              []
                                                              SC
                                                              "Challenger"
                                                          ]
                                                          (Ty.associated_in_trait
                                                            "openvm_stark_backend::config::StarkGenericConfig"
                                                            []
                                                            []
                                                            SC
                                                            "Pcs")
                                                          "Domain")
                                                        "Val"
                                                    ],
                                                  Value.Array
                                                    [
                                                      M.read (|
                                                        get_constant (|
                                                          "p3_field::field::FieldAlgebra::ZERO",
                                                          Ty.associated_in_trait
                                                            "p3_commit::domain::PolynomialSpace"
                                                            []
                                                            []
                                                            (Ty.associated_in_trait
                                                              "p3_commit::pcs::Pcs"
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenge";
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenger"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Pcs")
                                                              "Domain")
                                                            "Val"
                                                        |)
                                                      |);
                                                      M.read (|
                                                        get_constant (|
                                                          "p3_field::field::FieldAlgebra::ZERO",
                                                          Ty.associated_in_trait
                                                            "p3_commit::domain::PolynomialSpace"
                                                            []
                                                            []
                                                            (Ty.associated_in_trait
                                                              "p3_commit::pcs::Pcs"
                                                              []
                                                              [
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenge";
                                                                Ty.associated_in_trait
                                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                                  []
                                                                  []
                                                                  SC
                                                                  "Challenger"
                                                              ]
                                                              (Ty.associated_in_trait
                                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                                []
                                                                []
                                                                SC
                                                                "Pcs")
                                                              "Domain")
                                                            "Val"
                                                        |)
                                                      |)
                                                    ]
                                                |)
                                              |)
                                            |)
                                          |)
                                        ]
                                      |)
                                    ];
                                  Value.Tuple
                                    [
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit_primitives::is_less_than_array::IsLtArrayAuxColsMut")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_commit::domain::PolynomialSpace"
                                              []
                                              []
                                              (Ty.associated_in_trait
                                                "p3_commit::pcs::Pcs"
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenge";
                                                  Ty.associated_in_trait
                                                    "openvm_stark_backend::config::StarkGenericConfig"
                                                    []
                                                    []
                                                    SC
                                                    "Challenger"
                                                ]
                                                (Ty.associated_in_trait
                                                  "openvm_stark_backend::config::StarkGenericConfig"
                                                  []
                                                  []
                                                  SC
                                                  "Pcs")
                                                "Domain")
                                              "Val"
                                          ],
                                        M.get_trait_method (|
                                          "core::convert::Into",
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit_primitives::is_less_than_array::IsLtArrayAuxCols")
                                                [
                                                  Value.Integer IntegerKind.Usize 2;
                                                  Value.Integer IntegerKind.Usize 2
                                                ]
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_commit::domain::PolynomialSpace"
                                                    []
                                                    []
                                                    (Ty.associated_in_trait
                                                      "p3_commit::pcs::Pcs"
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenge";
                                                        Ty.associated_in_trait
                                                          "openvm_stark_backend::config::StarkGenericConfig"
                                                          []
                                                          []
                                                          SC
                                                          "Challenger"
                                                      ]
                                                      (Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Pcs")
                                                      "Domain")
                                                    "Val"
                                                ]
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit_primitives::is_less_than_array::IsLtArrayAuxColsMut")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_commit::domain::PolynomialSpace"
                                                  []
                                                  []
                                                  (Ty.associated_in_trait
                                                    "p3_commit::pcs::Pcs"
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenge";
                                                      Ty.associated_in_trait
                                                        "openvm_stark_backend::config::StarkGenericConfig"
                                                        []
                                                        []
                                                        SC
                                                        "Challenger"
                                                    ]
                                                    (Ty.associated_in_trait
                                                      "openvm_stark_backend::config::StarkGenericConfig"
                                                      []
                                                      []
                                                      SC
                                                      "Pcs")
                                                    "Domain")
                                                  "Val"
                                              ]
                                          ],
                                          "into",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.MutRef,
                                            M.deref (|
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.SubPointer.get_struct_record_field (|
                                                  M.deref (| M.read (| row |) |),
                                                  "openvm_circuit::system::memory::volatile::VolatileBoundaryCols",
                                                  "addr_lt_aux"
                                                |)
                                              |)
                                            |)
                                          |)
                                        ]
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.MutRef,
                                        M.deref (| M.borrow (| Pointer.Kind.MutRef, out |) |)
                                      |)
                                    ]
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ trace :
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val";
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val";
                            Ty.path "alloc::alloc::Global"
                          ]
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "p3_matrix::dense::DenseMatrix")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val";
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val";
                            Ty.path "alloc::alloc::Global"
                          ]
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "p3_matrix::dense::DenseMatrix")
                        []
                        [
                          Ty.associated_in_trait
                            "p3_commit::domain::PolynomialSpace"
                            []
                            []
                            (Ty.associated_in_trait
                              "p3_commit::pcs::Pcs"
                              []
                              [
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenge";
                                Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Challenger"
                              ]
                              (Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Pcs")
                              "Domain")
                            "Val";
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.associated_in_trait
                                "p3_commit::domain::PolynomialSpace"
                                []
                                []
                                (Ty.associated_in_trait
                                  "p3_commit::pcs::Pcs"
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenge";
                                    Ty.associated_in_trait
                                      "openvm_stark_backend::config::StarkGenericConfig"
                                      []
                                      []
                                      SC
                                      "Challenger"
                                  ]
                                  (Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Pcs")
                                  "Domain")
                                "Val";
                              Ty.path "alloc::alloc::Global"
                            ]
                        ],
                      "new",
                      [],
                      []
                    |),
                    [ M.read (| rows |); M.read (| width |) ]
                  |) in
                M.alloc (|
                  Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ],
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                      []
                      [ SC ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                        []
                        [ SC ],
                      "simple_no_pis",
                      [],
                      []
                    |),
                    [ M.read (| trace |) ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (SC : Ty.t),
          M.IsTraitInstance
            "openvm_stark_backend::chip::Chip"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ SC ]
            (Self SC)
            (* Instance *)
            [
              ("air", InstanceField.Method (air SC));
              ("generate_air_proof_input", InstanceField.Method (generate_air_proof_input SC))
            ].
      End Impl_openvm_stark_backend_chip_Chip_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_field_field_PrimeField32_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val_SC_for_openvm_circuit_system_memory_volatile_VolatileBoundaryChip_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val.
      
      Module Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_circuit_system_memory_volatile_VolatileBoundaryChip_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
            []
            [ F ].
        
        (*
            fn air_name(&self) -> String {
                "Boundary".to_string()
            }
        *)
        Definition air_name (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.path "alloc::string::String",
                M.get_trait_method (|
                  "alloc::string::ToString",
                  Ty.path "str",
                  [],
                  [],
                  "to_string",
                  [],
                  []
                |),
                [ M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Boundary" |) |) |) ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn current_trace_height(&self) -> usize {
                if let Some(final_memory) = &self.final_memory {
                    final_memory.len()
                } else {
                    0
                }
            }
        *)
        Definition current_trace_height
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.match_operator (|
                Ty.path "usize",
                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::collections::btree::map::BTreeMap")
                                    []
                                    [
                                      Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::system::memory::controller::TimestampedValues")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ]
                            ],
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::memory::volatile::VolatileBoundaryChip",
                              "final_memory"
                            |)
                          |)
                        |) in
                      let γ := M.deref (| M.read (| γ |) |) in
                      let γ1_0 :=
                        M.SubPointer.get_struct_tuple_field (|
                          γ,
                          "core::option::Option::Some",
                          0
                        |) in
                      let final_memory :=
                        M.alloc (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::collections::btree::map::BTreeMap")
                                []
                                [
                                  Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::controller::TimestampedValues")
                                    [ Value.Integer IntegerKind.Usize 1 ]
                                    [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          γ1_0
                        |) in
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "alloc::collections::btree::map::BTreeMap")
                            []
                            [
                              Ty.tuple [ Ty.path "u32"; Ty.path "u32" ];
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::memory::controller::TimestampedValues")
                                [ Value.Integer IntegerKind.Usize 1 ]
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          "len",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| final_memory |) |) |) ]
                      |)));
                  fun γ => ltac:(M.monadic (Value.Integer IntegerKind.Usize 0))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn trace_width(&self) -> usize {
                VolatileBoundaryCols::<F>::width()
            }
        *)
        Definition trace_width
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryChip")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::volatile::VolatileBoundaryCols")
                    []
                    [ F ],
                  "width",
                  [],
                  []
                |),
                []
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "openvm_stark_backend::chip::ChipUsageGetter"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *)
            [
              ("air_name", InstanceField.Method (air_name F));
              ("current_trace_height", InstanceField.Method (current_trace_height F));
              ("trace_width", InstanceField.Method (trace_width F))
            ].
      End Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_circuit_system_memory_volatile_VolatileBoundaryChip_F.
    End volatile.
  End memory.
End system.
