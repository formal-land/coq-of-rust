(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module system.
  Module poseidon2.
    Module air.
      (* StructRecord
        {
          name := "Poseidon2PeripheryAir";
          const_params := [ "SBOX_REGISTERS" ];
          ty_params := [ "F" ];
          fields :=
            [
              ("subair",
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_poseidon2_air::air::Poseidon2SubAir")
                      [ SBOX_REGISTERS ]
                      [ F ];
                    Ty.path "alloc::alloc::Global"
                  ]);
              ("bus", Ty.path "openvm_stark_backend::interaction::LookupBus")
            ];
        } *)
      
      Module Impl_core_clone_Clone_where_core_clone_Clone_F_where_p3_field_field_Field_F_for_openvm_circuit_system_poseidon2_air_Poseidon2PeripheryAir_SBOX_REGISTERS_F.
        Definition Self (SBOX_REGISTERS : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::poseidon2::air::Poseidon2PeripheryAir")
            [ SBOX_REGISTERS ]
            [ F ].
        
        (* Clone *)
        Definition clone
            (SBOX_REGISTERS : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self SBOX_REGISTERS F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::poseidon2::air::Poseidon2PeripheryAir")
                        [ SBOX_REGISTERS ]
                        [ F ]
                    ],
                  self
                |) in
              Value.mkStructRecord
                "openvm_circuit::system::poseidon2::air::Poseidon2PeripheryAir"
                [ SBOX_REGISTERS ]
                [ F ]
                [
                  ("subair",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_poseidon2_air::air::Poseidon2SubAir")
                            [ SBOX_REGISTERS ]
                            [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.apply
                          (Ty.path "alloc::sync::Arc")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_poseidon2_air::air::Poseidon2SubAir")
                              [ SBOX_REGISTERS ]
                              [ F ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::poseidon2::air::Poseidon2PeripheryAir",
                                "subair"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("bus",
                    M.call_closure (|
                      Ty.path "openvm_stark_backend::interaction::LookupBus",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "openvm_stark_backend::interaction::LookupBus",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::poseidon2::air::Poseidon2PeripheryAir",
                                "bus"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (SBOX_REGISTERS : Value.t) (F : Ty.t),
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self SBOX_REGISTERS F)
            (* Instance *) [ ("clone", InstanceField.Method (clone SBOX_REGISTERS F)) ].
      End Impl_core_clone_Clone_where_core_clone_Clone_F_where_p3_field_field_Field_F_for_openvm_circuit_system_poseidon2_air_Poseidon2PeripheryAir_SBOX_REGISTERS_F.
      
      Module Impl_openvm_circuit_system_poseidon2_air_Poseidon2PeripheryAir_SBOX_REGISTERS_F.
        Definition Self (SBOX_REGISTERS : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::poseidon2::air::Poseidon2PeripheryAir")
            [ SBOX_REGISTERS ]
            [ F ].
        
        (* new *)
        Definition new
            (SBOX_REGISTERS : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self SBOX_REGISTERS F in
          match ε, τ, α with
          | [], [], [ subair; bus ] =>
            ltac:(M.monadic
              (let subair :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_poseidon2_air::air::Poseidon2SubAir")
                        [ SBOX_REGISTERS ]
                        [ F ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  subair
                |) in
              let bus :=
                M.alloc (| Ty.path "openvm_stark_backend::interaction::LookupBus", bus |) in
              Value.mkStructRecord
                "openvm_circuit::system::poseidon2::air::Poseidon2PeripheryAir"
                [ SBOX_REGISTERS ]
                [ F ]
                [ ("subair", M.read (| subair |)); ("bus", M.read (| bus |)) ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_new :
          forall (SBOX_REGISTERS : Value.t) (F : Ty.t),
          M.IsAssociatedFunction.C (Self SBOX_REGISTERS F) "new" (new SBOX_REGISTERS F).
        Admitted.
        Global Typeclasses Opaque new.
      End Impl_openvm_circuit_system_poseidon2_air_Poseidon2PeripheryAir_SBOX_REGISTERS_F.
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_Field_F_for_openvm_circuit_system_poseidon2_air_Poseidon2PeripheryAir_SBOX_REGISTERS_F.
        Definition Self (SBOX_REGISTERS : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::poseidon2::air::Poseidon2PeripheryAir")
            [ SBOX_REGISTERS ]
            [ F ].
        
        (* Debug *)
        Definition fmt
            (SBOX_REGISTERS : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self SBOX_REGISTERS F in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::poseidon2::air::Poseidon2PeripheryAir")
                        [ SBOX_REGISTERS ]
                        [ F ]
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field2_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| mk_str (| "Poseidon2PeripheryAir" |) |)
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "subair" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.apply
                                (Ty.path "openvm_poseidon2_air::air::Poseidon2SubAir")
                                [ SBOX_REGISTERS ]
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::poseidon2::air::Poseidon2PeripheryAir",
                              "subair"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "bus" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.path "openvm_stark_backend::interaction::LookupBus" ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.path "openvm_stark_backend::interaction::LookupBus" ],
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::poseidon2::air::Poseidon2PeripheryAir",
                                  "bus"
                                |)
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (SBOX_REGISTERS : Value.t) (F : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self SBOX_REGISTERS F)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt SBOX_REGISTERS F)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_Field_F_for_openvm_circuit_system_poseidon2_air_Poseidon2PeripheryAir_SBOX_REGISTERS_F.
      
      Module Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_where_p3_field_field_Field_F_F_for_openvm_circuit_system_poseidon2_air_Poseidon2PeripheryAir_SBOX_REGISTERS_F.
        Definition Self (SBOX_REGISTERS : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::poseidon2::air::Poseidon2PeripheryAir")
            [ SBOX_REGISTERS ]
            [ F ].
        
        Axiom Implements :
          forall (SBOX_REGISTERS : Value.t) (F : Ty.t),
          M.IsTraitInstance
            "openvm_stark_backend::rap::BaseAirWithPublicValues"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self SBOX_REGISTERS F)
            (* Instance *) [].
      End Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_where_p3_field_field_Field_F_F_for_openvm_circuit_system_poseidon2_air_Poseidon2PeripheryAir_SBOX_REGISTERS_F.
      
      Module Impl_openvm_stark_backend_rap_PartitionedBaseAir_where_p3_field_field_Field_F_F_for_openvm_circuit_system_poseidon2_air_Poseidon2PeripheryAir_SBOX_REGISTERS_F.
        Definition Self (SBOX_REGISTERS : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::poseidon2::air::Poseidon2PeripheryAir")
            [ SBOX_REGISTERS ]
            [ F ].
        
        Axiom Implements :
          forall (SBOX_REGISTERS : Value.t) (F : Ty.t),
          M.IsTraitInstance
            "openvm_stark_backend::rap::PartitionedBaseAir"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self SBOX_REGISTERS F)
            (* Instance *) [].
      End Impl_openvm_stark_backend_rap_PartitionedBaseAir_where_p3_field_field_Field_F_F_for_openvm_circuit_system_poseidon2_air_Poseidon2PeripheryAir_SBOX_REGISTERS_F.
      
      Module Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_circuit_system_poseidon2_air_Poseidon2PeripheryAir_SBOX_REGISTERS_F.
        Definition Self (SBOX_REGISTERS : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::poseidon2::air::Poseidon2PeripheryAir")
            [ SBOX_REGISTERS ]
            [ F ].
        
        (*
            fn width(&self) -> usize {
                Poseidon2PeripheryCols::<F, SBOX_REGISTERS>::width()
            }
        *)
        Definition width
            (SBOX_REGISTERS : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self SBOX_REGISTERS F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::poseidon2::air::Poseidon2PeripheryAir")
                        [ SBOX_REGISTERS ]
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.path "usize",
                M.get_associated_function (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::poseidon2::columns::Poseidon2PeripheryCols")
                    [ SBOX_REGISTERS ]
                    [ F ],
                  "width",
                  [],
                  []
                |),
                []
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (SBOX_REGISTERS : Value.t) (F : Ty.t),
          M.IsTraitInstance
            "p3_air::air::BaseAir"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self SBOX_REGISTERS F)
            (* Instance *) [ ("width", InstanceField.Method (width SBOX_REGISTERS F)) ].
      End Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_circuit_system_poseidon2_air_Poseidon2PeripheryAir_SBOX_REGISTERS_F.
      
      Module Impl_p3_air_air_Air_where_openvm_stark_backend_interaction_InteractionBuilder_AB_AB_for_openvm_circuit_system_poseidon2_air_Poseidon2PeripheryAir_SBOX_REGISTERS_associated_in_trait_p3_air_air_AirBuilder___AB_F.
        Definition Self (SBOX_REGISTERS : Value.t) (AB : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::poseidon2::air::Poseidon2PeripheryAir")
            [ SBOX_REGISTERS ]
            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ].
        
        (*
            fn eval(&self, builder: &mut AB) {
                let mut sub_builder =
                    SubAirBuilder::<AB, Poseidon2SubAir<AB::F, SBOX_REGISTERS>, AB::F>::new(
                        builder,
                        0..self.subair.width(),
                    );
                self.subair.eval(&mut sub_builder);
        
                let main = builder.main();
                let local = main.row_slice(0);
                let cols: &Poseidon2PeripheryCols<AB::Var, SBOX_REGISTERS> = ( *local).borrow();
        
                let input: [AB::Var; POSEIDON2_WIDTH] = cols.inner.inputs;
                let output: [AB::Var; POSEIDON2_WIDTH] =
                    cols.inner.ending_full_rounds[BABY_BEAR_POSEIDON2_HALF_FULL_ROUNDS - 1].post;
                let fields: [_; POSEIDON2_WIDTH + POSEIDON2_WIDTH / 2] = from_fn(|i| {
                    if i < POSEIDON2_WIDTH {
                        input[i]
                    } else {
                        output[i - POSEIDON2_WIDTH]
                    }
                });
                self.bus.add_key_with_lookups(builder, fields, cols.mult);
            }
        *)
        Definition eval
            (SBOX_REGISTERS : Value.t)
            (AB : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self SBOX_REGISTERS AB in
          match ε, τ, α with
          | [], [], [ self; builder ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::poseidon2::air::Poseidon2PeripheryAir")
                        [ SBOX_REGISTERS ]
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ]
                    ],
                  self
                |) in
              let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
              M.read (|
                let~ sub_builder :
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::sub::SubAirBuilder")
                      []
                      [
                        AB;
                        Ty.apply
                          (Ty.path "openvm_poseidon2_air::air::Poseidon2SubAir")
                          [ SBOX_REGISTERS ]
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ];
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F"
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_stark_backend::air_builders::sub::SubAirBuilder")
                      []
                      [
                        AB;
                        Ty.apply
                          (Ty.path "openvm_poseidon2_air::air::Poseidon2SubAir")
                          [ SBOX_REGISTERS ]
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ];
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F"
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_stark_backend::air_builders::sub::SubAirBuilder")
                        []
                        [
                          AB;
                          Ty.apply
                            (Ty.path "openvm_poseidon2_air::air::Poseidon2SubAir")
                            [ SBOX_REGISTERS ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ];
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F"
                        ],
                      "new",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                      Value.mkStructRecord
                        "core::ops::range::Range"
                        []
                        [ Ty.path "usize" ]
                        [
                          ("start", Value.Integer IntegerKind.Usize 0);
                          ("end_",
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_trait_method (|
                                "p3_air::air::BaseAir",
                                Ty.apply
                                  (Ty.path "openvm_poseidon2_air::air::Poseidon2SubAir")
                                  [ SBOX_REGISTERS ]
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ],
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ],
                                "width",
                                [],
                                []
                              |),
                              [
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "&")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "openvm_poseidon2_air::air::Poseidon2SubAir")
                                            [ SBOX_REGISTERS ]
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "F"
                                            ]
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::deref::Deref",
                                        Ty.apply
                                          (Ty.path "alloc::sync::Arc")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "openvm_poseidon2_air::air::Poseidon2SubAir")
                                              [ SBOX_REGISTERS ]
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "F"
                                              ];
                                            Ty.path "alloc::alloc::Global"
                                          ],
                                        [],
                                        [],
                                        "deref",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::system::poseidon2::air::Poseidon2PeripheryAir",
                                            "subair"
                                          |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)
                              ]
                            |))
                        ]
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "p3_air::air::Air",
                      Ty.apply
                        (Ty.path "openvm_poseidon2_air::air::Poseidon2SubAir")
                        [ SBOX_REGISTERS ]
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ],
                      [],
                      [
                        Ty.apply
                          (Ty.path "openvm_stark_backend::air_builders::sub::SubAirBuilder")
                          []
                          [
                            AB;
                            Ty.apply
                              (Ty.path "openvm_poseidon2_air::air::Poseidon2SubAir")
                              [ SBOX_REGISTERS ]
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ];
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F"
                          ]
                      ],
                      "eval",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "openvm_poseidon2_air::air::Poseidon2SubAir")
                                  [ SBOX_REGISTERS ]
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F" ]
                              ],
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "openvm_poseidon2_air::air::Poseidon2SubAir")
                                    [ SBOX_REGISTERS ]
                                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F"
                                    ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              [],
                              "deref",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::poseidon2::air::Poseidon2PeripheryAir",
                                  "subair"
                                |)
                              |)
                            ]
                          |)
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (| M.borrow (| Pointer.Kind.MutRef, sub_builder |) |)
                      |)
                    ]
                  |) in
                let~ main : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M" :=
                  M.call_closure (|
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M",
                    M.get_trait_method (| "p3_air::air::AirBuilder", AB, [], [], "main", [], [] |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| builder |) |) |) ]
                  |) in
                let~ local :
                    Ty.associated_in_trait
                      "p3_matrix::Matrix"
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                      "{{synthetic}}'2" :=
                  M.call_closure (|
                    Ty.associated_in_trait
                      "p3_matrix::Matrix"
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                      "{{synthetic}}'2",
                    M.get_trait_method (|
                      "p3_matrix::Matrix",
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M",
                      [],
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                      "row_slice",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, main |); Value.Integer IntegerKind.Usize 0 ]
                  |) in
                let~ cols :
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::poseidon2::columns::Poseidon2PeripheryCols")
                          [ SBOX_REGISTERS ]
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      ] :=
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::poseidon2::columns::Poseidon2PeripheryCols")
                              [ SBOX_REGISTERS ]
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                          ],
                        M.get_trait_method (|
                          "core::borrow::Borrow",
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                          [],
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::poseidon2::columns::Poseidon2PeripheryCols")
                              [ SBOX_REGISTERS ]
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                          ],
                          "borrow",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.associated_in_trait
                                    "p3_matrix::Matrix"
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ]
                                    (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "M")
                                    "{{synthetic}}'2",
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [ M.borrow (| Pointer.Kind.Ref, local |) ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |) in
                let~ input :
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 16 ]
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ] :=
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_circuit::system::poseidon2::columns::Poseidon2PeripheryCols",
                        "inner"
                      |),
                      "p3_poseidon2_air::columns::Poseidon2Cols",
                      "inputs"
                    |)
                  |) in
                let~ output :
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 16 ]
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ] :=
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.SubPointer.get_array_field (|
                        M.SubPointer.get_struct_record_field (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| cols |) |),
                            "openvm_circuit::system::poseidon2::columns::Poseidon2PeripheryCols",
                            "inner"
                          |),
                          "p3_poseidon2_air::columns::Poseidon2Cols",
                          "ending_full_rounds"
                        |),
                        M.call_closure (|
                          Ty.path "usize",
                          BinOp.Wrap.sub,
                          [
                            M.read (|
                              get_constant (|
                                "openvm_poseidon2_air::BABY_BEAR_POSEIDON2_HALF_FULL_ROUNDS",
                                Ty.path "usize"
                              |)
                            |);
                            Value.Integer IntegerKind.Usize 1
                          ]
                        |)
                      |),
                      "p3_poseidon2_air::columns::FullRound",
                      "post"
                    |)
                  |) in
                let~ fields :
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 24 ]
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "array")
                      [ Value.Integer IntegerKind.Usize 24 ]
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                    M.get_function (|
                      "core::array::from_fn",
                      [ Value.Integer IntegerKind.Usize 24 ],
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                        Ty.function
                          [ Ty.path "usize" ]
                          (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var")
                      ]
                    |),
                    [
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                  M.alloc (| Ty.path "usize", α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let i := M.copy (| Ty.path "usize", γ |) in
                                        M.match_operator (|
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var",
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        BinOp.lt,
                                                        [
                                                          M.read (| i |);
                                                          M.read (|
                                                            get_constant (|
                                                              "openvm_poseidon2_air::POSEIDON2_WIDTH",
                                                              Ty.path "usize"
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.read (|
                                                  M.SubPointer.get_array_field (|
                                                    input,
                                                    M.read (| i |)
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.read (|
                                                  M.SubPointer.get_array_field (|
                                                    output,
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      BinOp.Wrap.sub,
                                                      [
                                                        M.read (| i |);
                                                        M.read (|
                                                          get_constant (|
                                                            "openvm_poseidon2_air::POSEIDON2_WIDTH",
                                                            Ty.path "usize"
                                                          |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)))
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.path "openvm_stark_backend::interaction::LookupBus",
                      "add_key_with_lookups",
                      [],
                      [
                        AB;
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 24 ]
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ];
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                      ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::poseidon2::air::Poseidon2PeripheryAir",
                          "bus"
                        |)
                      |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                      M.read (| fields |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| cols |) |),
                          "openvm_circuit::system::poseidon2::columns::Poseidon2PeripheryCols",
                          "mult"
                        |)
                      |)
                    ]
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (SBOX_REGISTERS : Value.t) (AB : Ty.t),
          M.IsTraitInstance
            "p3_air::air::Air"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ AB ]
            (Self SBOX_REGISTERS AB)
            (* Instance *) [ ("eval", InstanceField.Method (eval SBOX_REGISTERS AB)) ].
      End Impl_p3_air_air_Air_where_openvm_stark_backend_interaction_InteractionBuilder_AB_AB_for_openvm_circuit_system_poseidon2_air_Poseidon2PeripheryAir_SBOX_REGISTERS_associated_in_trait_p3_air_air_AirBuilder___AB_F.
    End air.
  End poseidon2.
End system.
