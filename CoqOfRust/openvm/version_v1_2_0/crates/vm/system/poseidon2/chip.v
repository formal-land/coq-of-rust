(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module system.
  Module poseidon2.
    Module chip.
      (* StructRecord
        {
          name := "Poseidon2PeripheryBaseChip";
          const_params := [ "SBOX_REGISTERS" ];
          ty_params := [ "F" ];
          fields :=
            [
              ("air",
                Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::poseidon2::air::Poseidon2PeripheryAir")
                      [ SBOX_REGISTERS ]
                      [ F ];
                    Ty.path "alloc::alloc::Global"
                  ]);
              ("subchip",
                Ty.apply
                  (Ty.path "openvm_poseidon2_air::Poseidon2SubChip")
                  [ SBOX_REGISTERS ]
                  [ F ]);
              ("records",
                Ty.apply
                  (Ty.path "std::collections::hash::map::HashMap")
                  []
                  [
                    Ty.apply
                      (Ty.path "array")
                      [
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_circuit_system_poseidon2_chip_Poseidon2PeripheryBaseChip_records_discriminant"
                          |))
                      ]
                      [ F ];
                    Ty.path "core::sync::atomic::AtomicU32";
                    Ty.path "rustc_hash::FxBuildHasher"
                  ])
            ];
        } *)
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_PrimeField32_F_for_openvm_circuit_system_poseidon2_chip_Poseidon2PeripheryBaseChip_SBOX_REGISTERS_F.
        Definition Self (SBOX_REGISTERS : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
            [ SBOX_REGISTERS ]
            [ F ].
        
        (* Debug *)
        Definition fmt
            (SBOX_REGISTERS : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self SBOX_REGISTERS F in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                        [ SBOX_REGISTERS ]
                        [ F ]
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field3_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (| mk_str (| "Poseidon2PeripheryBaseChip" |) |)
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "air" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::poseidon2::air::Poseidon2PeripheryAir")
                                [ SBOX_REGISTERS ]
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip",
                              "air"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "subchip" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_poseidon2_air::Poseidon2SubChip")
                            [ SBOX_REGISTERS ]
                            [ F ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip",
                              "subchip"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "records" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "std::collections::hash::map::HashMap")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "array")
                                    [ Value.Integer IntegerKind.Usize 16 ]
                                    [ F ];
                                  Ty.path "core::sync::atomic::AtomicU32";
                                  Ty.path "rustc_hash::FxBuildHasher"
                                ]
                            ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "std::collections::hash::map::HashMap")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 16 ]
                                        [ F ];
                                      Ty.path "core::sync::atomic::AtomicU32";
                                      Ty.path "rustc_hash::FxBuildHasher"
                                    ]
                                ],
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip",
                                  "records"
                                |)
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (SBOX_REGISTERS : Value.t) (F : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self SBOX_REGISTERS F)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt SBOX_REGISTERS F)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_PrimeField32_F_for_openvm_circuit_system_poseidon2_chip_Poseidon2PeripheryBaseChip_SBOX_REGISTERS_F.
      
      Module Impl_openvm_circuit_system_poseidon2_chip_Poseidon2PeripheryBaseChip_SBOX_REGISTERS_F.
        Definition Self (SBOX_REGISTERS : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
            [ SBOX_REGISTERS ]
            [ F ].
        
        (*
            pub fn new(poseidon2_config: Poseidon2Config<F>, bus_idx: BusIndex) -> Self {
                let subchip = Poseidon2SubChip::new(poseidon2_config.constants);
                Self {
                    air: Arc::new(Poseidon2PeripheryAir::new(
                        subchip.air.clone(),
                        LookupBus::new(bus_idx),
                    )),
                    subchip,
                    records: FxHashMap::default(),
                }
            }
        *)
        Definition new
            (SBOX_REGISTERS : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self SBOX_REGISTERS F in
          match ε, τ, α with
          | [], [], [ poseidon2_config; bus_idx ] =>
            ltac:(M.monadic
              (let poseidon2_config :=
                M.alloc (|
                  Ty.apply (Ty.path "openvm_poseidon2_air::config::Poseidon2Config") [] [ F ],
                  poseidon2_config
                |) in
              let bus_idx := M.alloc (| Ty.path "u16", bus_idx |) in
              M.read (|
                let~ subchip :
                    Ty.apply
                      (Ty.path "openvm_poseidon2_air::Poseidon2SubChip")
                      [ SBOX_REGISTERS ]
                      [ F ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_poseidon2_air::Poseidon2SubChip")
                      [ SBOX_REGISTERS ]
                      [ F ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_poseidon2_air::Poseidon2SubChip")
                        [ SBOX_REGISTERS ]
                        [ F ],
                      "new",
                      [],
                      []
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          poseidon2_config,
                          "openvm_poseidon2_air::config::Poseidon2Config",
                          "constants"
                        |)
                      |)
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                    [ SBOX_REGISTERS ]
                    [ F ],
                  Value.mkStructRecord
                    "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip"
                    [ SBOX_REGISTERS ]
                    [ F ]
                    [
                      ("air",
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::sync::Arc")
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::poseidon2::air::Poseidon2PeripheryAir")
                                [ SBOX_REGISTERS ]
                                [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "alloc::sync::Arc")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::poseidon2::air::Poseidon2PeripheryAir")
                                  [ SBOX_REGISTERS ]
                                  [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            "new",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::poseidon2::air::Poseidon2PeripheryAir")
                                [ SBOX_REGISTERS ]
                                [ F ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::poseidon2::air::Poseidon2PeripheryAir")
                                  [ SBOX_REGISTERS ]
                                  [ F ],
                                "new",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_poseidon2_air::air::Poseidon2SubAir")
                                        [ SBOX_REGISTERS ]
                                        [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  M.get_trait_method (|
                                    "core::clone::Clone",
                                    Ty.apply
                                      (Ty.path "alloc::sync::Arc")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "openvm_poseidon2_air::air::Poseidon2SubAir")
                                          [ SBOX_REGISTERS ]
                                          [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ],
                                    [],
                                    [],
                                    "clone",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        subchip,
                                        "openvm_poseidon2_air::Poseidon2SubChip",
                                        "air"
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.path "openvm_stark_backend::interaction::LookupBus",
                                  M.get_associated_function (|
                                    Ty.path "openvm_stark_backend::interaction::LookupBus",
                                    "new",
                                    [],
                                    []
                                  |),
                                  [ M.read (| bus_idx |) ]
                                |)
                              ]
                            |)
                          ]
                        |));
                      ("subchip", M.read (| subchip |));
                      ("records",
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "std::collections::hash::map::HashMap")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 16 ]
                                [ F ];
                              Ty.path "core::sync::atomic::AtomicU32";
                              Ty.path "rustc_hash::FxBuildHasher"
                            ],
                          M.get_trait_method (|
                            "core::default::Default",
                            Ty.apply
                              (Ty.path "std::collections::hash::map::HashMap")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 16 ]
                                  [ F ];
                                Ty.path "core::sync::atomic::AtomicU32";
                                Ty.path "rustc_hash::FxBuildHasher"
                              ],
                            [],
                            [],
                            "default",
                            [],
                            []
                          |),
                          []
                        |))
                    ]
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_new :
          forall (SBOX_REGISTERS : Value.t) (F : Ty.t),
          M.IsAssociatedFunction.C (Self SBOX_REGISTERS F) "new" (new SBOX_REGISTERS F).
        Admitted.
        Global Typeclasses Opaque new.
      End Impl_openvm_circuit_system_poseidon2_chip_Poseidon2PeripheryBaseChip_SBOX_REGISTERS_F.
      
      Module Impl_openvm_circuit_arch_hasher_Hasher_where_p3_field_field_PrimeField32_F_expr_F_for_openvm_circuit_system_poseidon2_chip_Poseidon2PeripheryBaseChip_SBOX_REGISTERS_F.
        Definition Self (SBOX_REGISTERS : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
            [ SBOX_REGISTERS ]
            [ F ].
        
        (*
            fn compress(
                &self,
                lhs: &[F; PERIPHERY_POSEIDON2_CHUNK_SIZE],
                rhs: &[F; PERIPHERY_POSEIDON2_CHUNK_SIZE],
            ) -> [F; PERIPHERY_POSEIDON2_CHUNK_SIZE] {
                let mut input_state = [F::ZERO; PERIPHERY_POSEIDON2_WIDTH];
                input_state[..PERIPHERY_POSEIDON2_CHUNK_SIZE].copy_from_slice(lhs);
                input_state[PERIPHERY_POSEIDON2_CHUNK_SIZE..].copy_from_slice(rhs);
        
                let output = self.subchip.permute(input_state);
                array::from_fn(|i| output[i])
            }
        *)
        Definition compress
            (SBOX_REGISTERS : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self SBOX_REGISTERS F in
          match ε, τ, α with
          | [], [], [ self; lhs; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                        [ SBOX_REGISTERS ]
                        [ F ]
                    ],
                  self
                |) in
              let lhs :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [
                          M.unevaluated_const
                            (mk_str (|
                              "openvm_circuit_system_poseidon2_chip_compress_discriminant"
                            |))
                        ]
                        [ F ]
                    ],
                  lhs
                |) in
              let rhs :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [
                          M.unevaluated_const
                            (mk_str (|
                              "openvm_circuit_system_poseidon2_chip_compress_discriminant"
                            |))
                        ]
                        [ F ]
                    ],
                  rhs
                |) in
              M.read (|
                let~ input_state :
                    Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 16 ] [ F ] :=
                  lib.repeat (|
                    M.read (| get_constant (| "p3_field::field::FieldAlgebra::ZERO", F |) |),
                    Value.Integer IntegerKind.Usize 16
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ F ],
                      "copy_from_slice",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                            M.get_trait_method (|
                              "core::ops::index::IndexMut",
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 16 ]
                                [ F ],
                              [],
                              [
                                Ty.apply
                                  (Ty.path "core::ops::range::RangeTo")
                                  []
                                  [ Ty.path "usize" ]
                              ],
                              "index_mut",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, input_state |);
                              Value.mkStructRecord
                                "core::ops::range::RangeTo"
                                []
                                [ Ty.path "usize" ]
                                [
                                  ("end_",
                                    M.read (|
                                      get_constant (|
                                        "openvm_circuit::system::poseidon2::PERIPHERY_POSEIDON2_CHUNK_SIZE",
                                        Ty.path "usize"
                                      |)
                                    |))
                                ]
                            ]
                          |)
                        |)
                      |);
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                        M.pointer_coercion
                          M.PointerCoercion.Unsize
                          (Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 8 ] [ F ]
                            ])
                          (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ]),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| lhs |) |) |) ]
                      |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ F ],
                      "copy_from_slice",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                            M.get_trait_method (|
                              "core::ops::index::IndexMut",
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 16 ]
                                [ F ],
                              [],
                              [
                                Ty.apply
                                  (Ty.path "core::ops::range::RangeFrom")
                                  []
                                  [ Ty.path "usize" ]
                              ],
                              "index_mut",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, input_state |);
                              Value.mkStructRecord
                                "core::ops::range::RangeFrom"
                                []
                                [ Ty.path "usize" ]
                                [
                                  ("start",
                                    M.read (|
                                      get_constant (|
                                        "openvm_circuit::system::poseidon2::PERIPHERY_POSEIDON2_CHUNK_SIZE",
                                        Ty.path "usize"
                                      |)
                                    |))
                                ]
                            ]
                          |)
                        |)
                      |);
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                        M.pointer_coercion
                          M.PointerCoercion.Unsize
                          (Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 8 ] [ F ]
                            ])
                          (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ]),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| rhs |) |) |) ]
                      |)
                    ]
                  |) in
                let~ output :
                    Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 16 ] [ F ] :=
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 16 ] [ F ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_poseidon2_air::Poseidon2SubChip")
                        [ SBOX_REGISTERS ]
                        [ F ],
                      "permute",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip",
                          "subchip"
                        |)
                      |);
                      M.read (| input_state |)
                    ]
                  |) in
                M.alloc (|
                  Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 8 ] [ F ],
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 8 ] [ F ],
                    M.get_function (|
                      "core::array::from_fn",
                      [ Value.Integer IntegerKind.Usize 8 ],
                      [ F; Ty.function [ Ty.path "usize" ] F ]
                    |),
                    [
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  F,
                                  M.alloc (| Ty.path "usize", α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let i := M.copy (| Ty.path "usize", γ |) in
                                        M.read (|
                                          M.SubPointer.get_array_field (| output, M.read (| i |) |)
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (SBOX_REGISTERS : Value.t) (F : Ty.t),
          M.IsTraitInstance
            "openvm_circuit::arch::hasher::Hasher"
            (* Trait polymorphic consts *)
            [ M.unevaluated_const (mk_str (| "openvm_circuit_system_poseidon2_chip_discriminant" |))
            ]
            (* Trait polymorphic types *) [ F ]
            (Self SBOX_REGISTERS F)
            (* Instance *) [ ("compress", InstanceField.Method (compress SBOX_REGISTERS F)) ].
      End Impl_openvm_circuit_arch_hasher_Hasher_where_p3_field_field_PrimeField32_F_expr_F_for_openvm_circuit_system_poseidon2_chip_Poseidon2PeripheryBaseChip_SBOX_REGISTERS_F.
      
      Module Impl_openvm_circuit_arch_hasher_HasherChip_where_p3_field_field_PrimeField32_F_expr_F_for_openvm_circuit_system_poseidon2_chip_Poseidon2PeripheryBaseChip_SBOX_REGISTERS_F.
        Definition Self (SBOX_REGISTERS : Value.t) (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
            [ SBOX_REGISTERS ]
            [ F ].
        
        (*
            fn compress_and_record(
                &mut self,
                lhs: &[F; PERIPHERY_POSEIDON2_CHUNK_SIZE],
                rhs: &[F; PERIPHERY_POSEIDON2_CHUNK_SIZE],
            ) -> [F; PERIPHERY_POSEIDON2_CHUNK_SIZE] {
                let mut input = [F::ZERO; PERIPHERY_POSEIDON2_WIDTH];
                input[..PERIPHERY_POSEIDON2_CHUNK_SIZE].copy_from_slice(lhs);
                input[PERIPHERY_POSEIDON2_CHUNK_SIZE..].copy_from_slice(rhs);
        
                let count = self.records.entry(input).or_insert(AtomicU32::new(0));
                count.fetch_add(1, std::sync::atomic::Ordering::Relaxed);
        
                let output = self.subchip.permute(input);
                array::from_fn(|i| output[i])
            }
        *)
        Definition compress_and_record
            (SBOX_REGISTERS : Value.t)
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self SBOX_REGISTERS F in
          match ε, τ, α with
          | [], [], [ self; lhs; rhs ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                        [ SBOX_REGISTERS ]
                        [ F ]
                    ],
                  self
                |) in
              let lhs :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [
                          M.unevaluated_const
                            (mk_str (|
                              "openvm_circuit_system_poseidon2_chip_compress_and_record_discriminant"
                            |))
                        ]
                        [ F ]
                    ],
                  lhs
                |) in
              let rhs :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [
                          M.unevaluated_const
                            (mk_str (|
                              "openvm_circuit_system_poseidon2_chip_compress_and_record_discriminant"
                            |))
                        ]
                        [ F ]
                    ],
                  rhs
                |) in
              M.read (|
                let~ input :
                    Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 16 ] [ F ] :=
                  lib.repeat (|
                    M.read (| get_constant (| "p3_field::field::FieldAlgebra::ZERO", F |) |),
                    Value.Integer IntegerKind.Usize 16
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ F ],
                      "copy_from_slice",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                            M.get_trait_method (|
                              "core::ops::index::IndexMut",
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 16 ]
                                [ F ],
                              [],
                              [
                                Ty.apply
                                  (Ty.path "core::ops::range::RangeTo")
                                  []
                                  [ Ty.path "usize" ]
                              ],
                              "index_mut",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, input |);
                              Value.mkStructRecord
                                "core::ops::range::RangeTo"
                                []
                                [ Ty.path "usize" ]
                                [
                                  ("end_",
                                    M.read (|
                                      get_constant (|
                                        "openvm_circuit::system::poseidon2::PERIPHERY_POSEIDON2_CHUNK_SIZE",
                                        Ty.path "usize"
                                      |)
                                    |))
                                ]
                            ]
                          |)
                        |)
                      |);
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                        M.pointer_coercion
                          M.PointerCoercion.Unsize
                          (Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 8 ] [ F ]
                            ])
                          (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ]),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| lhs |) |) |) ]
                      |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ F ],
                      "copy_from_slice",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.MutRef,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                            M.get_trait_method (|
                              "core::ops::index::IndexMut",
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 16 ]
                                [ F ],
                              [],
                              [
                                Ty.apply
                                  (Ty.path "core::ops::range::RangeFrom")
                                  []
                                  [ Ty.path "usize" ]
                              ],
                              "index_mut",
                              [],
                              []
                            |),
                            [
                              M.borrow (| Pointer.Kind.MutRef, input |);
                              Value.mkStructRecord
                                "core::ops::range::RangeFrom"
                                []
                                [ Ty.path "usize" ]
                                [
                                  ("start",
                                    M.read (|
                                      get_constant (|
                                        "openvm_circuit::system::poseidon2::PERIPHERY_POSEIDON2_CHUNK_SIZE",
                                        Ty.path "usize"
                                      |)
                                    |))
                                ]
                            ]
                          |)
                        |)
                      |);
                      M.call_closure (|
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                        M.pointer_coercion
                          M.PointerCoercion.Unsize
                          (Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 8 ] [ F ]
                            ])
                          (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ F ] ]),
                        [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| rhs |) |) |) ]
                      |)
                    ]
                  |) in
                let~ count :
                    Ty.apply (Ty.path "&mut") [] [ Ty.path "core::sync::atomic::AtomicU32" ] :=
                  M.call_closure (|
                    Ty.apply (Ty.path "&mut") [] [ Ty.path "core::sync::atomic::AtomicU32" ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "std::collections::hash::map::Entry")
                        []
                        [
                          Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 16 ] [ F ];
                          Ty.path "core::sync::atomic::AtomicU32"
                        ],
                      "or_insert",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "std::collections::hash::map::Entry")
                          []
                          [
                            Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 16 ] [ F ];
                            Ty.path "core::sync::atomic::AtomicU32"
                          ],
                        M.get_associated_function (|
                          Ty.apply
                            (Ty.path "std::collections::hash::map::HashMap")
                            []
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 16 ]
                                [ F ];
                              Ty.path "core::sync::atomic::AtomicU32";
                              Ty.path "rustc_hash::FxBuildHasher"
                            ],
                          "entry",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.MutRef,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip",
                              "records"
                            |)
                          |);
                          M.read (| input |)
                        ]
                      |);
                      M.call_closure (|
                        Ty.path "core::sync::atomic::AtomicU32",
                        M.get_associated_function (|
                          Ty.path "core::sync::atomic::AtomicU32",
                          "new",
                          [],
                          []
                        |),
                        [ Value.Integer IntegerKind.U32 0 ]
                      |)
                    ]
                  |) in
                let~ _ : Ty.path "u32" :=
                  M.call_closure (|
                    Ty.path "u32",
                    M.get_associated_function (|
                      Ty.path "core::sync::atomic::AtomicU32",
                      "fetch_add",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| count |) |) |);
                      Value.Integer IntegerKind.U32 1;
                      Value.StructTuple "core::sync::atomic::Ordering::Relaxed" [] [] []
                    ]
                  |) in
                let~ output :
                    Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 16 ] [ F ] :=
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 16 ] [ F ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_poseidon2_air::Poseidon2SubChip")
                        [ SBOX_REGISTERS ]
                        [ F ],
                      "permute",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip",
                          "subchip"
                        |)
                      |);
                      M.read (| input |)
                    ]
                  |) in
                M.alloc (|
                  Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 8 ] [ F ],
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 8 ] [ F ],
                    M.get_function (|
                      "core::array::from_fn",
                      [ Value.Integer IntegerKind.Usize 8 ],
                      [ F; Ty.function [ Ty.path "usize" ] F ]
                    |),
                    [
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  F,
                                  M.alloc (| Ty.path "usize", α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let i := M.copy (| Ty.path "usize", γ |) in
                                        M.read (|
                                          M.SubPointer.get_array_field (| output, M.read (| i |) |)
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (SBOX_REGISTERS : Value.t) (F : Ty.t),
          M.IsTraitInstance
            "openvm_circuit::arch::hasher::HasherChip"
            (* Trait polymorphic consts *)
            [ M.unevaluated_const (mk_str (| "openvm_circuit_system_poseidon2_chip_discriminant" |))
            ]
            (* Trait polymorphic types *) [ F ]
            (Self SBOX_REGISTERS F)
            (* Instance *)
            [ ("compress_and_record", InstanceField.Method (compress_and_record SBOX_REGISTERS F))
            ].
      End Impl_openvm_circuit_arch_hasher_HasherChip_where_p3_field_field_PrimeField32_F_expr_F_for_openvm_circuit_system_poseidon2_chip_Poseidon2PeripheryBaseChip_SBOX_REGISTERS_F.
    End chip.
  End poseidon2.
End system.
