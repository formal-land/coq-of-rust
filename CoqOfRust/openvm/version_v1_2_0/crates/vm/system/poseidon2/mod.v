(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module system.
  Module poseidon2.
    Definition value_PERIPHERY_POSEIDON2_WIDTH
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 16 |))).
    
    Global Instance Instance_IsConstant_value_PERIPHERY_POSEIDON2_WIDTH :
      M.IsFunction.C
        "openvm_circuit::system::poseidon2::PERIPHERY_POSEIDON2_WIDTH"
        value_PERIPHERY_POSEIDON2_WIDTH.
    Admitted.
    Global Typeclasses Opaque value_PERIPHERY_POSEIDON2_WIDTH.
    
    Definition value_PERIPHERY_POSEIDON2_CHUNK_SIZE
        (ε : list Value.t)
        (τ : list Ty.t)
        (α : list Value.t)
        : M :=
      ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 8 |))).
    
    Global Instance Instance_IsConstant_value_PERIPHERY_POSEIDON2_CHUNK_SIZE :
      M.IsFunction.C
        "openvm_circuit::system::poseidon2::PERIPHERY_POSEIDON2_CHUNK_SIZE"
        value_PERIPHERY_POSEIDON2_CHUNK_SIZE.
    Admitted.
    Global Typeclasses Opaque value_PERIPHERY_POSEIDON2_CHUNK_SIZE.
    
    (*
    Enum Poseidon2PeripheryChip
    {
      const_params := [];
      ty_params := [ "F" ];
      variants :=
        [
          {
            name := "Register0";
            item :=
              StructTuple
                [
                  Ty.apply
                    (Ty.path "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                    [ Value.Integer IntegerKind.Usize 0 ]
                    [ F ]
                ];
          };
          {
            name := "Register1";
            item :=
              StructTuple
                [
                  Ty.apply
                    (Ty.path "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                    [ Value.Integer IntegerKind.Usize 1 ]
                    [ F ]
                ];
          }
        ];
    }
    *)
    
    Axiom IsDiscriminant_Poseidon2PeripheryChip_Register0 :
      M.IsDiscriminant "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip::Register0" 0.
    Axiom IsDiscriminant_Poseidon2PeripheryChip_Register1 :
      M.IsDiscriminant "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip::Register1" 1.
    
    Module Impl_openvm_circuit_system_poseidon2_Poseidon2PeripheryChip_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip") [] [ F ].
      
      (*
          pub fn new(
              poseidon2_config: Poseidon2Config<F>,
              bus_idx: BusIndex,
              max_constraint_degree: usize,
          ) -> Self {
              if max_constraint_degree >= 7 {
                  Self::Register0(Poseidon2PeripheryBaseChip::new(poseidon2_config, bus_idx))
              } else {
                  Self::Register1(Poseidon2PeripheryBaseChip::new(poseidon2_config, bus_idx))
              }
          }
      *)
      Definition new (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ poseidon2_config; bus_idx; max_constraint_degree ] =>
          ltac:(M.monadic
            (let poseidon2_config :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_poseidon2_air::config::Poseidon2Config") [] [ F ],
                poseidon2_config
              |) in
            let bus_idx := M.alloc (| Ty.path "u16", bus_idx |) in
            let max_constraint_degree := M.alloc (| Ty.path "usize", max_constraint_degree |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                []
                [ F ],
              M.alloc (| Ty.tuple [], Value.Tuple [] |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ :=
                      M.use
                        (M.alloc (|
                          Ty.path "bool",
                          M.call_closure (|
                            Ty.path "bool",
                            BinOp.ge,
                            [ M.read (| max_constraint_degree |); Value.Integer IntegerKind.Usize 7
                            ]
                          |)
                        |)) in
                    let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                    Value.StructTuple
                      "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip::Register0"
                      []
                      [ F ]
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                            [ Value.Integer IntegerKind.Usize 0 ]
                            [ F ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                              [ Value.Integer IntegerKind.Usize 0 ]
                              [ F ],
                            "new",
                            [],
                            []
                          |),
                          [ M.read (| poseidon2_config |); M.read (| bus_idx |) ]
                        |)
                      ]));
                fun γ =>
                  ltac:(M.monadic
                    (Value.StructTuple
                      "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip::Register1"
                      []
                      [ F ]
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path
                              "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                            [ Value.Integer IntegerKind.Usize 1 ]
                            [ F ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                              [ Value.Integer IntegerKind.Usize 1 ]
                              [ F ],
                            "new",
                            [],
                            []
                          |),
                          [ M.read (| poseidon2_config |); M.read (| bus_idx |) ]
                        |)
                      ]))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "new" (new F).
      Admitted.
      Global Typeclasses Opaque new.
    End Impl_openvm_circuit_system_poseidon2_Poseidon2PeripheryChip_F.
    
    Module Impl_openvm_stark_backend_chip_Chip_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_field_field_PrimeField32_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val_SC_for_openvm_circuit_system_poseidon2_Poseidon2PeripheryChip_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val.
      Definition Self (SC : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
          []
          [
            Ty.associated_in_trait
              "p3_commit::domain::PolynomialSpace"
              []
              []
              (Ty.associated_in_trait
                "p3_commit::pcs::Pcs"
                []
                [
                  Ty.associated_in_trait
                    "openvm_stark_backend::config::StarkGenericConfig"
                    []
                    []
                    SC
                    "Challenge";
                  Ty.associated_in_trait
                    "openvm_stark_backend::config::StarkGenericConfig"
                    []
                    []
                    SC
                    "Challenger"
                ]
                (Ty.associated_in_trait
                  "openvm_stark_backend::config::StarkGenericConfig"
                  []
                  []
                  SC
                  "Pcs")
                "Domain")
              "Val"
          ].
      
      (*
          fn air(&self) -> AirRef<SC> {
              match self {
                  Poseidon2PeripheryChip::Register0(chip) => chip.air(),
                  Poseidon2PeripheryChip::Register1(chip) => chip.air(),
              }
          }
      *)
      Definition air (SC : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self SC in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                      []
                      [
                        Ty.associated_in_trait
                          "p3_commit::domain::PolynomialSpace"
                          []
                          []
                          (Ty.associated_in_trait
                            "p3_commit::pcs::Pcs"
                            []
                            [
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenge";
                              Ty.associated_in_trait
                                "openvm_stark_backend::config::StarkGenericConfig"
                                []
                                []
                                SC
                                "Challenger"
                            ]
                            (Ty.associated_in_trait
                              "openvm_stark_backend::config::StarkGenericConfig"
                              []
                              []
                              SC
                              "Pcs")
                            "Domain")
                          "Val"
                      ]
                  ],
                self
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "alloc::sync::Arc")
                []
                [
                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                  Ty.path "alloc::alloc::Global"
                ],
              M.pointer_coercion
                M.PointerCoercion.Unsize
                (Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                    Ty.path "alloc::alloc::Global"
                  ])
                (Ty.apply
                  (Ty.path "alloc::sync::Arc")
                  []
                  [
                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                    Ty.path "alloc::alloc::Global"
                  ]),
              [
                M.call_closure (|
                  Ty.apply
                    (Ty.path "alloc::sync::Arc")
                    []
                    [
                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ])
                    (Ty.apply
                      (Ty.path "alloc::sync::Arc")
                      []
                      [
                        Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                        Ty.path "alloc::alloc::Global"
                      ]),
                  [
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "alloc::sync::Arc")
                        []
                        [
                          Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      self,
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip::Register0",
                                0
                              |) in
                            let chip :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                                      [ Value.Integer IntegerKind.Usize 0 ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val"
                                      ]
                                  ],
                                γ1_0
                              |) in
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.pointer_coercion
                                M.PointerCoercion.Unsize
                                (Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ])
                                (Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ]),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  M.get_trait_method (|
                                    "openvm_stark_backend::chip::Chip",
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                                      [ Value.Integer IntegerKind.Usize 0 ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val"
                                      ],
                                    [],
                                    [ SC ],
                                    "air",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| chip |) |) |)
                                  ]
                                |)
                              ]
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.read (| γ |) in
                            let γ1_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip::Register1",
                                0
                              |) in
                            let chip :=
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val"
                                      ]
                                  ],
                                γ1_0
                              |) in
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "alloc::sync::Arc")
                                []
                                [
                                  Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                  Ty.path "alloc::alloc::Global"
                                ],
                              M.pointer_coercion
                                M.PointerCoercion.Unsize
                                (Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ])
                                (Ty.apply
                                  (Ty.path "alloc::sync::Arc")
                                  []
                                  [
                                    Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                    Ty.path "alloc::alloc::Global"
                                  ]),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "alloc::sync::Arc")
                                    []
                                    [
                                      Ty.dyn [ ("openvm_stark_backend::rap::AnyRap::Trait", []) ];
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  M.get_trait_method (|
                                    "openvm_stark_backend::chip::Chip",
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [
                                        Ty.associated_in_trait
                                          "p3_commit::domain::PolynomialSpace"
                                          []
                                          []
                                          (Ty.associated_in_trait
                                            "p3_commit::pcs::Pcs"
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenge";
                                              Ty.associated_in_trait
                                                "openvm_stark_backend::config::StarkGenericConfig"
                                                []
                                                []
                                                SC
                                                "Challenger"
                                            ]
                                            (Ty.associated_in_trait
                                              "openvm_stark_backend::config::StarkGenericConfig"
                                              []
                                              []
                                              SC
                                              "Pcs")
                                            "Domain")
                                          "Val"
                                      ],
                                    [],
                                    [ SC ],
                                    "air",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| chip |) |) |)
                                  ]
                                |)
                              ]
                            |)))
                      ]
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn generate_air_proof_input(self) -> AirProofInput<SC> {
              match self {
                  Poseidon2PeripheryChip::Register0(chip) => chip.generate_air_proof_input(),
                  Poseidon2PeripheryChip::Register1(chip) => chip.generate_air_proof_input(),
              }
          }
      *)
      Definition generate_air_proof_input
          (SC : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self SC in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                  []
                  [
                    Ty.associated_in_trait
                      "p3_commit::domain::PolynomialSpace"
                      []
                      []
                      (Ty.associated_in_trait
                        "p3_commit::pcs::Pcs"
                        []
                        [
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenge";
                          Ty.associated_in_trait
                            "openvm_stark_backend::config::StarkGenericConfig"
                            []
                            []
                            SC
                            "Challenger"
                        ]
                        (Ty.associated_in_trait
                          "openvm_stark_backend::config::StarkGenericConfig"
                          []
                          []
                          SC
                          "Pcs")
                        "Domain")
                      "Val"
                  ],
                self
              |) in
            M.match_operator (|
              Ty.apply (Ty.path "openvm_stark_backend::prover::types::AirProofInput") [] [ SC ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip::Register0",
                        0
                      |) in
                    let chip :=
                      M.copy (|
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                          [ Value.Integer IntegerKind.Usize 0 ]
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val"
                          ],
                        γ0_0
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                        []
                        [ SC ],
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::Chip",
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                          [ Value.Integer IntegerKind.Usize 0 ]
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val"
                          ],
                        [],
                        [ SC ],
                        "generate_air_proof_input",
                        [],
                        []
                      |),
                      [ M.read (| chip |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip::Register1",
                        0
                      |) in
                    let chip :=
                      M.copy (|
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                          [ Value.Integer IntegerKind.Usize 1 ]
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val"
                          ],
                        γ0_0
                      |) in
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "openvm_stark_backend::prover::types::AirProofInput")
                        []
                        [ SC ],
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::Chip",
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                          [ Value.Integer IntegerKind.Usize 1 ]
                          [
                            Ty.associated_in_trait
                              "p3_commit::domain::PolynomialSpace"
                              []
                              []
                              (Ty.associated_in_trait
                                "p3_commit::pcs::Pcs"
                                []
                                [
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenge";
                                  Ty.associated_in_trait
                                    "openvm_stark_backend::config::StarkGenericConfig"
                                    []
                                    []
                                    SC
                                    "Challenger"
                                ]
                                (Ty.associated_in_trait
                                  "openvm_stark_backend::config::StarkGenericConfig"
                                  []
                                  []
                                  SC
                                  "Pcs")
                                "Domain")
                              "Val"
                          ],
                        [],
                        [ SC ],
                        "generate_air_proof_input",
                        [],
                        []
                      |),
                      [ M.read (| chip |) ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (SC : Ty.t),
        M.IsTraitInstance
          "openvm_stark_backend::chip::Chip"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ SC ]
          (Self SC)
          (* Instance *)
          [
            ("air", InstanceField.Method (air SC));
            ("generate_air_proof_input", InstanceField.Method (generate_air_proof_input SC))
          ].
    End Impl_openvm_stark_backend_chip_Chip_where_openvm_stark_backend_config_StarkGenericConfig_SC_where_p3_field_field_PrimeField32_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val_SC_for_openvm_circuit_system_poseidon2_Poseidon2PeripheryChip_associated_in_trait_p3_commit_domain_PolynomialSpace___associated_in_trait_p3_commit_pcs_Pcs__associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenge_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Challenger_associated_in_trait_openvm_stark_backend_config_StarkGenericConfig___SC_Pcs_Domain_Val.
    
    Module Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_circuit_system_poseidon2_Poseidon2PeripheryChip_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip") [] [ F ].
      
      (*
          fn air_name(&self) -> String {
              match self {
                  Poseidon2PeripheryChip::Register0(chip) => chip.air_name(),
                  Poseidon2PeripheryChip::Register1(chip) => chip.air_name(),
              }
          }
      *)
      Definition air_name (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.match_operator (|
              Ty.path "alloc::string::String",
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip::Register0",
                        0
                      |) in
                    let chip :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                              [ Value.Integer IntegerKind.Usize 0 ]
                              [ F ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "alloc::string::String",
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::ChipUsageGetter",
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                          [ Value.Integer IntegerKind.Usize 0 ]
                          [ F ],
                        [],
                        [],
                        "air_name",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| chip |) |) |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip::Register1",
                        0
                      |) in
                    let chip :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                              [ Value.Integer IntegerKind.Usize 1 ]
                              [ F ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "alloc::string::String",
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::ChipUsageGetter",
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                          [ Value.Integer IntegerKind.Usize 1 ]
                          [ F ],
                        [],
                        [],
                        "air_name",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| chip |) |) |) ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn current_trace_height(&self) -> usize {
              match self {
                  Poseidon2PeripheryChip::Register0(chip) => chip.current_trace_height(),
                  Poseidon2PeripheryChip::Register1(chip) => chip.current_trace_height(),
              }
          }
      *)
      Definition current_trace_height
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.match_operator (|
              Ty.path "usize",
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip::Register0",
                        0
                      |) in
                    let chip :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                              [ Value.Integer IntegerKind.Usize 0 ]
                              [ F ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::ChipUsageGetter",
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                          [ Value.Integer IntegerKind.Usize 0 ]
                          [ F ],
                        [],
                        [],
                        "current_trace_height",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| chip |) |) |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip::Register1",
                        0
                      |) in
                    let chip :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                              [ Value.Integer IntegerKind.Usize 1 ]
                              [ F ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::ChipUsageGetter",
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                          [ Value.Integer IntegerKind.Usize 1 ]
                          [ F ],
                        [],
                        [],
                        "current_trace_height",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| chip |) |) |) ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn trace_width(&self) -> usize {
              match self {
                  Poseidon2PeripheryChip::Register0(chip) => chip.trace_width(),
                  Poseidon2PeripheryChip::Register1(chip) => chip.trace_width(),
              }
          }
      *)
      Definition trace_width (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.match_operator (|
              Ty.path "usize",
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip::Register0",
                        0
                      |) in
                    let chip :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                              [ Value.Integer IntegerKind.Usize 0 ]
                              [ F ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::ChipUsageGetter",
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                          [ Value.Integer IntegerKind.Usize 0 ]
                          [ F ],
                        [],
                        [],
                        "trace_width",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| chip |) |) |) ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip::Register1",
                        0
                      |) in
                    let chip :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                              [ Value.Integer IntegerKind.Usize 1 ]
                              [ F ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "openvm_stark_backend::chip::ChipUsageGetter",
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                          [ Value.Integer IntegerKind.Usize 1 ]
                          [ F ],
                        [],
                        [],
                        "trace_width",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| chip |) |) |) ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "openvm_stark_backend::chip::ChipUsageGetter"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *)
          [
            ("air_name", InstanceField.Method (air_name F));
            ("current_trace_height", InstanceField.Method (current_trace_height F));
            ("trace_width", InstanceField.Method (trace_width F))
          ].
    End Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField32_F_for_openvm_circuit_system_poseidon2_Poseidon2PeripheryChip_F.
    
    Module Impl_openvm_circuit_arch_hasher_Hasher_where_p3_field_field_PrimeField32_F_expr_F_for_openvm_circuit_system_poseidon2_Poseidon2PeripheryChip_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip") [] [ F ].
      
      (*
          fn compress(
              &self,
              lhs: &[F; PERIPHERY_POSEIDON2_CHUNK_SIZE],
              rhs: &[F; PERIPHERY_POSEIDON2_CHUNK_SIZE],
          ) -> [F; PERIPHERY_POSEIDON2_CHUNK_SIZE] {
              match self {
                  Poseidon2PeripheryChip::Register0(chip) => chip.compress(lhs, rhs),
                  Poseidon2PeripheryChip::Register1(chip) => chip.compress(lhs, rhs),
              }
          }
      *)
      Definition compress (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; lhs; rhs ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                      []
                      [ F ]
                  ],
                self
              |) in
            let lhs :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "array")
                      [
                        M.unevaluated_const
                          (mk_str (| "openvm_circuit_system_poseidon2_compress_discriminant" |))
                      ]
                      [ F ]
                  ],
                lhs
              |) in
            let rhs :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "array")
                      [
                        M.unevaluated_const
                          (mk_str (| "openvm_circuit_system_poseidon2_compress_discriminant" |))
                      ]
                      [ F ]
                  ],
                rhs
              |) in
            M.match_operator (|
              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 8 ] [ F ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip::Register0",
                        0
                      |) in
                    let chip :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                              [ Value.Integer IntegerKind.Usize 0 ]
                              [ F ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 8 ] [ F ],
                      M.get_trait_method (|
                        "openvm_circuit::arch::hasher::Hasher",
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                          [ Value.Integer IntegerKind.Usize 0 ]
                          [ F ],
                        [ Value.Integer IntegerKind.Usize 8 ],
                        [ F ],
                        "compress",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| chip |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| lhs |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| rhs |) |) |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip::Register1",
                        0
                      |) in
                    let chip :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                              [ Value.Integer IntegerKind.Usize 1 ]
                              [ F ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 8 ] [ F ],
                      M.get_trait_method (|
                        "openvm_circuit::arch::hasher::Hasher",
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                          [ Value.Integer IntegerKind.Usize 1 ]
                          [ F ],
                        [ Value.Integer IntegerKind.Usize 8 ],
                        [ F ],
                        "compress",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| chip |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| lhs |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| rhs |) |) |)
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::hasher::Hasher"
          (* Trait polymorphic consts *)
          [ M.unevaluated_const (mk_str (| "openvm_circuit_system_poseidon2_discriminant" |)) ]
          (* Trait polymorphic types *) [ F ]
          (Self F)
          (* Instance *) [ ("compress", InstanceField.Method (compress F)) ].
    End Impl_openvm_circuit_arch_hasher_Hasher_where_p3_field_field_PrimeField32_F_expr_F_for_openvm_circuit_system_poseidon2_Poseidon2PeripheryChip_F.
    
    Module Impl_openvm_circuit_arch_hasher_HasherChip_where_p3_field_field_PrimeField32_F_expr_F_for_openvm_circuit_system_poseidon2_Poseidon2PeripheryChip_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip") [] [ F ].
      
      (*
          fn compress_and_record(
              &mut self,
              lhs: &[F; PERIPHERY_POSEIDON2_CHUNK_SIZE],
              rhs: &[F; PERIPHERY_POSEIDON2_CHUNK_SIZE],
          ) -> [F; PERIPHERY_POSEIDON2_CHUNK_SIZE] {
              match self {
                  Poseidon2PeripheryChip::Register0(chip) => chip.compress_and_record(lhs, rhs),
                  Poseidon2PeripheryChip::Register1(chip) => chip.compress_and_record(lhs, rhs),
              }
          }
      *)
      Definition compress_and_record
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; lhs; rhs ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip")
                      []
                      [ F ]
                  ],
                self
              |) in
            let lhs :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "array")
                      [
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_circuit_system_poseidon2_compress_and_record_discriminant"
                          |))
                      ]
                      [ F ]
                  ],
                lhs
              |) in
            let rhs :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "array")
                      [
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_circuit_system_poseidon2_compress_and_record_discriminant"
                          |))
                      ]
                      [ F ]
                  ],
                rhs
              |) in
            M.match_operator (|
              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 8 ] [ F ],
              self,
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip::Register0",
                        0
                      |) in
                    let chip :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                              [ Value.Integer IntegerKind.Usize 0 ]
                              [ F ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 8 ] [ F ],
                      M.get_trait_method (|
                        "openvm_circuit::arch::hasher::HasherChip",
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                          [ Value.Integer IntegerKind.Usize 0 ]
                          [ F ],
                        [ Value.Integer IntegerKind.Usize 8 ],
                        [ F ],
                        "compress_and_record",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| chip |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| lhs |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| rhs |) |) |)
                      ]
                    |)));
                fun γ =>
                  ltac:(M.monadic
                    (let γ := M.read (| γ |) in
                    let γ1_0 :=
                      M.SubPointer.get_struct_tuple_field (|
                        γ,
                        "openvm_circuit::system::poseidon2::Poseidon2PeripheryChip::Register1",
                        0
                      |) in
                    let chip :=
                      M.alloc (|
                        Ty.apply
                          (Ty.path "&mut")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                              [ Value.Integer IntegerKind.Usize 1 ]
                              [ F ]
                          ],
                        γ1_0
                      |) in
                    M.call_closure (|
                      Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 8 ] [ F ],
                      M.get_trait_method (|
                        "openvm_circuit::arch::hasher::HasherChip",
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::poseidon2::chip::Poseidon2PeripheryBaseChip")
                          [ Value.Integer IntegerKind.Usize 1 ]
                          [ F ],
                        [ Value.Integer IntegerKind.Usize 8 ],
                        [ F ],
                        "compress_and_record",
                        [],
                        []
                      |),
                      [
                        M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| chip |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| lhs |) |) |);
                        M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| rhs |) |) |)
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::hasher::HasherChip"
          (* Trait polymorphic consts *)
          [ M.unevaluated_const (mk_str (| "openvm_circuit_system_poseidon2_discriminant" |)) ]
          (* Trait polymorphic types *) [ F ]
          (Self F)
          (* Instance *) [ ("compress_and_record", InstanceField.Method (compress_and_record F)) ].
    End Impl_openvm_circuit_arch_hasher_HasherChip_where_p3_field_field_PrimeField32_F_expr_F_for_openvm_circuit_system_poseidon2_Poseidon2PeripheryChip_F.
  End poseidon2.
End system.
