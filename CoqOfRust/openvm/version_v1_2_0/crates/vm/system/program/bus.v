(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module system.
  Module program.
    Module bus.
      (* StructRecord
        {
          name := "ProgramBus";
          const_params := [];
          ty_params := [];
          fields := [ ("inner", Ty.path "openvm_stark_backend::interaction::LookupBus") ];
        } *)
      
      Module Impl_core_fmt_Debug_for_openvm_circuit_system_program_bus_ProgramBus.
        Definition Self : Ty.t := Ty.path "openvm_circuit::system::program::bus::ProgramBus".
        
        (* Debug *)
        Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::program::bus::ProgramBus" ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field1_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "ProgramBus" |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "inner" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.path "openvm_stark_backend::interaction::LookupBus" ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.path "openvm_stark_backend::interaction::LookupBus" ],
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::program::bus::ProgramBus",
                                  "inner"
                                |)
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
      End Impl_core_fmt_Debug_for_openvm_circuit_system_program_bus_ProgramBus.
      
      Module Impl_core_clone_Clone_for_openvm_circuit_system_program_bus_ProgramBus.
        Definition Self : Ty.t := Ty.path "openvm_circuit::system::program::bus::ProgramBus".
        
        (* Clone *)
        Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::program::bus::ProgramBus" ],
                  self
                |) in
              M.match_operator (|
                Ty.path "openvm_circuit::system::program::bus::ProgramBus",
                Value.DeclaredButUndefined,
                [ fun γ => ltac:(M.monadic (M.read (| M.deref (| M.read (| self |) |) |))) ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("clone", InstanceField.Method clone) ].
      End Impl_core_clone_Clone_for_openvm_circuit_system_program_bus_ProgramBus.
      
      Module Impl_core_marker_Copy_for_openvm_circuit_system_program_bus_ProgramBus.
        Definition Self : Ty.t := Ty.path "openvm_circuit::system::program::bus::ProgramBus".
        
        Axiom Implements :
          M.IsTraitInstance
            "core::marker::Copy"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [].
      End Impl_core_marker_Copy_for_openvm_circuit_system_program_bus_ProgramBus.
      
      Module Impl_openvm_circuit_system_program_bus_ProgramBus.
        Definition Self : Ty.t := Ty.path "openvm_circuit::system::program::bus::ProgramBus".
        
        (*
            pub const fn new(index: BusIndex) -> Self {
                Self {
                    inner: LookupBus::new(index),
                }
            }
        *)
        Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ index ] =>
            ltac:(M.monadic
              (let index := M.alloc (| Ty.path "u16", index |) in
              Value.mkStructRecord
                "openvm_circuit::system::program::bus::ProgramBus"
                []
                []
                [
                  ("inner",
                    M.call_closure (|
                      Ty.path "openvm_stark_backend::interaction::LookupBus",
                      M.get_associated_function (|
                        Ty.path "openvm_stark_backend::interaction::LookupBus",
                        "new",
                        [],
                        []
                      |),
                      [ M.read (| index |) ]
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
        Admitted.
        Global Typeclasses Opaque new.
        
        (*
            pub fn index(&self) -> BusIndex {
                self.inner.index
            }
        *)
        Definition index (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::program::bus::ProgramBus" ],
                  self
                |) in
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::system::program::bus::ProgramBus",
                    "inner"
                  |),
                  "openvm_stark_backend::interaction::LookupBus",
                  "index"
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_index : M.IsAssociatedFunction.C Self "index" index.
        Admitted.
        Global Typeclasses Opaque index.
        (*
            pub fn lookup_instruction<AB: InteractionBuilder, E: Into<AB::Expr>>(
                &self,
                builder: &mut AB,
                pc: impl Into<AB::Expr>,
                opcode: impl Into<AB::Expr>,
                operands: impl IntoIterator<Item = E>,
                enabled: impl Into<AB::Expr>,
            ) {
                self.inner.lookup_key(
                    builder,
                    [pc.into(), opcode.into()].into_iter().chain(
                        operands
                            .into_iter()
                            .map(Into::into)
                            .chain(iter::repeat(AB::Expr::ZERO))
                            .take(7),
                    ),
                    enabled,
                );
            }
        *)
        Definition lookup_instruction (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [],
              [
                AB;
                E;
                impl_Into_AB_Expr_;
                impl_Into_AB_Expr_'1;
                impl_IntoIterator_Item___E_;
                impl_Into_AB_Expr_'2
              ],
              [ self; builder; pc; opcode; operands; enabled ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::program::bus::ProgramBus" ],
                  self
                |) in
              let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
              let pc := M.alloc (| impl_Into_AB_Expr_, pc |) in
              let opcode := M.alloc (| impl_Into_AB_Expr_'1, opcode |) in
              let operands := M.alloc (| impl_IntoIterator_Item___E_, operands |) in
              let enabled := M.alloc (| impl_Into_AB_Expr_'2, enabled |) in
              M.read (|
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_associated_function (|
                      Ty.path "openvm_stark_backend::interaction::LookupBus",
                      "lookup_key",
                      [],
                      [
                        AB;
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.apply
                          (Ty.path "core::iter::adapters::chain::Chain")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::array::iter::IntoIter")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ];
                            Ty.apply
                              (Ty.path "core::iter::adapters::take::Take")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::map::Map")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "core::iter::traits::collect::IntoIterator"
                                          []
                                          []
                                          impl_IntoIterator_Item___E_
                                          "IntoIter";
                                        Ty.function
                                          [ E ]
                                          (Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr")
                                      ];
                                    Ty.apply
                                      (Ty.path "core::iter::sources::repeat::Repeat")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                  ]
                              ]
                          ];
                        impl_Into_AB_Expr_'2
                      ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::program::bus::ProgramBus",
                          "inner"
                        |)
                      |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::chain::Chain")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::array::iter::IntoIter")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ];
                            Ty.apply
                              (Ty.path "core::iter::adapters::take::Take")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::map::Map")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "core::iter::traits::collect::IntoIterator"
                                          []
                                          []
                                          impl_IntoIterator_Item___E_
                                          "IntoIter";
                                        Ty.function
                                          [ E ]
                                          (Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr")
                                      ];
                                    Ty.apply
                                      (Ty.path "core::iter::sources::repeat::Repeat")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                  ]
                              ]
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::array::iter::IntoIter")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                          [],
                          [],
                          "chain",
                          [],
                          [
                            Ty.apply
                              (Ty.path "core::iter::adapters::take::Take")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::map::Map")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "core::iter::traits::collect::IntoIterator"
                                          []
                                          []
                                          impl_IntoIterator_Item___E_
                                          "IntoIter";
                                        Ty.function
                                          [ E ]
                                          (Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr")
                                      ];
                                    Ty.apply
                                      (Ty.path "core::iter::sources::repeat::Repeat")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                  ]
                              ]
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::array::iter::IntoIter")
                              [ Value.Integer IntegerKind.Usize 2 ]
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              Value.Array
                                [
                                  M.call_closure (|
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    M.get_trait_method (|
                                      "core::convert::Into",
                                      impl_Into_AB_Expr_,
                                      [],
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ],
                                      "into",
                                      [],
                                      []
                                    |),
                                    [ M.read (| pc |) ]
                                  |);
                                  M.call_closure (|
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    M.get_trait_method (|
                                      "core::convert::Into",
                                      impl_Into_AB_Expr_'1,
                                      [],
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ],
                                      "into",
                                      [],
                                      []
                                    |),
                                    [ M.read (| opcode |) ]
                                  |)
                                ]
                            ]
                          |);
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::take::Take")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::map::Map")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "core::iter::traits::collect::IntoIterator"
                                          []
                                          []
                                          impl_IntoIterator_Item___E_
                                          "IntoIter";
                                        Ty.function
                                          [ E ]
                                          (Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr")
                                      ];
                                    Ty.apply
                                      (Ty.path "core::iter::sources::repeat::Repeat")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                  ]
                              ],
                            M.get_trait_method (|
                              "core::iter::traits::iterator::Iterator",
                              Ty.apply
                                (Ty.path "core::iter::adapters::chain::Chain")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::map::Map")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "core::iter::traits::collect::IntoIterator"
                                        []
                                        []
                                        impl_IntoIterator_Item___E_
                                        "IntoIter";
                                      Ty.function
                                        [ E ]
                                        (Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr")
                                    ];
                                  Ty.apply
                                    (Ty.path "core::iter::sources::repeat::Repeat")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ]
                                ],
                              [],
                              [],
                              "take",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::chain::Chain")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::map::Map")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "core::iter::traits::collect::IntoIterator"
                                          []
                                          []
                                          impl_IntoIterator_Item___E_
                                          "IntoIter";
                                        Ty.function
                                          [ E ]
                                          (Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr")
                                      ];
                                    Ty.apply
                                      (Ty.path "core::iter::sources::repeat::Repeat")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::iter::traits::iterator::Iterator",
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::map::Map")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "core::iter::traits::collect::IntoIterator"
                                        []
                                        []
                                        impl_IntoIterator_Item___E_
                                        "IntoIter";
                                      Ty.function
                                        [ E ]
                                        (Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr")
                                    ],
                                  [],
                                  [],
                                  "chain",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::iter::sources::repeat::Repeat")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                  ]
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::map::Map")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "core::iter::traits::collect::IntoIterator"
                                          []
                                          []
                                          impl_IntoIterator_Item___E_
                                          "IntoIter";
                                        Ty.function
                                          [ E ]
                                          (Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr")
                                      ],
                                    M.get_trait_method (|
                                      "core::iter::traits::iterator::Iterator",
                                      Ty.associated_in_trait
                                        "core::iter::traits::collect::IntoIterator"
                                        []
                                        []
                                        impl_IntoIterator_Item___E_
                                        "IntoIter",
                                      [],
                                      [],
                                      "map",
                                      [],
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr";
                                        Ty.function
                                          [ E ]
                                          (Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr")
                                      ]
                                    |),
                                    [
                                      M.call_closure (|
                                        Ty.associated_in_trait
                                          "core::iter::traits::collect::IntoIterator"
                                          []
                                          []
                                          impl_IntoIterator_Item___E_
                                          "IntoIter",
                                        M.get_trait_method (|
                                          "core::iter::traits::collect::IntoIterator",
                                          impl_IntoIterator_Item___E_,
                                          [],
                                          [],
                                          "into_iter",
                                          [],
                                          []
                                        |),
                                        [ M.read (| operands |) ]
                                      |);
                                      M.get_trait_method (|
                                        "core::convert::Into",
                                        E,
                                        [],
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        ],
                                        "into",
                                        [],
                                        []
                                      |)
                                    ]
                                  |);
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::iter::sources::repeat::Repeat")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ],
                                    M.get_function (|
                                      "core::iter::sources::repeat::repeat",
                                      [],
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                    |),
                                    [
                                      M.read (|
                                        get_constant (|
                                          "p3_field::field::FieldAlgebra::ZERO",
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |);
                              Value.Integer IntegerKind.Usize 7
                            ]
                          |)
                        ]
                      |);
                      M.read (| enabled |)
                    ]
                  |) in
                M.alloc (| Ty.tuple [], Value.Tuple [] |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_lookup_instruction :
          M.IsAssociatedFunction.C Self "lookup_instruction" lookup_instruction.
        Admitted.
        Global Typeclasses Opaque lookup_instruction.
      End Impl_openvm_circuit_system_program_bus_ProgramBus.
      
    End bus.
  End program.
End system.
