(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module system.
  Module program.
    Definition value_EXIT_CODE_FAIL (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      ltac:(M.monadic (M.alloc (| Ty.path "usize", Value.Integer IntegerKind.Usize 1 |))).
    
    Global Instance Instance_IsConstant_value_EXIT_CODE_FAIL :
      M.IsFunction.C "openvm_circuit::system::program::EXIT_CODE_FAIL" value_EXIT_CODE_FAIL.
    Admitted.
    Global Typeclasses Opaque value_EXIT_CODE_FAIL.
    
    (* StructRecord
      {
        name := "ProgramChip";
        const_params := [];
        ty_params := [ "F" ];
        fields :=
          [
            ("air", Ty.path "openvm_circuit::system::program::air::ProgramAir");
            ("program", Ty.apply (Ty.path "openvm_instructions::program::Program") [] [ F ]);
            ("true_program_length", Ty.path "usize");
            ("execution_frequencies",
              Ty.apply
                (Ty.path "alloc::vec::Vec")
                []
                [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_circuit_system_program_ProgramChip_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::system::program::ProgramChip") [] [ F ].
      
      (* Debug *)
      Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::system::program::ProgramChip") [] [ F ] ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field4_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "ProgramChip" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "air" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_circuit::system::program::air::ProgramAir" ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::system::program::ProgramChip",
                            "air"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "program" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.apply (Ty.path "openvm_instructions::program::Program") [] [ F ] ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::system::program::ProgramChip",
                            "program"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "true_program_length" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::system::program::ProgramChip",
                            "true_program_length"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "execution_frequencies" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                          ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "alloc::vec::Vec")
                                  []
                                  [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ]
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::program::ProgramChip",
                                "execution_frequencies"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_circuit_system_program_ProgramChip_F.
    
    Module Impl_openvm_circuit_system_program_ProgramChip_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::system::program::ProgramChip") [] [ F ].
      
      (*
          pub fn new(bus: ProgramBus) -> Self {
              Self {
                  execution_frequencies: vec![],
                  program: Program::default(),
                  true_program_length: 0,
                  air: ProgramAir { bus },
              }
          }
      *)
      Definition new (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ bus ] =>
          ltac:(M.monadic
            (let bus :=
              M.alloc (| Ty.path "openvm_circuit::system::program::bus::ProgramBus", bus |) in
            Value.mkStructRecord
              "openvm_circuit::system::program::ProgramChip"
              []
              [ F ]
              [
                ("execution_frequencies",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                      "new",
                      [],
                      []
                    |),
                    []
                  |));
                ("program",
                  M.call_closure (|
                    Ty.apply (Ty.path "openvm_instructions::program::Program") [] [ F ],
                    M.get_trait_method (|
                      "core::default::Default",
                      Ty.apply (Ty.path "openvm_instructions::program::Program") [] [ F ],
                      [],
                      [],
                      "default",
                      [],
                      []
                    |),
                    []
                  |));
                ("true_program_length", Value.Integer IntegerKind.Usize 0);
                ("air",
                  Value.mkStructRecord
                    "openvm_circuit::system::program::air::ProgramAir"
                    []
                    []
                    [ ("bus", M.read (| bus |)) ])
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "new" (new F).
      Admitted.
      Global Typeclasses Opaque new.
      
      (*
          pub fn new_with_program(program: Program<F>, bus: ProgramBus) -> Self {
              let mut ret = Self::new(bus);
              ret.set_program(program);
              ret
          }
      *)
      Definition new_with_program
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ program; bus ] =>
          ltac:(M.monadic
            (let program :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_instructions::program::Program") [] [ F ],
                program
              |) in
            let bus :=
              M.alloc (| Ty.path "openvm_circuit::system::program::bus::ProgramBus", bus |) in
            M.read (|
              let~ ret :
                  Ty.apply (Ty.path "openvm_circuit::system::program::ProgramChip") [] [ F ] :=
                M.call_closure (|
                  Ty.apply (Ty.path "openvm_circuit::system::program::ProgramChip") [] [ F ],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "openvm_circuit::system::program::ProgramChip") [] [ F ],
                    "new",
                    [],
                    []
                  |),
                  [ M.read (| bus |) ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply (Ty.path "openvm_circuit::system::program::ProgramChip") [] [ F ],
                    "set_program",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.MutRef, ret |); M.read (| program |) ]
                |) in
              ret
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new_with_program :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "new_with_program" (new_with_program F).
      Admitted.
      Global Typeclasses Opaque new_with_program.
      
      (*
          pub fn set_program(&mut self, mut program: Program<F>) {
              let true_program_length = program.len();
              let mut number_actual_instructions = program.num_defined_instructions();
              while !number_actual_instructions.is_power_of_two() {
                  program.push_instruction(padding_instruction());
                  number_actual_instructions += 1;
              }
              self.true_program_length = true_program_length;
              self.execution_frequencies = vec![0; program.len()];
              self.program = program;
          }
      *)
      Definition set_program (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; program ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::system::program::ProgramChip") [] [ F ] ],
                self
              |) in
            let program :=
              M.alloc (|
                Ty.apply (Ty.path "openvm_instructions::program::Program") [] [ F ],
                program
              |) in
            M.read (|
              let~ true_program_length : Ty.path "usize" :=
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "openvm_instructions::program::Program") [] [ F ],
                    "len",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, program |) ]
                |) in
              let~ number_actual_instructions : Ty.path "usize" :=
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (|
                    Ty.apply (Ty.path "openvm_instructions::program::Program") [] [ F ],
                    "num_defined_instructions",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, program |) ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.read (|
                  M.loop (|
                    Ty.tuple [],
                    ltac:(M.monadic
                      (M.alloc (|
                        Ty.tuple [],
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      Ty.path "bool",
                                      UnOp.not (|
                                        M.call_closure (|
                                          Ty.path "bool",
                                          M.get_associated_function (|
                                            Ty.path "usize",
                                            "is_power_of_two",
                                            [],
                                            []
                                          |),
                                          [ M.read (| number_actual_instructions |) ]
                                        |)
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.read (|
                                  let~ _ : Ty.tuple [] :=
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "openvm_instructions::program::Program")
                                          []
                                          [ F ],
                                        "push_instruction",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (| Pointer.Kind.MutRef, program |);
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_instructions::instruction::Instruction")
                                            []
                                            [ F ],
                                          M.get_function (|
                                            "openvm_circuit::system::program::trace::padding_instruction",
                                            [],
                                            [ F ]
                                          |),
                                          []
                                        |)
                                      ]
                                    |) in
                                  let~ _ : Ty.tuple [] :=
                                    let β := number_actual_instructions in
                                    M.write (|
                                      β,
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.add,
                                        [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                                      |)
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (M.never_to_any (|
                                  M.read (|
                                    let~ _ : Ty.tuple [] :=
                                      M.never_to_any (| M.read (| M.break (||) |) |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                  |)
                                |)))
                          ]
                        |)
                      |)))
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::system::program::ProgramChip",
                    "true_program_length"
                  |),
                  M.read (| true_program_length |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::system::program::ProgramChip",
                    "execution_frequencies"
                  |),
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                    M.get_function (| "alloc::vec::from_elem", [], [ Ty.path "usize" ] |),
                    [
                      Value.Integer IntegerKind.Usize 0;
                      M.call_closure (|
                        Ty.path "usize",
                        M.get_associated_function (|
                          Ty.apply (Ty.path "openvm_instructions::program::Program") [] [ F ],
                          "len",
                          [],
                          []
                        |),
                        [ M.borrow (| Pointer.Kind.Ref, program |) ]
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_circuit::system::program::ProgramChip",
                    "program"
                  |),
                  M.read (| program |)
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_set_program :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "set_program" (set_program F).
      Admitted.
      Global Typeclasses Opaque set_program.
      
      (*
          fn get_pc_index(&self, pc: u32) -> Result<usize, ExecutionError> {
              let step = self.program.step;
              let pc_base = self.program.pc_base;
              let pc_index = ((pc - pc_base) / step) as usize;
              if !(0..self.true_program_length).contains(&pc_index) {
                  return Err(ExecutionError::PcOutOfBounds {
                      pc,
                      step,
                      pc_base,
                      program_len: self.true_program_length,
                  });
              }
              Ok(pc_index)
          }
      *)
      Definition get_pc_index
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; pc ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::system::program::ProgramChip") [] [ F ] ],
                self
              |) in
            let pc := M.alloc (| Ty.path "u32", pc |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.path "usize"; Ty.path "openvm_circuit::arch::execution::ExecutionError" ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ step : Ty.path "u32" :=
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::program::ProgramChip",
                          "program"
                        |),
                        "openvm_instructions::program::Program",
                        "step"
                      |)
                    |) in
                  let~ pc_base : Ty.path "u32" :=
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::program::ProgramChip",
                          "program"
                        |),
                        "openvm_instructions::program::Program",
                        "pc_base"
                      |)
                    |) in
                  let~ pc_index : Ty.path "usize" :=
                    M.cast
                      (Ty.path "usize")
                      (M.call_closure (|
                        Ty.path "u32",
                        BinOp.Wrap.div,
                        [
                          M.call_closure (|
                            Ty.path "u32",
                            BinOp.Wrap.sub,
                            [ M.read (| pc |); M.read (| pc_base |) ]
                          |);
                          M.read (| step |)
                        ]
                      |)) in
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ :=
                              M.use
                                (M.alloc (|
                                  Ty.path "bool",
                                  UnOp.not (|
                                    M.call_closure (|
                                      Ty.path "bool",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "core::ops::range::Range")
                                          []
                                          [ Ty.path "usize" ],
                                        "contains",
                                        [],
                                        [ Ty.path "usize" ]
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "core::ops::range::Range")
                                              []
                                              [ Ty.path "usize" ],
                                            Value.mkStructRecord
                                              "core::ops::range::Range"
                                              []
                                              [ Ty.path "usize" ]
                                              [
                                                ("start", Value.Integer IntegerKind.Usize 0);
                                                ("end_",
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| self |) |),
                                                      "openvm_circuit::system::program::ProgramChip",
                                                      "true_program_length"
                                                    |)
                                                  |))
                                              ]
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.borrow (| Pointer.Kind.Ref, pc_index |) |)
                                        |)
                                      ]
                                    |)
                                  |)
                                |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  Value.StructTuple
                                    "core::result::Result::Err"
                                    []
                                    [
                                      Ty.path "usize";
                                      Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                    ]
                                    [
                                      Value.mkStructRecord
                                        "openvm_circuit::arch::execution::ExecutionError::PcOutOfBounds"
                                        []
                                        []
                                        [
                                          ("pc", M.read (| pc |));
                                          ("step", M.read (| step |));
                                          ("pc_base", M.read (| pc_base |));
                                          ("program_len",
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "openvm_circuit::system::program::ProgramChip",
                                                "true_program_length"
                                              |)
                                            |))
                                        ]
                                    ]
                                |)
                              |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [ Ty.path "usize"; Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ],
                    Value.StructTuple
                      "core::result::Result::Ok"
                      []
                      [ Ty.path "usize"; Ty.path "openvm_circuit::arch::execution::ExecutionError" ]
                      [ M.read (| pc_index |) ]
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_pc_index :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "get_pc_index" (get_pc_index F).
      Admitted.
      Global Typeclasses Opaque get_pc_index.
      
      (*
          pub fn get_instruction(
              &mut self,
              pc: u32,
          ) -> Result<&(Instruction<F>, Option<DebugInfo>), ExecutionError> {
              let pc_index = self.get_pc_index(pc)?;
              self.execution_frequencies[pc_index] += 1;
              self.program
                  .get_instruction_and_debug_info(pc_index)
                  .ok_or(ExecutionError::PcNotFound {
                      pc,
                      step: self.program.step,
                      pc_base: self.program.pc_base,
                      program_len: self.program.len(),
                  })
          }
      *)
      Definition get_instruction
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; pc ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::system::program::ProgramChip") [] [ F ] ],
                self
              |) in
            let pc := M.alloc (| Ty.path "u32", pc |) in
            M.catch_return
              (Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.tuple
                        [
                          Ty.apply
                            (Ty.path "openvm_instructions::instruction::Instruction")
                            []
                            [ F ];
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.path "openvm_instructions::instruction::DebugInfo" ]
                        ]
                    ];
                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                ]) (|
              ltac:(M.monadic
                (M.read (|
                  let~ pc_index : Ty.path "usize" :=
                    M.match_operator (|
                      Ty.path "usize",
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::ops::control_flow::ControlFlow")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "core::convert::Infallible";
                                Ty.path "openvm_circuit::arch::execution::ExecutionError"
                              ];
                            Ty.path "usize"
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                ];
                              Ty.path "usize"
                            ],
                          M.get_trait_method (|
                            "core::ops::try_trait::Try",
                            Ty.apply
                              (Ty.path "core::result::Result")
                              []
                              [
                                Ty.path "usize";
                                Ty.path "openvm_circuit::arch::execution::ExecutionError"
                              ],
                            [],
                            [],
                            "branch",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "usize";
                                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::program::ProgramChip")
                                  []
                                  [ F ],
                                "get_pc_index",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                                M.read (| pc |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Break",
                                0
                              |) in
                            let residual :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                  ],
                                γ0_0
                              |) in
                            M.never_to_any (|
                              M.read (|
                                M.return_ (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.tuple
                                              [
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_instructions::instruction::Instruction")
                                                  []
                                                  [ F ];
                                                Ty.apply
                                                  (Ty.path "core::option::Option")
                                                  []
                                                  [
                                                    Ty.path
                                                      "openvm_instructions::instruction::DebugInfo"
                                                  ]
                                              ]
                                          ];
                                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::try_trait::FromResidual",
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_instructions::instruction::Instruction")
                                                    []
                                                    [ F ];
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    []
                                                    [
                                                      Ty.path
                                                        "openvm_instructions::instruction::DebugInfo"
                                                    ]
                                                ]
                                            ];
                                          Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                        ],
                                      [],
                                      [
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.path "core::convert::Infallible";
                                            Ty.path
                                              "openvm_circuit::arch::execution::ExecutionError"
                                          ]
                                      ],
                                      "from_residual",
                                      [],
                                      []
                                    |),
                                    [ M.read (| residual |) ]
                                  |)
                                |)
                              |)
                            |)));
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::ops::control_flow::ControlFlow::Continue",
                                0
                              |) in
                            let val := M.copy (| Ty.path "usize", γ0_0 |) in
                            M.read (| val |)))
                      ]
                    |) in
                  let~ _ : Ty.tuple [] :=
                    let β :=
                      M.deref (|
                        M.call_closure (|
                          Ty.apply (Ty.path "&mut") [] [ Ty.path "usize" ],
                          M.get_trait_method (|
                            "core::ops::index::IndexMut",
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [ Ty.path "usize"; Ty.path "alloc::alloc::Global" ],
                            [],
                            [ Ty.path "usize" ],
                            "index_mut",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.MutRef,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::program::ProgramChip",
                                "execution_frequencies"
                              |)
                            |);
                            M.read (| pc_index |)
                          ]
                        |)
                      |) in
                    M.write (|
                      β,
                      M.call_closure (|
                        Ty.path "usize",
                        BinOp.Wrap.add,
                        [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                      |)
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "core::result::Result")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "openvm_instructions::instruction::Instruction")
                                  []
                                  [ F ];
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.path "openvm_instructions::instruction::DebugInfo" ]
                              ]
                          ];
                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                      ],
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "openvm_instructions::instruction::Instruction")
                                    []
                                    [ F ];
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.path "openvm_instructions::instruction::DebugInfo" ]
                                ]
                            ];
                          Ty.path "openvm_circuit::arch::execution::ExecutionError"
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_instructions::instruction::Instruction")
                                      []
                                      [ F ];
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [ Ty.path "openvm_instructions::instruction::DebugInfo" ]
                                  ]
                              ]
                          ],
                        "ok_or",
                        [],
                        [ Ty.path "openvm_circuit::arch::execution::ExecutionError" ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.tuple
                                    [
                                      Ty.apply
                                        (Ty.path "openvm_instructions::instruction::Instruction")
                                        []
                                        [ F ];
                                      Ty.apply
                                        (Ty.path "core::option::Option")
                                        []
                                        [ Ty.path "openvm_instructions::instruction::DebugInfo" ]
                                    ]
                                ]
                            ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "openvm_instructions::program::Program") [] [ F ],
                            "get_instruction_and_debug_info",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::program::ProgramChip",
                                "program"
                              |)
                            |);
                            M.read (| pc_index |)
                          ]
                        |);
                        Value.mkStructRecord
                          "openvm_circuit::arch::execution::ExecutionError::PcNotFound"
                          []
                          []
                          [
                            ("pc", M.read (| pc |));
                            ("step",
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::system::program::ProgramChip",
                                    "program"
                                  |),
                                  "openvm_instructions::program::Program",
                                  "step"
                                |)
                              |));
                            ("pc_base",
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| self |) |),
                                    "openvm_circuit::system::program::ProgramChip",
                                    "program"
                                  |),
                                  "openvm_instructions::program::Program",
                                  "pc_base"
                                |)
                              |));
                            ("program_len",
                              M.call_closure (|
                                Ty.path "usize",
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "openvm_instructions::program::Program")
                                    []
                                    [ F ],
                                  "len",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_circuit::system::program::ProgramChip",
                                      "program"
                                    |)
                                  |)
                                ]
                              |))
                          ]
                      ]
                    |)
                  |)
                |)))
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_get_instruction :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "get_instruction" (get_instruction F).
      Admitted.
      Global Typeclasses Opaque get_instruction.
    End Impl_openvm_circuit_system_program_ProgramChip_F.
    
    Module Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField64_F_for_openvm_circuit_system_program_ProgramChip_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_circuit::system::program::ProgramChip") [] [ F ].
      
      (*
          fn air_name(&self) -> String {
              "ProgramChip".to_string()
          }
      *)
      Definition air_name (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::system::program::ProgramChip") [] [ F ] ],
                self
              |) in
            M.call_closure (|
              Ty.path "alloc::string::String",
              M.get_trait_method (|
                "alloc::string::ToString",
                Ty.path "str",
                [],
                [],
                "to_string",
                [],
                []
              |),
              [ M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "ProgramChip" |) |) |) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn constant_trace_height(&self) -> Option<usize> {
              Some(self.true_program_length.next_power_of_two())
          }
      *)
      Definition constant_trace_height
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::system::program::ProgramChip") [] [ F ] ],
                self
              |) in
            Value.StructTuple
              "core::option::Option::Some"
              []
              [ Ty.path "usize" ]
              [
                M.call_closure (|
                  Ty.path "usize",
                  M.get_associated_function (| Ty.path "usize", "next_power_of_two", [], [] |),
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_circuit::system::program::ProgramChip",
                        "true_program_length"
                      |)
                    |)
                  ]
                |)
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn current_trace_height(&self) -> usize {
              self.true_program_length
          }
      *)
      Definition current_trace_height
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::system::program::ProgramChip") [] [ F ] ],
                self
              |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.deref (| M.read (| self |) |),
                "openvm_circuit::system::program::ProgramChip",
                "true_program_length"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn trace_width(&self) -> usize {
              1
          }
      *)
      Definition trace_width (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_circuit::system::program::ProgramChip") [] [ F ] ],
                self
              |) in
            Value.Integer IntegerKind.Usize 1))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "openvm_stark_backend::chip::ChipUsageGetter"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *)
          [
            ("air_name", InstanceField.Method (air_name F));
            ("constant_trace_height", InstanceField.Method (constant_trace_height F));
            ("current_trace_height", InstanceField.Method (current_trace_height F));
            ("trace_width", InstanceField.Method (trace_width F))
          ].
    End Impl_openvm_stark_backend_chip_ChipUsageGetter_where_p3_field_field_PrimeField64_F_for_openvm_circuit_system_program_ProgramChip_F.
  End program.
End system.
