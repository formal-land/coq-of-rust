(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module system.
  Module public_values.
    Module columns.
      (* StructRecord
        {
          name := "PublicValuesCoreColsView";
          const_params := [];
          ty_params := [ "T"; "R" ];
          fields :=
            [
              ("is_valid", R);
              ("value", R);
              ("index", R);
              ("custom_pv_vars",
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ R; Ty.path "alloc::alloc::Global" ]);
              ("_marker",
                Ty.apply
                  (Ty.path "core::marker::PhantomData")
                  []
                  [ Ty.apply (Ty.path "&") [] [ T ] ])
            ];
        } *)
      
      Module Impl_openvm_circuit_system_public_values_columns_PublicValuesCoreColsView_T_R.
        Definition Self (T R : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView")
            []
            [ T; R ].
        
        (*
            pub(crate) fn width(&self) -> usize {
                3 + self.custom_pv_vars.len()
            }
        *)
        Definition width (T R : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T R in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView")
                        []
                        [ T; R ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.path "usize",
                BinOp.Wrap.add,
                [
                  Value.Integer IntegerKind.Usize 3;
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.apply (Ty.path "alloc::vec::Vec") [] [ R; Ty.path "alloc::alloc::Global" ],
                      "len",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView",
                          "custom_pv_vars"
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_width :
          forall (T R : Ty.t),
          M.IsAssociatedFunction.C (Self T R) "width" (width T R).
        Admitted.
        Global Typeclasses Opaque width.
        
        (*
            pub(crate) fn flatten(self) -> Vec<R> {
                [self.is_valid, self.value, self.index]
                    .into_iter()
                    .chain(self.custom_pv_vars)
                    .collect()
            }
        *)
        Definition flatten (T R : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T R in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path
                      "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView")
                    []
                    [ T; R ],
                  self
                |) in
              M.call_closure (|
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ R; Ty.path "alloc::alloc::Global" ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::chain::Chain")
                    []
                    [
                      Ty.apply
                        (Ty.path "core::array::iter::IntoIter")
                        [ Value.Integer IntegerKind.Usize 3 ]
                        [ R ];
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [ R; Ty.path "alloc::alloc::Global" ]
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ R; Ty.path "alloc::alloc::Global" ] ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::chain::Chain")
                      []
                      [
                        Ty.apply
                          (Ty.path "core::array::iter::IntoIter")
                          [ Value.Integer IntegerKind.Usize 3 ]
                          [ R ];
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [ R; Ty.path "alloc::alloc::Global" ]
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::array::iter::IntoIter")
                        [ Value.Integer IntegerKind.Usize 3 ]
                        [ R ],
                      [],
                      [],
                      "chain",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [ R; Ty.path "alloc::alloc::Global" ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::array::iter::IntoIter")
                          [ Value.Integer IntegerKind.Usize 3 ]
                          [ R ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 3 ] [ R ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          Value.Array
                            [
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView",
                                  "is_valid"
                                |)
                              |);
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView",
                                  "value"
                                |)
                              |);
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  self,
                                  "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView",
                                  "index"
                                |)
                              |)
                            ]
                        ]
                      |);
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          self,
                          "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView",
                          "custom_pv_vars"
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_flatten :
          forall (T R : Ty.t),
          M.IsAssociatedFunction.C (Self T R) "flatten" (flatten T R).
        Admitted.
        Global Typeclasses Opaque flatten.
      End Impl_openvm_circuit_system_public_values_columns_PublicValuesCoreColsView_T_R.
      
      Module Impl_openvm_circuit_system_public_values_columns_PublicValuesCoreColsView_T_ref__T.
        Definition Self (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView")
            []
            [ T; Ty.apply (Ty.path "&") [] [ T ] ].
        
        (*
            pub(crate) fn borrow(arr: &'a [T]) -> PublicValuesCoreColsView<'a, T, &'a T> {
                PublicValuesCoreColsView::<T, &'a T> {
                    is_valid: &arr[0],
                    value: &arr[1],
                    index: &arr[2],
                    custom_pv_vars: arr[3..].iter().collect(),
                    _marker: Default::default(),
                }
            }
        *)
        Definition borrow (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ arr ] =>
            ltac:(M.monadic
              (let arr :=
                M.alloc (|
                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                  arr
                |) in
              Value.mkStructRecord
                "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView"
                []
                [ T; Ty.apply (Ty.path "&") [] [ T ] ]
                [
                  ("is_valid",
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_array_field (|
                            M.deref (| M.read (| arr |) |),
                            Value.Integer IntegerKind.Usize 0
                          |)
                        |)
                      |)
                    |));
                  ("value",
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_array_field (|
                            M.deref (| M.read (| arr |) |),
                            Value.Integer IntegerKind.Usize 1
                          |)
                        |)
                      |)
                    |));
                  ("index",
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_array_field (|
                            M.deref (| M.read (| arr |) |),
                            Value.Integer IntegerKind.Usize 2
                          |)
                        |)
                      |)
                    |));
                  ("custom_pv_vars",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "alloc::vec::Vec")
                        []
                        [ Ty.apply (Ty.path "&") [] [ T ]; Ty.path "alloc::alloc::Global" ],
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply (Ty.path "core::slice::iter::Iter") [] [ T ],
                        [],
                        [],
                        "collect",
                        [],
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [ Ty.apply (Ty.path "&") [] [ T ]; Ty.path "alloc::alloc::Global" ]
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply (Ty.path "core::slice::iter::Iter") [] [ T ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ T ],
                            "iter",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.call_closure (|
                                  Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                  M.get_trait_method (|
                                    "core::ops::index::Index",
                                    Ty.apply (Ty.path "slice") [] [ T ],
                                    [],
                                    [
                                      Ty.apply
                                        (Ty.path "core::ops::range::RangeFrom")
                                        []
                                        [ Ty.path "usize" ]
                                    ],
                                    "index",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| arr |) |) |);
                                    Value.mkStructRecord
                                      "core::ops::range::RangeFrom"
                                      []
                                      [ Ty.path "usize" ]
                                      [ ("start", Value.Integer IntegerKind.Usize 3) ]
                                  ]
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |));
                  ("_marker",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::marker::PhantomData")
                        []
                        [ Ty.apply (Ty.path "&") [] [ T ] ],
                      M.get_trait_method (|
                        "core::default::Default",
                        Ty.apply
                          (Ty.path "core::marker::PhantomData")
                          []
                          [ Ty.apply (Ty.path "&") [] [ T ] ],
                        [],
                        [],
                        "default",
                        [],
                        []
                      |),
                      []
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_borrow :
          forall (T : Ty.t),
          M.IsAssociatedFunction.C (Self T) "borrow" (borrow T).
        Admitted.
        Global Typeclasses Opaque borrow.
      End Impl_openvm_circuit_system_public_values_columns_PublicValuesCoreColsView_T_ref__T.
      
      Module Impl_openvm_circuit_system_public_values_columns_PublicValuesCoreColsView_T_ref_mut_T.
        Definition Self (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView")
            []
            [ T; Ty.apply (Ty.path "&mut") [] [ T ] ].
        
        (*
            pub(crate) fn borrow_mut(arr: &'a mut [T]) -> PublicValuesCoreColsView<'a, T, &'a mut T> {
                let (first_three, rest) = arr.split_at_mut(3);
                let [is_valid, value, index] = first_three else {
                    unreachable!("first_three should have exactly 3 elements");
                };
                PublicValuesCoreColsView::<T, &'a mut T> {
                    is_valid,
                    value,
                    index,
                    custom_pv_vars: rest.iter_mut().collect(),
                    _marker: Default::default(),
                }
            }
        *)
        Definition borrow_mut
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self T in
          match ε, τ, α with
          | [], [], [ arr ] =>
            ltac:(M.monadic
              (let arr :=
                M.alloc (|
                  Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                  arr
                |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path
                    "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView")
                  []
                  [ T; Ty.apply (Ty.path "&mut") [] [ T ] ],
                M.alloc (|
                  Ty.tuple
                    [
                      Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                      Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                    ],
                  M.call_closure (|
                    Ty.tuple
                      [
                        Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                        Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                      ],
                    M.get_associated_function (|
                      Ty.apply (Ty.path "slice") [] [ T ],
                      "split_at_mut",
                      [],
                      []
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| arr |) |) |);
                      Value.Integer IntegerKind.Usize 3
                    ]
                  |)
                |),
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                      let first_three :=
                        M.copy (|
                          Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                          γ0_0
                        |) in
                      let rest :=
                        M.copy (|
                          Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                          γ0_1
                        |) in
                      M.match_operator (|
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView")
                          []
                          [ T; Ty.apply (Ty.path "&mut") [] [ T ] ],
                        first_three,
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ := M.read (| γ |) in
                              let γ1_0 := M.SubPointer.get_slice_index (| γ, 0 |) in
                              let γ1_1 := M.SubPointer.get_slice_index (| γ, 1 |) in
                              let γ1_2 := M.SubPointer.get_slice_index (| γ, 2 |) in
                              let is_valid :=
                                M.alloc (| Ty.apply (Ty.path "&mut") [] [ T ], γ1_0 |) in
                              let value := M.alloc (| Ty.apply (Ty.path "&mut") [] [ T ], γ1_1 |) in
                              let index := M.alloc (| Ty.apply (Ty.path "&mut") [] [ T ], γ1_2 |) in
                              Value.mkStructRecord
                                "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView"
                                []
                                [ T; Ty.apply (Ty.path "&mut") [] [ T ] ]
                                [
                                  ("is_valid",
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| is_valid |) |)
                                    |));
                                  ("value",
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| value |) |)
                                    |));
                                  ("index",
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| index |) |)
                                    |));
                                  ("custom_pv_vars",
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply (Ty.path "&mut") [] [ T ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      M.get_trait_method (|
                                        "core::iter::traits::iterator::Iterator",
                                        Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ T ],
                                        [],
                                        [],
                                        "collect",
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply (Ty.path "&mut") [] [ T ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ]
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.apply (Ty.path "core::slice::iter::IterMut") [] [ T ],
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ T ],
                                            "iter_mut",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.read (| rest |) |)
                                            |)
                                          ]
                                        |)
                                      ]
                                    |));
                                  ("_marker",
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::marker::PhantomData")
                                        []
                                        [ Ty.apply (Ty.path "&") [] [ T ] ],
                                      M.get_trait_method (|
                                        "core::default::Default",
                                        Ty.apply
                                          (Ty.path "core::marker::PhantomData")
                                          []
                                          [ Ty.apply (Ty.path "&") [] [ T ] ],
                                        [],
                                        [],
                                        "default",
                                        [],
                                        []
                                      |),
                                      []
                                    |))
                                ]));
                          fun γ =>
                            ltac:(M.monadic
                              (M.call_closure (|
                                Ty.path "never",
                                M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                [
                                  M.call_closure (|
                                    Ty.path "core::fmt::Arguments",
                                    M.get_associated_function (|
                                      Ty.path "core::fmt::Arguments",
                                      "new_v1",
                                      [
                                        Value.Integer IntegerKind.Usize 1;
                                        Value.Integer IntegerKind.Usize 0
                                      ],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 1 ]
                                                [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                              Value.Array
                                                [
                                                  mk_str (|
                                                    "internal error: entered unreachable code: first_three should have exactly 3 elements"
                                                  |)
                                                ]
                                            |)
                                          |)
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.deref (|
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.alloc (|
                                              Ty.apply
                                                (Ty.path "array")
                                                [ Value.Integer IntegerKind.Usize 0 ]
                                                [ Ty.path "core::fmt::rt::Argument" ],
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "array")
                                                  [ Value.Integer IntegerKind.Usize 0 ]
                                                  [ Ty.path "core::fmt::rt::Argument" ],
                                                M.get_associated_function (|
                                                  Ty.path "core::fmt::rt::Argument",
                                                  "none",
                                                  [],
                                                  []
                                                |),
                                                []
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)))
                        ]
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_borrow_mut :
          forall (T : Ty.t),
          M.IsAssociatedFunction.C (Self T) "borrow_mut" (borrow_mut T).
        Admitted.
        Global Typeclasses Opaque borrow_mut.
      End Impl_openvm_circuit_system_public_values_columns_PublicValuesCoreColsView_T_ref_mut_T.
    End columns.
  End public_values.
End system.
