(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module system.
  Module public_values.
    Module core.
      Axiom AdapterInterface :
        forall (F : Ty.t),
        (Ty.apply
            (Ty.path "openvm_circuit::system::public_values::core::AdapterInterface")
            []
            [ F ]) =
          (Ty.apply
            (Ty.path "openvm_circuit::arch::integration_api::BasicAdapterInterface")
            [
              Value.Integer IntegerKind.Usize 2;
              Value.Integer IntegerKind.Usize 0;
              Value.Integer IntegerKind.Usize 1;
              Value.Integer IntegerKind.Usize 1
            ]
            [
              F;
              Ty.apply
                (Ty.path "openvm_circuit::arch::integration_api::MinimalInstruction")
                []
                [ F ]
            ]).
      
      Axiom AdapterInterfaceReads :
        forall (F : Ty.t),
        (Ty.apply
            (Ty.path "openvm_circuit::system::public_values::core::AdapterInterfaceReads")
            []
            [ F ]) =
          (Ty.associated_in_trait
            "openvm_circuit::arch::integration_api::VmAdapterInterface"
            []
            [ F ]
            (Ty.apply
              (Ty.path "openvm_circuit::arch::integration_api::BasicAdapterInterface")
              [
                Value.Integer IntegerKind.Usize 2;
                Value.Integer IntegerKind.Usize 0;
                Value.Integer IntegerKind.Usize 1;
                Value.Integer IntegerKind.Usize 1
              ]
              [
                F;
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::MinimalInstruction")
                  []
                  [ F ]
              ])
            "Reads").
      
      (* StructRecord
        {
          name := "PublicValuesCoreAir";
          const_params := [];
          ty_params := [];
          fields :=
            [
              ("num_custom_pvs", Ty.path "usize");
              ("encoder", Ty.path "openvm_circuit_primitives::encoder::Encoder")
            ];
        } *)
      
      Module Impl_core_clone_Clone_for_openvm_circuit_system_public_values_core_PublicValuesCoreAir.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::public_values::core::PublicValuesCoreAir".
        
        (* Clone *)
        Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::public_values::core::PublicValuesCoreAir" ],
                  self
                |) in
              Value.mkStructRecord
                "openvm_circuit::system::public_values::core::PublicValuesCoreAir"
                []
                []
                [
                  ("num_custom_pvs",
                    M.call_closure (|
                      Ty.path "usize",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "usize",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::public_values::core::PublicValuesCoreAir",
                                "num_custom_pvs"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |));
                  ("encoder",
                    M.call_closure (|
                      Ty.path "openvm_circuit_primitives::encoder::Encoder",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.path "openvm_circuit_primitives::encoder::Encoder",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_circuit::system::public_values::core::PublicValuesCoreAir",
                                "encoder"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::clone::Clone"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("clone", InstanceField.Method clone) ].
      End Impl_core_clone_Clone_for_openvm_circuit_system_public_values_core_PublicValuesCoreAir.
      
      Module Impl_core_fmt_Debug_for_openvm_circuit_system_public_values_core_PublicValuesCoreAir.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::public_values::core::PublicValuesCoreAir".
        
        (* Debug *)
        Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::public_values::core::PublicValuesCoreAir" ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field2_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "PublicValuesCoreAir" |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "num_custom_pvs" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::public_values::core::PublicValuesCoreAir",
                              "num_custom_pvs"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "encoder" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.path "openvm_circuit_primitives::encoder::Encoder" ]
                        ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.path "openvm_circuit_primitives::encoder::Encoder" ],
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::public_values::core::PublicValuesCoreAir",
                                  "encoder"
                                |)
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
      End Impl_core_fmt_Debug_for_openvm_circuit_system_public_values_core_PublicValuesCoreAir.
      
      Module Impl_openvm_circuit_system_public_values_core_PublicValuesCoreAir.
        Definition Self : Ty.t :=
          Ty.path "openvm_circuit::system::public_values::core::PublicValuesCoreAir".
        
        (*
            pub fn new(num_custom_pvs: usize, max_degree: u32) -> Self {
                Self {
                    num_custom_pvs,
                    encoder: Encoder::new(num_custom_pvs, max_degree, true),
                }
            }
        *)
        Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [], [ num_custom_pvs; max_degree ] =>
            ltac:(M.monadic
              (let num_custom_pvs := M.alloc (| Ty.path "usize", num_custom_pvs |) in
              let max_degree := M.alloc (| Ty.path "u32", max_degree |) in
              Value.mkStructRecord
                "openvm_circuit::system::public_values::core::PublicValuesCoreAir"
                []
                []
                [
                  ("num_custom_pvs", M.read (| num_custom_pvs |));
                  ("encoder",
                    M.call_closure (|
                      Ty.path "openvm_circuit_primitives::encoder::Encoder",
                      M.get_associated_function (|
                        Ty.path "openvm_circuit_primitives::encoder::Encoder",
                        "new",
                        [],
                        []
                      |),
                      [ M.read (| num_custom_pvs |); M.read (| max_degree |); Value.Bool true ]
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
        Admitted.
        Global Typeclasses Opaque new.
      End Impl_openvm_circuit_system_public_values_core_PublicValuesCoreAir.
      
      Module Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_circuit_system_public_values_core_PublicValuesCoreAir.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.path "openvm_circuit::system::public_values::core::PublicValuesCoreAir".
        
        (*
            fn width(&self) -> usize {
                3 + self.encoder.width()
            }
        *)
        Definition width (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::public_values::core::PublicValuesCoreAir" ],
                  self
                |) in
              M.call_closure (|
                Ty.path "usize",
                BinOp.Wrap.add,
                [
                  Value.Integer IntegerKind.Usize 3;
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_associated_function (|
                      Ty.path "openvm_circuit_primitives::encoder::Encoder",
                      "width",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::public_values::core::PublicValuesCoreAir",
                          "encoder"
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "p3_air::air::BaseAir"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self F)
            (* Instance *) [ ("width", InstanceField.Method (width F)) ].
      End Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_circuit_system_public_values_core_PublicValuesCoreAir.
      
      Module Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_where_p3_field_field_Field_F_F_for_openvm_circuit_system_public_values_core_PublicValuesCoreAir.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.path "openvm_circuit::system::public_values::core::PublicValuesCoreAir".
        
        (*
            fn num_public_values(&self) -> usize {
                self.num_custom_pvs
            }
        *)
        Definition num_public_values
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::public_values::core::PublicValuesCoreAir" ],
                  self
                |) in
              M.read (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| self |) |),
                  "openvm_circuit::system::public_values::core::PublicValuesCoreAir",
                  "num_custom_pvs"
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "openvm_stark_backend::rap::BaseAirWithPublicValues"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) [ F ]
            (Self F)
            (* Instance *) [ ("num_public_values", InstanceField.Method (num_public_values F)) ].
      End Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_where_p3_field_field_Field_F_F_for_openvm_circuit_system_public_values_core_PublicValuesCoreAir.
      
      Module Impl_openvm_circuit_arch_integration_api_VmCoreAir_where_openvm_stark_backend_interaction_InteractionBuilder_AB_where_p3_air_air_AirBuilderWithPublicValues_AB_AB_openvm_circuit_arch_integration_api_BasicAdapterInterface_Usize_2_Usize_0_Usize_1_Usize_1_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_openvm_circuit_arch_integration_api_MinimalInstruction_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_for_openvm_circuit_system_public_values_core_PublicValuesCoreAir.
        Definition Self (AB : Ty.t) : Ty.t :=
          Ty.path "openvm_circuit::system::public_values::core::PublicValuesCoreAir".
        
        (*
            fn eval(
                &self,
                builder: &mut AB,
                local_core: &[AB::Var],
                _from_pc: AB::Var,
            ) -> AdapterAirContext<AB::Expr, AdapterInterface<AB::Expr>> {
                let cols = PublicValuesCoreColsView::<_, &AB::Var>::borrow(local_core);
                debug_assert_eq!(cols.width(), BaseAir::<AB::F>::width(self));
                let is_valid = *cols.is_valid;
                let value = *cols.value;
                let index = *cols.index;
        
                let vars = cols.custom_pv_vars.iter().map(|&&x| x).collect::<Vec<_>>();
                self.encoder.eval(builder, &vars);
        
                let flags = self.encoder.flags::<AB>(&vars);
        
                let mut match_public_value_index = AB::Expr::ZERO;
                let mut match_public_value = AB::Expr::ZERO;
                for (i, flag) in flags.iter().enumerate() {
                    match_public_value_index += flag.clone() * AB::F::from_canonical_usize(i);
                    match_public_value += flag.clone() * builder.public_values()[i].into();
                }
                builder.assert_eq(is_valid, self.encoder.is_valid::<AB>(&vars));
        
                let mut when_publish = builder.when(is_valid);
                when_publish.assert_eq(index, match_public_value_index);
                when_publish.assert_eq(value, match_public_value);
        
                AdapterAirContext {
                    to_pc: None,
                    reads: [[value.into()], [index.into()]],
                    writes: [],
                    instruction: MinimalInstruction {
                        is_valid: is_valid.into(),
                        opcode: AB::Expr::from_canonical_usize(PUBLISH.global_opcode().as_usize()),
                    },
                }
            }
        *)
        Definition eval (AB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self AB in
          match ε, τ, α with
          | [], [], [ self; builder; local_core; _from_pc ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::public_values::core::PublicValuesCoreAir" ],
                  self
                |) in
              let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
              let local_core :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ],
                  local_core
                |) in
              let _from_pc :=
                M.alloc (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                  _from_pc
                |) in
              M.read (|
                let~ cols :
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView")
                      []
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView")
                      []
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                      ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView")
                        []
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                      "borrow",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| local_core |) |) |) ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.tuple
                                    [
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                    ],
                                  Value.Tuple
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.path "usize",
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView")
                                                []
                                                [
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Var";
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Var"
                                                    ]
                                                ],
                                              "width",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, cols |) ]
                                          |)
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.path "usize",
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "p3_air::air::BaseAir",
                                              Ty.path
                                                "openvm_circuit::system::public_values::core::PublicValuesCoreAir",
                                              [],
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "F"
                                              ],
                                              "width",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| self |) |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                      let left_val :=
                                        M.copy (|
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                          γ0_0
                                        |) in
                                      let right_val :=
                                        M.copy (|
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                          γ0_1
                                        |) in
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    Ty.path "bool",
                                                    UnOp.not (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        BinOp.eq,
                                                        [
                                                          M.read (|
                                                            M.deref (| M.read (| left_val |) |)
                                                          |);
                                                          M.read (|
                                                            M.deref (| M.read (| right_val |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)) in
                                              let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.never_to_any (|
                                                M.read (|
                                                  let~ kind :
                                                      Ty.path "core::panicking::AssertKind" :=
                                                    Value.StructTuple
                                                      "core::panicking::AssertKind::Eq"
                                                      []
                                                      []
                                                      [] in
                                                  M.alloc (|
                                                    Ty.path "never",
                                                    M.call_closure (|
                                                      Ty.path "never",
                                                      M.get_function (|
                                                        "core::panicking::assert_failed",
                                                        [],
                                                        [ Ty.path "usize"; Ty.path "usize" ]
                                                      |),
                                                      [
                                                        M.read (| kind |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| left_val |) |)
                                                            |)
                                                          |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| right_val |) |)
                                                            |)
                                                          |)
                                                        |);
                                                        Value.StructTuple
                                                          "core::option::Option::None"
                                                          []
                                                          [ Ty.path "core::fmt::Arguments" ]
                                                          []
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ => ltac:(M.monadic (Value.Tuple []))
                                        ]
                                      |)))
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ is_valid : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" :=
                  M.read (|
                    M.deref (|
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          cols,
                          "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView",
                          "is_valid"
                        |)
                      |)
                    |)
                  |) in
                let~ value : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" :=
                  M.read (|
                    M.deref (|
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          cols,
                          "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView",
                          "value"
                        |)
                      |)
                    |)
                  |) in
                let~ index : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" :=
                  M.read (|
                    M.deref (|
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          cols,
                          "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView",
                          "index"
                        |)
                      |)
                    |)
                  |) in
                let~ vars :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                        Ty.path "alloc::alloc::Global"
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "core::iter::adapters::map::Map")
                        []
                        [
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                            ];
                          Ty.function
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ]
                                ]
                            ]
                            (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var")
                        ],
                      [],
                      [],
                      "collect",
                      [],
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::Vec")
                          []
                          [
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                            Ty.path "alloc::alloc::Global"
                          ]
                      ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::map::Map")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ]
                              ];
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                  ]
                              ]
                              (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var")
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::iterator::Iterator",
                          Ty.apply
                            (Ty.path "core::slice::iter::Iter")
                            []
                            [
                              Ty.apply
                                (Ty.path "&")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                            ],
                          [],
                          [],
                          "map",
                          [],
                          [
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                            Ty.function
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                  ]
                              ]
                              (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var")
                          ]
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ]
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ]
                                ],
                              "iter",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Var"
                                              ]
                                          ]
                                      ],
                                    M.get_trait_method (|
                                      "core::ops::deref::Deref",
                                      Ty.apply
                                        (Ty.path "alloc::vec::Vec")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Var"
                                            ];
                                          Ty.path "alloc::alloc::Global"
                                        ],
                                      [],
                                      [],
                                      "deref",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          cols,
                                          "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView",
                                          "custom_pv_vars"
                                        |)
                                      |)
                                    ]
                                  |)
                                |)
                              |)
                            ]
                          |);
                          M.closure
                            (fun γ =>
                              ltac:(M.monadic
                                match γ with
                                | [ α0 ] =>
                                  ltac:(M.monadic
                                    (M.match_operator (|
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var",
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Var"
                                              ]
                                          ],
                                        α0
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ := M.read (| γ |) in
                                            let γ := M.read (| γ |) in
                                            let x :=
                                              M.copy (|
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "Var",
                                                γ
                                              |) in
                                            M.read (| x |)))
                                      ]
                                    |)))
                                | _ => M.impossible "wrong number of arguments"
                                end))
                        ]
                      |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "openvm_circuit_primitives::sub_air::SubAir",
                      Ty.path "openvm_circuit_primitives::encoder::Encoder",
                      [],
                      [ AB ],
                      "eval",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::public_values::core::PublicValuesCoreAir",
                          "encoder"
                        |)
                      |);
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ]
                              ],
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              [],
                              "deref",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, vars |) |)
                              |)
                            ]
                          |)
                        |)
                      |)
                    ]
                  |) in
                let~ flags :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.path "alloc::alloc::Global"
                      ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.path "alloc::alloc::Global"
                      ],
                    M.get_associated_function (|
                      Ty.path "openvm_circuit_primitives::encoder::Encoder",
                      "flags",
                      [],
                      [ AB ]
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.deref (| M.read (| self |) |),
                          "openvm_circuit::system::public_values::core::PublicValuesCoreAir",
                          "encoder"
                        |)
                      |);
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ]
                              ],
                            M.get_trait_method (|
                              "core::ops::deref::Deref",
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                                  Ty.path "alloc::alloc::Global"
                                ],
                              [],
                              [],
                              "deref",
                              [],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (| M.borrow (| Pointer.Kind.Ref, vars |) |)
                              |)
                            ]
                          |)
                        |)
                      |)
                    ]
                  |) in
                let~ match_public_value_index :
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                  M.read (|
                    get_constant (|
                      "p3_field::field::FieldAlgebra::ZERO",
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                    |)
                  |) in
                let~ match_public_value :
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                  M.read (|
                    get_constant (|
                      "p3_field::field::FieldAlgebra::ZERO",
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.read (|
                    M.use
                      (M.alloc (|
                        Ty.tuple [],
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::Iter")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ]
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::Iter")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ]
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                  ],
                                [],
                                [],
                                "into_iter",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        ]
                                    ],
                                  M.get_trait_method (|
                                    "core::iter::traits::iterator::Iterator",
                                    Ty.apply
                                      (Ty.path "core::slice::iter::Iter")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ],
                                    [],
                                    [],
                                    "enumerate",
                                    [],
                                    []
                                  |),
                                  [
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::slice::iter::Iter")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr"
                                          ],
                                        "iter",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (|
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "&")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "slice")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr"
                                                    ]
                                                ],
                                              M.get_trait_method (|
                                                "core::ops::deref::Deref",
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr";
                                                    Ty.path "alloc::alloc::Global"
                                                  ],
                                                [],
                                                [],
                                                "deref",
                                                [],
                                                []
                                              |),
                                              [ M.borrow (| Pointer.Kind.Ref, flags |) ]
                                            |)
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "core::slice::iter::Iter")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr"
                                          ]
                                      ],
                                    γ
                                  |) in
                                M.read (|
                                  M.loop (|
                                    Ty.tuple [],
                                    ltac:(M.monadic
                                      (let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [
                                                Ty.tuple
                                                  [
                                                    Ty.path "usize";
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ]
                                                  ]
                                              ],
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [
                                                  Ty.tuple
                                                    [
                                                      Ty.path "usize";
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr"
                                                        ]
                                                    ]
                                                ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path
                                                    "core::iter::adapters::enumerate::Enumerate")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::slice::iter::Iter")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ]
                                                  ],
                                                [],
                                                [],
                                                "next",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (|
                                                    M.borrow (| Pointer.Kind.MutRef, iter |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let _ :=
                                                  M.is_struct_tuple (|
                                                    γ,
                                                    "core::option::Option::None"
                                                  |) in
                                                M.never_to_any (| M.read (| M.break (||) |) |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let γ1_0 :=
                                                  M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                                let γ1_1 :=
                                                  M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                                let i := M.copy (| Ty.path "usize", γ1_0 |) in
                                                let flag :=
                                                  M.copy (|
                                                    Ty.apply
                                                      (Ty.path "&")
                                                      []
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ],
                                                    γ1_1
                                                  |) in
                                                M.read (|
                                                  let~ _ : Ty.tuple [] :=
                                                    M.call_closure (|
                                                      Ty.tuple [],
                                                      M.get_trait_method (|
                                                        "core::ops::arith::AddAssign",
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        [],
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr"
                                                        ],
                                                        "add_assign",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          match_public_value_index
                                                        |);
                                                        M.call_closure (|
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          M.get_trait_method (|
                                                            "core::ops::arith::Mul",
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            [],
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "F"
                                                            ],
                                                            "mul",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr",
                                                              M.get_trait_method (|
                                                                "core::clone::Clone",
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr",
                                                                [],
                                                                [],
                                                                "clone",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| flag |) |)
                                                                |)
                                                              ]
                                                            |);
                                                            M.call_closure (|
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "F",
                                                              M.get_trait_method (|
                                                                "p3_field::field::FieldAlgebra",
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "F",
                                                                [],
                                                                [],
                                                                "from_canonical_usize",
                                                                [],
                                                                []
                                                              |),
                                                              [ M.read (| i |) ]
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |) in
                                                  let~ _ : Ty.tuple [] :=
                                                    M.call_closure (|
                                                      Ty.tuple [],
                                                      M.get_trait_method (|
                                                        "core::ops::arith::AddAssign",
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        [],
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr"
                                                        ],
                                                        "add_assign",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.MutRef,
                                                          match_public_value
                                                        |);
                                                        M.call_closure (|
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          M.get_trait_method (|
                                                            "core::ops::arith::Mul",
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            [],
                                                            [
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr"
                                                            ],
                                                            "mul",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.call_closure (|
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr",
                                                              M.get_trait_method (|
                                                                "core::clone::Clone",
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr",
                                                                [],
                                                                [],
                                                                "clone",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| flag |) |)
                                                                |)
                                                              ]
                                                            |);
                                                            M.call_closure (|
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr",
                                                              M.get_trait_method (|
                                                                "core::convert::Into",
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilderWithPublicValues"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "PublicVar",
                                                                [],
                                                                [
                                                                  Ty.associated_in_trait
                                                                    "p3_air::air::AirBuilder"
                                                                    []
                                                                    []
                                                                    AB
                                                                    "Expr"
                                                                ],
                                                                "into",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.read (|
                                                                  M.SubPointer.get_array_field (|
                                                                    M.deref (|
                                                                      M.call_closure (|
                                                                        Ty.apply
                                                                          (Ty.path "&")
                                                                          []
                                                                          [
                                                                            Ty.apply
                                                                              (Ty.path "slice")
                                                                              []
                                                                              [
                                                                                Ty.associated_in_trait
                                                                                  "p3_air::air::AirBuilderWithPublicValues"
                                                                                  []
                                                                                  []
                                                                                  AB
                                                                                  "PublicVar"
                                                                              ]
                                                                          ],
                                                                        M.get_trait_method (|
                                                                          "p3_air::air::AirBuilderWithPublicValues",
                                                                          AB,
                                                                          [],
                                                                          [],
                                                                          "public_values",
                                                                          [],
                                                                          []
                                                                        |),
                                                                        [
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| builder |)
                                                                            |)
                                                                          |)
                                                                        ]
                                                                      |)
                                                                    |),
                                                                    M.read (| i |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |) in
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                  |)
                                |)))
                          ]
                        |)
                      |))
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "p3_air::air::AirBuilder",
                      AB,
                      [],
                      [],
                      "assert_eq",
                      [],
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                      ]
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                      M.read (| is_valid |);
                      M.call_closure (|
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        M.get_associated_function (|
                          Ty.path "openvm_circuit_primitives::encoder::Encoder",
                          "is_valid",
                          [],
                          [ AB ]
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::public_values::core::PublicValuesCoreAir",
                              "encoder"
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.deref (|
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                  ],
                                M.get_trait_method (|
                                  "core::ops::deref::Deref",
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var";
                                      Ty.path "alloc::alloc::Global"
                                    ],
                                  [],
                                  [],
                                  "deref",
                                  [],
                                  []
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (| M.borrow (| Pointer.Kind.Ref, vars |) |)
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    ]
                  |) in
                let~ when_publish :
                    Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ] :=
                  M.call_closure (|
                    Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                    M.get_trait_method (|
                      "p3_air::air::AirBuilder",
                      AB,
                      [],
                      [],
                      "when",
                      [],
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                      M.read (| is_valid |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "p3_air::air::AirBuilder",
                      Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                      [],
                      [],
                      "assert_eq",
                      [],
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                      ]
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, when_publish |);
                      M.read (| index |);
                      M.read (| match_public_value_index |)
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.call_closure (|
                    Ty.tuple [],
                    M.get_trait_method (|
                      "p3_air::air::AirBuilder",
                      Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                      [],
                      [],
                      "assert_eq",
                      [],
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                      ]
                    |),
                    [
                      M.borrow (| Pointer.Kind.MutRef, when_publish |);
                      M.read (| value |);
                      M.read (| match_public_value |)
                    ]
                  |) in
                M.alloc (|
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::integration_api::AdapterAirContext")
                    []
                    [
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::BasicAdapterInterface")
                        [
                          Value.Integer IntegerKind.Usize 2;
                          Value.Integer IntegerKind.Usize 0;
                          Value.Integer IntegerKind.Usize 1;
                          Value.Integer IntegerKind.Usize 1
                        ]
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::MinimalInstruction")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                        ]
                    ],
                  Value.mkStructRecord
                    "openvm_circuit::arch::integration_api::AdapterAirContext"
                    []
                    [
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::BasicAdapterInterface")
                        [
                          Value.Integer IntegerKind.Usize 2;
                          Value.Integer IntegerKind.Usize 0;
                          Value.Integer IntegerKind.Usize 1;
                          Value.Integer IntegerKind.Usize 1
                        ]
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::MinimalInstruction")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                        ]
                    ]
                    [
                      ("to_pc",
                        Value.StructTuple
                          "core::option::Option::None"
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          []);
                      ("reads",
                        Value.Array
                          [
                            Value.Array
                              [
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::convert::Into",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                    "into",
                                    [],
                                    []
                                  |),
                                  [ M.read (| value |) ]
                                |)
                              ];
                            Value.Array
                              [
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::convert::Into",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                    "into",
                                    [],
                                    []
                                  |),
                                  [ M.read (| index |) ]
                                |)
                              ]
                          ]);
                      ("writes", Value.Array []);
                      ("instruction",
                        Value.mkStructRecord
                          "openvm_circuit::arch::integration_api::MinimalInstruction"
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          [
                            ("is_valid",
                              M.call_closure (|
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                M.get_trait_method (|
                                  "core::convert::Into",
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                  [],
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ],
                                  "into",
                                  [],
                                  []
                                |),
                                [ M.read (| is_valid |) ]
                              |));
                            ("opcode",
                              M.call_closure (|
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                M.get_trait_method (|
                                  "p3_field::field::FieldAlgebra",
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  [],
                                  [],
                                  "from_canonical_usize",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.path "usize",
                                    M.get_associated_function (|
                                      Ty.path "openvm_instructions::VmOpcode",
                                      "as_usize",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.path "openvm_instructions::VmOpcode",
                                          M.call_closure (|
                                            Ty.path "openvm_instructions::VmOpcode",
                                            M.get_trait_method (|
                                              "openvm_instructions::LocalOpcode",
                                              Ty.path "openvm_instructions::PublishOpcode",
                                              [],
                                              [],
                                              "global_opcode",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.alloc (|
                                                  Ty.path "openvm_instructions::PublishOpcode",
                                                  Value.StructTuple
                                                    "openvm_instructions::PublishOpcode::PUBLISH"
                                                    []
                                                    []
                                                    []
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |))
                          ])
                    ]
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn start_offset(&self) -> usize {
                PublishOpcode::CLASS_OFFSET
            }
        *)
        Definition start_offset
            (AB : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self AB in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_circuit::system::public_values::core::PublicValuesCoreAir" ],
                  self
                |) in
              M.read (|
                get_constant (| "openvm_instructions::LocalOpcode::CLASS_OFFSET", Ty.path "usize" |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (AB : Ty.t),
          M.IsTraitInstance
            "openvm_circuit::arch::integration_api::VmCoreAir"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              AB;
              Ty.apply
                (Ty.path "openvm_circuit::arch::integration_api::BasicAdapterInterface")
                [
                  Value.Integer IntegerKind.Usize 2;
                  Value.Integer IntegerKind.Usize 0;
                  Value.Integer IntegerKind.Usize 1;
                  Value.Integer IntegerKind.Usize 1
                ]
                [
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::integration_api::MinimalInstruction")
                    []
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                ]
            ]
            (Self AB)
            (* Instance *)
            [
              ("eval", InstanceField.Method (eval AB));
              ("start_offset", InstanceField.Method (start_offset AB))
            ].
      End Impl_openvm_circuit_arch_integration_api_VmCoreAir_where_openvm_stark_backend_interaction_InteractionBuilder_AB_where_p3_air_air_AirBuilderWithPublicValues_AB_AB_openvm_circuit_arch_integration_api_BasicAdapterInterface_Usize_2_Usize_0_Usize_1_Usize_1_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_openvm_circuit_arch_integration_api_MinimalInstruction_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_for_openvm_circuit_system_public_values_core_PublicValuesCoreAir.
      
      (* StructRecord
        {
          name := "PublicValuesRecord";
          const_params := [];
          ty_params := [ "F" ];
          fields := [ ("value", F); ("index", F) ];
        } *)
      
      Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_circuit_system_public_values_core_PublicValuesRecord_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::public_values::core::PublicValuesRecord")
            []
            [ F ].
        
        (* Debug *)
        Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; f ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::public_values::core::PublicValuesRecord")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let f :=
                M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.get_associated_function (|
                  Ty.path "core::fmt::Formatter",
                  "debug_struct_field2_finish",
                  [],
                  []
                |),
                [
                  M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "PublicValuesRecord" |) |) |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "value" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ F ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_circuit::system::public_values::core::PublicValuesRecord",
                              "value"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |);
                  M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "index" |) |) |);
                  M.call_closure (|
                    Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                    M.pointer_coercion
                      M.PointerCoercion.Unsize
                      (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ F ] ])
                      (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply (Ty.path "&") [] [ F ],
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| self |) |),
                                  "openvm_circuit::system::public_values::core::PublicValuesRecord",
                                  "index"
                                |)
                              |)
                            |)
                          |)
                        |)
                      |)
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "core::fmt::Debug"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self F)
            (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
      End Impl_core_fmt_Debug_where_core_fmt_Debug_F_for_openvm_circuit_system_public_values_core_PublicValuesRecord_F.
      
      Module underscore.
        Module Impl_serde_ser_Serialize_where_serde_ser_Serialize_F_for_openvm_circuit_system_public_values_core_PublicValuesRecord_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::system::public_values::core::PublicValuesRecord")
              []
              [ F ].
          
          (* Serialize *)
          Definition serialize
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self F in
            match ε, τ, α with
            | [], [ __S ], [ self; __serializer ] =>
              ltac:(M.monadic
                (let self :=
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::public_values::core::PublicValuesRecord")
                          []
                          [ F ]
                      ],
                    self
                  |) in
                let __serializer := M.alloc (| __S, __serializer |) in
                M.catch_return
                  (Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                      Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                    ]) (|
                  ltac:(M.monadic
                    (M.read (|
                      let~ __serde_state :
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct" :=
                        M.match_operator (|
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct"
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "SerializeStruct";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::Serializer",
                                    __S,
                                    [],
                                    [],
                                    "serialize_struct",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (| __serializer |);
                                    mk_str (| "PublicValuesRecord" |);
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.add,
                                      [
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.add,
                                          [
                                            M.cast (Ty.path "usize") (Value.Bool false);
                                            Value.Integer IntegerKind.Usize 1
                                          ]
                                        |);
                                        Value.Integer IntegerKind.Usize 1
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val :=
                                  M.copy (|
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    γ0_0
                                  |) in
                                M.read (| val |)))
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.tuple []
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStruct",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    [],
                                    [],
                                    "serialize_field",
                                    [],
                                    [ F ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                      |)
                                    |);
                                    mk_str (| "value" |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::system::public_values::core::PublicValuesRecord",
                                            "value"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                M.read (| val |)))
                          ]
                        |) in
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::ops::control_flow::ControlFlow")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ];
                                  Ty.tuple []
                                ],
                              M.get_trait_method (|
                                "core::ops::try_trait::Try",
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                [],
                                [],
                                "branch",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.tuple [];
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  M.get_trait_method (|
                                    "serde::ser::SerializeStruct",
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct",
                                    [],
                                    [],
                                    "serialize_field",
                                    [],
                                    [ F ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.borrow (| Pointer.Kind.MutRef, __serde_state |)
                                      |)
                                    |);
                                    mk_str (| "index" |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_circuit::system::public_values::core::PublicValuesRecord",
                                            "index"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Break",
                                    0
                                  |) in
                                let residual :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.path "core::convert::Infallible";
                                        Ty.associated_in_trait
                                          "serde::ser::Serializer"
                                          []
                                          []
                                          __S
                                          "Error"
                                      ],
                                    γ0_0
                                  |) in
                                M.never_to_any (|
                                  M.read (|
                                    M.return_ (|
                                      M.call_closure (|
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        M.get_trait_method (|
                                          "core::ops::try_trait::FromResidual",
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Ok";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ],
                                          [],
                                          [
                                            Ty.apply
                                              (Ty.path "core::result::Result")
                                              []
                                              [
                                                Ty.path "core::convert::Infallible";
                                                Ty.associated_in_trait
                                                  "serde::ser::Serializer"
                                                  []
                                                  []
                                                  __S
                                                  "Error"
                                              ]
                                          ],
                                          "from_residual",
                                          [],
                                          []
                                        |),
                                        [ M.read (| residual |) ]
                                      |)
                                    |)
                                  |)
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 :=
                                  M.SubPointer.get_struct_tuple_field (|
                                    γ,
                                    "core::ops::control_flow::ControlFlow::Continue",
                                    0
                                  |) in
                                let val := M.copy (| Ty.tuple [], γ0_0 |) in
                                M.read (| val |)))
                          ]
                        |) in
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                              Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                            ],
                          M.get_trait_method (|
                            "serde::ser::SerializeStruct",
                            Ty.associated_in_trait
                              "serde::ser::Serializer"
                              []
                              []
                              __S
                              "SerializeStruct",
                            [],
                            [],
                            "end",
                            [],
                            []
                          |),
                          [ M.read (| __serde_state |) ]
                        |)
                      |)
                    |)))
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "serde::ser::Serialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self F)
              (* Instance *) [ ("serialize", InstanceField.Method (serialize F)) ].
        End Impl_serde_ser_Serialize_where_serde_ser_Serialize_F_for_openvm_circuit_system_public_values_core_PublicValuesRecord_F.
        Module Impl_serde_de_Deserialize_where_serde_de_Deserialize_F_for_openvm_circuit_system_public_values_core_PublicValuesRecord_F.
          Definition Self (F : Ty.t) : Ty.t :=
            Ty.apply
              (Ty.path "openvm_circuit::system::public_values::core::PublicValuesRecord")
              []
              [ F ].
          
          (* Deserialize *)
          Definition deserialize
              (F : Ty.t)
              (ε : list Value.t)
              (τ : list Ty.t)
              (α : list Value.t)
              : M :=
            let Self : Ty.t := Self F in
            match ε, τ, α with
            | [], [ __D ], [ __deserializer ] =>
              ltac:(M.monadic
                (let __deserializer := M.alloc (| __D, __deserializer |) in
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::public_values::core::PublicValuesRecord")
                        []
                        [ F ];
                      Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                    ],
                  M.get_trait_method (|
                    "serde::de::Deserializer",
                    __D,
                    [],
                    [],
                    "deserialize_struct",
                    [],
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::public_values::core::_'1::deserialize::__Visitor")
                        []
                        [ F ]
                    ]
                  |),
                  [
                    M.read (| __deserializer |);
                    mk_str (| "PublicValuesRecord" |);
                    M.read (|
                      get_constant (|
                        "openvm_circuit::system::public_values::core::_'1::deserialize::FIELDS",
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ]
                      |)
                    |);
                    Value.mkStructRecord
                      "openvm_circuit::system::public_values::core::_'1::deserialize::__Visitor"
                      []
                      [ F ]
                      [
                        ("marker",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::public_values::core::PublicValuesRecord")
                                []
                                [ F ]
                            ]
                            []);
                        ("lifetime",
                          Value.StructTuple
                            "core::marker::PhantomData"
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                            [])
                      ]
                  ]
                |)))
            | _, _, _ => M.impossible "wrong number of arguments"
            end.
          
          Axiom Implements :
            forall (F : Ty.t),
            M.IsTraitInstance
              "serde::de::Deserialize"
              (* Trait polymorphic consts *) []
              (* Trait polymorphic types *) []
              (Self F)
              (* Instance *) [ ("deserialize", InstanceField.Method (deserialize F)) ].
        End Impl_serde_de_Deserialize_where_serde_de_Deserialize_F_for_openvm_circuit_system_public_values_core_PublicValuesRecord_F.
      End underscore.
      
      
      (* StructRecord
        {
          name := "PublicValuesCoreChip";
          const_params := [];
          ty_params := [ "F" ];
          fields :=
            [
              ("air", Ty.path "openvm_circuit::system::public_values::core::PublicValuesCoreAir");
              ("custom_pvs",
                Ty.apply
                  (Ty.path "std::sync::mutex::Mutex")
                  []
                  [
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [
                        Ty.apply (Ty.path "core::option::Option") [] [ F ];
                        Ty.path "alloc::alloc::Global"
                      ]
                  ])
            ];
        } *)
      
      Module Impl_openvm_circuit_system_public_values_core_PublicValuesCoreChip_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
            []
            [ F ].
        
        (*
            pub fn new(num_custom_pvs: usize, max_degree: u32) -> Self {
                Self {
                    air: PublicValuesCoreAir::new(num_custom_pvs, max_degree),
                    custom_pvs: Mutex::new(vec![None; num_custom_pvs]),
                }
            }
        *)
        Definition new (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ num_custom_pvs; max_degree ] =>
            ltac:(M.monadic
              (let num_custom_pvs := M.alloc (| Ty.path "usize", num_custom_pvs |) in
              let max_degree := M.alloc (| Ty.path "u32", max_degree |) in
              Value.mkStructRecord
                "openvm_circuit::system::public_values::core::PublicValuesCoreChip"
                []
                [ F ]
                [
                  ("air",
                    M.call_closure (|
                      Ty.path "openvm_circuit::system::public_values::core::PublicValuesCoreAir",
                      M.get_associated_function (|
                        Ty.path "openvm_circuit::system::public_values::core::PublicValuesCoreAir",
                        "new",
                        [],
                        []
                      |),
                      [ M.read (| num_custom_pvs |); M.read (| max_degree |) ]
                    |));
                  ("custom_pvs",
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "std::sync::mutex::Mutex")
                        []
                        [
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply (Ty.path "core::option::Option") [] [ F ];
                              Ty.path "alloc::alloc::Global"
                            ]
                        ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "std::sync::mutex::Mutex")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply (Ty.path "core::option::Option") [] [ F ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ],
                        "new",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply (Ty.path "core::option::Option") [] [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          M.get_function (|
                            "alloc::vec::from_elem",
                            [],
                            [ Ty.apply (Ty.path "core::option::Option") [] [ F ] ]
                          |),
                          [
                            Value.StructTuple "core::option::Option::None" [] [ F ] [];
                            M.read (| num_custom_pvs |)
                          ]
                        |)
                      ]
                    |))
                ]))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_new :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "new" (new F).
        Admitted.
        Global Typeclasses Opaque new.
        
        (*
            pub fn get_custom_public_values(&self) -> Vec<Option<F>> {
                self.custom_pvs.lock().unwrap().clone()
            }
        *)
        Definition get_custom_public_values
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "alloc::vec::Vec")
                  []
                  [
                    Ty.apply (Ty.path "core::option::Option") [] [ F ];
                    Ty.path "alloc::alloc::Global"
                  ],
                M.get_trait_method (|
                  "core::clone::Clone",
                  Ty.apply
                    (Ty.path "alloc::vec::Vec")
                    []
                    [
                      Ty.apply (Ty.path "core::option::Option") [] [ F ];
                      Ty.path "alloc::alloc::Global"
                    ],
                  [],
                  [],
                  "clone",
                  [],
                  []
                |),
                [
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.deref (|
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply (Ty.path "core::option::Option") [] [ F ];
                                Ty.path "alloc::alloc::Global"
                              ]
                          ],
                        M.get_trait_method (|
                          "core::ops::deref::Deref",
                          Ty.apply
                            (Ty.path "std::sync::mutex::MutexGuard")
                            []
                            [
                              Ty.apply
                                (Ty.path "alloc::vec::Vec")
                                []
                                [
                                  Ty.apply (Ty.path "core::option::Option") [] [ F ];
                                  Ty.path "alloc::alloc::Global"
                                ]
                            ],
                          [],
                          [],
                          "deref",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.apply
                                (Ty.path "std::sync::mutex::MutexGuard")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "alloc::vec::Vec")
                                    []
                                    [
                                      Ty.apply (Ty.path "core::option::Option") [] [ F ];
                                      Ty.path "alloc::alloc::Global"
                                    ]
                                ],
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "std::sync::mutex::MutexGuard")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply (Ty.path "core::option::Option") [] [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::MutexGuard")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply (Ty.path "core::option::Option") [] [ F ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "std::sync::poison::PoisonError")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::MutexGuard")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    []
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ]
                                    ],
                                  "unwrap",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::MutexGuard")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply (Ty.path "core::option::Option") [] [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ];
                                        Ty.apply
                                          (Ty.path "std::sync::poison::PoisonError")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "std::sync::mutex::MutexGuard")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [ F ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ]
                                          ]
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::Mutex")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply (Ty.path "core::option::Option") [] [ F ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ],
                                      "lock",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::system::public_values::core::PublicValuesCoreChip",
                                          "custom_pvs"
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |)
                            |)
                          |)
                        ]
                      |)
                    |)
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Global Instance AssociatedFunction_get_custom_public_values :
          forall (F : Ty.t),
          M.IsAssociatedFunction.C (Self F) "get_custom_public_values" (get_custom_public_values F).
        Admitted.
        Global Typeclasses Opaque get_custom_public_values.
      End Impl_openvm_circuit_system_public_values_core_PublicValuesCoreChip_F.
      
      Module Impl_openvm_circuit_arch_integration_api_VmCoreChip_where_p3_field_field_PrimeField32_F_F_openvm_circuit_arch_integration_api_BasicAdapterInterface_Usize_2_Usize_0_Usize_1_Usize_1_F_openvm_circuit_arch_integration_api_MinimalInstruction_F_for_openvm_circuit_system_public_values_core_PublicValuesCoreChip_F.
        Definition Self (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
            []
            [ F ].
        
        (*     type Record = PublicValuesRecord<F>; *)
        Definition _Record (F : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_circuit::system::public_values::core::PublicValuesRecord")
            []
            [ F ].
        
        (*     type Air = PublicValuesCoreAir; *)
        Definition _Air (F : Ty.t) : Ty.t :=
          Ty.path "openvm_circuit::system::public_values::core::PublicValuesCoreAir".
        
        (*
            fn execute_instruction(
                &self,
                _instruction: &Instruction<F>,
                _from_pc: u32,
                reads: AdapterInterfaceReads<F>,
            ) -> Result<(AdapterRuntimeContext<F, AdapterInterface<F>>, Self::Record)> {
                let [[value], [index]] = reads;
                {
                    let idx: usize = index.as_canonical_u32() as usize;
                    let mut custom_pvs = self.custom_pvs.lock().unwrap();
        
                    if custom_pvs[idx].is_none() {
                        custom_pvs[idx] = Some(value);
                    } else {
                        // Not a hard constraint violation when publishing the same value twice but the
                        // program should avoid that.
                        panic!("Custom public value {} already set", idx);
                    }
                }
                let output = AdapterRuntimeContext {
                    to_pc: None,
                    writes: [],
                };
                let record = Self::Record { value, index };
                Ok((output, record))
            }
        *)
        Definition execute_instruction
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; _instruction; _from_pc; reads ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let _instruction :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ] ],
                  _instruction
                |) in
              let _from_pc := M.alloc (| Ty.path "u32", _from_pc |) in
              let reads :=
                M.alloc (|
                  Ty.associated_in_trait
                    "openvm_circuit::arch::integration_api::VmAdapterInterface"
                    []
                    [ F ]
                    (Ty.apply
                      (Ty.path "openvm_circuit::arch::integration_api::BasicAdapterInterface")
                      [
                        Value.Integer IntegerKind.Usize 2;
                        Value.Integer IntegerKind.Usize 0;
                        Value.Integer IntegerKind.Usize 1;
                        Value.Integer IntegerKind.Usize 1
                      ]
                      [
                        F;
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::integration_api::MinimalInstruction")
                          []
                          [ F ]
                      ])
                    "Reads",
                  reads
                |) in
              M.match_operator (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.tuple
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                          []
                          [
                            F;
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::arch::integration_api::BasicAdapterInterface")
                              [
                                Value.Integer IntegerKind.Usize 2;
                                Value.Integer IntegerKind.Usize 0;
                                Value.Integer IntegerKind.Usize 1;
                                Value.Integer IntegerKind.Usize 1
                              ]
                              [
                                F;
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::arch::integration_api::MinimalInstruction")
                                  []
                                  [ F ]
                              ]
                          ];
                        Ty.apply
                          (Ty.path
                            "openvm_circuit::system::public_values::core::PublicValuesRecord")
                          []
                          [ F ]
                      ];
                    Ty.path "openvm_circuit::arch::execution::ExecutionError"
                  ],
                reads,
                [
                  fun γ =>
                    ltac:(M.monadic
                      (let γ0_0 := M.SubPointer.get_slice_index (| γ, 0 |) in
                      let γ0_1 := M.SubPointer.get_slice_index (| γ, 1 |) in
                      let γ1_0 := M.SubPointer.get_slice_index (| γ0_0, 0 |) in
                      let value := M.copy (| F, γ1_0 |) in
                      let γ1_0 := M.SubPointer.get_slice_index (| γ0_1, 0 |) in
                      let index := M.copy (| F, γ1_0 |) in
                      M.read (|
                        let~ _ : Ty.tuple [] :=
                          M.read (|
                            let~ idx : Ty.path "usize" :=
                              M.cast
                                (Ty.path "usize")
                                (M.call_closure (|
                                  Ty.path "u32",
                                  M.get_trait_method (|
                                    "p3_field::field::PrimeField32",
                                    F,
                                    [],
                                    [],
                                    "as_canonical_u32",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, index |) ]
                                |)) in
                            let~ custom_pvs :
                                Ty.apply
                                  (Ty.path "std::sync::mutex::MutexGuard")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply (Ty.path "core::option::Option") [] [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ] :=
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "std::sync::mutex::MutexGuard")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "alloc::vec::Vec")
                                      []
                                      [
                                        Ty.apply (Ty.path "core::option::Option") [] [ F ];
                                        Ty.path "alloc::alloc::Global"
                                      ]
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::MutexGuard")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply (Ty.path "core::option::Option") [] [ F ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ];
                                      Ty.apply
                                        (Ty.path "std::sync::poison::PoisonError")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "std::sync::mutex::MutexGuard")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "alloc::vec::Vec")
                                                []
                                                [
                                                  Ty.apply
                                                    (Ty.path "core::option::Option")
                                                    []
                                                    [ F ];
                                                  Ty.path "alloc::alloc::Global"
                                                ]
                                            ]
                                        ]
                                    ],
                                  "unwrap",
                                  [],
                                  []
                                |),
                                [
                                  M.call_closure (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "std::sync::mutex::MutexGuard")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply (Ty.path "core::option::Option") [] [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ]
                                          ];
                                        Ty.apply
                                          (Ty.path "std::sync::poison::PoisonError")
                                          []
                                          [
                                            Ty.apply
                                              (Ty.path "std::sync::mutex::MutexGuard")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "alloc::vec::Vec")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [ F ];
                                                    Ty.path "alloc::alloc::Global"
                                                  ]
                                              ]
                                          ]
                                      ],
                                    M.get_associated_function (|
                                      Ty.apply
                                        (Ty.path "std::sync::mutex::Mutex")
                                        []
                                        [
                                          Ty.apply
                                            (Ty.path "alloc::vec::Vec")
                                            []
                                            [
                                              Ty.apply (Ty.path "core::option::Option") [] [ F ];
                                              Ty.path "alloc::alloc::Global"
                                            ]
                                        ],
                                      "lock",
                                      [],
                                      []
                                    |),
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_circuit::system::public_values::core::PublicValuesCoreChip",
                                          "custom_pvs"
                                        |)
                                      |)
                                    ]
                                  |)
                                ]
                              |) in
                            M.alloc (|
                              Ty.tuple [],
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ :=
                                        M.use
                                          (M.alloc (|
                                            Ty.path "bool",
                                            M.call_closure (|
                                              Ty.path "bool",
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "core::option::Option") [] [ F ],
                                                "is_none",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.call_closure (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.apply
                                                            (Ty.path "core::option::Option")
                                                            []
                                                            [ F ]
                                                        ],
                                                      M.get_trait_method (|
                                                        "core::ops::index::Index",
                                                        Ty.apply
                                                          (Ty.path "alloc::vec::Vec")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "core::option::Option")
                                                              []
                                                              [ F ];
                                                            Ty.path "alloc::alloc::Global"
                                                          ],
                                                        [],
                                                        [ Ty.path "usize" ],
                                                        "index",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.call_closure (|
                                                              Ty.apply
                                                                (Ty.path "&")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "alloc::vec::Vec")
                                                                    []
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path
                                                                          "core::option::Option")
                                                                        []
                                                                        [ F ];
                                                                      Ty.path "alloc::alloc::Global"
                                                                    ]
                                                                ],
                                                              M.get_trait_method (|
                                                                "core::ops::deref::Deref",
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "std::sync::mutex::MutexGuard")
                                                                  []
                                                                  [
                                                                    Ty.apply
                                                                      (Ty.path "alloc::vec::Vec")
                                                                      []
                                                                      [
                                                                        Ty.apply
                                                                          (Ty.path
                                                                            "core::option::Option")
                                                                          []
                                                                          [ F ];
                                                                        Ty.path
                                                                          "alloc::alloc::Global"
                                                                      ]
                                                                  ],
                                                                [],
                                                                [],
                                                                "deref",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  custom_pvs
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |);
                                                        M.read (| idx |)
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |)) in
                                      let _ :=
                                        is_constant_or_break_match (|
                                          M.read (| γ |),
                                          Value.Bool true
                                        |) in
                                      M.read (|
                                        let~ _ : Ty.tuple [] :=
                                          M.write (|
                                            M.deref (|
                                              M.call_closure (|
                                                Ty.apply
                                                  (Ty.path "&mut")
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path "core::option::Option")
                                                      []
                                                      [ F ]
                                                  ],
                                                M.get_trait_method (|
                                                  "core::ops::index::IndexMut",
                                                  Ty.apply
                                                    (Ty.path "alloc::vec::Vec")
                                                    []
                                                    [
                                                      Ty.apply
                                                        (Ty.path "core::option::Option")
                                                        []
                                                        [ F ];
                                                      Ty.path "alloc::alloc::Global"
                                                    ],
                                                  [],
                                                  [ Ty.path "usize" ],
                                                  "index_mut",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.MutRef,
                                                    M.deref (|
                                                      M.call_closure (|
                                                        Ty.apply
                                                          (Ty.path "&mut")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path "alloc::vec::Vec")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path "core::option::Option")
                                                                  []
                                                                  [ F ];
                                                                Ty.path "alloc::alloc::Global"
                                                              ]
                                                          ],
                                                        M.get_trait_method (|
                                                          "core::ops::deref::DerefMut",
                                                          Ty.apply
                                                            (Ty.path "std::sync::mutex::MutexGuard")
                                                            []
                                                            [
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.apply
                                                                    (Ty.path "core::option::Option")
                                                                    []
                                                                    [ F ];
                                                                  Ty.path "alloc::alloc::Global"
                                                                ]
                                                            ],
                                                          [],
                                                          [],
                                                          "deref_mut",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.MutRef,
                                                            custom_pvs
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |);
                                                  M.read (| idx |)
                                                ]
                                              |)
                                            |),
                                            Value.StructTuple
                                              "core::option::Option::Some"
                                              []
                                              [ F ]
                                              [ M.read (| value |) ]
                                          |) in
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                      |)));
                                  fun γ =>
                                    ltac:(M.monadic
                                      (M.never_to_any (|
                                        M.call_closure (|
                                          Ty.path "never",
                                          M.get_function (| "core::panicking::panic_fmt", [], [] |),
                                          [
                                            M.call_closure (|
                                              Ty.path "core::fmt::Arguments",
                                              M.get_associated_function (|
                                                Ty.path "core::fmt::Arguments",
                                                "new_v1",
                                                [
                                                  Value.Integer IntegerKind.Usize 2;
                                                  Value.Integer IntegerKind.Usize 1
                                                ],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Value.Integer IntegerKind.Usize 2 ]
                                                          [
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "str" ]
                                                          ],
                                                        Value.Array
                                                          [
                                                            mk_str (| "Custom public value " |);
                                                            mk_str (| " already set" |)
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (|
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.apply
                                                          (Ty.path "array")
                                                          [ Value.Integer IntegerKind.Usize 1 ]
                                                          [ Ty.path "core::fmt::rt::Argument" ],
                                                        Value.Array
                                                          [
                                                            M.call_closure (|
                                                              Ty.path "core::fmt::rt::Argument",
                                                              M.get_associated_function (|
                                                                Ty.path "core::fmt::rt::Argument",
                                                                "new_display",
                                                                [],
                                                                [ Ty.path "usize" ]
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (|
                                                                    M.borrow (|
                                                                      Pointer.Kind.Ref,
                                                                      idx
                                                                    |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          ]
                                        |)
                                      |)))
                                ]
                              |)
                            |)
                          |) in
                        let~ output :
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                              []
                              [
                                F;
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::arch::integration_api::BasicAdapterInterface")
                                  [
                                    Value.Integer IntegerKind.Usize 2;
                                    Value.Integer IntegerKind.Usize 0;
                                    Value.Integer IntegerKind.Usize 1;
                                    Value.Integer IntegerKind.Usize 1
                                  ]
                                  [
                                    F;
                                    Ty.apply
                                      (Ty.path
                                        "openvm_circuit::arch::integration_api::MinimalInstruction")
                                      []
                                      [ F ]
                                  ]
                              ] :=
                          Value.mkStructRecord
                            "openvm_circuit::arch::integration_api::AdapterRuntimeContext"
                            []
                            [
                              F;
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::arch::integration_api::BasicAdapterInterface")
                                [
                                  Value.Integer IntegerKind.Usize 2;
                                  Value.Integer IntegerKind.Usize 0;
                                  Value.Integer IntegerKind.Usize 1;
                                  Value.Integer IntegerKind.Usize 1
                                ]
                                [
                                  F;
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::arch::integration_api::MinimalInstruction")
                                    []
                                    [ F ]
                                ]
                            ]
                            [
                              ("to_pc",
                                Value.StructTuple
                                  "core::option::Option::None"
                                  []
                                  [ Ty.path "u32" ]
                                  []);
                              ("writes", Value.Array [])
                            ] in
                        let~ record :
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::public_values::core::PublicValuesRecord")
                              []
                              [ F ] :=
                          Value.mkStructRecord
                            "openvm_circuit::system::public_values::core::PublicValuesRecord"
                            []
                            [ F ]
                            [ ("value", M.read (| value |)); ("index", M.read (| index |)) ] in
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::arch::integration_api::BasicAdapterInterface")
                                        [
                                          Value.Integer IntegerKind.Usize 2;
                                          Value.Integer IntegerKind.Usize 0;
                                          Value.Integer IntegerKind.Usize 1;
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                        [
                                          F;
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::MinimalInstruction")
                                            []
                                            [ F ]
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::public_values::core::PublicValuesRecord")
                                    []
                                    [ F ]
                                ];
                              Ty.path "openvm_circuit::arch::execution::ExecutionError"
                            ],
                          Value.StructTuple
                            "core::result::Result::Ok"
                            []
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                    []
                                    [
                                      F;
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::arch::integration_api::BasicAdapterInterface")
                                        [
                                          Value.Integer IntegerKind.Usize 2;
                                          Value.Integer IntegerKind.Usize 0;
                                          Value.Integer IntegerKind.Usize 1;
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                        [
                                          F;
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::arch::integration_api::MinimalInstruction")
                                            []
                                            [ F ]
                                        ]
                                    ];
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::public_values::core::PublicValuesRecord")
                                    []
                                    [ F ]
                                ];
                              Ty.path "openvm_circuit::arch::execution::ExecutionError"
                            ]
                            [ Value.Tuple [ M.read (| output |); M.read (| record |) ] ]
                        |)
                      |)))
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn get_opcode_name(&self, opcode: usize) -> String {
                format!(
                    "{:?}",
                    PublishOpcode::from_usize(opcode - PublishOpcode::CLASS_OFFSET)
                )
            }
        *)
        Definition get_opcode_name
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; opcode ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let opcode := M.alloc (| Ty.path "usize", opcode |) in
              M.call_closure (|
                Ty.path "alloc::string::String",
                M.get_function (|
                  "core::hint::must_use",
                  [],
                  [ Ty.path "alloc::string::String" ]
                |),
                [
                  M.read (|
                    let~ res : Ty.path "alloc::string::String" :=
                      M.call_closure (|
                        Ty.path "alloc::string::String",
                        M.get_function (| "alloc::fmt::format", [], [] |),
                        [
                          M.call_closure (|
                            Ty.path "core::fmt::Arguments",
                            M.get_associated_function (|
                              Ty.path "core::fmt::Arguments",
                              "new_v1",
                              [ Value.Integer IntegerKind.Usize 1; Value.Integer IntegerKind.Usize 1
                              ],
                              []
                            |),
                            [
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                      Value.Array [ mk_str (| "" |) ]
                                    |)
                                  |)
                                |)
                              |);
                              M.borrow (|
                                Pointer.Kind.Ref,
                                M.deref (|
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.alloc (|
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 1 ]
                                        [ Ty.path "core::fmt::rt::Argument" ],
                                      Value.Array
                                        [
                                          M.call_closure (|
                                            Ty.path "core::fmt::rt::Argument",
                                            M.get_associated_function (|
                                              Ty.path "core::fmt::rt::Argument",
                                              "new_debug",
                                              [],
                                              [ Ty.path "openvm_instructions::PublishOpcode" ]
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      Ty.path "openvm_instructions::PublishOpcode",
                                                      M.call_closure (|
                                                        Ty.path
                                                          "openvm_instructions::PublishOpcode",
                                                        M.get_trait_method (|
                                                          "openvm_instructions::LocalOpcode",
                                                          Ty.path
                                                            "openvm_instructions::PublishOpcode",
                                                          [],
                                                          [],
                                                          "from_usize",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            BinOp.Wrap.sub,
                                                            [
                                                              M.read (| opcode |);
                                                              M.read (|
                                                                get_constant (|
                                                                  "openvm_instructions::LocalOpcode::CLASS_OFFSET",
                                                                  Ty.path "usize"
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                    |)
                                  |)
                                |)
                              |)
                            ]
                          |)
                        ]
                      |) in
                    res
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn generate_trace_row(&self, row_slice: &mut [F], record: Self::Record) {
                let mut cols = PublicValuesCoreColsView::<_, &mut F>::borrow_mut(row_slice);
                debug_assert_eq!(cols.width(), BaseAir::<F>::width(&self.air));
                *cols.is_valid = F::ONE;
                *cols.value = record.value;
                *cols.index = record.index;
                let idx: usize = record.index.as_canonical_u32() as usize;
                let pt = self.air.encoder.get_flag_pt(idx);
                for (i, var) in cols.custom_pv_vars.iter_mut().enumerate() {
                    **var = F::from_canonical_u32(pt[i]);
                }
            }
        *)
        Definition generate_trace_row
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self; row_slice; record ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                        []
                        [ F ]
                    ],
                  self
                |) in
              let row_slice :=
                M.alloc (|
                  Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                  row_slice
                |) in
              let record :=
                M.alloc (|
                  Ty.associated_in_trait
                    "openvm_circuit::arch::integration_api::VmCoreChip"
                    []
                    [
                      F;
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::BasicAdapterInterface")
                        [
                          Value.Integer IntegerKind.Usize 2;
                          Value.Integer IntegerKind.Usize 0;
                          Value.Integer IntegerKind.Usize 1;
                          Value.Integer IntegerKind.Usize 1
                        ]
                        [
                          F;
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::MinimalInstruction")
                            []
                            [ F ]
                        ]
                    ]
                    (Ty.apply
                      (Ty.path "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                      []
                      [ F ])
                    "Record",
                  record
                |) in
              M.read (|
                let~ cols :
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView")
                      []
                      [ F; Ty.apply (Ty.path "&mut") [] [ F ] ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView")
                      []
                      [ F; Ty.apply (Ty.path "&mut") [] [ F ] ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView")
                        []
                        [ F; Ty.apply (Ty.path "&mut") [] [ F ] ],
                      "borrow_mut",
                      [],
                      []
                    |),
                    [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| row_slice |) |) |) ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.match_operator (|
                    Ty.tuple [],
                    M.alloc (| Ty.tuple [], Value.Tuple [] |),
                    [
                      fun γ =>
                        ltac:(M.monadic
                          (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                          let _ :=
                            is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                          M.read (|
                            let~ _ : Ty.tuple [] :=
                              M.match_operator (|
                                Ty.tuple [],
                                M.alloc (|
                                  Ty.tuple
                                    [
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                      Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                    ],
                                  Value.Tuple
                                    [
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.path "usize",
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView")
                                                []
                                                [ F; Ty.apply (Ty.path "&mut") [] [ F ] ],
                                              "width",
                                              [],
                                              []
                                            |),
                                            [ M.borrow (| Pointer.Kind.Ref, cols |) ]
                                          |)
                                        |)
                                      |);
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.path "usize",
                                          M.call_closure (|
                                            Ty.path "usize",
                                            M.get_trait_method (|
                                              "p3_air::air::BaseAir",
                                              Ty.path
                                                "openvm_circuit::system::public_values::core::PublicValuesCoreAir",
                                              [],
                                              [ F ],
                                              "width",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (|
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.SubPointer.get_struct_record_field (|
                                                      M.deref (| M.read (| self |) |),
                                                      "openvm_circuit::system::public_values::core::PublicValuesCoreChip",
                                                      "air"
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |)
                                      |)
                                    ]
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                      let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                      let left_val :=
                                        M.copy (|
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                          γ0_0
                                        |) in
                                      let right_val :=
                                        M.copy (|
                                          Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                          γ0_1
                                        |) in
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ :=
                                                M.use
                                                  (M.alloc (|
                                                    Ty.path "bool",
                                                    UnOp.not (|
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        BinOp.eq,
                                                        [
                                                          M.read (|
                                                            M.deref (| M.read (| left_val |) |)
                                                          |);
                                                          M.read (|
                                                            M.deref (| M.read (| right_val |) |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)) in
                                              let _ :=
                                                is_constant_or_break_match (|
                                                  M.read (| γ |),
                                                  Value.Bool true
                                                |) in
                                              M.never_to_any (|
                                                M.read (|
                                                  let~ kind :
                                                      Ty.path "core::panicking::AssertKind" :=
                                                    Value.StructTuple
                                                      "core::panicking::AssertKind::Eq"
                                                      []
                                                      []
                                                      [] in
                                                  M.alloc (|
                                                    Ty.path "never",
                                                    M.call_closure (|
                                                      Ty.path "never",
                                                      M.get_function (|
                                                        "core::panicking::assert_failed",
                                                        [],
                                                        [ Ty.path "usize"; Ty.path "usize" ]
                                                      |),
                                                      [
                                                        M.read (| kind |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| left_val |) |)
                                                            |)
                                                          |)
                                                        |);
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (|
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| right_val |) |)
                                                            |)
                                                          |)
                                                        |);
                                                        Value.StructTuple
                                                          "core::option::Option::None"
                                                          []
                                                          [ Ty.path "core::fmt::Arguments" ]
                                                          []
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              |)));
                                          fun γ => ltac:(M.monadic (Value.Tuple []))
                                        ]
                                      |)))
                                ]
                              |) in
                            M.alloc (| Ty.tuple [], Value.Tuple [] |)
                          |)));
                      fun γ => ltac:(M.monadic (Value.Tuple []))
                    ]
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.write (|
                    M.deref (|
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          cols,
                          "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView",
                          "is_valid"
                        |)
                      |)
                    |),
                    M.read (| get_constant (| "p3_field::field::FieldAlgebra::ONE", F |) |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.write (|
                    M.deref (|
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          cols,
                          "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView",
                          "value"
                        |)
                      |)
                    |),
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        record,
                        "openvm_circuit::system::public_values::core::PublicValuesRecord",
                        "value"
                      |)
                    |)
                  |) in
                let~ _ : Ty.tuple [] :=
                  M.write (|
                    M.deref (|
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          cols,
                          "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView",
                          "index"
                        |)
                      |)
                    |),
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        record,
                        "openvm_circuit::system::public_values::core::PublicValuesRecord",
                        "index"
                      |)
                    |)
                  |) in
                let~ idx : Ty.path "usize" :=
                  M.cast
                    (Ty.path "usize")
                    (M.call_closure (|
                      Ty.path "u32",
                      M.get_trait_method (|
                        "p3_field::field::PrimeField32",
                        F,
                        [],
                        [],
                        "as_canonical_u32",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            record,
                            "openvm_circuit::system::public_values::core::PublicValuesRecord",
                            "index"
                          |)
                        |)
                      ]
                    |)) in
                let~ pt :
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ] :=
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "alloc::vec::Vec")
                      []
                      [ Ty.path "u32"; Ty.path "alloc::alloc::Global" ],
                    M.get_associated_function (|
                      Ty.path "openvm_circuit_primitives::encoder::Encoder",
                      "get_flag_pt",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.SubPointer.get_struct_record_field (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_circuit::system::public_values::core::PublicValuesCoreChip",
                            "air"
                          |),
                          "openvm_circuit::system::public_values::core::PublicValuesCoreAir",
                          "encoder"
                        |)
                      |);
                      M.read (| idx |)
                    ]
                  |) in
                M.use
                  (M.alloc (|
                    Ty.tuple [],
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::iter::adapters::enumerate::Enumerate")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::IterMut")
                              []
                              [ Ty.apply (Ty.path "&mut") [] [ F ] ]
                          ],
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::enumerate::Enumerate")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::IterMut")
                                []
                                [ Ty.apply (Ty.path "&mut") [] [ F ] ]
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::collect::IntoIterator",
                            Ty.apply
                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::slice::iter::IterMut")
                                  []
                                  [ Ty.apply (Ty.path "&mut") [] [ F ] ]
                              ],
                            [],
                            [],
                            "into_iter",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "core::slice::iter::IterMut")
                                    []
                                    [ Ty.apply (Ty.path "&mut") [] [ F ] ]
                                ],
                              M.get_trait_method (|
                                "core::iter::traits::iterator::Iterator",
                                Ty.apply
                                  (Ty.path "core::slice::iter::IterMut")
                                  []
                                  [ Ty.apply (Ty.path "&mut") [] [ F ] ],
                                [],
                                [],
                                "enumerate",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "core::slice::iter::IterMut")
                                    []
                                    [ Ty.apply (Ty.path "&mut") [] [ F ] ],
                                  M.get_associated_function (|
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [ Ty.apply (Ty.path "&mut") [] [ F ] ],
                                    "iter_mut",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (|
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "&mut")
                                            []
                                            [
                                              Ty.apply
                                                (Ty.path "slice")
                                                []
                                                [ Ty.apply (Ty.path "&mut") [] [ F ] ]
                                            ],
                                          M.get_trait_method (|
                                            "core::ops::deref::DerefMut",
                                            Ty.apply
                                              (Ty.path "alloc::vec::Vec")
                                              []
                                              [
                                                Ty.apply (Ty.path "&mut") [] [ F ];
                                                Ty.path "alloc::alloc::Global"
                                              ],
                                            [],
                                            [],
                                            "deref_mut",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.SubPointer.get_struct_record_field (|
                                                cols,
                                                "openvm_circuit::system::public_values::columns::PublicValuesCoreColsView",
                                                "custom_pv_vars"
                                              |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let iter :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "core::slice::iter::IterMut")
                                      []
                                      [ Ty.apply (Ty.path "&mut") [] [ F ] ]
                                  ],
                                γ
                              |) in
                            M.read (|
                              M.loop (|
                                Ty.tuple [],
                                ltac:(M.monadic
                                  (let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.apply
                                          (Ty.path "core::option::Option")
                                          []
                                          [
                                            Ty.tuple
                                              [
                                                Ty.path "usize";
                                                Ty.apply
                                                  (Ty.path "&mut")
                                                  []
                                                  [ Ty.apply (Ty.path "&mut") [] [ F ] ]
                                              ]
                                          ],
                                        M.call_closure (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [
                                              Ty.tuple
                                                [
                                                  Ty.path "usize";
                                                  Ty.apply
                                                    (Ty.path "&mut")
                                                    []
                                                    [ Ty.apply (Ty.path "&mut") [] [ F ] ]
                                                ]
                                            ],
                                          M.get_trait_method (|
                                            "core::iter::traits::iterator::Iterator",
                                            Ty.apply
                                              (Ty.path "core::iter::adapters::enumerate::Enumerate")
                                              []
                                              [
                                                Ty.apply
                                                  (Ty.path "core::slice::iter::IterMut")
                                                  []
                                                  [ Ty.apply (Ty.path "&mut") [] [ F ] ]
                                              ],
                                            [],
                                            [],
                                            "next",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.MutRef,
                                              M.deref (| M.borrow (| Pointer.Kind.MutRef, iter |) |)
                                            |)
                                          ]
                                        |)
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let _ :=
                                              M.is_struct_tuple (|
                                                γ,
                                                "core::option::Option::None"
                                              |) in
                                            M.never_to_any (| M.read (| M.break (||) |) |)));
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 :=
                                              M.SubPointer.get_struct_tuple_field (|
                                                γ,
                                                "core::option::Option::Some",
                                                0
                                              |) in
                                            let γ1_0 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 0 |) in
                                            let γ1_1 :=
                                              M.SubPointer.get_tuple_field (| γ0_0, 1 |) in
                                            let i := M.copy (| Ty.path "usize", γ1_0 |) in
                                            let var :=
                                              M.copy (|
                                                Ty.apply
                                                  (Ty.path "&mut")
                                                  []
                                                  [ Ty.apply (Ty.path "&mut") [] [ F ] ],
                                                γ1_1
                                              |) in
                                            M.read (|
                                              let~ _ : Ty.tuple [] :=
                                                M.write (|
                                                  M.deref (|
                                                    M.read (| M.deref (| M.read (| var |) |) |)
                                                  |),
                                                  M.call_closure (|
                                                    F,
                                                    M.get_trait_method (|
                                                      "p3_field::field::FieldAlgebra",
                                                      F,
                                                      [],
                                                      [],
                                                      "from_canonical_u32",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.read (|
                                                        M.deref (|
                                                          M.call_closure (|
                                                            Ty.apply
                                                              (Ty.path "&")
                                                              []
                                                              [ Ty.path "u32" ],
                                                            M.get_trait_method (|
                                                              "core::ops::index::Index",
                                                              Ty.apply
                                                                (Ty.path "alloc::vec::Vec")
                                                                []
                                                                [
                                                                  Ty.path "u32";
                                                                  Ty.path "alloc::alloc::Global"
                                                                ],
                                                              [],
                                                              [ Ty.path "usize" ],
                                                              "index",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (| Pointer.Kind.Ref, pt |);
                                                              M.read (| i |)
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    ]
                                                  |)
                                                |) in
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                              |)
                            |)))
                      ]
                    |)
                  |))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn generate_public_values(&self) -> Vec<F> {
                self.get_custom_public_values()
                    .into_iter()
                    .map(|x| x.unwrap_or(F::ZERO))
                    .collect()
            }
        *)
        Definition generate_public_values
            (F : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.call_closure (|
                Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ],
                M.get_trait_method (|
                  "core::iter::traits::iterator::Iterator",
                  Ty.apply
                    (Ty.path "core::iter::adapters::map::Map")
                    []
                    [
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [
                          Ty.apply (Ty.path "core::option::Option") [] [ F ];
                          Ty.path "alloc::alloc::Global"
                        ];
                      Ty.function [ Ty.apply (Ty.path "core::option::Option") [] [ F ] ] F
                    ],
                  [],
                  [],
                  "collect",
                  [],
                  [ Ty.apply (Ty.path "alloc::vec::Vec") [] [ F; Ty.path "alloc::alloc::Global" ] ]
                |),
                [
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::iter::adapters::map::Map")
                      []
                      [
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [
                            Ty.apply (Ty.path "core::option::Option") [] [ F ];
                            Ty.path "alloc::alloc::Global"
                          ];
                        Ty.function [ Ty.apply (Ty.path "core::option::Option") [] [ F ] ] F
                      ],
                    M.get_trait_method (|
                      "core::iter::traits::iterator::Iterator",
                      Ty.apply
                        (Ty.path "alloc::vec::into_iter::IntoIter")
                        []
                        [
                          Ty.apply (Ty.path "core::option::Option") [] [ F ];
                          Ty.path "alloc::alloc::Global"
                        ],
                      [],
                      [],
                      "map",
                      [],
                      [ F; Ty.function [ Ty.apply (Ty.path "core::option::Option") [] [ F ] ] F ]
                    |),
                    [
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "alloc::vec::into_iter::IntoIter")
                          []
                          [
                            Ty.apply (Ty.path "core::option::Option") [] [ F ];
                            Ty.path "alloc::alloc::Global"
                          ],
                        M.get_trait_method (|
                          "core::iter::traits::collect::IntoIterator",
                          Ty.apply
                            (Ty.path "alloc::vec::Vec")
                            []
                            [
                              Ty.apply (Ty.path "core::option::Option") [] [ F ];
                              Ty.path "alloc::alloc::Global"
                            ],
                          [],
                          [],
                          "into_iter",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "alloc::vec::Vec")
                              []
                              [
                                Ty.apply (Ty.path "core::option::Option") [] [ F ];
                                Ty.path "alloc::alloc::Global"
                              ],
                            M.get_associated_function (|
                              Ty.apply
                                (Ty.path
                                  "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                                []
                                [ F ],
                              "get_custom_public_values",
                              [],
                              []
                            |),
                            [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                          |)
                        ]
                      |);
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  F,
                                  M.alloc (|
                                    Ty.apply (Ty.path "core::option::Option") [] [ F ],
                                    α0
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let x :=
                                          M.copy (|
                                            Ty.apply (Ty.path "core::option::Option") [] [ F ],
                                            γ
                                          |) in
                                        M.call_closure (|
                                          F,
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "core::option::Option") [] [ F ],
                                            "unwrap_or",
                                            [],
                                            []
                                          |),
                                          [
                                            M.read (| x |);
                                            M.read (|
                                              get_constant (|
                                                "p3_field::field::FieldAlgebra::ZERO",
                                                F
                                              |)
                                            |)
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        (*
            fn air(&self) -> &Self::Air {
                &self.air
            }
        *)
        Definition air (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          let Self : Ty.t := Self F in
          match ε, τ, α with
          | [], [], [ self ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::public_values::core::PublicValuesCoreChip")
                        []
                        [ F ]
                    ],
                  self
                |) in
              M.borrow (|
                Pointer.Kind.Ref,
                M.deref (|
                  M.borrow (|
                    Pointer.Kind.Ref,
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| self |) |),
                      "openvm_circuit::system::public_values::core::PublicValuesCoreChip",
                      "air"
                    |)
                  |)
                |)
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (F : Ty.t),
          M.IsTraitInstance
            "openvm_circuit::arch::integration_api::VmCoreChip"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *)
            [
              F;
              Ty.apply
                (Ty.path "openvm_circuit::arch::integration_api::BasicAdapterInterface")
                [
                  Value.Integer IntegerKind.Usize 2;
                  Value.Integer IntegerKind.Usize 0;
                  Value.Integer IntegerKind.Usize 1;
                  Value.Integer IntegerKind.Usize 1
                ]
                [
                  F;
                  Ty.apply
                    (Ty.path "openvm_circuit::arch::integration_api::MinimalInstruction")
                    []
                    [ F ]
                ]
            ]
            (Self F)
            (* Instance *)
            [
              ("Record", InstanceField.Ty (_Record F));
              ("Air", InstanceField.Ty (_Air F));
              ("execute_instruction", InstanceField.Method (execute_instruction F));
              ("get_opcode_name", InstanceField.Method (get_opcode_name F));
              ("generate_trace_row", InstanceField.Method (generate_trace_row F));
              ("generate_public_values", InstanceField.Method (generate_public_values F));
              ("air", InstanceField.Method (air F))
            ].
      End Impl_openvm_circuit_arch_integration_api_VmCoreChip_where_p3_field_field_PrimeField32_F_F_openvm_circuit_arch_integration_api_BasicAdapterInterface_Usize_2_Usize_0_Usize_1_Usize_1_F_openvm_circuit_arch_integration_api_MinimalInstruction_F_for_openvm_circuit_system_public_values_core_PublicValuesCoreChip_F.
    End core.
  End public_values.
End system.
