(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module utils.
  Module test_utils.
    (*
    pub fn i32_to_f<F: PrimeField32>(val: i32) -> F {
        if val.signum() == -1 {
            -F::from_canonical_u32(val.unsigned_abs())
        } else {
            F::from_canonical_u32(val as u32)
        }
    }
    *)
    Definition i32_to_f (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [], [ F ], [ val ] =>
        ltac:(M.monadic
          (let val := M.alloc (| Ty.path "i32", val |) in
          M.match_operator (|
            F,
            M.alloc (| Ty.tuple [], Value.Tuple [] |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        Ty.path "bool",
                        M.call_closure (|
                          Ty.path "bool",
                          BinOp.eq,
                          [
                            M.call_closure (|
                              Ty.path "i32",
                              M.get_associated_function (| Ty.path "i32", "signum", [], [] |),
                              [ M.read (| val |) ]
                            |);
                            Value.Integer IntegerKind.I32 (-1)
                          ]
                        |)
                      |)) in
                  let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.call_closure (|
                    F,
                    M.get_trait_method (| "core::ops::arith::Neg", F, [], [], "neg", [], [] |),
                    [
                      M.call_closure (|
                        F,
                        M.get_trait_method (|
                          "p3_field::field::FieldAlgebra",
                          F,
                          [],
                          [],
                          "from_canonical_u32",
                          [],
                          []
                        |),
                        [
                          M.call_closure (|
                            Ty.path "u32",
                            M.get_associated_function (| Ty.path "i32", "unsigned_abs", [], [] |),
                            [ M.read (| val |) ]
                          |)
                        ]
                      |)
                    ]
                  |)));
              fun γ =>
                ltac:(M.monadic
                  (M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "from_canonical_u32",
                      [],
                      []
                    |),
                    [ M.cast (Ty.path "u32") (M.read (| val |)) ]
                  |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_i32_to_f :
      M.IsFunction.C "openvm_circuit::utils::test_utils::i32_to_f" i32_to_f.
    Admitted.
    Global Typeclasses Opaque i32_to_f.
    
    (*
    pub fn generate_long_number<const NUM_LIMBS: usize, const LIMB_BITS: usize>(
        rng: &mut StdRng,
    ) -> [u32; NUM_LIMBS] {
        array::from_fn(|_| rng.gen_range(0..(1 << LIMB_BITS)))
    }
    *)
    Definition generate_long_number (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [ NUM_LIMBS; LIMB_BITS ], [], [ rng ] =>
        ltac:(M.monadic
          (let rng :=
            M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "rand::rngs::std::StdRng" ], rng |) in
          M.call_closure (|
            Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
            M.get_function (|
              "core::array::from_fn",
              [ NUM_LIMBS ],
              [ Ty.path "u32"; Ty.function [ Ty.path "usize" ] (Ty.path "u32") ]
            |),
            [
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.path "u32",
                          M.alloc (| Ty.path "usize", α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (M.call_closure (|
                                  Ty.path "u32",
                                  M.get_trait_method (|
                                    "rand::rng::Rng",
                                    Ty.path "rand::rngs::std::StdRng",
                                    [],
                                    [],
                                    "gen_range",
                                    [],
                                    [
                                      Ty.path "u32";
                                      Ty.apply
                                        (Ty.path "core::ops::range::Range")
                                        []
                                        [ Ty.path "u32" ]
                                    ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.deref (| M.read (| rng |) |)
                                    |);
                                    Value.mkStructRecord
                                      "core::ops::range::Range"
                                      []
                                      [ Ty.path "u32" ]
                                      [
                                        ("start", Value.Integer IntegerKind.U32 0);
                                        ("end_",
                                          M.call_closure (|
                                            Ty.path "u32",
                                            BinOp.Wrap.shl,
                                            [ Value.Integer IntegerKind.U32 1; LIMB_BITS ]
                                          |))
                                      ]
                                  ]
                                |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_generate_long_number :
      M.IsFunction.C "openvm_circuit::utils::test_utils::generate_long_number" generate_long_number.
    Admitted.
    Global Typeclasses Opaque generate_long_number.
    
    (*
    pub fn u32_into_limbs<const NUM_LIMBS: usize, const LIMB_BITS: usize>(
        num: u32,
    ) -> [u32; NUM_LIMBS] {
        array::from_fn(|i| (num >> (LIMB_BITS * i)) & ((1 << LIMB_BITS) - 1))
    }
    *)
    Definition u32_into_limbs (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [ NUM_LIMBS; LIMB_BITS ], [], [ num ] =>
        ltac:(M.monadic
          (let num := M.alloc (| Ty.path "u32", num |) in
          M.call_closure (|
            Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
            M.get_function (|
              "core::array::from_fn",
              [ NUM_LIMBS ],
              [ Ty.path "u32"; Ty.function [ Ty.path "usize" ] (Ty.path "u32") ]
            |),
            [
              M.closure
                (fun γ =>
                  ltac:(M.monadic
                    match γ with
                    | [ α0 ] =>
                      ltac:(M.monadic
                        (M.match_operator (|
                          Ty.path "u32",
                          M.alloc (| Ty.path "usize", α0 |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let i := M.copy (| Ty.path "usize", γ |) in
                                M.call_closure (|
                                  Ty.path "u32",
                                  BinOp.Wrap.bit_and,
                                  [
                                    M.call_closure (|
                                      Ty.path "u32",
                                      BinOp.Wrap.shr,
                                      [
                                        M.read (| num |);
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.mul,
                                          [ LIMB_BITS; M.read (| i |) ]
                                        |)
                                      ]
                                    |);
                                    M.call_closure (|
                                      Ty.path "u32",
                                      BinOp.Wrap.sub,
                                      [
                                        M.call_closure (|
                                          Ty.path "u32",
                                          BinOp.Wrap.shl,
                                          [ Value.Integer IntegerKind.U32 1; LIMB_BITS ]
                                        |);
                                        Value.Integer IntegerKind.U32 1
                                      ]
                                    |)
                                  ]
                                |)))
                          ]
                        |)))
                    | _ => M.impossible "wrong number of arguments"
                    end))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_u32_into_limbs :
      M.IsFunction.C "openvm_circuit::utils::test_utils::u32_into_limbs" u32_into_limbs.
    Admitted.
    Global Typeclasses Opaque u32_into_limbs.
    
    (*
    pub fn u32_sign_extend<const IMM_BITS: usize>(num: u32) -> u32 {
        if num & (1 << (IMM_BITS - 1)) != 0 {
            num | (u32::MAX - (1 << IMM_BITS) + 1)
        } else {
            num
        }
    }
    *)
    Definition u32_sign_extend (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [ IMM_BITS ], [], [ num ] =>
        ltac:(M.monadic
          (let num := M.alloc (| Ty.path "u32", num |) in
          M.match_operator (|
            Ty.path "u32",
            M.alloc (| Ty.tuple [], Value.Tuple [] |),
            [
              fun γ =>
                ltac:(M.monadic
                  (let γ :=
                    M.use
                      (M.alloc (|
                        Ty.path "bool",
                        M.call_closure (|
                          Ty.path "bool",
                          BinOp.ne,
                          [
                            M.call_closure (|
                              Ty.path "u32",
                              BinOp.Wrap.bit_and,
                              [
                                M.read (| num |);
                                M.call_closure (|
                                  Ty.path "u32",
                                  BinOp.Wrap.shl,
                                  [
                                    Value.Integer IntegerKind.U32 1;
                                    M.call_closure (|
                                      Ty.path "usize",
                                      BinOp.Wrap.sub,
                                      [ IMM_BITS; Value.Integer IntegerKind.Usize 1 ]
                                    |)
                                  ]
                                |)
                              ]
                            |);
                            Value.Integer IntegerKind.U32 0
                          ]
                        |)
                      |)) in
                  let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                  M.call_closure (|
                    Ty.path "u32",
                    BinOp.Wrap.bit_or,
                    [
                      M.read (| num |);
                      M.call_closure (|
                        Ty.path "u32",
                        BinOp.Wrap.add,
                        [
                          M.call_closure (|
                            Ty.path "u32",
                            BinOp.Wrap.sub,
                            [
                              M.read (|
                                get_associated_constant (| Ty.path "u32", "MAX", Ty.path "u32" |)
                              |);
                              M.call_closure (|
                                Ty.path "u32",
                                BinOp.Wrap.shl,
                                [ Value.Integer IntegerKind.U32 1; IMM_BITS ]
                              |)
                            ]
                          |);
                          Value.Integer IntegerKind.U32 1
                        ]
                      |)
                    ]
                  |)));
              fun γ => ltac:(M.monadic (M.read (| num |)))
            ]
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_u32_sign_extend :
      M.IsFunction.C "openvm_circuit::utils::test_utils::u32_sign_extend" u32_sign_extend.
    Admitted.
    Global Typeclasses Opaque u32_sign_extend.
  End test_utils.
End utils.
