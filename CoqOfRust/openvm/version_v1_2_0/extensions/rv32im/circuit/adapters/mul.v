(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module adapters.
  Module mul.
    (* StructRecord
      {
        name := "Rv32MultAdapterChip";
        const_params := [];
        ty_params := [ "F" ];
        fields :=
          [
            ("air", Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterAir");
            ("_marker", Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterChip_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip") [] [ F ].
      
      (* Debug *)
      Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                      []
                      [ F ]
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Rv32MultAdapterChip" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "air" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterAir" ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip",
                            "air"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "_marker" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ] ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ] ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip",
                                "_marker"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterChip_F.
    
    Module Impl_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterChip_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip") [] [ F ].
      
      (*
          pub fn new(
              execution_bus: ExecutionBus,
              program_bus: ProgramBus,
              memory_bridge: MemoryBridge,
          ) -> Self {
              Self {
                  air: Rv32MultAdapterAir {
                      execution_bridge: ExecutionBridge::new(execution_bus, program_bus),
                      memory_bridge,
                  },
                  _marker: PhantomData,
              }
          }
      *)
      Definition new (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ execution_bus; program_bus; memory_bridge ] =>
          ltac:(M.monadic
            (let execution_bus :=
              M.alloc (|
                Ty.path "openvm_circuit::arch::execution::ExecutionBus",
                execution_bus
              |) in
            let program_bus :=
              M.alloc (|
                Ty.path "openvm_circuit::system::program::bus::ProgramBus",
                program_bus
              |) in
            let memory_bridge :=
              M.alloc (|
                Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                memory_bridge
              |) in
            Value.mkStructRecord
              "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip"
              []
              [ F ]
              [
                ("air",
                  Value.mkStructRecord
                    "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterAir"
                    []
                    []
                    [
                      ("execution_bridge",
                        M.call_closure (|
                          Ty.path "openvm_circuit::arch::execution::ExecutionBridge",
                          M.get_associated_function (|
                            Ty.path "openvm_circuit::arch::execution::ExecutionBridge",
                            "new",
                            [],
                            []
                          |),
                          [ M.read (| execution_bus |); M.read (| program_bus |) ]
                        |));
                      ("memory_bridge", M.read (| memory_bridge |))
                    ]);
                ("_marker", Value.StructTuple "core::marker::PhantomData" [] [ F ] [])
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "new" (new F).
      Admitted.
      Global Typeclasses Opaque new.
    End Impl_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterChip_F.
    
    (* StructRecord
      {
        name := "Rv32MultReadRecord";
        const_params := [];
        ty_params := [];
        fields :=
          [
            ("rs1", Ty.path "openvm_circuit::system::memory::controller::RecordId");
            ("rs2", Ty.path "openvm_circuit::system::memory::controller::RecordId")
          ];
      } *)
    
    Module Impl_core_fmt_Debug_for_openvm_rv32im_circuit_adapters_mul_Rv32MultReadRecord.
      Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultReadRecord".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultReadRecord" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Rv32MultReadRecord" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "rs1" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::adapters::mul::Rv32MultReadRecord",
                            "rs1"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "rs2" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::adapters::mul::Rv32MultReadRecord",
                                "rs2"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_openvm_rv32im_circuit_adapters_mul_Rv32MultReadRecord.
    
    Module underscore.
      Module Impl_serde_ser_Serialize_for_openvm_rv32im_circuit_adapters_mul_Rv32MultReadRecord.
        Definition Self : Ty.t :=
          Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultReadRecord".
        
        (* Serialize *)
        Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultReadRecord" ],
                  self
                |) in
              let __serializer := M.alloc (| __S, __serializer |) in
              M.catch_return
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                  ]) (|
                ltac:(M.monadic
                  (M.read (|
                    let~ __serde_state :
                        Ty.associated_in_trait
                          "serde::ser::Serializer"
                          []
                          []
                          __S
                          "SerializeStruct" :=
                      M.match_operator (|
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  [],
                                  "serialize_struct",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  mk_str (| "Rv32MultReadRecord" |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.add,
                                        [
                                          M.cast (Ty.path "usize") (Value.Bool false);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val :=
                                M.copy (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  γ0_0
                                |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "rs1" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::adapters::mul::Rv32MultReadRecord",
                                          "rs1"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "rs2" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::adapters::mul::Rv32MultReadRecord",
                                          "rs2"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.get_trait_method (|
                          "serde::ser::SerializeStruct",
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          [],
                          [],
                          "end",
                          [],
                          []
                        |),
                        [ M.read (| __serde_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::ser::Serialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
      End Impl_serde_ser_Serialize_for_openvm_rv32im_circuit_adapters_mul_Rv32MultReadRecord.
      Module Impl_serde_de_Deserialize_for_openvm_rv32im_circuit_adapters_mul_Rv32MultReadRecord.
        Definition Self : Ty.t :=
          Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultReadRecord".
        
        (* Deserialize *)
        Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __D, __deserializer |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultReadRecord";
                    Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                  ],
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  [],
                  "deserialize_struct",
                  [],
                  [ Ty.path "openvm_rv32im_circuit::adapters::mul::_'1::deserialize::__Visitor" ]
                |),
                [
                  M.read (| __deserializer |);
                  mk_str (| "Rv32MultReadRecord" |);
                  M.read (|
                    get_constant (|
                      "openvm_rv32im_circuit::adapters::mul::_'1::deserialize::FIELDS",
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ]
                    |)
                  |);
                  Value.mkStructRecord
                    "openvm_rv32im_circuit::adapters::mul::_'1::deserialize::__Visitor"
                    []
                    []
                    [
                      ("marker",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultReadRecord" ]
                          []);
                      ("lifetime",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                          [])
                    ]
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::de::Deserialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
      End Impl_serde_de_Deserialize_for_openvm_rv32im_circuit_adapters_mul_Rv32MultReadRecord.
      Module Impl_serde_ser_Serialize_for_openvm_rv32im_circuit_adapters_mul_Rv32MultWriteRecord.
        Definition Self : Ty.t :=
          Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultWriteRecord".
        
        (* Serialize *)
        Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultWriteRecord" ],
                  self
                |) in
              let __serializer := M.alloc (| __S, __serializer |) in
              M.catch_return
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                  ]) (|
                ltac:(M.monadic
                  (M.read (|
                    let~ __serde_state :
                        Ty.associated_in_trait
                          "serde::ser::Serializer"
                          []
                          []
                          __S
                          "SerializeStruct" :=
                      M.match_operator (|
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  [],
                                  "serialize_struct",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  mk_str (| "Rv32MultWriteRecord" |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.add,
                                        [
                                          M.cast (Ty.path "usize") (Value.Bool false);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val :=
                                M.copy (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  γ0_0
                                |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                                      []
                                      [ Ty.path "u32" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "from_state" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::adapters::mul::Rv32MultWriteRecord",
                                          "from_state"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "rd_id" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::adapters::mul::Rv32MultWriteRecord",
                                          "rd_id"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.get_trait_method (|
                          "serde::ser::SerializeStruct",
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          [],
                          [],
                          "end",
                          [],
                          []
                        |),
                        [ M.read (| __serde_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::ser::Serialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
      End Impl_serde_ser_Serialize_for_openvm_rv32im_circuit_adapters_mul_Rv32MultWriteRecord.
      Module Impl_serde_de_Deserialize_for_openvm_rv32im_circuit_adapters_mul_Rv32MultWriteRecord.
        Definition Self : Ty.t :=
          Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultWriteRecord".
        
        (* Deserialize *)
        Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __D, __deserializer |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultWriteRecord";
                    Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                  ],
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  [],
                  "deserialize_struct",
                  [],
                  [ Ty.path "openvm_rv32im_circuit::adapters::mul::_'3::deserialize::__Visitor" ]
                |),
                [
                  M.read (| __deserializer |);
                  mk_str (| "Rv32MultWriteRecord" |);
                  M.read (|
                    get_constant (|
                      "openvm_rv32im_circuit::adapters::mul::_'3::deserialize::FIELDS",
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ]
                    |)
                  |);
                  Value.mkStructRecord
                    "openvm_rv32im_circuit::adapters::mul::_'3::deserialize::__Visitor"
                    []
                    []
                    [
                      ("marker",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultWriteRecord" ]
                          []);
                      ("lifetime",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                          [])
                    ]
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::de::Deserialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
      End Impl_serde_de_Deserialize_for_openvm_rv32im_circuit_adapters_mul_Rv32MultWriteRecord.
    End underscore.
    
    
    (* StructRecord
      {
        name := "Rv32MultWriteRecord";
        const_params := [];
        ty_params := [];
        fields :=
          [
            ("from_state",
              Ty.apply
                (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                []
                [ Ty.path "u32" ]);
            ("rd_id", Ty.path "openvm_circuit::system::memory::controller::RecordId")
          ];
      } *)
    
    Module Impl_core_fmt_Debug_for_openvm_rv32im_circuit_adapters_mul_Rv32MultWriteRecord.
      Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultWriteRecord".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultWriteRecord" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Rv32MultWriteRecord" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "from_state" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                          []
                          [ Ty.path "u32" ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::adapters::mul::Rv32MultWriteRecord",
                            "from_state"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "rd_id" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::adapters::mul::Rv32MultWriteRecord",
                                "rd_id"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_openvm_rv32im_circuit_adapters_mul_Rv32MultWriteRecord.
    
    
    
    (* StructRecord
      {
        name := "Rv32MultAdapterCols";
        const_params := [];
        ty_params := [ "T" ];
        fields :=
          [
            ("from_state",
              Ty.apply (Ty.path "openvm_circuit::arch::execution::ExecutionState") [] [ T ]);
            ("rd_ptr", T);
            ("rs1_ptr", T);
            ("rs2_ptr", T);
            ("reads_aux",
              Ty.apply
                (Ty.path "array")
                [ Value.Integer IntegerKind.Usize 2 ]
                [
                  Ty.apply
                    (Ty.path
                      "openvm_circuit::system::memory::offline_checker::columns::MemoryReadAuxCols")
                    []
                    [ T ]
                ]);
            ("writes_aux",
              Ty.apply
                (Ty.path
                  "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                [
                  M.unevaluated_const
                    (mk_str (|
                      "openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterCols_discriminant"
                    |))
                ]
                [ T ])
          ];
      } *)
    
    Module Impl_core_borrow_Borrow_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterCols_T_for_slice_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ T ].
      
      (* AlignedBorrow *)
      Definition borrow (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                self
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (|
                                Ty.tuple
                                  [
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                  ],
                                Value.Tuple
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.path "usize",
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ T ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| self |) |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.path "usize",
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                                              []
                                              [ T ],
                                            "width",
                                            [],
                                            []
                                          |),
                                          []
                                        |)
                                      |)
                                    |)
                                  ]
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let left_val :=
                                      M.copy (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        γ0_0
                                      |) in
                                    let right_val :=
                                      M.copy (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        γ0_1
                                      |) in
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  Ty.path "bool",
                                                  UnOp.not (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      BinOp.eq,
                                                      [
                                                        M.read (|
                                                          M.deref (| M.read (| left_val |) |)
                                                        |);
                                                        M.read (|
                                                          M.deref (| M.read (| right_val |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.never_to_any (|
                                              M.read (|
                                                let~ kind : Ty.path "core::panicking::AssertKind" :=
                                                  Value.StructTuple
                                                    "core::panicking::AssertKind::Eq"
                                                    []
                                                    []
                                                    [] in
                                                M.alloc (|
                                                  Ty.path "never",
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::assert_failed",
                                                      [],
                                                      [ Ty.path "usize"; Ty.path "usize" ]
                                                    |),
                                                    [
                                                      M.read (| kind |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| left_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| right_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      Value.StructTuple
                                                        "core::option::Option::None"
                                                        []
                                                        [ Ty.path "core::fmt::Arguments" ]
                                                        []
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |)))
                              ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                      []
                      [ T ]
                  ],
                M.match_operator (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                        []
                        [ T ]
                    ],
                  M.alloc (|
                    Ty.tuple
                      [
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                                  []
                                  [ T ]
                              ]
                          ];
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                      ],
                    M.call_closure (|
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                                    []
                                    [ T ]
                                ]
                            ];
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                        ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ T ],
                        "align_to",
                        [],
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                            []
                            [ T ]
                        ]
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                        let prefix :=
                          M.copy (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            γ0_0
                          |) in
                        let shorts :=
                          M.copy (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                                      []
                                      [ T ]
                                  ]
                              ],
                            γ0_1
                          |) in
                        let _suffix :=
                          M.copy (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            γ0_2
                          |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.read (|
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_associated_function (|
                                                            Ty.apply (Ty.path "slice") [] [ T ],
                                                            "is_empty",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| prefix |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.never_to_any (|
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::panic_fmt",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "core::fmt::Arguments",
                                                        M.get_associated_function (|
                                                          Ty.path "core::fmt::Arguments",
                                                          "new_const",
                                                          [ Value.Integer IntegerKind.Usize 1 ],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    ]
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "str" ]
                                                                    ],
                                                                  Value.Array
                                                                    [
                                                                      mk_str (|
                                                                        "Alignment should match"
                                                                      |)
                                                                    ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.read (|
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.tuple
                                              [
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                              ],
                                            Value.Tuple
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path "usize",
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                                                              []
                                                              [ T ]
                                                          ],
                                                        "len",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| shorts |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path "usize",
                                                    Value.Integer IntegerKind.Usize 1
                                                  |)
                                                |)
                                              ]
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let left_val :=
                                                  M.copy (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                    γ0_0
                                                  |) in
                                                let right_val :=
                                                  M.copy (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                    γ0_1
                                                  |) in
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              Ty.path "bool",
                                                              UnOp.not (|
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.eq,
                                                                  [
                                                                    M.read (|
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |);
                                                                    M.read (|
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.never_to_any (|
                                                          M.read (|
                                                            let~ kind :
                                                                Ty.path
                                                                  "core::panicking::AssertKind" :=
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                                []
                                                                [] in
                                                            M.alloc (|
                                                              Ty.path "never",
                                                              M.call_closure (|
                                                                Ty.path "never",
                                                                M.get_function (|
                                                                  "core::panicking::assert_failed",
                                                                  [],
                                                                  [ Ty.path "usize"; Ty.path "usize"
                                                                  ]
                                                                |),
                                                                [
                                                                  M.read (| kind |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| left_val |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| right_val |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |);
                                                                  Value.StructTuple
                                                                    "core::option::Option::None"
                                                                    []
                                                                    [ Ty.path "core::fmt::Arguments"
                                                                    ]
                                                                    []
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                                  ]
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                                  []
                                  [ T ]
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_array_field (|
                                    M.deref (| M.read (| shorts |) |),
                                    Value.Integer IntegerKind.Usize 0
                                  |)
                                |)
                              |)
                            |)
                          |)
                        |)))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::borrow::Borrow"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.apply (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols") [] [ T ]
          ]
          (Self T)
          (* Instance *) [ ("borrow", InstanceField.Method (borrow T)) ].
    End Impl_core_borrow_Borrow_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterCols_T_for_slice_T.
    
    Module Impl_core_borrow_BorrowMut_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterCols_T_for_slice_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ T ].
      
      (* AlignedBorrow *)
      Definition borrow_mut (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.tuple
                                      [
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                      ],
                                    Value.Tuple
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                "len",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| self |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                                                  []
                                                  [ T ],
                                                "width",
                                                [],
                                                []
                                              |),
                                              []
                                            |)
                                          |)
                                        |)
                                      ]
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let left_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_0
                                          |) in
                                        let right_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_1
                                          |) in
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.eq,
                                                          [
                                                            M.read (|
                                                              M.deref (| M.read (| left_val |) |)
                                                            |);
                                                            M.read (|
                                                              M.deref (| M.read (| right_val |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.never_to_any (|
                                                  M.read (|
                                                    let~ kind :
                                                        Ty.path "core::panicking::AssertKind" :=
                                                      Value.StructTuple
                                                        "core::panicking::AssertKind::Eq"
                                                        []
                                                        []
                                                        [] in
                                                    M.alloc (|
                                                      Ty.path "never",
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::assert_failed",
                                                          [],
                                                          [ Ty.path "usize"; Ty.path "usize" ]
                                                        |),
                                                        [
                                                          M.read (| kind |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| left_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| right_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          Value.StructTuple
                                                            "core::option::Option::None"
                                                            []
                                                            [ Ty.path "core::fmt::Arguments" ]
                                                            []
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                          []
                          [ T ]
                      ],
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                            []
                            [ T ]
                        ],
                      M.alloc (|
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                                      []
                                      [ T ]
                                  ]
                              ];
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                          ],
                        M.call_closure (|
                          Ty.tuple
                            [
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                                        []
                                        [ T ]
                                    ]
                                ];
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                            ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ T ],
                            "align_to_mut",
                            [],
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                                []
                                [ T ]
                            ]
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                            let prefix :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_0
                              |) in
                            let shorts :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                                          []
                                          [ T ]
                                      ]
                                  ],
                                γ0_1
                              |) in
                            let _suffix :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_2
                              |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_associated_function (|
                                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                                "is_empty",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| prefix |) |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.never_to_any (|
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::panic_fmt",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::Arguments",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::Arguments",
                                                              "new_const",
                                                              [ Value.Integer IntegerKind.Usize 1 ],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Ty.path "str" ]
                                                                        ],
                                                                      Value.Array
                                                                        [
                                                                          mk_str (|
                                                                            "Alignment should match"
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (|
                                                Ty.tuple
                                                  [
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                  ],
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                                                                  []
                                                                  [ T ]
                                                              ],
                                                            "len",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| shorts |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        Value.Integer IntegerKind.Usize 1
                                                      |)
                                                    |)
                                                  ]
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let left_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_0
                                                      |) in
                                                    let right_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_1
                                                      |) in
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  Ty.path "bool",
                                                                  UnOp.not (|
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| left_val |)
                                                                          |)
                                                                        |);
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| right_val |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.never_to_any (|
                                                              M.read (|
                                                                let~ kind :
                                                                    Ty.path
                                                                      "core::panicking::AssertKind" :=
                                                                  Value.StructTuple
                                                                    "core::panicking::AssertKind::Eq"
                                                                    []
                                                                    []
                                                                    [] in
                                                                M.alloc (|
                                                                  Ty.path "never",
                                                                  M.call_closure (|
                                                                    Ty.path "never",
                                                                    M.get_function (|
                                                                      "core::panicking::assert_failed",
                                                                      [],
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.path "usize"
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.read (| kind |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| left_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| right_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      Value.StructTuple
                                                                        "core::option::Option::None"
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "core::fmt::Arguments"
                                                                        ]
                                                                        []
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                                      ]
                                                    |)))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                                      []
                                      [ T ]
                                  ],
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.SubPointer.get_array_field (|
                                        M.deref (| M.read (| shorts |) |),
                                        Value.Integer IntegerKind.Usize 0
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::borrow::BorrowMut"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [ Ty.apply (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols") [] [ T ]
          ]
          (Self T)
          (* Instance *) [ ("borrow_mut", InstanceField.Method (borrow_mut T)) ].
    End Impl_core_borrow_BorrowMut_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterCols_T_for_slice_T.
    
    Module Impl_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterCols_T.
      Definition Self (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols") [] [ T ].
      
      (* AlignedBorrow *)
      Definition width (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "usize",
              M.get_function (|
                "core::mem::size_of",
                [],
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                    []
                    [ Ty.path "u8" ]
                ]
              |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_width :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "width" (width T).
      Admitted.
      Global Typeclasses Opaque width.
    End Impl_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterCols_T.
    
    (* StructRecord
      {
        name := "Rv32MultAdapterAir";
        const_params := [];
        ty_params := [];
        fields :=
          [
            ("execution_bridge", Ty.path "openvm_circuit::arch::execution::ExecutionBridge");
            ("memory_bridge",
              Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge")
          ];
      } *)
    
    Module Impl_core_clone_Clone_for_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterAir.
      Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterAir".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterAir" ],
                self
              |) in
            M.match_operator (|
              Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterAir",
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterAir",
                      Value.DeclaredButUndefined,
                      [ fun γ => ltac:(M.monadic (M.read (| M.deref (| M.read (| self |) |) |))) ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterAir.
    
    Module Impl_core_marker_Copy_for_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterAir.
      Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterAir".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_Copy_for_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterAir.
    
    Module Impl_core_fmt_Debug_for_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterAir.
      Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterAir".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterAir" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Rv32MultAdapterAir" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "execution_bridge" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_circuit::arch::execution::ExecutionBridge" ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterAir",
                            "execution_bridge"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "memory_bridge" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.path
                              "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge"
                          ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.path
                                  "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge"
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterAir",
                                "memory_bridge"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterAir.
    
    Module Impl_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterAir.
      Definition Self : Ty.t := Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterAir".
      
      (* derive_new::new *)
      Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ execution_bridge; memory_bridge ] =>
          ltac:(M.monadic
            (let execution_bridge :=
              M.alloc (|
                Ty.path "openvm_circuit::arch::execution::ExecutionBridge",
                execution_bridge
              |) in
            let memory_bridge :=
              M.alloc (|
                Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                memory_bridge
              |) in
            Value.mkStructRecord
              "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterAir"
              []
              []
              [
                ("execution_bridge", M.read (| execution_bridge |));
                ("memory_bridge", M.read (| memory_bridge |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
      Admitted.
      Global Typeclasses Opaque new.
    End Impl_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterAir.
    
    Module Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterAir.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterAir".
      
      (*
          fn width(&self) -> usize {
              Rv32MultAdapterCols::<F>::width()
          }
      *)
      Definition width (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterAir" ],
                self
              |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                  []
                  [ F ],
                "width",
                [],
                []
              |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "p3_air::air::BaseAir"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self F)
          (* Instance *) [ ("width", InstanceField.Method (width F)) ].
    End Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterAir.
    
    Module Impl_openvm_circuit_arch_integration_api_VmAdapterAir_where_openvm_stark_backend_interaction_InteractionBuilder_AB_AB_for_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterAir.
      Definition Self (AB : Ty.t) : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterAir".
      
      (*
          type Interface = BasicAdapterInterface<
              AB::Expr,
              MinimalInstruction<AB::Expr>,
              2,
              1,
              RV32_REGISTER_NUM_LIMBS,
              RV32_REGISTER_NUM_LIMBS,
          >;
      *)
      Definition _Interface (AB : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_circuit::arch::integration_api::BasicAdapterInterface")
          [
            Value.Integer IntegerKind.Usize 2;
            Value.Integer IntegerKind.Usize 1;
            M.unevaluated_const
              (mk_str (| "openvm_rv32im_circuit_adapters_mul_Interface_discriminant" |));
            M.unevaluated_const
              (mk_str (| "openvm_rv32im_circuit_adapters_mul_Interface_discriminant" |))
          ]
          [
            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
            Ty.apply
              (Ty.path "openvm_circuit::arch::integration_api::MinimalInstruction")
              []
              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
          ].
      
      (*
          fn eval(
              &self,
              builder: &mut AB,
              local: &[AB::Var],
              ctx: AdapterAirContext<AB::Expr, Self::Interface>,
          ) {
              let local: &Rv32MultAdapterCols<_> = local.borrow();
              let timestamp = local.from_state.timestamp;
              let mut timestamp_delta: usize = 0;
              let mut timestamp_pp = || {
                  timestamp_delta += 1;
                  timestamp + AB::F::from_canonical_usize(timestamp_delta - 1)
              };
      
              self.memory_bridge
                  .read(
                      MemoryAddress::new(AB::F::from_canonical_u32(RV32_REGISTER_AS), local.rs1_ptr),
                      ctx.reads[0].clone(),
                      timestamp_pp(),
                      &local.reads_aux[0],
                  )
                  .eval(builder, ctx.instruction.is_valid.clone());
      
              self.memory_bridge
                  .read(
                      MemoryAddress::new(AB::F::from_canonical_u32(RV32_REGISTER_AS), local.rs2_ptr),
                      ctx.reads[1].clone(),
                      timestamp_pp(),
                      &local.reads_aux[1],
                  )
                  .eval(builder, ctx.instruction.is_valid.clone());
      
              self.memory_bridge
                  .write(
                      MemoryAddress::new(AB::F::from_canonical_u32(RV32_REGISTER_AS), local.rd_ptr),
                      ctx.writes[0].clone(),
                      timestamp_pp(),
                      &local.writes_aux,
                  )
                  .eval(builder, ctx.instruction.is_valid.clone());
      
              self.execution_bridge
                  .execute_and_increment_or_set_pc(
                      ctx.instruction.opcode,
                      [
                          local.rd_ptr.into(),
                          local.rs1_ptr.into(),
                          local.rs2_ptr.into(),
                          AB::Expr::from_canonical_u32(RV32_REGISTER_AS),
                          AB::Expr::ZERO,
                      ],
                      local.from_state,
                      AB::F::from_canonical_usize(timestamp_delta),
                      (DEFAULT_PC_STEP, ctx.to_pc),
                  )
                  .eval(builder, ctx.instruction.is_valid);
          }
      *)
      Definition eval (AB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self AB in
        match ε, τ, α with
        | [], [], [ self; builder; local; ctx ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterAir" ],
                self
              |) in
            let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
            let local :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  ],
                local
              |) in
            let ctx :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::AdapterAirContext")
                  []
                  [
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                    Ty.associated_in_trait
                      "openvm_circuit::arch::integration_api::VmAdapterAir"
                      []
                      [ AB ]
                      (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterAir")
                      "Interface"
                  ],
                ctx
              |) in
            M.read (|
              let~ local :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                      M.get_trait_method (|
                        "core::borrow::Borrow",
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        [],
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                        "borrow",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| local |) |) |) ]
                    |)
                  |)
                |) in
              let~ timestamp : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" :=
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| local |) |),
                      "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols",
                      "from_state"
                    |),
                    "openvm_circuit::arch::execution::ExecutionState",
                    "timestamp"
                  |)
                |) in
              let~ timestamp_delta : Ty.path "usize" := Value.Integer IntegerKind.Usize 0 in
              let~ timestamp_pp :
                  Ty.function
                    []
                    (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr") :=
                M.closure
                  (fun γ =>
                    ltac:(M.monadic
                      match γ with
                      | [ α0 ] =>
                        ltac:(M.monadic
                          (M.match_operator (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            M.alloc (| Ty.tuple [], α0 |),
                            [
                              fun γ =>
                                ltac:(M.monadic
                                  (M.read (|
                                    let~ _ : Ty.tuple [] :=
                                      let β := timestamp_delta in
                                      M.write (|
                                        β,
                                        M.call_closure (|
                                          Ty.path "usize",
                                          BinOp.Wrap.add,
                                          [ M.read (| β |); Value.Integer IntegerKind.Usize 1 ]
                                        |)
                                      |) in
                                    M.alloc (|
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr",
                                      M.call_closure (|
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr",
                                        M.get_trait_method (|
                                          "core::ops::arith::Add",
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var",
                                          [],
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "F"
                                          ],
                                          "add",
                                          [],
                                          []
                                        |),
                                        [
                                          M.read (| timestamp |);
                                          M.call_closure (|
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "F",
                                            M.get_trait_method (|
                                              "p3_field::field::FieldAlgebra",
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "F",
                                              [],
                                              [],
                                              "from_canonical_usize",
                                              [],
                                              []
                                            |),
                                            [
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.sub,
                                                [
                                                  M.read (| timestamp_delta |);
                                                  Value.Integer IntegerKind.Usize 1
                                                ]
                                              |)
                                            ]
                                          |)
                                        ]
                                      |)
                                    |)
                                  |)))
                            ]
                          |)))
                      | _ => M.impossible "wrong number of arguments"
                      end)) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOperation")
                      [ Value.Integer IntegerKind.Usize 4 ]
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                      ],
                    "eval",
                    [],
                    [ AB; Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOperation")
                        [ Value.Integer IntegerKind.Usize 4 ]
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                        ],
                      M.get_associated_function (|
                        Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                        "read",
                        [ Value.Integer IntegerKind.Usize 4 ],
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                        ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterAir",
                            "memory_bridge"
                          |)
                        |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                            []
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                              []
                              [
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F";
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                              ],
                            "new",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                              M.get_trait_method (|
                                "p3_field::field::FieldAlgebra",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                                [],
                                [],
                                "from_canonical_u32",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  get_constant (|
                                    "openvm_instructions::riscv::RV32_REGISTER_AS",
                                    Ty.path "u32"
                                  |)
                                |)
                              ]
                            |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| local |) |),
                                "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols",
                                "rs1_ptr"
                              |)
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_array_field (|
                                M.SubPointer.get_struct_record_field (|
                                  ctx,
                                  "openvm_circuit::arch::integration_api::AdapterAirContext",
                                  "reads"
                                |),
                                Value.Integer IntegerKind.Usize 0
                              |)
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::ops::function::FnMut",
                            Ty.function
                              []
                              (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"),
                            [],
                            [ Ty.tuple [] ],
                            "call_mut",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, timestamp_pp |); Value.Tuple [] ]
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_array_field (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| local |) |),
                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols",
                                  "reads_aux"
                                |),
                                Value.Integer IntegerKind.Usize 0
                              |)
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              ctx,
                              "openvm_circuit::arch::integration_api::AdapterAirContext",
                              "instruction"
                            |),
                            "openvm_circuit::arch::integration_api::MinimalInstruction",
                            "is_valid"
                          |)
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOperation")
                      [ Value.Integer IntegerKind.Usize 4 ]
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                      ],
                    "eval",
                    [],
                    [ AB; Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryReadOperation")
                        [ Value.Integer IntegerKind.Usize 4 ]
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                        ],
                      M.get_associated_function (|
                        Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                        "read",
                        [ Value.Integer IntegerKind.Usize 4 ],
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                        ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterAir",
                            "memory_bridge"
                          |)
                        |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                            []
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                              []
                              [
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F";
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                              ],
                            "new",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                              M.get_trait_method (|
                                "p3_field::field::FieldAlgebra",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                                [],
                                [],
                                "from_canonical_u32",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  get_constant (|
                                    "openvm_instructions::riscv::RV32_REGISTER_AS",
                                    Ty.path "u32"
                                  |)
                                |)
                              ]
                            |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| local |) |),
                                "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols",
                                "rs2_ptr"
                              |)
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_array_field (|
                                M.SubPointer.get_struct_record_field (|
                                  ctx,
                                  "openvm_circuit::arch::integration_api::AdapterAirContext",
                                  "reads"
                                |),
                                Value.Integer IntegerKind.Usize 1
                              |)
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::ops::function::FnMut",
                            Ty.function
                              []
                              (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"),
                            [],
                            [ Ty.tuple [] ],
                            "call_mut",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, timestamp_pp |); Value.Tuple [] ]
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_array_field (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| local |) |),
                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols",
                                  "reads_aux"
                                |),
                                Value.Integer IntegerKind.Usize 1
                              |)
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              ctx,
                              "openvm_circuit::arch::integration_api::AdapterAirContext",
                              "instruction"
                            |),
                            "openvm_circuit::arch::integration_api::MinimalInstruction",
                            "is_valid"
                          |)
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::memory::offline_checker::bridge::MemoryWriteOperation")
                      [ Value.Integer IntegerKind.Usize 4 ]
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                      ],
                    "eval",
                    [],
                    [ AB; Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryWriteOperation")
                        [ Value.Integer IntegerKind.Usize 4 ]
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                        ],
                      M.get_associated_function (|
                        Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                        "write",
                        [ Value.Integer IntegerKind.Usize 4 ],
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                        ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterAir",
                            "memory_bridge"
                          |)
                        |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                            []
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                              []
                              [
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F";
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                              ],
                            "new",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                              M.get_trait_method (|
                                "p3_field::field::FieldAlgebra",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                                [],
                                [],
                                "from_canonical_u32",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  get_constant (|
                                    "openvm_instructions::riscv::RV32_REGISTER_AS",
                                    Ty.path "u32"
                                  |)
                                |)
                              ]
                            |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| local |) |),
                                "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols",
                                "rd_ptr"
                              |)
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 4 ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                          M.get_trait_method (|
                            "core::clone::Clone",
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                            [],
                            [],
                            "clone",
                            [],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_array_field (|
                                M.SubPointer.get_struct_record_field (|
                                  ctx,
                                  "openvm_circuit::arch::integration_api::AdapterAirContext",
                                  "writes"
                                |),
                                Value.Integer IntegerKind.Usize 0
                              |)
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::ops::function::FnMut",
                            Ty.function
                              []
                              (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"),
                            [],
                            [ Ty.tuple [] ],
                            "call_mut",
                            [],
                            []
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, timestamp_pp |); Value.Tuple [] ]
                        |);
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.deref (|
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| local |) |),
                                "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols",
                                "writes_aux"
                              |)
                            |)
                          |)
                        |)
                      ]
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              ctx,
                              "openvm_circuit::arch::integration_api::AdapterAirContext",
                              "instruction"
                            |),
                            "openvm_circuit::arch::integration_api::MinimalInstruction",
                            "is_valid"
                          |)
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::execution::ExecutionBridgeInteractor")
                      []
                      [ AB ],
                    "eval",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::execution::ExecutionBridgeInteractor")
                        []
                        [ AB ],
                      M.get_associated_function (|
                        Ty.path "openvm_circuit::arch::execution::ExecutionBridge",
                        "execute_and_increment_or_set_pc",
                        [],
                        [
                          AB;
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 5 ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ];
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F";
                          Ty.tuple
                            [
                              Ty.path "u32";
                              Ty.apply
                                (Ty.path "core::option::Option")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                            ]
                        ]
                      |),
                      [
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterAir",
                            "execution_bridge"
                          |)
                        |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.SubPointer.get_struct_record_field (|
                              ctx,
                              "openvm_circuit::arch::integration_api::AdapterAirContext",
                              "instruction"
                            |),
                            "openvm_circuit::arch::integration_api::MinimalInstruction",
                            "opcode"
                          |)
                        |);
                        Value.Array
                          [
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::convert::Into",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                                "into",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| local |) |),
                                    "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols",
                                    "rd_ptr"
                                  |)
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::convert::Into",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                                "into",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| local |) |),
                                    "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols",
                                    "rs1_ptr"
                                  |)
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::convert::Into",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ],
                                "into",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.deref (| M.read (| local |) |),
                                    "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols",
                                    "rs2_ptr"
                                  |)
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "p3_field::field::FieldAlgebra",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [],
                                "from_canonical_u32",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  get_constant (|
                                    "openvm_instructions::riscv::RV32_REGISTER_AS",
                                    Ty.path "u32"
                                  |)
                                |)
                              ]
                            |);
                            M.read (|
                              get_constant (|
                                "p3_field::field::FieldAlgebra::ZERO",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                              |)
                            |)
                          ];
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| local |) |),
                            "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols",
                            "from_state"
                          |)
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                          M.get_trait_method (|
                            "p3_field::field::FieldAlgebra",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                            [],
                            [],
                            "from_canonical_usize",
                            [],
                            []
                          |),
                          [ M.read (| timestamp_delta |) ]
                        |);
                        Value.Tuple
                          [
                            M.read (|
                              get_constant (|
                                "openvm_instructions::program::DEFAULT_PC_STEP",
                                Ty.path "u32"
                              |)
                            |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                ctx,
                                "openvm_circuit::arch::integration_api::AdapterAirContext",
                                "to_pc"
                              |)
                            |)
                          ]
                      ]
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.SubPointer.get_struct_record_field (|
                          ctx,
                          "openvm_circuit::arch::integration_api::AdapterAirContext",
                          "instruction"
                        |),
                        "openvm_circuit::arch::integration_api::MinimalInstruction",
                        "is_valid"
                      |)
                    |)
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn get_from_pc(&self, local: &[AB::Var]) -> AB::Var {
              let cols: &Rv32MultAdapterCols<_> = local.borrow();
              cols.from_state.pc
          }
      *)
      Definition get_from_pc
          (AB : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self AB in
        match ε, τ, α with
        | [], [], [ self; local ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterAir" ],
                self
              |) in
            let local :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  ],
                local
              |) in
            M.read (|
              let~ cols :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                      M.get_trait_method (|
                        "core::borrow::Borrow",
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        [],
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                        "borrow",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| local |) |) |) ]
                    |)
                  |)
                |) in
              M.SubPointer.get_struct_record_field (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| cols |) |),
                  "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols",
                  "from_state"
                |),
                "openvm_circuit::arch::execution::ExecutionState",
                "pc"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (AB : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::integration_api::VmAdapterAir"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ AB ]
          (Self AB)
          (* Instance *)
          [
            ("Interface", InstanceField.Ty (_Interface AB));
            ("eval", InstanceField.Method (eval AB));
            ("get_from_pc", InstanceField.Method (get_from_pc AB))
          ].
    End Impl_openvm_circuit_arch_integration_api_VmAdapterAir_where_openvm_stark_backend_interaction_InteractionBuilder_AB_AB_for_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterAir.
    
    Module Impl_openvm_circuit_arch_integration_api_VmAdapterChip_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterChip_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip") [] [ F ].
      
      (*     type ReadRecord = Rv32MultReadRecord; *)
      Definition _ReadRecord (F : Ty.t) : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultReadRecord".
      
      (*     type WriteRecord = Rv32MultWriteRecord; *)
      Definition _WriteRecord (F : Ty.t) : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultWriteRecord".
      
      (*     type Air = Rv32MultAdapterAir; *)
      Definition _Air (F : Ty.t) : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterAir".
      
      (*
          type Interface = BasicAdapterInterface<
              F,
              MinimalInstruction<F>,
              2,
              1,
              RV32_REGISTER_NUM_LIMBS,
              RV32_REGISTER_NUM_LIMBS,
          >;
      *)
      Definition _Interface (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_circuit::arch::integration_api::BasicAdapterInterface")
          [
            Value.Integer IntegerKind.Usize 2;
            Value.Integer IntegerKind.Usize 1;
            M.unevaluated_const
              (mk_str (| "openvm_rv32im_circuit_adapters_mul_Interface_discriminant" |));
            M.unevaluated_const
              (mk_str (| "openvm_rv32im_circuit_adapters_mul_Interface_discriminant" |))
          ]
          [
            F;
            Ty.apply (Ty.path "openvm_circuit::arch::integration_api::MinimalInstruction") [] [ F ]
          ].
      
      (*
          fn preprocess(
              &mut self,
              memory: &mut MemoryController<F>,
              instruction: &Instruction<F>,
          ) -> Result<(
              <Self::Interface as VmAdapterInterface<F>>::Reads,
              Self::ReadRecord,
          )> {
              let Instruction { b, c, d, .. } = *instruction;
      
              debug_assert_eq!(d.as_canonical_u32(), RV32_REGISTER_AS);
      
              let rs1 = memory.read::<RV32_REGISTER_NUM_LIMBS>(d, b);
              let rs2 = memory.read::<RV32_REGISTER_NUM_LIMBS>(d, c);
      
              Ok((
                  [rs1.1, rs2.1],
                  Self::ReadRecord {
                      rs1: rs1.0,
                      rs2: rs2.0,
                  },
              ))
          }
      *)
      Definition preprocess (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; memory; instruction ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                      []
                      [ F ]
                  ],
                self
              |) in
            let memory :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                      []
                      [ F ]
                  ],
                memory
              |) in
            let instruction :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ] ],
                instruction
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.tuple
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 2 ]
                        [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ] ];
                      Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultReadRecord"
                    ];
                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                ],
              M.deref (| M.read (| instruction |) |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_instructions::instruction::Instruction",
                        "b"
                      |) in
                    let γ0_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_instructions::instruction::Instruction",
                        "c"
                      |) in
                    let γ0_2 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_instructions::instruction::Instruction",
                        "d"
                      |) in
                    let b := M.copy (| F, γ0_0 |) in
                    let c := M.copy (| F, γ0_1 |) in
                    let d := M.copy (| F, γ0_2 |) in
                    M.read (|
                      let~ _ : Ty.tuple [] :=
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.read (|
                                  let~ _ : Ty.tuple [] :=
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (|
                                        Ty.tuple
                                          [
                                            Ty.apply (Ty.path "&") [] [ Ty.path "u32" ];
                                            Ty.apply (Ty.path "&") [] [ Ty.path "u32" ]
                                          ],
                                        Value.Tuple
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.alloc (|
                                                Ty.path "u32",
                                                M.call_closure (|
                                                  Ty.path "u32",
                                                  M.get_trait_method (|
                                                    "p3_field::field::PrimeField32",
                                                    F,
                                                    [],
                                                    [],
                                                    "as_canonical_u32",
                                                    [],
                                                    []
                                                  |),
                                                  [ M.borrow (| Pointer.Kind.Ref, d |) ]
                                                |)
                                              |)
                                            |);
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              get_constant (|
                                                "openvm_instructions::riscv::RV32_REGISTER_AS",
                                                Ty.path "u32"
                                              |)
                                            |)
                                          ]
                                      |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                            let left_val :=
                                              M.copy (|
                                                Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                                γ0_0
                                              |) in
                                            let right_val :=
                                              M.copy (|
                                                Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                                γ0_1
                                              |) in
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.eq,
                                                              [
                                                                M.read (|
                                                                  M.deref (|
                                                                    M.read (| left_val |)
                                                                  |)
                                                                |);
                                                                M.read (|
                                                                  M.deref (|
                                                                    M.read (| right_val |)
                                                                  |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.never_to_any (|
                                                      M.read (|
                                                        let~ kind :
                                                            Ty.path "core::panicking::AssertKind" :=
                                                          Value.StructTuple
                                                            "core::panicking::AssertKind::Eq"
                                                            []
                                                            []
                                                            [] in
                                                        M.alloc (|
                                                          Ty.path "never",
                                                          M.call_closure (|
                                                            Ty.path "never",
                                                            M.get_function (|
                                                              "core::panicking::assert_failed",
                                                              [],
                                                              [ Ty.path "u32"; Ty.path "u32" ]
                                                            |),
                                                            [
                                                              M.read (| kind |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| left_val |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.read (| right_val |)
                                                                    |)
                                                                  |)
                                                                |)
                                                              |);
                                                              Value.StructTuple
                                                                "core::option::Option::None"
                                                                []
                                                                [ Ty.path "core::fmt::Arguments" ]
                                                                []
                                                            ]
                                                          |)
                                                        |)
                                                      |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |)))
                                      ]
                                    |) in
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                |)));
                            fun γ => ltac:(M.monadic (Value.Tuple []))
                          ]
                        |) in
                      let~ rs1 :
                          Ty.tuple
                            [
                              Ty.path "openvm_circuit::system::memory::controller::RecordId";
                              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ]
                            ] :=
                        M.call_closure (|
                          Ty.tuple
                            [
                              Ty.path "openvm_circuit::system::memory::controller::RecordId";
                              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ]
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::controller::MemoryController")
                              []
                              [ F ],
                            "read",
                            [ Value.Integer IntegerKind.Usize 4 ],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                            M.read (| d |);
                            M.read (| b |)
                          ]
                        |) in
                      let~ rs2 :
                          Ty.tuple
                            [
                              Ty.path "openvm_circuit::system::memory::controller::RecordId";
                              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ]
                            ] :=
                        M.call_closure (|
                          Ty.tuple
                            [
                              Ty.path "openvm_circuit::system::memory::controller::RecordId";
                              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ]
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::controller::MemoryController")
                              []
                              [ F ],
                            "read",
                            [ Value.Integer IntegerKind.Usize 4 ],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                            M.read (| d |);
                            M.read (| c |)
                          ]
                        |) in
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 4 ]
                                      [ F ]
                                  ];
                                Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultReadRecord"
                              ];
                            Ty.path "openvm_circuit::arch::execution::ExecutionError"
                          ],
                        Value.StructTuple
                          "core::result::Result::Ok"
                          []
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 4 ]
                                      [ F ]
                                  ];
                                Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultReadRecord"
                              ];
                            Ty.path "openvm_circuit::arch::execution::ExecutionError"
                          ]
                          [
                            Value.Tuple
                              [
                                Value.Array
                                  [
                                    M.read (| M.SubPointer.get_tuple_field (| rs1, 1 |) |);
                                    M.read (| M.SubPointer.get_tuple_field (| rs2, 1 |) |)
                                  ];
                                Value.mkStructRecord
                                  "openvm_rv32im_circuit::adapters::mul::Rv32MultReadRecord"
                                  []
                                  []
                                  [
                                    ("rs1", M.read (| M.SubPointer.get_tuple_field (| rs1, 0 |) |));
                                    ("rs2", M.read (| M.SubPointer.get_tuple_field (| rs2, 0 |) |))
                                  ]
                              ]
                          ]
                      |)
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn postprocess(
              &mut self,
              memory: &mut MemoryController<F>,
              instruction: &Instruction<F>,
              from_state: ExecutionState<u32>,
              output: AdapterRuntimeContext<F, Self::Interface>,
              _read_record: &Self::ReadRecord,
          ) -> Result<(ExecutionState<u32>, Self::WriteRecord)> {
              let Instruction { a, d, .. } = *instruction;
              let (rd_id, _) = memory.write(d, a, output.writes[0]);
      
              let timestamp_delta = memory.timestamp() - from_state.timestamp;
              debug_assert!(
                  timestamp_delta == 3,
                  "timestamp delta is {}, expected 3",
                  timestamp_delta
              );
      
              Ok((
                  ExecutionState {
                      pc: from_state.pc + DEFAULT_PC_STEP,
                      timestamp: memory.timestamp(),
                  },
                  Self::WriteRecord { from_state, rd_id },
              ))
          }
      *)
      Definition postprocess (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; memory; instruction; from_state; output; _read_record ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                      []
                      [ F ]
                  ],
                self
              |) in
            let memory :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                      []
                      [ F ]
                  ],
                memory
              |) in
            let instruction :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ] ],
                instruction
              |) in
            let from_state :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                  []
                  [ Ty.path "u32" ],
                from_state
              |) in
            let output :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                  []
                  [
                    F;
                    Ty.associated_in_trait
                      "openvm_circuit::arch::integration_api::VmAdapterChip"
                      []
                      [ F ]
                      (Ty.apply
                        (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                        []
                        [ F ])
                      "Interface"
                  ],
                output
              |) in
            let _read_record :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.associated_in_trait
                      "openvm_circuit::arch::integration_api::VmAdapterChip"
                      []
                      [ F ]
                      (Ty.apply
                        (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                        []
                        [ F ])
                      "ReadRecord"
                  ],
                _read_record
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.tuple
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                        []
                        [ Ty.path "u32" ];
                      Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultWriteRecord"
                    ];
                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                ],
              M.deref (| M.read (| instruction |) |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_instructions::instruction::Instruction",
                        "a"
                      |) in
                    let γ0_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_instructions::instruction::Instruction",
                        "d"
                      |) in
                    let a := M.copy (| F, γ0_0 |) in
                    let d := M.copy (| F, γ0_1 |) in
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                                []
                                [ Ty.path "u32" ];
                              Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultWriteRecord"
                            ];
                          Ty.path "openvm_circuit::arch::execution::ExecutionError"
                        ],
                      M.alloc (|
                        Ty.tuple
                          [
                            Ty.path "openvm_circuit::system::memory::controller::RecordId";
                            Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ]
                          ],
                        M.call_closure (|
                          Ty.tuple
                            [
                              Ty.path "openvm_circuit::system::memory::controller::RecordId";
                              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ]
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::controller::MemoryController")
                              []
                              [ F ],
                            "write",
                            [ Value.Integer IntegerKind.Usize 4 ],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                            M.read (| d |);
                            M.read (| a |);
                            M.read (|
                              M.SubPointer.get_array_field (|
                                M.SubPointer.get_struct_record_field (|
                                  output,
                                  "openvm_circuit::arch::integration_api::AdapterRuntimeContext",
                                  "writes"
                                |),
                                Value.Integer IntegerKind.Usize 0
                              |)
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let rd_id :=
                              M.copy (|
                                Ty.path "openvm_circuit::system::memory::controller::RecordId",
                                γ0_0
                              |) in
                            M.read (|
                              let~ timestamp_delta : Ty.path "u32" :=
                                M.call_closure (|
                                  Ty.path "u32",
                                  BinOp.Wrap.sub,
                                  [
                                    M.call_closure (|
                                      Ty.path "u32",
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::controller::MemoryController")
                                          []
                                          [ F ],
                                        "timestamp",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.deref (| M.read (| memory |) |)
                                        |)
                                      ]
                                    |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        from_state,
                                        "openvm_circuit::arch::execution::ExecutionState",
                                        "timestamp"
                                      |)
                                    |)
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              BinOp.eq,
                                                              [
                                                                M.read (| timestamp_delta |);
                                                                Value.Integer IntegerKind.U32 3
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.never_to_any (|
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::panic_fmt",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::Arguments",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::Arguments",
                                                              "new_v1",
                                                              [
                                                                Value.Integer IntegerKind.Usize 2;
                                                                Value.Integer IntegerKind.Usize 1
                                                              ],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            2
                                                                        ]
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Ty.path "str" ]
                                                                        ],
                                                                      Value.Array
                                                                        [
                                                                          mk_str (|
                                                                            "timestamp delta is "
                                                                          |);
                                                                          mk_str (|
                                                                            ", expected 3"
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |);
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                        [
                                                                          Ty.path
                                                                            "core::fmt::rt::Argument"
                                                                        ],
                                                                      Value.Array
                                                                        [
                                                                          M.call_closure (|
                                                                            Ty.path
                                                                              "core::fmt::rt::Argument",
                                                                            M.get_associated_function (|
                                                                              Ty.path
                                                                                "core::fmt::rt::Argument",
                                                                              "new_display",
                                                                              [],
                                                                              [ Ty.path "u32" ]
                                                                            |),
                                                                            [
                                                                              M.borrow (|
                                                                                Pointer.Kind.Ref,
                                                                                M.deref (|
                                                                                  M.borrow (|
                                                                                    Pointer.Kind.Ref,
                                                                                    timestamp_delta
                                                                                  |)
                                                                                |)
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::execution::ExecutionState")
                                          []
                                          [ Ty.path "u32" ];
                                        Ty.path
                                          "openvm_rv32im_circuit::adapters::mul::Rv32MultWriteRecord"
                                      ];
                                    Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                  ],
                                Value.StructTuple
                                  "core::result::Result::Ok"
                                  []
                                  [
                                    Ty.tuple
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::arch::execution::ExecutionState")
                                          []
                                          [ Ty.path "u32" ];
                                        Ty.path
                                          "openvm_rv32im_circuit::adapters::mul::Rv32MultWriteRecord"
                                      ];
                                    Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                  ]
                                  [
                                    Value.Tuple
                                      [
                                        Value.mkStructRecord
                                          "openvm_circuit::arch::execution::ExecutionState"
                                          []
                                          [ Ty.path "u32" ]
                                          [
                                            ("pc",
                                              M.call_closure (|
                                                Ty.path "u32",
                                                BinOp.Wrap.add,
                                                [
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      from_state,
                                                      "openvm_circuit::arch::execution::ExecutionState",
                                                      "pc"
                                                    |)
                                                  |);
                                                  M.read (|
                                                    get_constant (|
                                                      "openvm_instructions::program::DEFAULT_PC_STEP",
                                                      Ty.path "u32"
                                                    |)
                                                  |)
                                                ]
                                              |));
                                            ("timestamp",
                                              M.call_closure (|
                                                Ty.path "u32",
                                                M.get_associated_function (|
                                                  Ty.apply
                                                    (Ty.path
                                                      "openvm_circuit::system::memory::controller::MemoryController")
                                                    []
                                                    [ F ],
                                                  "timestamp",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.deref (| M.read (| memory |) |)
                                                  |)
                                                ]
                                              |))
                                          ];
                                        Value.mkStructRecord
                                          "openvm_rv32im_circuit::adapters::mul::Rv32MultWriteRecord"
                                          []
                                          []
                                          [
                                            ("from_state", M.read (| from_state |));
                                            ("rd_id", M.read (| rd_id |))
                                          ]
                                      ]
                                  ]
                              |)
                            |)))
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn generate_trace_row(
              &self,
              row_slice: &mut [F],
              read_record: Self::ReadRecord,
              write_record: Self::WriteRecord,
              memory: &OfflineMemory<F>,
          ) {
              let aux_cols_factory = memory.aux_cols_factory();
              let row_slice: &mut Rv32MultAdapterCols<_> = row_slice.borrow_mut();
              row_slice.from_state = write_record.from_state.map(F::from_canonical_u32);
              let rd = memory.record_by_id(write_record.rd_id);
              row_slice.rd_ptr = rd.pointer;
              let rs1 = memory.record_by_id(read_record.rs1);
              let rs2 = memory.record_by_id(read_record.rs2);
              row_slice.rs1_ptr = rs1.pointer;
              row_slice.rs2_ptr = rs2.pointer;
              aux_cols_factory.generate_read_aux(rs1, &mut row_slice.reads_aux[0]);
              aux_cols_factory.generate_read_aux(rs2, &mut row_slice.reads_aux[1]);
              aux_cols_factory.generate_write_aux(rd, &mut row_slice.writes_aux);
          }
      *)
      Definition generate_trace_row
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; row_slice; read_record; write_record; memory ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                      []
                      [ F ]
                  ],
                self
              |) in
            let row_slice :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                row_slice
              |) in
            let read_record :=
              M.alloc (|
                Ty.associated_in_trait
                  "openvm_circuit::arch::integration_api::VmAdapterChip"
                  []
                  [ F ]
                  (Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                    []
                    [ F ])
                  "ReadRecord",
                read_record
              |) in
            let write_record :=
              M.alloc (|
                Ty.associated_in_trait
                  "openvm_circuit::arch::integration_api::VmAdapterChip"
                  []
                  [ F ]
                  (Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                    []
                    [ F ])
                  "WriteRecord",
                write_record
              |) in
            let memory :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                      []
                      [ F ]
                  ],
                memory
              |) in
            M.read (|
              let~ aux_cols_factory :
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                    []
                    [ F ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                    []
                    [ F ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                      []
                      [ F ],
                    "aux_cols_factory",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| memory |) |) |) ]
                |) in
              let~ row_slice :
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                        []
                        [ F ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                            []
                            [ F ]
                        ],
                      M.get_trait_method (|
                        "core::borrow::BorrowMut",
                        Ty.apply (Ty.path "slice") [] [ F ],
                        [],
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols")
                            []
                            [ F ]
                        ],
                        "borrow_mut",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| row_slice |) |) |) ]
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols",
                    "from_state"
                  |),
                  M.call_closure (|
                    Ty.apply (Ty.path "openvm_circuit::arch::execution::ExecutionState") [] [ F ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                        []
                        [ Ty.path "u32" ],
                      "map",
                      [],
                      [ F; Ty.function [ Ty.path "u32" ] F ]
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          write_record,
                          "openvm_rv32im_circuit::adapters::mul::Rv32MultWriteRecord",
                          "from_state"
                        |)
                      |);
                      M.get_trait_method (|
                        "p3_field::field::FieldAlgebra",
                        F,
                        [],
                        [],
                        "from_canonical_u32",
                        [],
                        []
                      |)
                    ]
                  |)
                |) in
              let~ rd :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::offline::MemoryRecord")
                        []
                        [ F ]
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::offline::MemoryRecord")
                        []
                        [ F ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                      []
                      [ F ],
                    "record_by_id",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| memory |) |) |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        write_record,
                        "openvm_rv32im_circuit::adapters::mul::Rv32MultWriteRecord",
                        "rd_id"
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols",
                    "rd_ptr"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| rd |) |),
                      "openvm_circuit::system::memory::offline::MemoryRecord",
                      "pointer"
                    |)
                  |)
                |) in
              let~ rs1 :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::offline::MemoryRecord")
                        []
                        [ F ]
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::offline::MemoryRecord")
                        []
                        [ F ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                      []
                      [ F ],
                    "record_by_id",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| memory |) |) |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        read_record,
                        "openvm_rv32im_circuit::adapters::mul::Rv32MultReadRecord",
                        "rs1"
                      |)
                    |)
                  ]
                |) in
              let~ rs2 :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::offline::MemoryRecord")
                        []
                        [ F ]
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::offline::MemoryRecord")
                        []
                        [ F ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                      []
                      [ F ],
                    "record_by_id",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| memory |) |) |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        read_record,
                        "openvm_rv32im_circuit::adapters::mul::Rv32MultReadRecord",
                        "rs2"
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols",
                    "rs1_ptr"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| rs1 |) |),
                      "openvm_circuit::system::memory::offline::MemoryRecord",
                      "pointer"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols",
                    "rs2_ptr"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| rs2 |) |),
                      "openvm_circuit::system::memory::offline::MemoryRecord",
                      "pointer"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                      []
                      [ F ],
                    "generate_read_aux",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, aux_cols_factory |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| rs1 |) |) |);
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_array_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| row_slice |) |),
                              "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols",
                              "reads_aux"
                            |),
                            Value.Integer IntegerKind.Usize 0
                          |)
                        |)
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                      []
                      [ F ],
                    "generate_read_aux",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, aux_cols_factory |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| rs2 |) |) |);
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_array_field (|
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| row_slice |) |),
                              "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols",
                              "reads_aux"
                            |),
                            Value.Integer IntegerKind.Usize 1
                          |)
                        |)
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                      []
                      [ F ],
                    "generate_write_aux",
                    [ Value.Integer IntegerKind.Usize 4 ],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, aux_cols_factory |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| rd |) |) |);
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| row_slice |) |),
                            "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterCols",
                            "writes_aux"
                          |)
                        |)
                      |)
                    |)
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn air(&self) -> &Self::Air {
              &self.air
          }
      *)
      Definition air (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_rv32im_circuit::adapters::mul::Rv32MultAdapterChip",
                    "air"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::integration_api::VmAdapterChip"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self F)
          (* Instance *)
          [
            ("ReadRecord", InstanceField.Ty (_ReadRecord F));
            ("WriteRecord", InstanceField.Ty (_WriteRecord F));
            ("Air", InstanceField.Ty (_Air F));
            ("Interface", InstanceField.Ty (_Interface F));
            ("preprocess", InstanceField.Method (preprocess F));
            ("postprocess", InstanceField.Method (postprocess F));
            ("generate_trace_row", InstanceField.Method (generate_trace_row F));
            ("air", InstanceField.Method (air F))
          ].
    End Impl_openvm_circuit_arch_integration_api_VmAdapterChip_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_adapters_mul_Rv32MultAdapterChip_F.
  End mul.
End adapters.
