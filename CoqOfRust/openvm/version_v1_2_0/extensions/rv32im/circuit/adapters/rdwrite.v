(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module adapters.
  Module rdwrite.
    (* StructRecord
      {
        name := "Rv32RdWriteAdapterChip";
        const_params := [];
        ty_params := [ "F" ];
        fields :=
          [
            ("air", Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir");
            ("_marker", Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterChip_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
          []
          [ F ].
      
      (* Debug *)
      Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                      []
                      [ F ]
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| mk_str (| "Rv32RdWriteAdapterChip" |) |)
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "air" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [ Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir" ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip",
                            "air"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "_marker" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ] ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.apply (Ty.path "core::marker::PhantomData") [] [ F ] ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip",
                                "_marker"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterChip_F.
    
    (* StructRecord
      {
        name := "Rv32CondRdWriteAdapterChip";
        const_params := [];
        ty_params := [ "F" ];
        fields :=
          [
            ("inner",
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                []
                [ F ]);
            ("air", Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterAir")
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterChip_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
          []
          [ F ].
      
      (* Debug *)
      Definition fmt (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                      []
                      [ F ]
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| mk_str (| "Rv32CondRdWriteAdapterChip" |) |)
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "inner" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                          []
                          [ F ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip",
                            "inner"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "air" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterAir"
                          ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.path
                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterAir"
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip",
                                "air"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self F)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt F)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_F_where_p3_field_field_Field_F_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterChip_F.
    
    Module Impl_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterChip_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
          []
          [ F ].
      
      (*
          pub fn new(
              execution_bus: ExecutionBus,
              program_bus: ProgramBus,
              memory_bridge: MemoryBridge,
          ) -> Self {
              Self {
                  air: Rv32RdWriteAdapterAir {
                      execution_bridge: ExecutionBridge::new(execution_bus, program_bus),
                      memory_bridge,
                  },
                  _marker: PhantomData,
              }
          }
      *)
      Definition new (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ execution_bus; program_bus; memory_bridge ] =>
          ltac:(M.monadic
            (let execution_bus :=
              M.alloc (|
                Ty.path "openvm_circuit::arch::execution::ExecutionBus",
                execution_bus
              |) in
            let program_bus :=
              M.alloc (|
                Ty.path "openvm_circuit::system::program::bus::ProgramBus",
                program_bus
              |) in
            let memory_bridge :=
              M.alloc (|
                Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                memory_bridge
              |) in
            Value.mkStructRecord
              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip"
              []
              [ F ]
              [
                ("air",
                  Value.mkStructRecord
                    "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir"
                    []
                    []
                    [
                      ("execution_bridge",
                        M.call_closure (|
                          Ty.path "openvm_circuit::arch::execution::ExecutionBridge",
                          M.get_associated_function (|
                            Ty.path "openvm_circuit::arch::execution::ExecutionBridge",
                            "new",
                            [],
                            []
                          |),
                          [ M.read (| execution_bus |); M.read (| program_bus |) ]
                        |));
                      ("memory_bridge", M.read (| memory_bridge |))
                    ]);
                ("_marker", Value.StructTuple "core::marker::PhantomData" [] [ F ] [])
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "new" (new F).
      Admitted.
      Global Typeclasses Opaque new.
    End Impl_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterChip_F.
    
    Module Impl_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterChip_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
          []
          [ F ].
      
      (*
          pub fn new(
              execution_bus: ExecutionBus,
              program_bus: ProgramBus,
              memory_bridge: MemoryBridge,
          ) -> Self {
              let inner = Rv32RdWriteAdapterChip::new(execution_bus, program_bus, memory_bridge);
              let air = Rv32CondRdWriteAdapterAir { inner: inner.air };
              Self { inner, air }
          }
      *)
      Definition new (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ execution_bus; program_bus; memory_bridge ] =>
          ltac:(M.monadic
            (let execution_bus :=
              M.alloc (|
                Ty.path "openvm_circuit::arch::execution::ExecutionBus",
                execution_bus
              |) in
            let program_bus :=
              M.alloc (|
                Ty.path "openvm_circuit::system::program::bus::ProgramBus",
                program_bus
              |) in
            let memory_bridge :=
              M.alloc (|
                Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                memory_bridge
              |) in
            M.read (|
              let~ inner :
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                    []
                    [ F ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                    []
                    [ F ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                      []
                      [ F ],
                    "new",
                    [],
                    []
                  |),
                  [ M.read (| execution_bus |); M.read (| program_bus |); M.read (| memory_bridge |)
                  ]
                |) in
              let~ air :
                  Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterAir" :=
                Value.mkStructRecord
                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterAir"
                  []
                  []
                  [
                    ("inner",
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          inner,
                          "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip",
                          "air"
                        |)
                      |))
                  ] in
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                  []
                  [ F ],
                Value.mkStructRecord
                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip"
                  []
                  [ F ]
                  [ ("inner", M.read (| inner |)); ("air", M.read (| air |)) ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (F : Ty.t),
        M.IsAssociatedFunction.C (Self F) "new" (new F).
      Admitted.
      Global Typeclasses Opaque new.
    End Impl_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterChip_F.
    
    (* StructRecord
      {
        name := "Rv32RdWriteWriteRecord";
        const_params := [];
        ty_params := [];
        fields :=
          [
            ("from_state",
              Ty.apply
                (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                []
                [ Ty.path "u32" ]);
            ("rd_id",
              Ty.apply
                (Ty.path "core::option::Option")
                []
                [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteWriteRecord.
      Definition Self : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| mk_str (| "Rv32RdWriteWriteRecord" |) |)
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "from_state" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                          []
                          [ Ty.path "u32" ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord",
                            "from_state"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "rd_id" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::option::Option")
                              []
                              [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ]
                          ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ]
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord",
                                "rd_id"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteWriteRecord.
    
    Module Impl_core_clone_Clone_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteWriteRecord.
      Definition Self : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord" ],
                self
              |) in
            Value.mkStructRecord
              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord"
              []
              []
              [
                ("from_state",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                      []
                      [ Ty.path "u32" ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                        []
                        [ Ty.path "u32" ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord",
                              "from_state"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("rd_id",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "core::option::Option")
                      []
                      [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "core::option::Option")
                        []
                        [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord",
                              "rd_id"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteWriteRecord.
    
    Module underscore.
      Module Impl_serde_ser_Serialize_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteWriteRecord.
        Definition Self : Ty.t :=
          Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord".
        
        (* Serialize *)
        Definition serialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [ Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord" ],
                  self
                |) in
              let __serializer := M.alloc (| __S, __serializer |) in
              M.catch_return
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                  ]) (|
                ltac:(M.monadic
                  (M.read (|
                    let~ __serde_state :
                        Ty.associated_in_trait
                          "serde::ser::Serializer"
                          []
                          []
                          __S
                          "SerializeStruct" :=
                      M.match_operator (|
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  [],
                                  "serialize_struct",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  mk_str (| "Rv32RdWriteWriteRecord" |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.add,
                                        [
                                          M.cast (Ty.path "usize") (Value.Bool false);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val :=
                                M.copy (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  γ0_0
                                |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                                      []
                                      [ Ty.path "u32" ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "from_state" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord",
                                          "from_state"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.path
                                          "openvm_circuit::system::memory::controller::RecordId"
                                      ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "rd_id" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord",
                                          "rd_id"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.get_trait_method (|
                          "serde::ser::SerializeStruct",
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          [],
                          [],
                          "end",
                          [],
                          []
                        |),
                        [ M.read (| __serde_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::ser::Serialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("serialize", InstanceField.Method serialize) ].
      End Impl_serde_ser_Serialize_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteWriteRecord.
      Module Impl_serde_de_Deserialize_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteWriteRecord.
        Definition Self : Ty.t :=
          Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord".
        
        (* Deserialize *)
        Definition deserialize (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
          match ε, τ, α with
          | [], [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __D, __deserializer |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord";
                    Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                  ],
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  [],
                  "deserialize_struct",
                  [],
                  [ Ty.path "openvm_rv32im_circuit::adapters::rdwrite::_'1::deserialize::__Visitor"
                  ]
                |),
                [
                  M.read (| __deserializer |);
                  mk_str (| "Rv32RdWriteWriteRecord" |);
                  M.read (|
                    get_constant (|
                      "openvm_rv32im_circuit::adapters::rdwrite::_'1::deserialize::FIELDS",
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ]
                    |)
                  |);
                  Value.mkStructRecord
                    "openvm_rv32im_circuit::adapters::rdwrite::_'1::deserialize::__Visitor"
                    []
                    []
                    [
                      ("marker",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [
                            Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord"
                          ]
                          []);
                      ("lifetime",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                          [])
                    ]
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          M.IsTraitInstance
            "serde::de::Deserialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            Self
            (* Instance *) [ ("deserialize", InstanceField.Method deserialize) ].
      End Impl_serde_de_Deserialize_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteWriteRecord.
    End underscore.
    
    
    (* StructRecord
      {
        name := "Rv32RdWriteAdapterCols";
        const_params := [];
        ty_params := [ "T" ];
        fields :=
          [
            ("from_state",
              Ty.apply (Ty.path "openvm_circuit::arch::execution::ExecutionState") [] [ T ]);
            ("rd_ptr", T);
            ("rd_aux_cols",
              Ty.apply
                (Ty.path
                  "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                [
                  M.unevaluated_const
                    (mk_str (|
                      "openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterCols_discriminant"
                    |))
                ]
                [ T ])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterCols_T.
      Definition Self (T : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
          []
          [ T ].
      
      (* Debug *)
      Definition fmt (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                      []
                      [ T ]
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field3_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| mk_str (| "Rv32RdWriteAdapterCols" |) |)
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "from_state" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                          []
                          [ T ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols",
                            "from_state"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "rd_ptr" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ T ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols",
                            "rd_ptr"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "rd_aux_cols" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                              [ Value.Integer IntegerKind.Usize 4 ]
                              [ T ]
                          ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [ T ]
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols",
                                "rd_aux_cols"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt T)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterCols_T.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterCols_T.
      Definition Self (T : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
          []
          [ T ].
      
      (* Clone *)
      Definition clone (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                      []
                      [ T ]
                  ],
                self
              |) in
            Value.mkStructRecord
              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols"
              []
              [ T ]
              [
                ("from_state",
                  M.call_closure (|
                    Ty.apply (Ty.path "openvm_circuit::arch::execution::ExecutionState") [] [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "openvm_circuit::arch::execution::ExecutionState") [] [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols",
                              "from_state"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("rd_ptr",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols",
                              "rd_ptr"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("rd_aux_cols",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path
                        "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                      [ Value.Integer IntegerKind.Usize 4 ]
                      [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path
                          "openvm_circuit::system::memory::offline_checker::columns::MemoryWriteAuxCols")
                        [ Value.Integer IntegerKind.Usize 4 ]
                        [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols",
                              "rd_aux_cols"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T)
          (* Instance *) [ ("clone", InstanceField.Method (clone T)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterCols_T.
    
    Module Impl_core_borrow_Borrow_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterCols_T_for_slice_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ T ].
      
      (* AlignedBorrow *)
      Definition borrow (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                self
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (|
                                Ty.tuple
                                  [
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                  ],
                                Value.Tuple
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.path "usize",
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ T ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| self |) |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.path "usize",
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                                              []
                                              [ T ],
                                            "width",
                                            [],
                                            []
                                          |),
                                          []
                                        |)
                                      |)
                                    |)
                                  ]
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let left_val :=
                                      M.copy (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        γ0_0
                                      |) in
                                    let right_val :=
                                      M.copy (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        γ0_1
                                      |) in
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  Ty.path "bool",
                                                  UnOp.not (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      BinOp.eq,
                                                      [
                                                        M.read (|
                                                          M.deref (| M.read (| left_val |) |)
                                                        |);
                                                        M.read (|
                                                          M.deref (| M.read (| right_val |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.never_to_any (|
                                              M.read (|
                                                let~ kind : Ty.path "core::panicking::AssertKind" :=
                                                  Value.StructTuple
                                                    "core::panicking::AssertKind::Eq"
                                                    []
                                                    []
                                                    [] in
                                                M.alloc (|
                                                  Ty.path "never",
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::assert_failed",
                                                      [],
                                                      [ Ty.path "usize"; Ty.path "usize" ]
                                                    |),
                                                    [
                                                      M.read (| kind |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| left_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| right_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      Value.StructTuple
                                                        "core::option::Option::None"
                                                        []
                                                        [ Ty.path "core::fmt::Arguments" ]
                                                        []
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |)))
                              ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                      []
                      [ T ]
                  ],
                M.match_operator (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                        []
                        [ T ]
                    ],
                  M.alloc (|
                    Ty.tuple
                      [
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                                  []
                                  [ T ]
                              ]
                          ];
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                      ],
                    M.call_closure (|
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                                    []
                                    [ T ]
                                ]
                            ];
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                        ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ T ],
                        "align_to",
                        [],
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                            []
                            [ T ]
                        ]
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                        let prefix :=
                          M.copy (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            γ0_0
                          |) in
                        let shorts :=
                          M.copy (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                                      []
                                      [ T ]
                                  ]
                              ],
                            γ0_1
                          |) in
                        let _suffix :=
                          M.copy (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            γ0_2
                          |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.read (|
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_associated_function (|
                                                            Ty.apply (Ty.path "slice") [] [ T ],
                                                            "is_empty",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| prefix |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.never_to_any (|
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::panic_fmt",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "core::fmt::Arguments",
                                                        M.get_associated_function (|
                                                          Ty.path "core::fmt::Arguments",
                                                          "new_const",
                                                          [ Value.Integer IntegerKind.Usize 1 ],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    ]
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "str" ]
                                                                    ],
                                                                  Value.Array
                                                                    [
                                                                      mk_str (|
                                                                        "Alignment should match"
                                                                      |)
                                                                    ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.read (|
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.tuple
                                              [
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                              ],
                                            Value.Tuple
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path "usize",
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                                                              []
                                                              [ T ]
                                                          ],
                                                        "len",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| shorts |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path "usize",
                                                    Value.Integer IntegerKind.Usize 1
                                                  |)
                                                |)
                                              ]
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let left_val :=
                                                  M.copy (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                    γ0_0
                                                  |) in
                                                let right_val :=
                                                  M.copy (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                    γ0_1
                                                  |) in
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              Ty.path "bool",
                                                              UnOp.not (|
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.eq,
                                                                  [
                                                                    M.read (|
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |);
                                                                    M.read (|
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.never_to_any (|
                                                          M.read (|
                                                            let~ kind :
                                                                Ty.path
                                                                  "core::panicking::AssertKind" :=
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                                []
                                                                [] in
                                                            M.alloc (|
                                                              Ty.path "never",
                                                              M.call_closure (|
                                                                Ty.path "never",
                                                                M.get_function (|
                                                                  "core::panicking::assert_failed",
                                                                  [],
                                                                  [ Ty.path "usize"; Ty.path "usize"
                                                                  ]
                                                                |),
                                                                [
                                                                  M.read (| kind |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| left_val |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| right_val |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |);
                                                                  Value.StructTuple
                                                                    "core::option::Option::None"
                                                                    []
                                                                    [ Ty.path "core::fmt::Arguments"
                                                                    ]
                                                                    []
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                                  ]
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                                  []
                                  [ T ]
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_array_field (|
                                    M.deref (| M.read (| shorts |) |),
                                    Value.Integer IntegerKind.Usize 0
                                  |)
                                |)
                              |)
                            |)
                          |)
                        |)))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::borrow::Borrow"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
              []
              [ T ]
          ]
          (Self T)
          (* Instance *) [ ("borrow", InstanceField.Method (borrow T)) ].
    End Impl_core_borrow_Borrow_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterCols_T_for_slice_T.
    
    Module Impl_core_borrow_BorrowMut_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterCols_T_for_slice_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ T ].
      
      (* AlignedBorrow *)
      Definition borrow_mut (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.tuple
                                      [
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                      ],
                                    Value.Tuple
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                "len",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| self |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                                                  []
                                                  [ T ],
                                                "width",
                                                [],
                                                []
                                              |),
                                              []
                                            |)
                                          |)
                                        |)
                                      ]
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let left_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_0
                                          |) in
                                        let right_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_1
                                          |) in
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.eq,
                                                          [
                                                            M.read (|
                                                              M.deref (| M.read (| left_val |) |)
                                                            |);
                                                            M.read (|
                                                              M.deref (| M.read (| right_val |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.never_to_any (|
                                                  M.read (|
                                                    let~ kind :
                                                        Ty.path "core::panicking::AssertKind" :=
                                                      Value.StructTuple
                                                        "core::panicking::AssertKind::Eq"
                                                        []
                                                        []
                                                        [] in
                                                    M.alloc (|
                                                      Ty.path "never",
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::assert_failed",
                                                          [],
                                                          [ Ty.path "usize"; Ty.path "usize" ]
                                                        |),
                                                        [
                                                          M.read (| kind |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| left_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| right_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          Value.StructTuple
                                                            "core::option::Option::None"
                                                            []
                                                            [ Ty.path "core::fmt::Arguments" ]
                                                            []
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                          []
                          [ T ]
                      ],
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                            []
                            [ T ]
                        ],
                      M.alloc (|
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                                      []
                                      [ T ]
                                  ]
                              ];
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                          ],
                        M.call_closure (|
                          Ty.tuple
                            [
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                                        []
                                        [ T ]
                                    ]
                                ];
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                            ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ T ],
                            "align_to_mut",
                            [],
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                                []
                                [ T ]
                            ]
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                            let prefix :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_0
                              |) in
                            let shorts :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                                          []
                                          [ T ]
                                      ]
                                  ],
                                γ0_1
                              |) in
                            let _suffix :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_2
                              |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_associated_function (|
                                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                                "is_empty",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| prefix |) |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.never_to_any (|
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::panic_fmt",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::Arguments",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::Arguments",
                                                              "new_const",
                                                              [ Value.Integer IntegerKind.Usize 1 ],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Ty.path "str" ]
                                                                        ],
                                                                      Value.Array
                                                                        [
                                                                          mk_str (|
                                                                            "Alignment should match"
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (|
                                                Ty.tuple
                                                  [
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                  ],
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                                                                  []
                                                                  [ T ]
                                                              ],
                                                            "len",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| shorts |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        Value.Integer IntegerKind.Usize 1
                                                      |)
                                                    |)
                                                  ]
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let left_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_0
                                                      |) in
                                                    let right_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_1
                                                      |) in
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  Ty.path "bool",
                                                                  UnOp.not (|
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| left_val |)
                                                                          |)
                                                                        |);
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| right_val |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.never_to_any (|
                                                              M.read (|
                                                                let~ kind :
                                                                    Ty.path
                                                                      "core::panicking::AssertKind" :=
                                                                  Value.StructTuple
                                                                    "core::panicking::AssertKind::Eq"
                                                                    []
                                                                    []
                                                                    [] in
                                                                M.alloc (|
                                                                  Ty.path "never",
                                                                  M.call_closure (|
                                                                    Ty.path "never",
                                                                    M.get_function (|
                                                                      "core::panicking::assert_failed",
                                                                      [],
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.path "usize"
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.read (| kind |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| left_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| right_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      Value.StructTuple
                                                                        "core::option::Option::None"
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "core::fmt::Arguments"
                                                                        ]
                                                                        []
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                                      ]
                                                    |)))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                                      []
                                      [ T ]
                                  ],
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.SubPointer.get_array_field (|
                                        M.deref (| M.read (| shorts |) |),
                                        Value.Integer IntegerKind.Usize 0
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::borrow::BorrowMut"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
              []
              [ T ]
          ]
          (Self T)
          (* Instance *) [ ("borrow_mut", InstanceField.Method (borrow_mut T)) ].
    End Impl_core_borrow_BorrowMut_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterCols_T_for_slice_T.
    
    Module Impl_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterCols_T.
      Definition Self (T : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
          []
          [ T ].
      
      (* AlignedBorrow *)
      Definition width (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "usize",
              M.get_function (|
                "core::mem::size_of",
                [],
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                    []
                    [ Ty.path "u8" ]
                ]
              |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_width :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "width" (width T).
      Admitted.
      Global Typeclasses Opaque width.
    End Impl_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterCols_T.
    
    (* StructRecord
      {
        name := "Rv32CondRdWriteAdapterCols";
        const_params := [];
        ty_params := [ "T" ];
        fields :=
          [
            ("inner",
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                []
                [ T ]);
            ("needs_write", T)
          ];
      } *)
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterCols_T.
      Definition Self (T : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
          []
          [ T ].
      
      (* Debug *)
      Definition fmt (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                      []
                      [ T ]
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| mk_str (| "Rv32CondRdWriteAdapterCols" |) |)
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "inner" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                          []
                          [ T ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols",
                            "inner"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "needs_write" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ T ] ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply (Ty.path "&") [] [ T ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols",
                                "needs_write"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt T)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterCols_T.
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterCols_T.
      Definition Self (T : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
          []
          [ T ].
      
      (* Clone *)
      Definition clone (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                      []
                      [ T ]
                  ],
                self
              |) in
            Value.mkStructRecord
              "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols"
              []
              [ T ]
              [
                ("inner",
                  M.call_closure (|
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                      []
                      [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                        []
                        [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols",
                              "inner"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("needs_write",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols",
                              "needs_write"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self T)
          (* Instance *) [ ("clone", InstanceField.Method (clone T)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterCols_T.
    
    Module Impl_core_borrow_Borrow_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterCols_T_for_slice_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ T ].
      
      (* AlignedBorrow *)
      Definition borrow (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                self
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (|
                                Ty.tuple
                                  [
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                  ],
                                Value.Tuple
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.path "usize",
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ T ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| self |) |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.path "usize",
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                                              []
                                              [ T ],
                                            "width",
                                            [],
                                            []
                                          |),
                                          []
                                        |)
                                      |)
                                    |)
                                  ]
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let left_val :=
                                      M.copy (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        γ0_0
                                      |) in
                                    let right_val :=
                                      M.copy (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        γ0_1
                                      |) in
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  Ty.path "bool",
                                                  UnOp.not (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      BinOp.eq,
                                                      [
                                                        M.read (|
                                                          M.deref (| M.read (| left_val |) |)
                                                        |);
                                                        M.read (|
                                                          M.deref (| M.read (| right_val |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.never_to_any (|
                                              M.read (|
                                                let~ kind : Ty.path "core::panicking::AssertKind" :=
                                                  Value.StructTuple
                                                    "core::panicking::AssertKind::Eq"
                                                    []
                                                    []
                                                    [] in
                                                M.alloc (|
                                                  Ty.path "never",
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::assert_failed",
                                                      [],
                                                      [ Ty.path "usize"; Ty.path "usize" ]
                                                    |),
                                                    [
                                                      M.read (| kind |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| left_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| right_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      Value.StructTuple
                                                        "core::option::Option::None"
                                                        []
                                                        [ Ty.path "core::fmt::Arguments" ]
                                                        []
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |)))
                              ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                      []
                      [ T ]
                  ],
                M.match_operator (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                        []
                        [ T ]
                    ],
                  M.alloc (|
                    Ty.tuple
                      [
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                                  []
                                  [ T ]
                              ]
                          ];
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                      ],
                    M.call_closure (|
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                                    []
                                    [ T ]
                                ]
                            ];
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                        ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ T ],
                        "align_to",
                        [],
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                            []
                            [ T ]
                        ]
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                        let prefix :=
                          M.copy (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            γ0_0
                          |) in
                        let shorts :=
                          M.copy (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                                      []
                                      [ T ]
                                  ]
                              ],
                            γ0_1
                          |) in
                        let _suffix :=
                          M.copy (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            γ0_2
                          |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.read (|
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_associated_function (|
                                                            Ty.apply (Ty.path "slice") [] [ T ],
                                                            "is_empty",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| prefix |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.never_to_any (|
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::panic_fmt",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "core::fmt::Arguments",
                                                        M.get_associated_function (|
                                                          Ty.path "core::fmt::Arguments",
                                                          "new_const",
                                                          [ Value.Integer IntegerKind.Usize 1 ],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    ]
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "str" ]
                                                                    ],
                                                                  Value.Array
                                                                    [
                                                                      mk_str (|
                                                                        "Alignment should match"
                                                                      |)
                                                                    ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.read (|
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.tuple
                                              [
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                              ],
                                            Value.Tuple
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path "usize",
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                                                              []
                                                              [ T ]
                                                          ],
                                                        "len",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| shorts |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path "usize",
                                                    Value.Integer IntegerKind.Usize 1
                                                  |)
                                                |)
                                              ]
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let left_val :=
                                                  M.copy (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                    γ0_0
                                                  |) in
                                                let right_val :=
                                                  M.copy (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                    γ0_1
                                                  |) in
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              Ty.path "bool",
                                                              UnOp.not (|
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.eq,
                                                                  [
                                                                    M.read (|
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |);
                                                                    M.read (|
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.never_to_any (|
                                                          M.read (|
                                                            let~ kind :
                                                                Ty.path
                                                                  "core::panicking::AssertKind" :=
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                                []
                                                                [] in
                                                            M.alloc (|
                                                              Ty.path "never",
                                                              M.call_closure (|
                                                                Ty.path "never",
                                                                M.get_function (|
                                                                  "core::panicking::assert_failed",
                                                                  [],
                                                                  [ Ty.path "usize"; Ty.path "usize"
                                                                  ]
                                                                |),
                                                                [
                                                                  M.read (| kind |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| left_val |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| right_val |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |);
                                                                  Value.StructTuple
                                                                    "core::option::Option::None"
                                                                    []
                                                                    [ Ty.path "core::fmt::Arguments"
                                                                    ]
                                                                    []
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                                  ]
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                                  []
                                  [ T ]
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_array_field (|
                                    M.deref (| M.read (| shorts |) |),
                                    Value.Integer IntegerKind.Usize 0
                                  |)
                                |)
                              |)
                            |)
                          |)
                        |)))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::borrow::Borrow"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
              []
              [ T ]
          ]
          (Self T)
          (* Instance *) [ ("borrow", InstanceField.Method (borrow T)) ].
    End Impl_core_borrow_Borrow_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterCols_T_for_slice_T.
    
    Module Impl_core_borrow_BorrowMut_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterCols_T_for_slice_T.
      Definition Self (T : Ty.t) : Ty.t := Ty.apply (Ty.path "slice") [] [ T ].
      
      (* AlignedBorrow *)
      Definition borrow_mut (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.tuple
                                      [
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                      ],
                                    Value.Tuple
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                "len",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| self |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                                                  []
                                                  [ T ],
                                                "width",
                                                [],
                                                []
                                              |),
                                              []
                                            |)
                                          |)
                                        |)
                                      ]
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let left_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_0
                                          |) in
                                        let right_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_1
                                          |) in
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.eq,
                                                          [
                                                            M.read (|
                                                              M.deref (| M.read (| left_val |) |)
                                                            |);
                                                            M.read (|
                                                              M.deref (| M.read (| right_val |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.never_to_any (|
                                                  M.read (|
                                                    let~ kind :
                                                        Ty.path "core::panicking::AssertKind" :=
                                                      Value.StructTuple
                                                        "core::panicking::AssertKind::Eq"
                                                        []
                                                        []
                                                        [] in
                                                    M.alloc (|
                                                      Ty.path "never",
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::assert_failed",
                                                          [],
                                                          [ Ty.path "usize"; Ty.path "usize" ]
                                                        |),
                                                        [
                                                          M.read (| kind |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| left_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| right_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          Value.StructTuple
                                                            "core::option::Option::None"
                                                            []
                                                            [ Ty.path "core::fmt::Arguments" ]
                                                            []
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [
                        Ty.apply
                          (Ty.path
                            "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                          []
                          [ T ]
                      ],
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                            []
                            [ T ]
                        ],
                      M.alloc (|
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                                      []
                                      [ T ]
                                  ]
                              ];
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                          ],
                        M.call_closure (|
                          Ty.tuple
                            [
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                                        []
                                        [ T ]
                                    ]
                                ];
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                            ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ T ],
                            "align_to_mut",
                            [],
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                                []
                                [ T ]
                            ]
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                            let prefix :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_0
                              |) in
                            let shorts :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                                          []
                                          [ T ]
                                      ]
                                  ],
                                γ0_1
                              |) in
                            let _suffix :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_2
                              |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_associated_function (|
                                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                                "is_empty",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| prefix |) |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.never_to_any (|
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::panic_fmt",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::Arguments",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::Arguments",
                                                              "new_const",
                                                              [ Value.Integer IntegerKind.Usize 1 ],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Ty.path "str" ]
                                                                        ],
                                                                      Value.Array
                                                                        [
                                                                          mk_str (|
                                                                            "Alignment should match"
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (|
                                                Ty.tuple
                                                  [
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                  ],
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                                                                  []
                                                                  [ T ]
                                                              ],
                                                            "len",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| shorts |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        Value.Integer IntegerKind.Usize 1
                                                      |)
                                                    |)
                                                  ]
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let left_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_0
                                                      |) in
                                                    let right_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_1
                                                      |) in
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  Ty.path "bool",
                                                                  UnOp.not (|
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| left_val |)
                                                                          |)
                                                                        |);
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| right_val |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.never_to_any (|
                                                              M.read (|
                                                                let~ kind :
                                                                    Ty.path
                                                                      "core::panicking::AssertKind" :=
                                                                  Value.StructTuple
                                                                    "core::panicking::AssertKind::Eq"
                                                                    []
                                                                    []
                                                                    [] in
                                                                M.alloc (|
                                                                  Ty.path "never",
                                                                  M.call_closure (|
                                                                    Ty.path "never",
                                                                    M.get_function (|
                                                                      "core::panicking::assert_failed",
                                                                      [],
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.path "usize"
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.read (| kind |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| left_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| right_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      Value.StructTuple
                                                                        "core::option::Option::None"
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "core::fmt::Arguments"
                                                                        ]
                                                                        []
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                                      ]
                                                    |)))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                                      []
                                      [ T ]
                                  ],
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.SubPointer.get_array_field (|
                                        M.deref (| M.read (| shorts |) |),
                                        Value.Integer IntegerKind.Usize 0
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (T : Ty.t),
        M.IsTraitInstance
          "core::borrow::BorrowMut"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
              []
              [ T ]
          ]
          (Self T)
          (* Instance *) [ ("borrow_mut", InstanceField.Method (borrow_mut T)) ].
    End Impl_core_borrow_BorrowMut_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterCols_T_for_slice_T.
    
    Module Impl_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterCols_T.
      Definition Self (T : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
          []
          [ T ].
      
      (* AlignedBorrow *)
      Definition width (T : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self T in
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "usize",
              M.get_function (|
                "core::mem::size_of",
                [],
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                    []
                    [ Ty.path "u8" ]
                ]
              |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_width :
        forall (T : Ty.t),
        M.IsAssociatedFunction.C (Self T) "width" (width T).
      Admitted.
      Global Typeclasses Opaque width.
    End Impl_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterCols_T.
    
    (* StructRecord
      {
        name := "Rv32RdWriteAdapterAir";
        const_params := [];
        ty_params := [];
        fields :=
          [
            ("memory_bridge",
              Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge");
            ("execution_bridge", Ty.path "openvm_circuit::arch::execution::ExecutionBridge")
          ];
      } *)
    
    Module Impl_core_clone_Clone_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterAir.
      Definition Self : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir" ],
                self
              |) in
            M.match_operator (|
              Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir",
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir",
                      Value.DeclaredButUndefined,
                      [ fun γ => ltac:(M.monadic (M.read (| M.deref (| M.read (| self |) |) |))) ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterAir.
    
    Module Impl_core_marker_Copy_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterAir.
      Definition Self : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_Copy_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterAir.
    
    Module Impl_core_fmt_Debug_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterAir.
      Definition Self : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "Rv32RdWriteAdapterAir" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "memory_bridge" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.path
                          "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge"
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir",
                            "memory_bridge"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "execution_bridge" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [ Ty.path "openvm_circuit::arch::execution::ExecutionBridge" ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [ Ty.path "openvm_circuit::arch::execution::ExecutionBridge" ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir",
                                "execution_bridge"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterAir.
    
    Module Impl_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterAir.
      Definition Self : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir".
      
      (* derive_new::new *)
      Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ memory_bridge; execution_bridge ] =>
          ltac:(M.monadic
            (let memory_bridge :=
              M.alloc (|
                Ty.path "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                memory_bridge
              |) in
            let execution_bridge :=
              M.alloc (|
                Ty.path "openvm_circuit::arch::execution::ExecutionBridge",
                execution_bridge
              |) in
            Value.mkStructRecord
              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir"
              []
              []
              [
                ("memory_bridge", M.read (| memory_bridge |));
                ("execution_bridge", M.read (| execution_bridge |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
      Admitted.
      Global Typeclasses Opaque new.
      (*
          fn conditional_eval<AB: InteractionBuilder>(
              &self,
              builder: &mut AB,
              local_cols: &Rv32RdWriteAdapterCols<AB::Var>,
              ctx: AdapterAirContext<
                  AB::Expr,
                  BasicAdapterInterface<
                      AB::Expr,
                      ImmInstruction<AB::Expr>,
                      0,
                      1,
                      0,
                      RV32_REGISTER_NUM_LIMBS,
                  >,
              >,
              needs_write: Option<AB::Expr>,
          ) {
              let timestamp: AB::Var = local_cols.from_state.timestamp;
              let timestamp_delta = 1;
              let (write_count, f) = if let Some(needs_write) = needs_write {
                  (needs_write.clone(), needs_write)
              } else {
                  (ctx.instruction.is_valid.clone(), AB::Expr::ZERO)
              };
              self.memory_bridge
                  .write(
                      MemoryAddress::new(
                          AB::F::from_canonical_u32(RV32_REGISTER_AS),
                          local_cols.rd_ptr,
                      ),
                      ctx.writes[0].clone(),
                      timestamp,
                      &local_cols.rd_aux_cols,
                  )
                  .eval(builder, write_count);
      
              let to_pc = ctx
                  .to_pc
                  .unwrap_or(local_cols.from_state.pc + AB::F::from_canonical_u32(DEFAULT_PC_STEP));
              // regardless of `needs_write`, must always execute instruction when `is_valid`.
              self.execution_bridge
                  .execute(
                      ctx.instruction.opcode,
                      [
                          local_cols.rd_ptr.into(),
                          AB::Expr::ZERO,
                          ctx.instruction.immediate,
                          AB::Expr::from_canonical_u32(RV32_REGISTER_AS),
                          AB::Expr::ZERO,
                          f,
                      ],
                      local_cols.from_state,
                      ExecutionState {
                          pc: to_pc,
                          timestamp: timestamp + AB::F::from_canonical_usize(timestamp_delta),
                      },
                  )
                  .eval(builder, ctx.instruction.is_valid);
          }
      *)
      Definition conditional_eval (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [ AB ], [ self; builder; local_cols; ctx; needs_write ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir" ],
                self
              |) in
            let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
            let local_cols :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  ],
                local_cols
              |) in
            let ctx :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::AdapterAirContext")
                  []
                  [
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                    Ty.apply
                      (Ty.path "openvm_circuit::arch::integration_api::BasicAdapterInterface")
                      [
                        Value.Integer IntegerKind.Usize 0;
                        Value.Integer IntegerKind.Usize 1;
                        Value.Integer IntegerKind.Usize 0;
                        M.unevaluated_const
                          (mk_str (|
                            "openvm_rv32im_circuit_adapters_rdwrite_conditional_eval_discriminant"
                          |))
                      ]
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.apply
                          (Ty.path "openvm_circuit::arch::integration_api::ImmInstruction")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                      ]
                  ],
                ctx
              |) in
            let needs_write :=
              M.alloc (|
                Ty.apply
                  (Ty.path "core::option::Option")
                  []
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                needs_write
              |) in
            M.read (|
              let~ timestamp : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" :=
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| local_cols |) |),
                      "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols",
                      "from_state"
                    |),
                    "openvm_circuit::arch::execution::ExecutionState",
                    "timestamp"
                  |)
                |) in
              let~ timestamp_delta : Ty.path "usize" := Value.Integer IntegerKind.Usize 1 in
              M.alloc (|
                Ty.tuple [],
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (|
                    Ty.tuple
                      [
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                      ],
                    M.match_operator (|
                      Ty.tuple
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                        ],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := needs_write in
                            let γ0_0 :=
                              M.SubPointer.get_struct_tuple_field (|
                                γ,
                                "core::option::Option::Some",
                                0
                              |) in
                            let needs_write :=
                              M.copy (|
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                γ0_0
                              |) in
                            Value.Tuple
                              [
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::clone::Clone",
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    [],
                                    [],
                                    "clone",
                                    [],
                                    []
                                  |),
                                  [ M.borrow (| Pointer.Kind.Ref, needs_write |) ]
                                |);
                                M.read (| needs_write |)
                              ]));
                        fun γ =>
                          ltac:(M.monadic
                            (Value.Tuple
                              [
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::clone::Clone",
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    [],
                                    [],
                                    "clone",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          ctx,
                                          "openvm_circuit::arch::integration_api::AdapterAirContext",
                                          "instruction"
                                        |),
                                        "openvm_circuit::arch::integration_api::ImmInstruction",
                                        "is_valid"
                                      |)
                                    |)
                                  ]
                                |);
                                M.read (|
                                  get_constant (|
                                    "p3_field::field::FieldAlgebra::ZERO",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  |)
                                |)
                              ]))
                      ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let write_count :=
                          M.copy (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            γ0_0
                          |) in
                        let f :=
                          M.copy (|
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            γ0_1
                          |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::offline_checker::bridge::MemoryWriteOperation")
                                  [ Value.Integer IntegerKind.Usize 4 ]
                                  [
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr";
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ],
                                "eval",
                                [],
                                [
                                  AB;
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::offline_checker::bridge::MemoryWriteOperation")
                                    [ Value.Integer IntegerKind.Usize 4 ]
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr";
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ],
                                  M.get_associated_function (|
                                    Ty.path
                                      "openvm_circuit::system::memory::offline_checker::bridge::MemoryBridge",
                                    "write",
                                    [ Value.Integer IntegerKind.Usize 4 ],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr";
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var";
                                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F";
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var";
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr";
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir",
                                        "memory_bridge"
                                      |)
                                    |);
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "F";
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path "openvm_circuit::system::memory::MemoryAddress")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "F";
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ],
                                        "new",
                                        [],
                                        []
                                      |),
                                      [
                                        M.call_closure (|
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "F",
                                          M.get_trait_method (|
                                            "p3_field::field::FieldAlgebra",
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "F",
                                            [],
                                            [],
                                            "from_canonical_u32",
                                            [],
                                            []
                                          |),
                                          [
                                            M.read (|
                                              get_constant (|
                                                "openvm_instructions::riscv::RV32_REGISTER_AS",
                                                Ty.path "u32"
                                              |)
                                            |)
                                          ]
                                        |);
                                        M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| local_cols |) |),
                                            "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols",
                                            "rd_ptr"
                                          |)
                                        |)
                                      ]
                                    |);
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 4 ]
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        ],
                                      M.get_trait_method (|
                                        "core::clone::Clone",
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 4 ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr"
                                          ],
                                        [],
                                        [],
                                        "clone",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_array_field (|
                                            M.SubPointer.get_struct_record_field (|
                                              ctx,
                                              "openvm_circuit::arch::integration_api::AdapterAirContext",
                                              "writes"
                                            |),
                                            Value.Integer IntegerKind.Usize 0
                                          |)
                                        |)
                                      ]
                                    |);
                                    M.read (| timestamp |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| local_cols |) |),
                                            "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols",
                                            "rd_aux_cols"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| builder |) |)
                                |);
                                M.read (| write_count |)
                              ]
                            |) in
                          let~ to_pc :
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "core::option::Option")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ],
                                "unwrap_or",
                                [],
                                []
                              |),
                              [
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    ctx,
                                    "openvm_circuit::arch::integration_api::AdapterAirContext",
                                    "to_pc"
                                  |)
                                |);
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::ops::arith::Add",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                    [],
                                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F"
                                    ],
                                    "add",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| local_cols |) |),
                                          "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols",
                                          "from_state"
                                        |),
                                        "openvm_circuit::arch::execution::ExecutionState",
                                        "pc"
                                      |)
                                    |);
                                    M.call_closure (|
                                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "F",
                                      M.get_trait_method (|
                                        "p3_field::field::FieldAlgebra",
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "F",
                                        [],
                                        [],
                                        "from_canonical_u32",
                                        [],
                                        []
                                      |),
                                      [
                                        M.read (|
                                          get_constant (|
                                            "openvm_instructions::program::DEFAULT_PC_STEP",
                                            Ty.path "u32"
                                          |)
                                        |)
                                      ]
                                    |)
                                  ]
                                |)
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::arch::execution::ExecutionBridgeInteractor")
                                  []
                                  [ AB ],
                                "eval",
                                [],
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::arch::execution::ExecutionBridgeInteractor")
                                    []
                                    [ AB ],
                                  M.get_associated_function (|
                                    Ty.path "openvm_circuit::arch::execution::ExecutionBridge",
                                    "execute",
                                    [],
                                    [
                                      AB;
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr";
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr";
                                      Ty.apply
                                        (Ty.path "array")
                                        [ Value.Integer IntegerKind.Usize 6 ]
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr"
                                        ];
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var";
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ]
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| self |) |),
                                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir",
                                        "execution_bridge"
                                      |)
                                    |);
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          ctx,
                                          "openvm_circuit::arch::integration_api::AdapterAirContext",
                                          "instruction"
                                        |),
                                        "openvm_circuit::arch::integration_api::ImmInstruction",
                                        "opcode"
                                      |)
                                    |);
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr",
                                          M.get_trait_method (|
                                            "core::convert::Into",
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var",
                                            [],
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Expr"
                                            ],
                                            "into",
                                            [],
                                            []
                                          |),
                                          [
                                            M.read (|
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| local_cols |) |),
                                                "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols",
                                                "rd_ptr"
                                              |)
                                            |)
                                          ]
                                        |);
                                        M.read (|
                                          get_constant (|
                                            "p3_field::field::FieldAlgebra::ZERO",
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr"
                                          |)
                                        |);
                                        M.read (|
                                          M.SubPointer.get_struct_record_field (|
                                            M.SubPointer.get_struct_record_field (|
                                              ctx,
                                              "openvm_circuit::arch::integration_api::AdapterAirContext",
                                              "instruction"
                                            |),
                                            "openvm_circuit::arch::integration_api::ImmInstruction",
                                            "immediate"
                                          |)
                                        |);
                                        M.call_closure (|
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr",
                                          M.get_trait_method (|
                                            "p3_field::field::FieldAlgebra",
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr",
                                            [],
                                            [],
                                            "from_canonical_u32",
                                            [],
                                            []
                                          |),
                                          [
                                            M.read (|
                                              get_constant (|
                                                "openvm_instructions::riscv::RV32_REGISTER_AS",
                                                Ty.path "u32"
                                              |)
                                            |)
                                          ]
                                        |);
                                        M.read (|
                                          get_constant (|
                                            "p3_field::field::FieldAlgebra::ZERO",
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr"
                                          |)
                                        |);
                                        M.read (| f |)
                                      ];
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| local_cols |) |),
                                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols",
                                        "from_state"
                                      |)
                                    |);
                                    Value.mkStructRecord
                                      "openvm_circuit::arch::execution::ExecutionState"
                                      []
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr"
                                      ]
                                      [
                                        ("pc", M.read (| to_pc |));
                                        ("timestamp",
                                          M.call_closure (|
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr",
                                            M.get_trait_method (|
                                              "core::ops::arith::Add",
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Var",
                                              [],
                                              [
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "F"
                                              ],
                                              "add",
                                              [],
                                              []
                                            |),
                                            [
                                              M.read (| timestamp |);
                                              M.call_closure (|
                                                Ty.associated_in_trait
                                                  "p3_air::air::AirBuilder"
                                                  []
                                                  []
                                                  AB
                                                  "F",
                                                M.get_trait_method (|
                                                  "p3_field::field::FieldAlgebra",
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "F",
                                                  [],
                                                  [],
                                                  "from_canonical_usize",
                                                  [],
                                                  []
                                                |),
                                                [ M.read (| timestamp_delta |) ]
                                              |)
                                            ]
                                          |))
                                      ]
                                  ]
                                |);
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (| M.read (| builder |) |)
                                |);
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.SubPointer.get_struct_record_field (|
                                      ctx,
                                      "openvm_circuit::arch::integration_api::AdapterAirContext",
                                      "instruction"
                                    |),
                                    "openvm_circuit::arch::integration_api::ImmInstruction",
                                    "is_valid"
                                  |)
                                |)
                              ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_conditional_eval :
        M.IsAssociatedFunction.C Self "conditional_eval" conditional_eval.
      Admitted.
      Global Typeclasses Opaque conditional_eval.
    End Impl_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterAir.
    
    (* StructRecord
      {
        name := "Rv32CondRdWriteAdapterAir";
        const_params := [];
        ty_params := [];
        fields :=
          [ ("inner", Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir") ];
      } *)
    
    Module Impl_core_clone_Clone_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterAir.
      Definition Self : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterAir".
      
      (* Clone *)
      Definition clone (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterAir" ],
                self
              |) in
            M.match_operator (|
              Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterAir",
              Value.DeclaredButUndefined,
              [ fun γ => ltac:(M.monadic (M.read (| M.deref (| M.read (| self |) |) |))) ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("clone", InstanceField.Method clone) ].
    End Impl_core_clone_Clone_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterAir.
    
    Module Impl_core_marker_Copy_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterAir.
      Definition Self : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterAir".
      
      Axiom Implements :
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [].
    End Impl_core_marker_Copy_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterAir.
    
    Module Impl_core_fmt_Debug_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterAir.
      Definition Self : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterAir".
      
      (* Debug *)
      Definition fmt (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterAir" ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field1_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (| mk_str (| "Rv32CondRdWriteAdapterAir" |) |)
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "inner" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir"
                          ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.path
                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir"
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterAir",
                                "inner"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          Self
          (* Instance *) [ ("fmt", InstanceField.Method fmt) ].
    End Impl_core_fmt_Debug_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterAir.
    
    Module Impl_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterAir.
      Definition Self : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterAir".
      
      (* derive_new::new *)
      Definition new (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        match ε, τ, α with
        | [], [], [ inner ] =>
          ltac:(M.monadic
            (let inner :=
              M.alloc (|
                Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir",
                inner
              |) in
            Value.mkStructRecord
              "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterAir"
              []
              []
              [ ("inner", M.read (| inner |)) ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new : M.IsAssociatedFunction.C Self "new" new.
      Admitted.
      Global Typeclasses Opaque new.
    End Impl_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterAir.
    
    Module Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterAir.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir".
      
      (*
          fn width(&self) -> usize {
              Rv32RdWriteAdapterCols::<F>::width()
          }
      *)
      Definition width (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir" ],
                self
              |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                  []
                  [ F ],
                "width",
                [],
                []
              |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "p3_air::air::BaseAir"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self F)
          (* Instance *) [ ("width", InstanceField.Method (width F)) ].
    End Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterAir.
    
    Module Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterAir.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterAir".
      
      (*
          fn width(&self) -> usize {
              Rv32CondRdWriteAdapterCols::<F>::width()
          }
      *)
      Definition width (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterAir" ],
                self
              |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                  []
                  [ F ],
                "width",
                [],
                []
              |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "p3_air::air::BaseAir"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self F)
          (* Instance *) [ ("width", InstanceField.Method (width F)) ].
    End Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterAir.
    
    
    Module Impl_openvm_circuit_arch_integration_api_VmAdapterAir_where_openvm_stark_backend_interaction_InteractionBuilder_AB_AB_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterAir.
      Definition Self (AB : Ty.t) : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir".
      
      (*
          type Interface =
              BasicAdapterInterface<AB::Expr, ImmInstruction<AB::Expr>, 0, 1, 0, RV32_REGISTER_NUM_LIMBS>;
      *)
      Definition _Interface (AB : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_circuit::arch::integration_api::BasicAdapterInterface")
          [
            Value.Integer IntegerKind.Usize 0;
            Value.Integer IntegerKind.Usize 1;
            Value.Integer IntegerKind.Usize 0;
            M.unevaluated_const
              (mk_str (| "openvm_rv32im_circuit_adapters_rdwrite_Interface_discriminant" |))
          ]
          [
            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
            Ty.apply
              (Ty.path "openvm_circuit::arch::integration_api::ImmInstruction")
              []
              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
          ].
      
      (*
          fn eval(
              &self,
              builder: &mut AB,
              local: &[AB::Var],
              ctx: AdapterAirContext<AB::Expr, Self::Interface>,
          ) {
              let local_cols: &Rv32RdWriteAdapterCols<AB::Var> = ( *local).borrow();
              self.conditional_eval(builder, local_cols, ctx, None);
          }
      *)
      Definition eval (AB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self AB in
        match ε, τ, α with
        | [], [], [ self; builder; local; ctx ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir" ],
                self
              |) in
            let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
            let local :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  ],
                local
              |) in
            let ctx :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::AdapterAirContext")
                  []
                  [
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                    Ty.associated_in_trait
                      "openvm_circuit::arch::integration_api::VmAdapterAir"
                      []
                      [ AB ]
                      (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir")
                      "Interface"
                  ],
                ctx
              |) in
            M.read (|
              let~ local_cols :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                      M.get_trait_method (|
                        "core::borrow::Borrow",
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        [],
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                        "borrow",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| local |) |) |) ]
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir",
                    "conditional_eval",
                    [],
                    [ AB ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| local_cols |) |) |);
                    M.read (| ctx |);
                    Value.StructTuple
                      "core::option::Option::None"
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                      []
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn get_from_pc(&self, local: &[AB::Var]) -> AB::Var {
              let cols: &Rv32RdWriteAdapterCols<_> = local.borrow();
              cols.from_state.pc
          }
      *)
      Definition get_from_pc
          (AB : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self AB in
        match ε, τ, α with
        | [], [], [ self; local ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir" ],
                self
              |) in
            let local :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  ],
                local
              |) in
            M.read (|
              let~ cols :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                      M.get_trait_method (|
                        "core::borrow::Borrow",
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        [],
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                        "borrow",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| local |) |) |) ]
                    |)
                  |)
                |) in
              M.SubPointer.get_struct_record_field (|
                M.SubPointer.get_struct_record_field (|
                  M.deref (| M.read (| cols |) |),
                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols",
                  "from_state"
                |),
                "openvm_circuit::arch::execution::ExecutionState",
                "pc"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (AB : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::integration_api::VmAdapterAir"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ AB ]
          (Self AB)
          (* Instance *)
          [
            ("Interface", InstanceField.Ty (_Interface AB));
            ("eval", InstanceField.Method (eval AB));
            ("get_from_pc", InstanceField.Method (get_from_pc AB))
          ].
    End Impl_openvm_circuit_arch_integration_api_VmAdapterAir_where_openvm_stark_backend_interaction_InteractionBuilder_AB_AB_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterAir.
    
    Module Impl_openvm_circuit_arch_integration_api_VmAdapterAir_where_openvm_stark_backend_interaction_InteractionBuilder_AB_AB_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterAir.
      Definition Self (AB : Ty.t) : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterAir".
      
      (*
          type Interface =
              BasicAdapterInterface<AB::Expr, ImmInstruction<AB::Expr>, 0, 1, 0, RV32_REGISTER_NUM_LIMBS>;
      *)
      Definition _Interface (AB : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_circuit::arch::integration_api::BasicAdapterInterface")
          [
            Value.Integer IntegerKind.Usize 0;
            Value.Integer IntegerKind.Usize 1;
            Value.Integer IntegerKind.Usize 0;
            M.unevaluated_const
              (mk_str (| "openvm_rv32im_circuit_adapters_rdwrite_Interface_discriminant" |))
          ]
          [
            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
            Ty.apply
              (Ty.path "openvm_circuit::arch::integration_api::ImmInstruction")
              []
              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
          ].
      
      (*
          fn eval(
              &self,
              builder: &mut AB,
              local: &[AB::Var],
              ctx: AdapterAirContext<AB::Expr, Self::Interface>,
          ) {
              let local_cols: &Rv32CondRdWriteAdapterCols<AB::Var> = ( *local).borrow();
      
              builder.assert_bool(local_cols.needs_write);
              builder
                  .when::<AB::Expr>(not(ctx.instruction.is_valid.clone()))
                  .assert_zero(local_cols.needs_write);
      
              self.inner.conditional_eval(
                  builder,
                  &local_cols.inner,
                  ctx,
                  Some(local_cols.needs_write.into()),
              );
          }
      *)
      Definition eval (AB : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self AB in
        match ε, τ, α with
        | [], [], [ self; builder; local; ctx ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterAir" ],
                self
              |) in
            let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
            let local :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  ],
                local
              |) in
            let ctx :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::AdapterAirContext")
                  []
                  [
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                    Ty.associated_in_trait
                      "openvm_circuit::arch::integration_api::VmAdapterAir"
                      []
                      [ AB ]
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterAir")
                      "Interface"
                  ],
                ctx
              |) in
            M.read (|
              let~ local_cols :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                      M.get_trait_method (|
                        "core::borrow::Borrow",
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        [],
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                        "borrow",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| local |) |) |) ]
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    AB,
                    [],
                    [],
                    "assert_bool",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| local_cols |) |),
                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols",
                        "needs_write"
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                    [],
                    [],
                    "assert_zero",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.alloc (|
                        Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                        M.call_closure (|
                          Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                          M.get_trait_method (|
                            "p3_air::air::AirBuilder",
                            AB,
                            [],
                            [],
                            "when",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_function (|
                                "openvm_circuit_primitives::utils::not",
                                [],
                                [
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                ]
                              |),
                              [
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::clone::Clone",
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    [],
                                    [],
                                    "clone",
                                    [],
                                    []
                                  |),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          ctx,
                                          "openvm_circuit::arch::integration_api::AdapterAirContext",
                                          "instruction"
                                        |),
                                        "openvm_circuit::arch::integration_api::ImmInstruction",
                                        "is_valid"
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| local_cols |) |),
                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols",
                        "needs_write"
                      |)
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir",
                    "conditional_eval",
                    [],
                    [ AB ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| self |) |),
                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterAir",
                        "inner"
                      |)
                    |);
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| local_cols |) |),
                            "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols",
                            "inner"
                          |)
                        |)
                      |)
                    |);
                    M.read (| ctx |);
                    Value.StructTuple
                      "core::option::Option::Some"
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                      [
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::convert::Into",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                            "into",
                            [],
                            []
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| local_cols |) |),
                                "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols",
                                "needs_write"
                              |)
                            |)
                          ]
                        |)
                      ]
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn get_from_pc(&self, local: &[AB::Var]) -> AB::Var {
              let cols: &Rv32CondRdWriteAdapterCols<_> = local.borrow();
              cols.inner.from_state.pc
          }
      *)
      Definition get_from_pc
          (AB : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self AB in
        match ε, τ, α with
        | [], [], [ self; local ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterAir" ],
                self
              |) in
            let local :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  ],
                local
              |) in
            M.read (|
              let~ cols :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                      M.get_trait_method (|
                        "core::borrow::Borrow",
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        [],
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                        "borrow",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| local |) |) |) ]
                    |)
                  |)
                |) in
              M.SubPointer.get_struct_record_field (|
                M.SubPointer.get_struct_record_field (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| cols |) |),
                    "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols",
                    "inner"
                  |),
                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols",
                  "from_state"
                |),
                "openvm_circuit::arch::execution::ExecutionState",
                "pc"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (AB : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::integration_api::VmAdapterAir"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ AB ]
          (Self AB)
          (* Instance *)
          [
            ("Interface", InstanceField.Ty (_Interface AB));
            ("eval", InstanceField.Method (eval AB));
            ("get_from_pc", InstanceField.Method (get_from_pc AB))
          ].
    End Impl_openvm_circuit_arch_integration_api_VmAdapterAir_where_openvm_stark_backend_interaction_InteractionBuilder_AB_AB_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterAir.
    
    Module Impl_openvm_circuit_arch_integration_api_VmAdapterChip_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterChip_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
          []
          [ F ].
      
      (*     type ReadRecord = (); *)
      Definition _ReadRecord (F : Ty.t) : Ty.t := Ty.tuple [].
      
      (*     type WriteRecord = Rv32RdWriteWriteRecord; *)
      Definition _WriteRecord (F : Ty.t) : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord".
      
      (*     type Air = Rv32RdWriteAdapterAir; *)
      Definition _Air (F : Ty.t) : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterAir".
      
      (*     type Interface = BasicAdapterInterface<F, ImmInstruction<F>, 0, 1, 0, RV32_REGISTER_NUM_LIMBS>; *)
      Definition _Interface (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_circuit::arch::integration_api::BasicAdapterInterface")
          [
            Value.Integer IntegerKind.Usize 0;
            Value.Integer IntegerKind.Usize 1;
            Value.Integer IntegerKind.Usize 0;
            M.unevaluated_const
              (mk_str (| "openvm_rv32im_circuit_adapters_rdwrite_Interface_discriminant" |))
          ]
          [ F; Ty.apply (Ty.path "openvm_circuit::arch::integration_api::ImmInstruction") [] [ F ]
          ].
      
      (*
          fn preprocess(
              &mut self,
              _memory: &mut MemoryController<F>,
              instruction: &Instruction<F>,
          ) -> Result<(
              <Self::Interface as VmAdapterInterface<F>>::Reads,
              Self::ReadRecord,
          )> {
              let d = instruction.d;
              debug_assert_eq!(d.as_canonical_u32(), RV32_REGISTER_AS);
      
              Ok(([], ()))
          }
      *)
      Definition preprocess (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; _memory; instruction ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                      []
                      [ F ]
                  ],
                self
              |) in
            let _memory :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                      []
                      [ F ]
                  ],
                _memory
              |) in
            let instruction :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ] ],
                instruction
              |) in
            M.read (|
              let~ d : F :=
                M.read (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| instruction |) |),
                    "openvm_instructions::instruction::Instruction",
                    "d"
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (|
                                Ty.tuple
                                  [
                                    Ty.apply (Ty.path "&") [] [ Ty.path "u32" ];
                                    Ty.apply (Ty.path "&") [] [ Ty.path "u32" ]
                                  ],
                                Value.Tuple
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.path "u32",
                                        M.call_closure (|
                                          Ty.path "u32",
                                          M.get_trait_method (|
                                            "p3_field::field::PrimeField32",
                                            F,
                                            [],
                                            [],
                                            "as_canonical_u32",
                                            [],
                                            []
                                          |),
                                          [ M.borrow (| Pointer.Kind.Ref, d |) ]
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      get_constant (|
                                        "openvm_instructions::riscv::RV32_REGISTER_AS",
                                        Ty.path "u32"
                                      |)
                                    |)
                                  ]
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let left_val :=
                                      M.copy (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                        γ0_0
                                      |) in
                                    let right_val :=
                                      M.copy (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                                        γ0_1
                                      |) in
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  Ty.path "bool",
                                                  UnOp.not (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      BinOp.eq,
                                                      [
                                                        M.read (|
                                                          M.deref (| M.read (| left_val |) |)
                                                        |);
                                                        M.read (|
                                                          M.deref (| M.read (| right_val |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.never_to_any (|
                                              M.read (|
                                                let~ kind : Ty.path "core::panicking::AssertKind" :=
                                                  Value.StructTuple
                                                    "core::panicking::AssertKind::Eq"
                                                    []
                                                    []
                                                    [] in
                                                M.alloc (|
                                                  Ty.path "never",
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::assert_failed",
                                                      [],
                                                      [ Ty.path "u32"; Ty.path "u32" ]
                                                    |),
                                                    [
                                                      M.read (| kind |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| left_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| right_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      Value.StructTuple
                                                        "core::option::Option::None"
                                                        []
                                                        [ Ty.path "core::fmt::Arguments" ]
                                                        []
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |)))
                              ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.tuple
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 0 ]
                          [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 0 ] [ F ]
                          ];
                        Ty.tuple []
                      ];
                    Ty.path "openvm_circuit::arch::execution::ExecutionError"
                  ],
                Value.StructTuple
                  "core::result::Result::Ok"
                  []
                  [
                    Ty.tuple
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 0 ]
                          [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 0 ] [ F ]
                          ];
                        Ty.tuple []
                      ];
                    Ty.path "openvm_circuit::arch::execution::ExecutionError"
                  ]
                  [ Value.Tuple [ Value.Array []; Value.Tuple [] ] ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn postprocess(
              &mut self,
              memory: &mut MemoryController<F>,
              instruction: &Instruction<F>,
              from_state: ExecutionState<u32>,
              output: AdapterRuntimeContext<F, Self::Interface>,
              _read_record: &Self::ReadRecord,
          ) -> Result<(ExecutionState<u32>, Self::WriteRecord)> {
              let Instruction { a, d, .. } = *instruction;
              let (rd_id, _) = memory.write(d, a, output.writes[0]);
      
              Ok((
                  ExecutionState {
                      pc: output.to_pc.unwrap_or(from_state.pc + DEFAULT_PC_STEP),
                      timestamp: memory.timestamp(),
                  },
                  Self::WriteRecord {
                      from_state,
                      rd_id: Some(rd_id),
                  },
              ))
          }
      *)
      Definition postprocess (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; memory; instruction; from_state; output; _read_record ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                      []
                      [ F ]
                  ],
                self
              |) in
            let memory :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                      []
                      [ F ]
                  ],
                memory
              |) in
            let instruction :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ] ],
                instruction
              |) in
            let from_state :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                  []
                  [ Ty.path "u32" ],
                from_state
              |) in
            let output :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                  []
                  [
                    F;
                    Ty.associated_in_trait
                      "openvm_circuit::arch::integration_api::VmAdapterChip"
                      []
                      [ F ]
                      (Ty.apply
                        (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                        []
                        [ F ])
                      "Interface"
                  ],
                output
              |) in
            let _read_record :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.associated_in_trait
                      "openvm_circuit::arch::integration_api::VmAdapterChip"
                      []
                      [ F ]
                      (Ty.apply
                        (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                        []
                        [ F ])
                      "ReadRecord"
                  ],
                _read_record
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.tuple
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                        []
                        [ Ty.path "u32" ];
                      Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord"
                    ];
                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                ],
              M.deref (| M.read (| instruction |) |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_instructions::instruction::Instruction",
                        "a"
                      |) in
                    let γ0_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_instructions::instruction::Instruction",
                        "d"
                      |) in
                    let a := M.copy (| F, γ0_0 |) in
                    let d := M.copy (| F, γ0_1 |) in
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.tuple
                            [
                              Ty.apply
                                (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                                []
                                [ Ty.path "u32" ];
                              Ty.path
                                "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord"
                            ];
                          Ty.path "openvm_circuit::arch::execution::ExecutionError"
                        ],
                      M.alloc (|
                        Ty.tuple
                          [
                            Ty.path "openvm_circuit::system::memory::controller::RecordId";
                            Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ]
                          ],
                        M.call_closure (|
                          Ty.tuple
                            [
                              Ty.path "openvm_circuit::system::memory::controller::RecordId";
                              Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 4 ] [ F ]
                            ],
                          M.get_associated_function (|
                            Ty.apply
                              (Ty.path
                                "openvm_circuit::system::memory::controller::MemoryController")
                              []
                              [ F ],
                            "write",
                            [ Value.Integer IntegerKind.Usize 4 ],
                            []
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                            M.read (| d |);
                            M.read (| a |);
                            M.read (|
                              M.SubPointer.get_array_field (|
                                M.SubPointer.get_struct_record_field (|
                                  output,
                                  "openvm_circuit::arch::integration_api::AdapterRuntimeContext",
                                  "writes"
                                |),
                                Value.Integer IntegerKind.Usize 0
                              |)
                            |)
                          ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let rd_id :=
                              M.copy (|
                                Ty.path "openvm_circuit::system::memory::controller::RecordId",
                                γ0_0
                              |) in
                            Value.StructTuple
                              "core::result::Result::Ok"
                              []
                              [
                                Ty.tuple
                                  [
                                    Ty.apply
                                      (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                                      []
                                      [ Ty.path "u32" ];
                                    Ty.path
                                      "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord"
                                  ];
                                Ty.path "openvm_circuit::arch::execution::ExecutionError"
                              ]
                              [
                                Value.Tuple
                                  [
                                    Value.mkStructRecord
                                      "openvm_circuit::arch::execution::ExecutionState"
                                      []
                                      [ Ty.path "u32" ]
                                      [
                                        ("pc",
                                          M.call_closure (|
                                            Ty.path "u32",
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.path "u32" ],
                                              "unwrap_or",
                                              [],
                                              []
                                            |),
                                            [
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  output,
                                                  "openvm_circuit::arch::integration_api::AdapterRuntimeContext",
                                                  "to_pc"
                                                |)
                                              |);
                                              M.call_closure (|
                                                Ty.path "u32",
                                                BinOp.Wrap.add,
                                                [
                                                  M.read (|
                                                    M.SubPointer.get_struct_record_field (|
                                                      from_state,
                                                      "openvm_circuit::arch::execution::ExecutionState",
                                                      "pc"
                                                    |)
                                                  |);
                                                  M.read (|
                                                    get_constant (|
                                                      "openvm_instructions::program::DEFAULT_PC_STEP",
                                                      Ty.path "u32"
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |));
                                        ("timestamp",
                                          M.call_closure (|
                                            Ty.path "u32",
                                            M.get_associated_function (|
                                              Ty.apply
                                                (Ty.path
                                                  "openvm_circuit::system::memory::controller::MemoryController")
                                                []
                                                [ F ],
                                              "timestamp",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.Ref,
                                                M.deref (| M.read (| memory |) |)
                                              |)
                                            ]
                                          |))
                                      ];
                                    Value.mkStructRecord
                                      "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord"
                                      []
                                      []
                                      [
                                        ("from_state", M.read (| from_state |));
                                        ("rd_id",
                                          Value.StructTuple
                                            "core::option::Option::Some"
                                            []
                                            [
                                              Ty.path
                                                "openvm_circuit::system::memory::controller::RecordId"
                                            ]
                                            [ M.read (| rd_id |) ])
                                      ]
                                  ]
                              ]))
                      ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn generate_trace_row(
              &self,
              row_slice: &mut [F],
              _read_record: Self::ReadRecord,
              write_record: Self::WriteRecord,
              memory: &OfflineMemory<F>,
          ) {
              let aux_cols_factory = memory.aux_cols_factory();
              let adapter_cols: &mut Rv32RdWriteAdapterCols<F> = row_slice.borrow_mut();
              adapter_cols.from_state = write_record.from_state.map(F::from_canonical_u32);
              let rd = memory.record_by_id(write_record.rd_id.unwrap());
              adapter_cols.rd_ptr = rd.pointer;
              aux_cols_factory.generate_write_aux(rd, &mut adapter_cols.rd_aux_cols);
          }
      *)
      Definition generate_trace_row
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; row_slice; _read_record; write_record; memory ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                      []
                      [ F ]
                  ],
                self
              |) in
            let row_slice :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                row_slice
              |) in
            let _read_record :=
              M.alloc (|
                Ty.associated_in_trait
                  "openvm_circuit::arch::integration_api::VmAdapterChip"
                  []
                  [ F ]
                  (Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                    []
                    [ F ])
                  "ReadRecord",
                _read_record
              |) in
            let write_record :=
              M.alloc (|
                Ty.associated_in_trait
                  "openvm_circuit::arch::integration_api::VmAdapterChip"
                  []
                  [ F ]
                  (Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                    []
                    [ F ])
                  "WriteRecord",
                write_record
              |) in
            let memory :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                      []
                      [ F ]
                  ],
                memory
              |) in
            M.read (|
              let~ aux_cols_factory :
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                    []
                    [ F ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                    []
                    [ F ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                      []
                      [ F ],
                    "aux_cols_factory",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| memory |) |) |) ]
                |) in
              let~ adapter_cols :
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                        []
                        [ F ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                            []
                            [ F ]
                        ],
                      M.get_trait_method (|
                        "core::borrow::BorrowMut",
                        Ty.apply (Ty.path "slice") [] [ F ],
                        [],
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols")
                            []
                            [ F ]
                        ],
                        "borrow_mut",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| row_slice |) |) |) ]
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| adapter_cols |) |),
                    "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols",
                    "from_state"
                  |),
                  M.call_closure (|
                    Ty.apply (Ty.path "openvm_circuit::arch::execution::ExecutionState") [] [ F ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                        []
                        [ Ty.path "u32" ],
                      "map",
                      [],
                      [ F; Ty.function [ Ty.path "u32" ] F ]
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          write_record,
                          "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord",
                          "from_state"
                        |)
                      |);
                      M.get_trait_method (|
                        "p3_field::field::FieldAlgebra",
                        F,
                        [],
                        [],
                        "from_canonical_u32",
                        [],
                        []
                      |)
                    ]
                  |)
                |) in
              let~ rd :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::offline::MemoryRecord")
                        []
                        [ F ]
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::system::memory::offline::MemoryRecord")
                        []
                        [ F ]
                    ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                      []
                      [ F ],
                    "record_by_id",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| memory |) |) |);
                    M.call_closure (|
                      Ty.path "openvm_circuit::system::memory::controller::RecordId",
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "core::option::Option")
                          []
                          [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ],
                        "unwrap",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            write_record,
                            "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord",
                            "rd_id"
                          |)
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| adapter_cols |) |),
                    "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols",
                    "rd_ptr"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| rd |) |),
                      "openvm_circuit::system::memory::offline::MemoryRecord",
                      "pointer"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                      []
                      [ F ],
                    "generate_write_aux",
                    [ Value.Integer IntegerKind.Usize 4 ],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.Ref, aux_cols_factory |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| rd |) |) |);
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.MutRef,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| adapter_cols |) |),
                            "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols",
                            "rd_aux_cols"
                          |)
                        |)
                      |)
                    |)
                  ]
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn air(&self) -> &Self::Air {
              &self.air
          }
      *)
      Definition air (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip",
                    "air"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::integration_api::VmAdapterChip"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self F)
          (* Instance *)
          [
            ("ReadRecord", InstanceField.Ty (_ReadRecord F));
            ("WriteRecord", InstanceField.Ty (_WriteRecord F));
            ("Air", InstanceField.Ty (_Air F));
            ("Interface", InstanceField.Ty (_Interface F));
            ("preprocess", InstanceField.Method (preprocess F));
            ("postprocess", InstanceField.Method (postprocess F));
            ("generate_trace_row", InstanceField.Method (generate_trace_row F));
            ("air", InstanceField.Method (air F))
          ].
    End Impl_openvm_circuit_arch_integration_api_VmAdapterChip_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32RdWriteAdapterChip_F.
    
    Module Impl_openvm_circuit_arch_integration_api_VmAdapterChip_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterChip_F.
      Definition Self (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
          []
          [ F ].
      
      (*     type ReadRecord = (); *)
      Definition _ReadRecord (F : Ty.t) : Ty.t := Ty.tuple [].
      
      (*     type WriteRecord = Rv32RdWriteWriteRecord; *)
      Definition _WriteRecord (F : Ty.t) : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord".
      
      (*     type Air = Rv32CondRdWriteAdapterAir; *)
      Definition _Air (F : Ty.t) : Ty.t :=
        Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterAir".
      
      (*     type Interface = BasicAdapterInterface<F, ImmInstruction<F>, 0, 1, 0, RV32_REGISTER_NUM_LIMBS>; *)
      Definition _Interface (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_circuit::arch::integration_api::BasicAdapterInterface")
          [
            Value.Integer IntegerKind.Usize 0;
            Value.Integer IntegerKind.Usize 1;
            Value.Integer IntegerKind.Usize 0;
            M.unevaluated_const
              (mk_str (| "openvm_rv32im_circuit_adapters_rdwrite_Interface_discriminant" |))
          ]
          [ F; Ty.apply (Ty.path "openvm_circuit::arch::integration_api::ImmInstruction") [] [ F ]
          ].
      
      (*
          fn preprocess(
              &mut self,
              memory: &mut MemoryController<F>,
              instruction: &Instruction<F>,
          ) -> Result<(
              <Self::Interface as VmAdapterInterface<F>>::Reads,
              Self::ReadRecord,
          )> {
              self.inner.preprocess(memory, instruction)
          }
      *)
      Definition preprocess (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; memory; instruction ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                      []
                      [ F ]
                  ],
                self
              |) in
            let memory :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                      []
                      [ F ]
                  ],
                memory
              |) in
            let instruction :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ] ],
                instruction
              |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.tuple
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 0 ]
                        [ Ty.apply (Ty.path "array") [ Value.Integer IntegerKind.Usize 0 ] [ F ] ];
                      Ty.tuple []
                    ];
                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                ],
              M.get_trait_method (|
                "openvm_circuit::arch::integration_api::VmAdapterChip",
                Ty.apply
                  (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterChip")
                  []
                  [ F ],
                [],
                [ F ],
                "preprocess",
                [],
                []
              |),
              [
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip",
                    "inner"
                  |)
                |);
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| memory |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| instruction |) |) |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn postprocess(
              &mut self,
              memory: &mut MemoryController<F>,
              instruction: &Instruction<F>,
              from_state: ExecutionState<u32>,
              output: AdapterRuntimeContext<F, Self::Interface>,
              _read_record: &Self::ReadRecord,
          ) -> Result<(ExecutionState<u32>, Self::WriteRecord)> {
              let Instruction { a, d, .. } = *instruction;
              let rd_id = if instruction.f != F::ZERO {
                  let (rd_id, _) = memory.write(d, a, output.writes[0]);
                  Some(rd_id)
              } else {
                  memory.increment_timestamp();
                  None
              };
      
              Ok((
                  ExecutionState {
                      pc: output.to_pc.unwrap_or(from_state.pc + DEFAULT_PC_STEP),
                      timestamp: memory.timestamp(),
                  },
                  Self::WriteRecord { from_state, rd_id },
              ))
          }
      *)
      Definition postprocess (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; memory; instruction; from_state; output; _read_record ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                      []
                      [ F ]
                  ],
                self
              |) in
            let memory :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&mut")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::controller::MemoryController")
                      []
                      [ F ]
                  ],
                memory
              |) in
            let instruction :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ] ],
                instruction
              |) in
            let from_state :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                  []
                  [ Ty.path "u32" ],
                from_state
              |) in
            let output :=
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                  []
                  [
                    F;
                    Ty.associated_in_trait
                      "openvm_circuit::arch::integration_api::VmAdapterChip"
                      []
                      [ F ]
                      (Ty.apply
                        (Ty.path
                          "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                        []
                        [ F ])
                      "Interface"
                  ],
                output
              |) in
            let _read_record :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.associated_in_trait
                      "openvm_circuit::arch::integration_api::VmAdapterChip"
                      []
                      [ F ]
                      (Ty.apply
                        (Ty.path
                          "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                        []
                        [ F ])
                      "ReadRecord"
                  ],
                _read_record
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.tuple
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                        []
                        [ Ty.path "u32" ];
                      Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord"
                    ];
                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                ],
              M.deref (| M.read (| instruction |) |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_instructions::instruction::Instruction",
                        "a"
                      |) in
                    let γ0_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_instructions::instruction::Instruction",
                        "d"
                      |) in
                    let a := M.copy (| F, γ0_0 |) in
                    let d := M.copy (| F, γ0_1 |) in
                    M.read (|
                      let~ rd_id :
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ] :=
                        M.match_operator (|
                          Ty.apply
                            (Ty.path "core::option::Option")
                            []
                            [ Ty.path "openvm_circuit::system::memory::controller::RecordId" ],
                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ :=
                                  M.use
                                    (M.alloc (|
                                      Ty.path "bool",
                                      M.call_closure (|
                                        Ty.path "bool",
                                        M.get_trait_method (|
                                          "core::cmp::PartialEq",
                                          F,
                                          [],
                                          [ F ],
                                          "ne",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.SubPointer.get_struct_record_field (|
                                              M.deref (| M.read (| instruction |) |),
                                              "openvm_instructions::instruction::Instruction",
                                              "f"
                                            |)
                                          |);
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            get_constant (|
                                              "p3_field::field::FieldAlgebra::ZERO",
                                              F
                                            |)
                                          |)
                                        ]
                                      |)
                                    |)) in
                                let _ :=
                                  is_constant_or_break_match (|
                                    M.read (| γ |),
                                    Value.Bool true
                                  |) in
                                M.match_operator (|
                                  Ty.apply
                                    (Ty.path "core::option::Option")
                                    []
                                    [ Ty.path "openvm_circuit::system::memory::controller::RecordId"
                                    ],
                                  M.alloc (|
                                    Ty.tuple
                                      [
                                        Ty.path
                                          "openvm_circuit::system::memory::controller::RecordId";
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 4 ]
                                          [ F ]
                                      ],
                                    M.call_closure (|
                                      Ty.tuple
                                        [
                                          Ty.path
                                            "openvm_circuit::system::memory::controller::RecordId";
                                          Ty.apply
                                            (Ty.path "array")
                                            [ Value.Integer IntegerKind.Usize 4 ]
                                            [ F ]
                                        ],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::controller::MemoryController")
                                          []
                                          [ F ],
                                        "write",
                                        [ Value.Integer IntegerKind.Usize 4 ],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| memory |) |)
                                        |);
                                        M.read (| d |);
                                        M.read (| a |);
                                        M.read (|
                                          M.SubPointer.get_array_field (|
                                            M.SubPointer.get_struct_record_field (|
                                              output,
                                              "openvm_circuit::arch::integration_api::AdapterRuntimeContext",
                                              "writes"
                                            |),
                                            Value.Integer IntegerKind.Usize 0
                                          |)
                                        |)
                                      ]
                                    |)
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let rd_id :=
                                          M.copy (|
                                            Ty.path
                                              "openvm_circuit::system::memory::controller::RecordId",
                                            γ0_0
                                          |) in
                                        Value.StructTuple
                                          "core::option::Option::Some"
                                          []
                                          [
                                            Ty.path
                                              "openvm_circuit::system::memory::controller::RecordId"
                                          ]
                                          [ M.read (| rd_id |) ]))
                                  ]
                                |)));
                            fun γ =>
                              ltac:(M.monadic
                                (M.read (|
                                  let~ _ : Ty.tuple [] :=
                                    M.call_closure (|
                                      Ty.tuple [],
                                      M.get_associated_function (|
                                        Ty.apply
                                          (Ty.path
                                            "openvm_circuit::system::memory::controller::MemoryController")
                                          []
                                          [ F ],
                                        "increment_timestamp",
                                        [],
                                        []
                                      |),
                                      [
                                        M.borrow (|
                                          Pointer.Kind.MutRef,
                                          M.deref (| M.read (| memory |) |)
                                        |)
                                      ]
                                    |) in
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::option::Option")
                                      []
                                      [
                                        Ty.path
                                          "openvm_circuit::system::memory::controller::RecordId"
                                      ],
                                    Value.StructTuple
                                      "core::option::Option::None"
                                      []
                                      [
                                        Ty.path
                                          "openvm_circuit::system::memory::controller::RecordId"
                                      ]
                                      []
                                  |)
                                |)))
                          ]
                        |) in
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                                  []
                                  [ Ty.path "u32" ];
                                Ty.path
                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord"
                              ];
                            Ty.path "openvm_circuit::arch::execution::ExecutionError"
                          ],
                        Value.StructTuple
                          "core::result::Result::Ok"
                          []
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                                  []
                                  [ Ty.path "u32" ];
                                Ty.path
                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord"
                              ];
                            Ty.path "openvm_circuit::arch::execution::ExecutionError"
                          ]
                          [
                            Value.Tuple
                              [
                                Value.mkStructRecord
                                  "openvm_circuit::arch::execution::ExecutionState"
                                  []
                                  [ Ty.path "u32" ]
                                  [
                                    ("pc",
                                      M.call_closure (|
                                        Ty.path "u32",
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "u32" ],
                                          "unwrap_or",
                                          [],
                                          []
                                        |),
                                        [
                                          M.read (|
                                            M.SubPointer.get_struct_record_field (|
                                              output,
                                              "openvm_circuit::arch::integration_api::AdapterRuntimeContext",
                                              "to_pc"
                                            |)
                                          |);
                                          M.call_closure (|
                                            Ty.path "u32",
                                            BinOp.Wrap.add,
                                            [
                                              M.read (|
                                                M.SubPointer.get_struct_record_field (|
                                                  from_state,
                                                  "openvm_circuit::arch::execution::ExecutionState",
                                                  "pc"
                                                |)
                                              |);
                                              M.read (|
                                                get_constant (|
                                                  "openvm_instructions::program::DEFAULT_PC_STEP",
                                                  Ty.path "u32"
                                                |)
                                              |)
                                            ]
                                          |)
                                        ]
                                      |));
                                    ("timestamp",
                                      M.call_closure (|
                                        Ty.path "u32",
                                        M.get_associated_function (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_circuit::system::memory::controller::MemoryController")
                                            []
                                            [ F ],
                                          "timestamp",
                                          [],
                                          []
                                        |),
                                        [
                                          M.borrow (|
                                            Pointer.Kind.Ref,
                                            M.deref (| M.read (| memory |) |)
                                          |)
                                        ]
                                      |))
                                  ];
                                Value.mkStructRecord
                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord"
                                  []
                                  []
                                  [
                                    ("from_state", M.read (| from_state |));
                                    ("rd_id", M.read (| rd_id |))
                                  ]
                              ]
                          ]
                      |)
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn generate_trace_row(
              &self,
              row_slice: &mut [F],
              _read_record: Self::ReadRecord,
              write_record: Self::WriteRecord,
              memory: &OfflineMemory<F>,
          ) {
              let aux_cols_factory = memory.aux_cols_factory();
              let adapter_cols: &mut Rv32CondRdWriteAdapterCols<F> = row_slice.borrow_mut();
              adapter_cols.inner.from_state = write_record.from_state.map(F::from_canonical_u32);
              if let Some(rd_id) = write_record.rd_id {
                  let rd = memory.record_by_id(rd_id);
                  adapter_cols.inner.rd_ptr = rd.pointer;
                  aux_cols_factory.generate_write_aux(rd, &mut adapter_cols.inner.rd_aux_cols);
                  adapter_cols.needs_write = F::ONE;
              }
          }
      *)
      Definition generate_trace_row
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self; row_slice; _read_record; write_record; memory ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                      []
                      [ F ]
                  ],
                self
              |) in
            let row_slice :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                row_slice
              |) in
            let _read_record :=
              M.alloc (|
                Ty.associated_in_trait
                  "openvm_circuit::arch::integration_api::VmAdapterChip"
                  []
                  [ F ]
                  (Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                    []
                    [ F ])
                  "ReadRecord",
                _read_record
              |) in
            let write_record :=
              M.alloc (|
                Ty.associated_in_trait
                  "openvm_circuit::arch::integration_api::VmAdapterChip"
                  []
                  [ F ]
                  (Ty.apply
                    (Ty.path "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                    []
                    [ F ])
                  "WriteRecord",
                write_record
              |) in
            let memory :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                      []
                      [ F ]
                  ],
                memory
              |) in
            M.read (|
              let~ aux_cols_factory :
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                    []
                    [ F ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                    []
                    [ F ],
                  M.get_associated_function (|
                    Ty.apply
                      (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                      []
                      [ F ],
                    "aux_cols_factory",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| memory |) |) |) ]
                |) in
              let~ adapter_cols :
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path
                          "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                        []
                        [ F ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                            []
                            [ F ]
                        ],
                      M.get_trait_method (|
                        "core::borrow::BorrowMut",
                        Ty.apply (Ty.path "slice") [] [ F ],
                        [],
                        [
                          Ty.apply
                            (Ty.path
                              "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols")
                            []
                            [ F ]
                        ],
                        "borrow_mut",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| row_slice |) |) |) ]
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.SubPointer.get_struct_record_field (|
                      M.deref (| M.read (| adapter_cols |) |),
                      "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols",
                      "inner"
                    |),
                    "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols",
                    "from_state"
                  |),
                  M.call_closure (|
                    Ty.apply (Ty.path "openvm_circuit::arch::execution::ExecutionState") [] [ F ],
                    M.get_associated_function (|
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::execution::ExecutionState")
                        []
                        [ Ty.path "u32" ],
                      "map",
                      [],
                      [ F; Ty.function [ Ty.path "u32" ] F ]
                    |),
                    [
                      M.read (|
                        M.SubPointer.get_struct_record_field (|
                          write_record,
                          "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord",
                          "from_state"
                        |)
                      |);
                      M.get_trait_method (|
                        "p3_field::field::FieldAlgebra",
                        F,
                        [],
                        [],
                        "from_canonical_u32",
                        [],
                        []
                      |)
                    ]
                  |)
                |) in
              M.alloc (|
                Ty.tuple [],
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ :=
                          M.SubPointer.get_struct_record_field (|
                            write_record,
                            "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteWriteRecord",
                            "rd_id"
                          |) in
                        let γ0_0 :=
                          M.SubPointer.get_struct_tuple_field (|
                            γ,
                            "core::option::Option::Some",
                            0
                          |) in
                        let rd_id :=
                          M.copy (|
                            Ty.path "openvm_circuit::system::memory::controller::RecordId",
                            γ0_0
                          |) in
                        M.read (|
                          let~ rd :
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::offline::MemoryRecord")
                                    []
                                    [ F ]
                                ] :=
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "&")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::system::memory::offline::MemoryRecord")
                                    []
                                    [ F ]
                                ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "openvm_circuit::system::memory::offline::OfflineMemory")
                                  []
                                  [ F ],
                                "record_by_id",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| memory |) |) |);
                                M.read (| rd_id |)
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.write (|
                              M.SubPointer.get_struct_record_field (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| adapter_cols |) |),
                                  "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols",
                                  "inner"
                                |),
                                "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols",
                                "rd_ptr"
                              |),
                              M.read (|
                                M.SubPointer.get_struct_record_field (|
                                  M.deref (| M.read (| rd |) |),
                                  "openvm_circuit::system::memory::offline::MemoryRecord",
                                  "pointer"
                                |)
                              |)
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.call_closure (|
                              Ty.tuple [],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::system::memory::controller::MemoryAuxColsFactory")
                                  []
                                  [ F ],
                                "generate_write_aux",
                                [ Value.Integer IntegerKind.Usize 4 ],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, aux_cols_factory |);
                                M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| rd |) |) |);
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.SubPointer.get_struct_record_field (|
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| adapter_cols |) |),
                                          "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols",
                                          "inner"
                                        |),
                                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32RdWriteAdapterCols",
                                        "rd_aux_cols"
                                      |)
                                    |)
                                  |)
                                |)
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.write (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| adapter_cols |) |),
                                "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterCols",
                                "needs_write"
                              |),
                              M.read (|
                                get_constant (| "p3_field::field::FieldAlgebra::ONE", F |)
                              |)
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn air(&self) -> &Self::Air {
              &self.air
          }
      *)
      Definition air (F : Ty.t) (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
        let Self : Ty.t := Self F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip")
                      []
                      [ F ]
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_rv32im_circuit::adapters::rdwrite::Rv32CondRdWriteAdapterChip",
                    "air"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (F : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::integration_api::VmAdapterChip"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self F)
          (* Instance *)
          [
            ("ReadRecord", InstanceField.Ty (_ReadRecord F));
            ("WriteRecord", InstanceField.Ty (_WriteRecord F));
            ("Air", InstanceField.Ty (_Air F));
            ("Interface", InstanceField.Ty (_Interface F));
            ("preprocess", InstanceField.Method (preprocess F));
            ("postprocess", InstanceField.Method (postprocess F));
            ("generate_trace_row", InstanceField.Method (generate_trace_row F));
            ("air", InstanceField.Method (air F))
          ].
    End Impl_openvm_circuit_arch_integration_api_VmAdapterChip_where_p3_field_field_PrimeField32_F_F_for_openvm_rv32im_circuit_adapters_rdwrite_Rv32CondRdWriteAdapterChip_F.
  End rdwrite.
End adapters.
