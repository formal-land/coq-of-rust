(* Generated by coq-of-rust *)
Require Import CoqOfRust.CoqOfRust.

Module branch_eq.
  Module core.
    (* StructRecord
      {
        name := "BranchEqualCoreCols";
        const_params := [ "NUM_LIMBS" ];
        ty_params := [ "T" ];
        fields :=
          [
            ("a", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("b", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("cmp_result", T);
            ("imm", T);
            ("opcode_beq_flag", T);
            ("opcode_bne_flag", T);
            ("diff_inv_marker", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ])
          ];
      } *)
    
    Module Impl_core_borrow_Borrow_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreCols_NUM_LIMBS_T_for_slice_T.
      Definition Self (NUM_LIMBS : Value.t) (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "slice") [] [ T ].
      
      (* AlignedBorrow *)
      Definition borrow
          (NUM_LIMBS : Value.t)
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                self
              |) in
            M.read (|
              let~ _ : Ty.tuple [] :=
                M.match_operator (|
                  Ty.tuple [],
                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                        let _ := is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (|
                                Ty.tuple
                                  [
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                  ],
                                Value.Tuple
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.path "usize",
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply (Ty.path "slice") [] [ T ],
                                            "len",
                                            [],
                                            []
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (| M.read (| self |) |)
                                            |)
                                          ]
                                        |)
                                      |)
                                    |);
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.alloc (|
                                        Ty.path "usize",
                                        M.call_closure (|
                                          Ty.path "usize",
                                          M.get_associated_function (|
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
                                              [ NUM_LIMBS ]
                                              [ T ],
                                            "width",
                                            [],
                                            []
                                          |),
                                          []
                                        |)
                                      |)
                                    |)
                                  ]
                              |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                    let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                    let left_val :=
                                      M.copy (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        γ0_0
                                      |) in
                                    let right_val :=
                                      M.copy (|
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                        γ0_1
                                      |) in
                                    M.match_operator (|
                                      Ty.tuple [],
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                      [
                                        fun γ =>
                                          ltac:(M.monadic
                                            (let γ :=
                                              M.use
                                                (M.alloc (|
                                                  Ty.path "bool",
                                                  UnOp.not (|
                                                    M.call_closure (|
                                                      Ty.path "bool",
                                                      BinOp.eq,
                                                      [
                                                        M.read (|
                                                          M.deref (| M.read (| left_val |) |)
                                                        |);
                                                        M.read (|
                                                          M.deref (| M.read (| right_val |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)) in
                                            let _ :=
                                              is_constant_or_break_match (|
                                                M.read (| γ |),
                                                Value.Bool true
                                              |) in
                                            M.never_to_any (|
                                              M.read (|
                                                let~ kind : Ty.path "core::panicking::AssertKind" :=
                                                  Value.StructTuple
                                                    "core::panicking::AssertKind::Eq"
                                                    []
                                                    []
                                                    [] in
                                                M.alloc (|
                                                  Ty.path "never",
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::assert_failed",
                                                      [],
                                                      [ Ty.path "usize"; Ty.path "usize" ]
                                                    |),
                                                    [
                                                      M.read (| kind |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| left_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      M.borrow (|
                                                        Pointer.Kind.Ref,
                                                        M.deref (|
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (| M.read (| right_val |) |)
                                                          |)
                                                        |)
                                                      |);
                                                      Value.StructTuple
                                                        "core::option::Option::None"
                                                        []
                                                        [ Ty.path "core::fmt::Arguments" ]
                                                        []
                                                    ]
                                                  |)
                                                |)
                                              |)
                                            |)));
                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                      ]
                                    |)))
                              ]
                            |) in
                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                        |)));
                    fun γ => ltac:(M.monadic (Value.Tuple []))
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
                      [ NUM_LIMBS ]
                      [ T ]
                  ],
                M.match_operator (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
                        [ NUM_LIMBS ]
                        [ T ]
                    ],
                  M.alloc (|
                    Ty.tuple
                      [
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
                                  [ NUM_LIMBS ]
                                  [ T ]
                              ]
                          ];
                        Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                      ],
                    M.call_closure (|
                      Ty.tuple
                        [
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
                                    [ NUM_LIMBS ]
                                    [ T ]
                                ]
                            ];
                          Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                        ],
                      M.get_associated_function (|
                        Ty.apply (Ty.path "slice") [] [ T ],
                        "align_to",
                        [],
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
                            [ NUM_LIMBS ]
                            [ T ]
                        ]
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| self |) |) |) ]
                    |)
                  |),
                  [
                    fun γ =>
                      ltac:(M.monadic
                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                        let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                        let prefix :=
                          M.copy (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            γ0_0
                          |) in
                        let shorts :=
                          M.copy (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
                                      [ NUM_LIMBS ]
                                      [ T ]
                                  ]
                              ],
                            γ0_1
                          |) in
                        let _suffix :=
                          M.copy (|
                            Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                            γ0_2
                          |) in
                        M.read (|
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.read (|
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          M.get_associated_function (|
                                                            Ty.apply (Ty.path "slice") [] [ T ],
                                                            "is_empty",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| prefix |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.never_to_any (|
                                                  M.call_closure (|
                                                    Ty.path "never",
                                                    M.get_function (|
                                                      "core::panicking::panic_fmt",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "core::fmt::Arguments",
                                                        M.get_associated_function (|
                                                          Ty.path "core::fmt::Arguments",
                                                          "new_const",
                                                          [ Value.Integer IntegerKind.Usize 1 ],
                                                          []
                                                        |),
                                                        [
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.alloc (|
                                                                  Ty.apply
                                                                    (Ty.path "array")
                                                                    [
                                                                      Value.Integer
                                                                        IntegerKind.Usize
                                                                        1
                                                                    ]
                                                                    [
                                                                      Ty.apply
                                                                        (Ty.path "&")
                                                                        []
                                                                        [ Ty.path "str" ]
                                                                    ],
                                                                  Value.Array
                                                                    [
                                                                      mk_str (|
                                                                        "Alignment should match"
                                                                      |)
                                                                    ]
                                                                |)
                                                              |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          let~ _ : Ty.tuple [] :=
                            M.match_operator (|
                              Ty.tuple [],
                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                              [
                                fun γ =>
                                  ltac:(M.monadic
                                    (let γ :=
                                      M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                    let _ :=
                                      is_constant_or_break_match (|
                                        M.read (| γ |),
                                        Value.Bool true
                                      |) in
                                    M.read (|
                                      let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.tuple
                                              [
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                              ],
                                            Value.Tuple
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path "usize",
                                                    M.call_closure (|
                                                      Ty.path "usize",
                                                      M.get_associated_function (|
                                                        Ty.apply
                                                          (Ty.path "slice")
                                                          []
                                                          [
                                                            Ty.apply
                                                              (Ty.path
                                                                "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
                                                              [ NUM_LIMBS ]
                                                              [ T ]
                                                          ],
                                                        "len",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.deref (| M.read (| shorts |) |)
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |);
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path "usize",
                                                    Value.Integer IntegerKind.Usize 1
                                                  |)
                                                |)
                                              ]
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                let γ0_1 :=
                                                  M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                let left_val :=
                                                  M.copy (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                    γ0_0
                                                  |) in
                                                let right_val :=
                                                  M.copy (|
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                                    γ0_1
                                                  |) in
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              Ty.path "bool",
                                                              UnOp.not (|
                                                                M.call_closure (|
                                                                  Ty.path "bool",
                                                                  BinOp.eq,
                                                                  [
                                                                    M.read (|
                                                                      M.deref (|
                                                                        M.read (| left_val |)
                                                                      |)
                                                                    |);
                                                                    M.read (|
                                                                      M.deref (|
                                                                        M.read (| right_val |)
                                                                      |)
                                                                    |)
                                                                  ]
                                                                |)
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.never_to_any (|
                                                          M.read (|
                                                            let~ kind :
                                                                Ty.path
                                                                  "core::panicking::AssertKind" :=
                                                              Value.StructTuple
                                                                "core::panicking::AssertKind::Eq"
                                                                []
                                                                []
                                                                [] in
                                                            M.alloc (|
                                                              Ty.path "never",
                                                              M.call_closure (|
                                                                Ty.path "never",
                                                                M.get_function (|
                                                                  "core::panicking::assert_failed",
                                                                  [],
                                                                  [ Ty.path "usize"; Ty.path "usize"
                                                                  ]
                                                                |),
                                                                [
                                                                  M.read (| kind |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| left_val |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |);
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.deref (|
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.read (| right_val |)
                                                                        |)
                                                                      |)
                                                                    |)
                                                                  |);
                                                                  Value.StructTuple
                                                                    "core::option::Option::None"
                                                                    []
                                                                    [ Ty.path "core::fmt::Arguments"
                                                                    ]
                                                                    []
                                                                ]
                                                              |)
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                                  ]
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                    |)));
                                fun γ => ltac:(M.monadic (Value.Tuple []))
                              ]
                            |) in
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
                                  [ NUM_LIMBS ]
                                  [ T ]
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.SubPointer.get_array_field (|
                                    M.deref (| M.read (| shorts |) |),
                                    Value.Integer IntegerKind.Usize 0
                                  |)
                                |)
                              |)
                            |)
                          |)
                        |)))
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS : Value.t) (T : Ty.t),
        M.IsTraitInstance
          "core::borrow::Borrow"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
              [ NUM_LIMBS ]
              [ T ]
          ]
          (Self NUM_LIMBS T)
          (* Instance *) [ ("borrow", InstanceField.Method (borrow NUM_LIMBS T)) ].
    End Impl_core_borrow_Borrow_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreCols_NUM_LIMBS_T_for_slice_T.
    
    Module Impl_core_borrow_BorrowMut_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreCols_NUM_LIMBS_T_for_slice_T.
      Definition Self (NUM_LIMBS : Value.t) (T : Ty.t) : Ty.t :=
        Ty.apply (Ty.path "slice") [] [ T ].
      
      (* AlignedBorrow *)
      Definition borrow_mut
          (NUM_LIMBS : Value.t)
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.MutRef,
              M.deref (|
                M.read (|
                  let~ _ : Ty.tuple [] :=
                    M.match_operator (|
                      Ty.tuple [],
                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ := M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                            let _ :=
                              is_constant_or_break_match (| M.read (| γ |), Value.Bool true |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (|
                                    Ty.tuple
                                      [
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                        Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                      ],
                                    Value.Tuple
                                      [
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                "len",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.deref (| M.read (| self |) |)
                                                |)
                                              ]
                                            |)
                                          |)
                                        |);
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.path "usize",
                                            M.call_closure (|
                                              Ty.path "usize",
                                              M.get_associated_function (|
                                                Ty.apply
                                                  (Ty.path
                                                    "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
                                                  [ NUM_LIMBS ]
                                                  [ T ],
                                                "width",
                                                [],
                                                []
                                              |),
                                              []
                                            |)
                                          |)
                                        |)
                                      ]
                                  |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                        let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                        let left_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_0
                                          |) in
                                        let right_val :=
                                          M.copy (|
                                            Ty.apply (Ty.path "&") [] [ Ty.path "usize" ],
                                            γ0_1
                                          |) in
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      UnOp.not (|
                                                        M.call_closure (|
                                                          Ty.path "bool",
                                                          BinOp.eq,
                                                          [
                                                            M.read (|
                                                              M.deref (| M.read (| left_val |) |)
                                                            |);
                                                            M.read (|
                                                              M.deref (| M.read (| right_val |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.never_to_any (|
                                                  M.read (|
                                                    let~ kind :
                                                        Ty.path "core::panicking::AssertKind" :=
                                                      Value.StructTuple
                                                        "core::panicking::AssertKind::Eq"
                                                        []
                                                        []
                                                        [] in
                                                    M.alloc (|
                                                      Ty.path "never",
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::assert_failed",
                                                          [],
                                                          [ Ty.path "usize"; Ty.path "usize" ]
                                                        |),
                                                        [
                                                          M.read (| kind |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| left_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          M.borrow (|
                                                            Pointer.Kind.Ref,
                                                            M.deref (|
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (| M.read (| right_val |) |)
                                                              |)
                                                            |)
                                                          |);
                                                          Value.StructTuple
                                                            "core::option::Option::None"
                                                            []
                                                            [ Ty.path "core::fmt::Arguments" ]
                                                            []
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                |)));
                                            fun γ => ltac:(M.monadic (Value.Tuple []))
                                          ]
                                        |)))
                                  ]
                                |) in
                              M.alloc (| Ty.tuple [], Value.Tuple [] |)
                            |)));
                        fun γ => ltac:(M.monadic (Value.Tuple []))
                      ]
                    |) in
                  M.alloc (|
                    Ty.apply
                      (Ty.path "&mut")
                      []
                      [
                        Ty.apply
                          (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
                          [ NUM_LIMBS ]
                          [ T ]
                      ],
                    M.match_operator (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
                            [ NUM_LIMBS ]
                            [ T ]
                        ],
                      M.alloc (|
                        Ty.tuple
                          [
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                            Ty.apply
                              (Ty.path "&mut")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
                                      [ NUM_LIMBS ]
                                      [ T ]
                                  ]
                              ];
                            Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                          ],
                        M.call_closure (|
                          Ty.tuple
                            [
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ];
                              Ty.apply
                                (Ty.path "&mut")
                                []
                                [
                                  Ty.apply
                                    (Ty.path "slice")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
                                        [ NUM_LIMBS ]
                                        [ T ]
                                    ]
                                ];
                              Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ T ] ]
                            ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "slice") [] [ T ],
                            "align_to_mut",
                            [],
                            [
                              Ty.apply
                                (Ty.path
                                  "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
                                [ NUM_LIMBS ]
                                [ T ]
                            ]
                          |),
                          [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| self |) |) |) ]
                        |)
                      |),
                      [
                        fun γ =>
                          ltac:(M.monadic
                            (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                            let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                            let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                            let prefix :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_0
                              |) in
                            let shorts :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path "slice")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path
                                            "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
                                          [ NUM_LIMBS ]
                                          [ T ]
                                      ]
                                  ],
                                γ0_1
                              |) in
                            let _suffix :=
                              M.copy (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [ Ty.apply (Ty.path "slice") [] [ T ] ],
                                γ0_2
                              |) in
                            M.read (|
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ :=
                                                      M.use
                                                        (M.alloc (|
                                                          Ty.path "bool",
                                                          UnOp.not (|
                                                            M.call_closure (|
                                                              Ty.path "bool",
                                                              M.get_associated_function (|
                                                                Ty.apply (Ty.path "slice") [] [ T ],
                                                                "is_empty",
                                                                [],
                                                                []
                                                              |),
                                                              [
                                                                M.borrow (|
                                                                  Pointer.Kind.Ref,
                                                                  M.deref (| M.read (| prefix |) |)
                                                                |)
                                                              ]
                                                            |)
                                                          |)
                                                        |)) in
                                                    let _ :=
                                                      is_constant_or_break_match (|
                                                        M.read (| γ |),
                                                        Value.Bool true
                                                      |) in
                                                    M.never_to_any (|
                                                      M.call_closure (|
                                                        Ty.path "never",
                                                        M.get_function (|
                                                          "core::panicking::panic_fmt",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "core::fmt::Arguments",
                                                            M.get_associated_function (|
                                                              Ty.path "core::fmt::Arguments",
                                                              "new_const",
                                                              [ Value.Integer IntegerKind.Usize 1 ],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                M.deref (|
                                                                  M.borrow (|
                                                                    Pointer.Kind.Ref,
                                                                    M.alloc (|
                                                                      Ty.apply
                                                                        (Ty.path "array")
                                                                        [
                                                                          Value.Integer
                                                                            IntegerKind.Usize
                                                                            1
                                                                        ]
                                                                        [
                                                                          Ty.apply
                                                                            (Ty.path "&")
                                                                            []
                                                                            [ Ty.path "str" ]
                                                                        ],
                                                                      Value.Array
                                                                        [
                                                                          mk_str (|
                                                                            "Alignment should match"
                                                                          |)
                                                                        ]
                                                                    |)
                                                                  |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    |)));
                                                fun γ => ltac:(M.monadic (Value.Tuple []))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              let~ _ : Ty.tuple [] :=
                                M.match_operator (|
                                  Ty.tuple [],
                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let γ :=
                                          M.use (M.alloc (| Ty.path "bool", Value.Bool true |)) in
                                        let _ :=
                                          is_constant_or_break_match (|
                                            M.read (| γ |),
                                            Value.Bool true
                                          |) in
                                        M.read (|
                                          let~ _ : Ty.tuple [] :=
                                            M.match_operator (|
                                              Ty.tuple [],
                                              M.alloc (|
                                                Ty.tuple
                                                  [
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ];
                                                    Ty.apply (Ty.path "&") [] [ Ty.path "usize" ]
                                                  ],
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          M.get_associated_function (|
                                                            Ty.apply
                                                              (Ty.path "slice")
                                                              []
                                                              [
                                                                Ty.apply
                                                                  (Ty.path
                                                                    "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
                                                                  [ NUM_LIMBS ]
                                                                  [ T ]
                                                              ],
                                                            "len",
                                                            [],
                                                            []
                                                          |),
                                                          [
                                                            M.borrow (|
                                                              Pointer.Kind.Ref,
                                                              M.deref (| M.read (| shorts |) |)
                                                            |)
                                                          ]
                                                        |)
                                                      |)
                                                    |);
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.alloc (|
                                                        Ty.path "usize",
                                                        Value.Integer IntegerKind.Usize 1
                                                      |)
                                                    |)
                                                  ]
                                              |),
                                              [
                                                fun γ =>
                                                  ltac:(M.monadic
                                                    (let γ0_0 :=
                                                      M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                    let γ0_1 :=
                                                      M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                    let left_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_0
                                                      |) in
                                                    let right_val :=
                                                      M.copy (|
                                                        Ty.apply
                                                          (Ty.path "&")
                                                          []
                                                          [ Ty.path "usize" ],
                                                        γ0_1
                                                      |) in
                                                    M.match_operator (|
                                                      Ty.tuple [],
                                                      M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                      [
                                                        fun γ =>
                                                          ltac:(M.monadic
                                                            (let γ :=
                                                              M.use
                                                                (M.alloc (|
                                                                  Ty.path "bool",
                                                                  UnOp.not (|
                                                                    M.call_closure (|
                                                                      Ty.path "bool",
                                                                      BinOp.eq,
                                                                      [
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| left_val |)
                                                                          |)
                                                                        |);
                                                                        M.read (|
                                                                          M.deref (|
                                                                            M.read (| right_val |)
                                                                          |)
                                                                        |)
                                                                      ]
                                                                    |)
                                                                  |)
                                                                |)) in
                                                            let _ :=
                                                              is_constant_or_break_match (|
                                                                M.read (| γ |),
                                                                Value.Bool true
                                                              |) in
                                                            M.never_to_any (|
                                                              M.read (|
                                                                let~ kind :
                                                                    Ty.path
                                                                      "core::panicking::AssertKind" :=
                                                                  Value.StructTuple
                                                                    "core::panicking::AssertKind::Eq"
                                                                    []
                                                                    []
                                                                    [] in
                                                                M.alloc (|
                                                                  Ty.path "never",
                                                                  M.call_closure (|
                                                                    Ty.path "never",
                                                                    M.get_function (|
                                                                      "core::panicking::assert_failed",
                                                                      [],
                                                                      [
                                                                        Ty.path "usize";
                                                                        Ty.path "usize"
                                                                      ]
                                                                    |),
                                                                    [
                                                                      M.read (| kind |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| left_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.deref (|
                                                                          M.borrow (|
                                                                            Pointer.Kind.Ref,
                                                                            M.deref (|
                                                                              M.read (| right_val |)
                                                                            |)
                                                                          |)
                                                                        |)
                                                                      |);
                                                                      Value.StructTuple
                                                                        "core::option::Option::None"
                                                                        []
                                                                        [
                                                                          Ty.path
                                                                            "core::fmt::Arguments"
                                                                        ]
                                                                        []
                                                                    ]
                                                                  |)
                                                                |)
                                                              |)
                                                            |)));
                                                        fun γ => ltac:(M.monadic (Value.Tuple []))
                                                      ]
                                                    |)))
                                              ]
                                            |) in
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                        |)));
                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                  ]
                                |) in
                              M.alloc (|
                                Ty.apply
                                  (Ty.path "&mut")
                                  []
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
                                      [ NUM_LIMBS ]
                                      [ T ]
                                  ],
                                M.borrow (|
                                  Pointer.Kind.MutRef,
                                  M.deref (|
                                    M.borrow (|
                                      Pointer.Kind.MutRef,
                                      M.SubPointer.get_array_field (|
                                        M.deref (| M.read (| shorts |) |),
                                        Value.Integer IntegerKind.Usize 0
                                      |)
                                    |)
                                  |)
                                |)
                              |)
                            |)))
                      ]
                    |)
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS : Value.t) (T : Ty.t),
        M.IsTraitInstance
          "core::borrow::BorrowMut"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *)
          [
            Ty.apply
              (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
              [ NUM_LIMBS ]
              [ T ]
          ]
          (Self NUM_LIMBS T)
          (* Instance *) [ ("borrow_mut", InstanceField.Method (borrow_mut NUM_LIMBS T)) ].
    End Impl_core_borrow_BorrowMut_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreCols_NUM_LIMBS_T_for_slice_T.
    
    Module Impl_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreCols_NUM_LIMBS_T.
      Definition Self (NUM_LIMBS : Value.t) (T : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
          [ NUM_LIMBS ]
          [ T ].
      
      (* AlignedBorrow *)
      Definition width
          (NUM_LIMBS : Value.t)
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS T in
        match ε, τ, α with
        | [], [], [] =>
          ltac:(M.monadic
            (M.call_closure (|
              Ty.path "usize",
              M.get_function (|
                "core::mem::size_of",
                [],
                [
                  Ty.apply
                    (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
                    [ NUM_LIMBS ]
                    [ Ty.path "u8" ]
                ]
              |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_width :
        forall (NUM_LIMBS : Value.t) (T : Ty.t),
        M.IsAssociatedFunction.C (Self NUM_LIMBS T) "width" (width NUM_LIMBS T).
      Admitted.
      Global Typeclasses Opaque width.
    End Impl_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreCols_NUM_LIMBS_T.
    
    (* StructRecord
      {
        name := "BranchEqualCoreAir";
        const_params := [ "NUM_LIMBS" ];
        ty_params := [];
        fields := [ ("offset", Ty.path "usize"); ("pc_step", Ty.path "u32") ];
      } *)
    
    Module Impl_core_marker_Copy_for_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreAir_NUM_LIMBS.
      Definition Self (NUM_LIMBS : Value.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreAir")
          [ NUM_LIMBS ]
          [].
      
      Axiom Implements :
        forall (NUM_LIMBS : Value.t),
        M.IsTraitInstance
          "core::marker::Copy"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_LIMBS)
          (* Instance *) [].
    End Impl_core_marker_Copy_for_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreAir_NUM_LIMBS.
    
    Module Impl_core_clone_Clone_for_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreAir_NUM_LIMBS.
      Definition Self (NUM_LIMBS : Value.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreAir")
          [ NUM_LIMBS ]
          [].
      
      (* Clone *)
      Definition clone
          (NUM_LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreAir")
                      [ NUM_LIMBS ]
                      []
                  ],
                self
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreAir")
                [ NUM_LIMBS ]
                [],
              Value.DeclaredButUndefined,
              [
                fun γ =>
                  ltac:(M.monadic
                    (M.match_operator (|
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreAir")
                        [ NUM_LIMBS ]
                        [],
                      Value.DeclaredButUndefined,
                      [ fun γ => ltac:(M.monadic (M.read (| M.deref (| M.read (| self |) |) |))) ]
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS : Value.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_LIMBS)
          (* Instance *) [ ("clone", InstanceField.Method (clone NUM_LIMBS)) ].
    End Impl_core_clone_Clone_for_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreAir_NUM_LIMBS.
    
    Module Impl_core_fmt_Debug_for_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreAir_NUM_LIMBS.
      Definition Self (NUM_LIMBS : Value.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreAir")
          [ NUM_LIMBS ]
          [].
      
      (* Debug *)
      Definition fmt
          (NUM_LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreAir")
                      [ NUM_LIMBS ]
                      []
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field2_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "BranchEqualCoreAir" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "offset" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreAir",
                            "offset"
                          |)
                        |)
                      |)
                    |)
                  ]
                |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "pc_step" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply (Ty.path "&") [] [ Ty.apply (Ty.path "&") [] [ Ty.path "u32" ] ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply (Ty.path "&") [] [ Ty.path "u32" ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreAir",
                                "pc_step"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS : Value.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_LIMBS)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt NUM_LIMBS)) ].
    End Impl_core_fmt_Debug_for_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreAir_NUM_LIMBS.
    
    Module Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreAir_NUM_LIMBS.
      Definition Self (NUM_LIMBS : Value.t) (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreAir")
          [ NUM_LIMBS ]
          [].
      
      (*
          fn width(&self) -> usize {
              BranchEqualCoreCols::<F, NUM_LIMBS>::width()
          }
      *)
      Definition width
          (NUM_LIMBS : Value.t)
          (F : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS F in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreAir")
                      [ NUM_LIMBS ]
                      []
                  ],
                self
              |) in
            M.call_closure (|
              Ty.path "usize",
              M.get_associated_function (|
                Ty.apply
                  (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
                  [ NUM_LIMBS ]
                  [ F ],
                "width",
                [],
                []
              |),
              []
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS : Value.t) (F : Ty.t),
        M.IsTraitInstance
          "p3_air::air::BaseAir"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self NUM_LIMBS F)
          (* Instance *) [ ("width", InstanceField.Method (width NUM_LIMBS F)) ].
    End Impl_p3_air_air_BaseAir_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreAir_NUM_LIMBS.
    
    Module Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreAir_NUM_LIMBS.
      Definition Self (NUM_LIMBS : Value.t) (F : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreAir")
          [ NUM_LIMBS ]
          [].
      
      Axiom Implements :
        forall (NUM_LIMBS : Value.t) (F : Ty.t),
        M.IsTraitInstance
          "openvm_stark_backend::rap::BaseAirWithPublicValues"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F ]
          (Self NUM_LIMBS F)
          (* Instance *) [].
    End Impl_openvm_stark_backend_rap_BaseAirWithPublicValues_where_p3_field_field_Field_F_F_for_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreAir_NUM_LIMBS.
    
    Module Impl_openvm_circuit_arch_integration_api_VmCoreAir_where_openvm_stark_backend_interaction_InteractionBuilder_AB_where_openvm_circuit_arch_integration_api_VmAdapterInterface_I_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_Reads_array_Usize_2_array_NUM_LIMBS_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_default_Default_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_Writes_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_ProcessedInstruction_openvm_circuit_arch_integration_api_ImmInstruction_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_AB_I_for_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreAir_NUM_LIMBS.
      Definition Self (NUM_LIMBS : Value.t) (AB I : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreAir")
          [ NUM_LIMBS ]
          [].
      
      (*
          fn eval(
              &self,
              builder: &mut AB,
              local: &[AB::Var],
              from_pc: AB::Var,
          ) -> AdapterAirContext<AB::Expr, I> {
              let cols: &BranchEqualCoreCols<_, NUM_LIMBS> = local.borrow();
              let flags = [cols.opcode_beq_flag, cols.opcode_bne_flag];
      
              let is_valid = flags.iter().fold(AB::Expr::ZERO, |acc, &flag| {
                  builder.assert_bool(flag);
                  acc + flag.into()
              });
              builder.assert_bool(is_valid.clone());
              builder.assert_bool(cols.cmp_result);
      
              let a = &cols.a;
              let b = &cols.b;
              let inv_marker = &cols.diff_inv_marker;
      
              // 1 if cmp_result indicates a and b are equal, 0 otherwise
              let cmp_eq =
                  cols.cmp_result * cols.opcode_beq_flag + not(cols.cmp_result) * cols.opcode_bne_flag;
              let mut sum = cmp_eq.clone();
      
              // For BEQ, inv_marker is used to check equality of a and b:
              // - If a == b, all inv_marker values must be 0 (sum = 0)
              // - If a != b, inv_marker contains 0s for all positions except ONE position i where a[i] !=
              //   b[i]
              // - At this position, inv_marker[i] contains the multiplicative inverse of (a[i] - b[i])
              // - This ensures inv_marker[i] * (a[i] - b[i]) = 1, making the sum = 1
              // Note: There might be multiple valid inv_marker if a != b.
              // But as long as the trace can provide at least one, that’s sufficient to prove a != b.
              //
              // Note:
              // - If cmp_eq == 0, then it is impossible to have sum != 0 if a == b.
              // - If cmp_eq == 1, then it is impossible for a[i] - b[i] == 0 to pass for all i if a != b.
              for i in 0..NUM_LIMBS {
                  sum += (a[i] - b[i]) * inv_marker[i];
                  builder.assert_zero(cmp_eq.clone() * (a[i] - b[i]));
              }
              builder.when(is_valid.clone()).assert_one(sum);
      
              let expected_opcode = flags
                  .iter()
                  .zip(BranchEqualOpcode::iter())
                  .fold(AB::Expr::ZERO, |acc, (flag, opcode)| {
                      acc + ( *flag).into() * AB::Expr::from_canonical_u8(opcode as u8)
                  })
                  + AB::Expr::from_canonical_usize(self.offset);
      
              let to_pc = from_pc
                  + cols.cmp_result * cols.imm
                  + not(cols.cmp_result) * AB::Expr::from_canonical_u32(self.pc_step);
      
              AdapterAirContext {
                  to_pc: Some(to_pc),
                  reads: [cols.a.map(Into::into), cols.b.map(Into::into)].into(),
                  writes: Default::default(),
                  instruction: ImmInstruction {
                      is_valid,
                      opcode: expected_opcode,
                      immediate: cols.imm.into(),
                  }
                  .into(),
              }
          }
      *)
      Definition eval
          (NUM_LIMBS : Value.t)
          (AB I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS AB I in
        match ε, τ, α with
        | [], [], [ self; builder; local; from_pc ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreAir")
                      [ NUM_LIMBS ]
                      []
                  ],
                self
              |) in
            let builder := M.alloc (| Ty.apply (Ty.path "&mut") [] [ AB ], builder |) in
            let local :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "slice")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  ],
                local
              |) in
            let from_pc :=
              M.alloc (|
                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                from_pc
              |) in
            M.read (|
              let~ cols :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
                        [ NUM_LIMBS ]
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
                            [ NUM_LIMBS ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                      M.get_trait_method (|
                        "core::borrow::Borrow",
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        [],
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
                            [ NUM_LIMBS ]
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ],
                        "borrow",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| local |) |) |) ]
                    |)
                  |)
                |) in
              let~ flags :
                  Ty.apply
                    (Ty.path "array")
                    [ Value.Integer IntegerKind.Usize 2 ]
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ] :=
                Value.Array
                  [
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols",
                        "opcode_beq_flag"
                      |)
                    |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols",
                        "opcode_bne_flag"
                      |)
                    |)
                  ] in
              let~ is_valid : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::iter::traits::iterator::Iterator",
                    Ty.apply
                      (Ty.path "core::slice::iter::Iter")
                      []
                      [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                    [],
                    [],
                    "fold",
                    [],
                    [
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                      Ty.function
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.apply
                            (Ty.path "&")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                        ]
                        (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                    ]
                  |),
                  [
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "core::slice::iter::Iter")
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                      M.get_associated_function (|
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        "iter",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "&")
                            []
                            [
                              Ty.apply
                                (Ty.path "slice")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                            ],
                          M.pointer_coercion
                            M.PointerCoercion.Unsize
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "array")
                                  [ Value.Integer IntegerKind.Usize 2 ]
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ]
                              ])
                            (Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ]
                              ]),
                          [ M.borrow (| Pointer.Kind.Ref, flags |) ]
                        |)
                      ]
                    |);
                    M.read (|
                      get_constant (|
                        "p3_field::field::FieldAlgebra::ZERO",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                      |)
                    |);
                    M.closure
                      (fun γ =>
                        ltac:(M.monadic
                          match γ with
                          | [ α0; α1 ] =>
                            ltac:(M.monadic
                              (M.match_operator (|
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                M.alloc (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  α0
                                |),
                                [
                                  fun γ =>
                                    ltac:(M.monadic
                                      (let acc :=
                                        M.copy (|
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Expr",
                                          γ
                                        |) in
                                      M.match_operator (|
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Expr",
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "&")
                                            []
                                            [
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Var"
                                            ],
                                          α1
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ := M.deref (| M.read (| γ |) |) in
                                              let flag :=
                                                M.copy (|
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Var",
                                                  γ
                                                |) in
                                              M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_trait_method (|
                                                      "p3_air::air::AirBuilder",
                                                      AB,
                                                      [],
                                                      [],
                                                      "assert_bool",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Var"
                                                      ]
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (| M.read (| builder |) |)
                                                      |);
                                                      M.read (| flag |)
                                                    ]
                                                  |) in
                                                M.alloc (|
                                                  Ty.associated_in_trait
                                                    "p3_air::air::AirBuilder"
                                                    []
                                                    []
                                                    AB
                                                    "Expr",
                                                  M.call_closure (|
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr",
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Add",
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ],
                                                      "add",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.read (| acc |);
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::convert::Into",
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Var",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ],
                                                          "into",
                                                          [],
                                                          []
                                                        |),
                                                        [ M.read (| flag |) ]
                                                      |)
                                                    ]
                                                  |)
                                                |)
                                              |)))
                                        ]
                                      |)))
                                ]
                              |)))
                          | _ => M.impossible "wrong number of arguments"
                          end))
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    AB,
                    [],
                    [],
                    "assert_bool",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::clone::Clone",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "clone",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                    |)
                  ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    AB,
                    [],
                    [],
                    "assert_bool",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                    M.read (|
                      M.SubPointer.get_struct_record_field (|
                        M.deref (| M.read (| cols |) |),
                        "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols",
                        "cmp_result"
                      |)
                    |)
                  ]
                |) in
              let~ a :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ NUM_LIMBS ]
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| cols |) |),
                    "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols",
                    "a"
                  |)
                |) in
              let~ b :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ NUM_LIMBS ]
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| cols |) |),
                    "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols",
                    "b"
                  |)
                |) in
              let~ inv_marker :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ NUM_LIMBS ]
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| cols |) |),
                    "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols",
                    "diff_inv_marker"
                  |)
                |) in
              let~ cmp_eq : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Add",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "add",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        "mul",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| cols |) |),
                            "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols",
                            "cmp_result"
                          |)
                        |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| cols |) |),
                            "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols",
                            "opcode_beq_flag"
                          |)
                        |)
                      ]
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                        "mul",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_function (|
                            "openvm_circuit_primitives::utils::not",
                            [],
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                            ]
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| cols |) |),
                                "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols",
                                "cmp_result"
                              |)
                            |)
                          ]
                        |);
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| cols |) |),
                            "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols",
                            "opcode_bne_flag"
                          |)
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ sum : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::clone::Clone",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [],
                    "clone",
                    [],
                    []
                  |),
                  [ M.borrow (| Pointer.Kind.Ref, cmp_eq |) ]
                |) in
              let~ _ : Ty.tuple [] :=
                M.read (|
                  M.use
                    (M.alloc (|
                      Ty.tuple [],
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                          M.call_closure (|
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            M.get_trait_method (|
                              "core::iter::traits::collect::IntoIterator",
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                              [],
                              [],
                              "into_iter",
                              [],
                              []
                            |),
                            [
                              Value.mkStructRecord
                                "core::ops::range::Range"
                                []
                                [ Ty.path "usize" ]
                                [ ("start", Value.Integer IntegerKind.Usize 0); ("end_", NUM_LIMBS)
                                ]
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let iter :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::ops::range::Range")
                                    []
                                    [ Ty.path "usize" ],
                                  γ
                                |) in
                              M.read (|
                                M.loop (|
                                  Ty.tuple [],
                                  ltac:(M.monadic
                                    (let~ _ : Ty.tuple [] :=
                                      M.match_operator (|
                                        Ty.tuple [],
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path "core::option::Option")
                                            []
                                            [ Ty.path "usize" ],
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.path "usize" ],
                                            M.get_trait_method (|
                                              "core::iter::traits::iterator::Iterator",
                                              Ty.apply
                                                (Ty.path "core::ops::range::Range")
                                                []
                                                [ Ty.path "usize" ],
                                              [],
                                              [],
                                              "next",
                                              [],
                                              []
                                            |),
                                            [
                                              M.borrow (|
                                                Pointer.Kind.MutRef,
                                                M.deref (|
                                                  M.borrow (| Pointer.Kind.MutRef, iter |)
                                                |)
                                              |)
                                            ]
                                          |)
                                        |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let _ :=
                                                M.is_struct_tuple (|
                                                  γ,
                                                  "core::option::Option::None"
                                                |) in
                                              M.never_to_any (| M.read (| M.break (||) |) |)));
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let γ0_0 :=
                                                M.SubPointer.get_struct_tuple_field (|
                                                  γ,
                                                  "core::option::Option::Some",
                                                  0
                                                |) in
                                              let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                              M.read (|
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_trait_method (|
                                                      "core::ops::arith::AddAssign",
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ],
                                                      "add_assign",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.borrow (| Pointer.Kind.MutRef, sum |);
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::ops::arith::Mul",
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Var"
                                                          ],
                                                          "mul",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.get_trait_method (|
                                                              "core::ops::arith::Sub",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Var",
                                                              [],
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Var"
                                                              ],
                                                              "sub",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.read (|
                                                                M.SubPointer.get_array_field (|
                                                                  M.deref (| M.read (| a |) |),
                                                                  M.read (| i |)
                                                                |)
                                                              |);
                                                              M.read (|
                                                                M.SubPointer.get_array_field (|
                                                                  M.deref (| M.read (| b |) |),
                                                                  M.read (| i |)
                                                                |)
                                                              |)
                                                            ]
                                                          |);
                                                          M.read (|
                                                            M.SubPointer.get_array_field (|
                                                              M.deref (| M.read (| inv_marker |) |),
                                                              M.read (| i |)
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |) in
                                                let~ _ : Ty.tuple [] :=
                                                  M.call_closure (|
                                                    Ty.tuple [],
                                                    M.get_trait_method (|
                                                      "p3_air::air::AirBuilder",
                                                      AB,
                                                      [],
                                                      [],
                                                      "assert_zero",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ]
                                                    |),
                                                    [
                                                      M.borrow (|
                                                        Pointer.Kind.MutRef,
                                                        M.deref (| M.read (| builder |) |)
                                                      |);
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::ops::arith::Mul",
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ],
                                                          "mul",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.get_trait_method (|
                                                              "core::clone::Clone",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr",
                                                              [],
                                                              [],
                                                              "clone",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.borrow (|
                                                                Pointer.Kind.Ref,
                                                                cmp_eq
                                                              |)
                                                            ]
                                                          |);
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.get_trait_method (|
                                                              "core::ops::arith::Sub",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Var",
                                                              [],
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Var"
                                                              ],
                                                              "sub",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.read (|
                                                                M.SubPointer.get_array_field (|
                                                                  M.deref (| M.read (| a |) |),
                                                                  M.read (| i |)
                                                                |)
                                                              |);
                                                              M.read (|
                                                                M.SubPointer.get_array_field (|
                                                                  M.deref (| M.read (| b |) |),
                                                                  M.read (| i |)
                                                                |)
                                                              |)
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |) in
                                                M.alloc (| Ty.tuple [], Value.Tuple [] |)
                                              |)))
                                        ]
                                      |) in
                                    M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                |)
                              |)))
                        ]
                      |)
                    |))
                |) in
              let~ _ : Ty.tuple [] :=
                M.call_closure (|
                  Ty.tuple [],
                  M.get_trait_method (|
                    "p3_air::air::AirBuilder",
                    Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                    [],
                    [],
                    "assert_one",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                  |),
                  [
                    M.borrow (|
                      Pointer.Kind.MutRef,
                      M.alloc (|
                        Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                        M.call_closure (|
                          Ty.apply (Ty.path "p3_air::air::FilteredAirBuilder") [] [ AB ],
                          M.get_trait_method (|
                            "p3_air::air::AirBuilder",
                            AB,
                            [],
                            [],
                            "when",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          |),
                          [
                            M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| builder |) |) |);
                            M.call_closure (|
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                              M.get_trait_method (|
                                "core::clone::Clone",
                                Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                [],
                                [],
                                "clone",
                                [],
                                []
                              |),
                              [ M.borrow (| Pointer.Kind.Ref, is_valid |) ]
                            |)
                          ]
                        |)
                      |)
                    |);
                    M.read (| sum |)
                  ]
                |) in
              let~ expected_opcode :
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Add",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "add",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::iter::traits::iterator::Iterator",
                        Ty.apply
                          (Ty.path "core::iter::adapters::zip::Zip")
                          []
                          [
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ];
                            Ty.path "openvm_rv32im_transpiler::instructions::BranchEqualOpcodeIter"
                          ],
                        [],
                        [],
                        "fold",
                        [],
                        [
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                          Ty.function
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ];
                                  Ty.path
                                    "openvm_rv32im_transpiler::instructions::BranchEqualOpcode"
                                ]
                            ]
                            (Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr")
                        ]
                      |),
                      [
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "core::iter::adapters::zip::Zip")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ];
                              Ty.path
                                "openvm_rv32im_transpiler::instructions::BranchEqualOpcodeIter"
                            ],
                          M.get_trait_method (|
                            "core::iter::traits::iterator::Iterator",
                            Ty.apply
                              (Ty.path "core::slice::iter::Iter")
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                            [],
                            [],
                            "zip",
                            [],
                            [
                              Ty.path
                                "openvm_rv32im_transpiler::instructions::BranchEqualOpcodeIter"
                            ]
                          |),
                          [
                            M.call_closure (|
                              Ty.apply
                                (Ty.path "core::slice::iter::Iter")
                                []
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                              M.get_associated_function (|
                                Ty.apply
                                  (Ty.path "slice")
                                  []
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                                  ],
                                "iter",
                                [],
                                []
                              |),
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [
                                      Ty.apply
                                        (Ty.path "slice")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "p3_air::air::AirBuilder"
                                            []
                                            []
                                            AB
                                            "Var"
                                        ]
                                    ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "array")
                                          [ Value.Integer IntegerKind.Usize 2 ]
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "slice")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Var"
                                          ]
                                      ]),
                                  [ M.borrow (| Pointer.Kind.Ref, flags |) ]
                                |)
                              ]
                            |);
                            M.call_closure (|
                              Ty.path
                                "openvm_rv32im_transpiler::instructions::BranchEqualOpcodeIter",
                              M.get_trait_method (|
                                "strum::IntoEnumIterator",
                                Ty.path "openvm_rv32im_transpiler::instructions::BranchEqualOpcode",
                                [],
                                [],
                                "iter",
                                [],
                                []
                              |),
                              []
                            |)
                          ]
                        |);
                        M.read (|
                          get_constant (|
                            "p3_field::field::FieldAlgebra::ZERO",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                          |)
                        |);
                        M.closure
                          (fun γ =>
                            ltac:(M.monadic
                              match γ with
                              | [ α0; α1 ] =>
                                ltac:(M.monadic
                                  (M.match_operator (|
                                    Ty.associated_in_trait
                                      "p3_air::air::AirBuilder"
                                      []
                                      []
                                      AB
                                      "Expr",
                                    M.alloc (|
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr",
                                      α0
                                    |),
                                    [
                                      fun γ =>
                                        ltac:(M.monadic
                                          (let acc :=
                                            M.copy (|
                                              Ty.associated_in_trait
                                                "p3_air::air::AirBuilder"
                                                []
                                                []
                                                AB
                                                "Expr",
                                              γ
                                            |) in
                                          M.match_operator (|
                                            Ty.associated_in_trait
                                              "p3_air::air::AirBuilder"
                                              []
                                              []
                                              AB
                                              "Expr",
                                            M.alloc (|
                                              Ty.tuple
                                                [
                                                  Ty.apply
                                                    (Ty.path "&")
                                                    []
                                                    [
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Var"
                                                    ];
                                                  Ty.path
                                                    "openvm_rv32im_transpiler::instructions::BranchEqualOpcode"
                                                ],
                                              α1
                                            |),
                                            [
                                              fun γ =>
                                                ltac:(M.monadic
                                                  (let γ0_0 :=
                                                    M.SubPointer.get_tuple_field (| γ, 0 |) in
                                                  let γ0_1 :=
                                                    M.SubPointer.get_tuple_field (| γ, 1 |) in
                                                  let flag :=
                                                    M.copy (|
                                                      Ty.apply
                                                        (Ty.path "&")
                                                        []
                                                        [
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Var"
                                                        ],
                                                      γ0_0
                                                    |) in
                                                  let opcode :=
                                                    M.copy (|
                                                      Ty.path
                                                        "openvm_rv32im_transpiler::instructions::BranchEqualOpcode",
                                                      γ0_1
                                                    |) in
                                                  M.call_closure (|
                                                    Ty.associated_in_trait
                                                      "p3_air::air::AirBuilder"
                                                      []
                                                      []
                                                      AB
                                                      "Expr",
                                                    M.get_trait_method (|
                                                      "core::ops::arith::Add",
                                                      Ty.associated_in_trait
                                                        "p3_air::air::AirBuilder"
                                                        []
                                                        []
                                                        AB
                                                        "Expr",
                                                      [],
                                                      [
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr"
                                                      ],
                                                      "add",
                                                      [],
                                                      []
                                                    |),
                                                    [
                                                      M.read (| acc |);
                                                      M.call_closure (|
                                                        Ty.associated_in_trait
                                                          "p3_air::air::AirBuilder"
                                                          []
                                                          []
                                                          AB
                                                          "Expr",
                                                        M.get_trait_method (|
                                                          "core::ops::arith::Mul",
                                                          Ty.associated_in_trait
                                                            "p3_air::air::AirBuilder"
                                                            []
                                                            []
                                                            AB
                                                            "Expr",
                                                          [],
                                                          [
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr"
                                                          ],
                                                          "mul",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.get_trait_method (|
                                                              "core::convert::Into",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Var",
                                                              [],
                                                              [
                                                                Ty.associated_in_trait
                                                                  "p3_air::air::AirBuilder"
                                                                  []
                                                                  []
                                                                  AB
                                                                  "Expr"
                                                              ],
                                                              "into",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.read (|
                                                                M.deref (| M.read (| flag |) |)
                                                              |)
                                                            ]
                                                          |);
                                                          M.call_closure (|
                                                            Ty.associated_in_trait
                                                              "p3_air::air::AirBuilder"
                                                              []
                                                              []
                                                              AB
                                                              "Expr",
                                                            M.get_trait_method (|
                                                              "p3_field::field::FieldAlgebra",
                                                              Ty.associated_in_trait
                                                                "p3_air::air::AirBuilder"
                                                                []
                                                                []
                                                                AB
                                                                "Expr",
                                                              [],
                                                              [],
                                                              "from_canonical_u8",
                                                              [],
                                                              []
                                                            |),
                                                            [
                                                              M.cast
                                                                (Ty.path "u8")
                                                                (M.read (| opcode |))
                                                            ]
                                                          |)
                                                        ]
                                                      |)
                                                    ]
                                                  |)))
                                            ]
                                          |)))
                                    ]
                                  |)))
                              | _ => M.impossible "wrong number of arguments"
                              end))
                      ]
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "p3_field::field::FieldAlgebra",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [],
                        "from_canonical_usize",
                        [],
                        []
                      |),
                      [
                        M.read (|
                          M.SubPointer.get_struct_record_field (|
                            M.deref (| M.read (| self |) |),
                            "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreAir",
                            "offset"
                          |)
                        |)
                      ]
                    |)
                  ]
                |) in
              let~ to_pc : Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" :=
                M.call_closure (|
                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                  M.get_trait_method (|
                    "core::ops::arith::Add",
                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                    [],
                    [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                    "add",
                    [],
                    []
                  |),
                  [
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::ops::arith::Add",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                        "add",
                        [],
                        []
                      |),
                      [
                        M.read (| from_pc |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "core::ops::arith::Mul",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                            [],
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var" ],
                            "mul",
                            [],
                            []
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| cols |) |),
                                "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols",
                                "cmp_result"
                              |)
                            |);
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| cols |) |),
                                "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols",
                                "imm"
                              |)
                            |)
                          ]
                        |)
                      ]
                    |);
                    M.call_closure (|
                      Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                      M.get_trait_method (|
                        "core::ops::arith::Mul",
                        Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                        [],
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                        "mul",
                        [],
                        []
                      |),
                      [
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_function (|
                            "openvm_circuit_primitives::utils::not",
                            [],
                            [
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr";
                              Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var"
                            ]
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| cols |) |),
                                "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols",
                                "cmp_result"
                              |)
                            |)
                          ]
                        |);
                        M.call_closure (|
                          Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                          M.get_trait_method (|
                            "p3_field::field::FieldAlgebra",
                            Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                            [],
                            [],
                            "from_canonical_u32",
                            [],
                            []
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreAir",
                                "pc_step"
                              |)
                            |)
                          ]
                        |)
                      ]
                    |)
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "openvm_circuit::arch::integration_api::AdapterAirContext")
                  []
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"; I ],
                Value.mkStructRecord
                  "openvm_circuit::arch::integration_api::AdapterAirContext"
                  []
                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"; I ]
                  [
                    ("to_pc",
                      Value.StructTuple
                        "core::option::Option::Some"
                        []
                        [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                        [ M.read (| to_pc |) ]);
                    ("reads",
                      M.call_closure (|
                        Ty.associated_in_trait
                          "openvm_circuit::arch::integration_api::VmAdapterInterface"
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          I
                          "Reads",
                        M.get_trait_method (|
                          "core::convert::Into",
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ NUM_LIMBS ]
                                [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                            ],
                          [],
                          [
                            Ty.associated_in_trait
                              "openvm_circuit::arch::integration_api::VmAdapterInterface"
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                              I
                              "Reads"
                          ],
                          "into",
                          [],
                          []
                        |),
                        [
                          Value.Array
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "array")
                                  [ NUM_LIMBS ]
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ NUM_LIMBS ]
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ],
                                  "map",
                                  [],
                                  [
                                    Ty.function
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                      (Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr");
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ]
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| cols |) |),
                                      "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols",
                                      "a"
                                    |)
                                  |);
                                  M.get_trait_method (|
                                    "core::convert::Into",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                    "into",
                                    [],
                                    []
                                  |)
                                ]
                              |);
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "array")
                                  [ NUM_LIMBS ]
                                  [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ],
                                M.get_associated_function (|
                                  Ty.apply
                                    (Ty.path "array")
                                    [ NUM_LIMBS ]
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Var"
                                    ],
                                  "map",
                                  [],
                                  [
                                    Ty.function
                                      [
                                        Ty.associated_in_trait
                                          "p3_air::air::AirBuilder"
                                          []
                                          []
                                          AB
                                          "Var"
                                      ]
                                      (Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr");
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr"
                                  ]
                                |),
                                [
                                  M.read (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| cols |) |),
                                      "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols",
                                      "b"
                                    |)
                                  |);
                                  M.get_trait_method (|
                                    "core::convert::Into",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                    "into",
                                    [],
                                    []
                                  |)
                                ]
                              |)
                            ]
                        ]
                      |));
                    ("writes",
                      M.call_closure (|
                        Ty.associated_in_trait
                          "openvm_circuit::arch::integration_api::VmAdapterInterface"
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          I
                          "Writes",
                        M.get_trait_method (|
                          "core::default::Default",
                          Ty.associated_in_trait
                            "openvm_circuit::arch::integration_api::VmAdapterInterface"
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                            I
                            "Writes",
                          [],
                          [],
                          "default",
                          [],
                          []
                        |),
                        []
                      |));
                    ("instruction",
                      M.call_closure (|
                        Ty.associated_in_trait
                          "openvm_circuit::arch::integration_api::VmAdapterInterface"
                          []
                          [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                          I
                          "ProcessedInstruction",
                        M.get_trait_method (|
                          "core::convert::Into",
                          Ty.apply
                            (Ty.path "openvm_circuit::arch::integration_api::ImmInstruction")
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ],
                          [],
                          [
                            Ty.associated_in_trait
                              "openvm_circuit::arch::integration_api::VmAdapterInterface"
                              []
                              [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                              I
                              "ProcessedInstruction"
                          ],
                          "into",
                          [],
                          []
                        |),
                        [
                          Value.mkStructRecord
                            "openvm_circuit::arch::integration_api::ImmInstruction"
                            []
                            [ Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr" ]
                            [
                              ("is_valid", M.read (| is_valid |));
                              ("opcode", M.read (| expected_opcode |));
                              ("immediate",
                                M.call_closure (|
                                  Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Expr",
                                  M.get_trait_method (|
                                    "core::convert::Into",
                                    Ty.associated_in_trait "p3_air::air::AirBuilder" [] [] AB "Var",
                                    [],
                                    [
                                      Ty.associated_in_trait
                                        "p3_air::air::AirBuilder"
                                        []
                                        []
                                        AB
                                        "Expr"
                                    ],
                                    "into",
                                    [],
                                    []
                                  |),
                                  [
                                    M.read (|
                                      M.SubPointer.get_struct_record_field (|
                                        M.deref (| M.read (| cols |) |),
                                        "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols",
                                        "imm"
                                      |)
                                    |)
                                  ]
                                |))
                            ]
                        ]
                      |))
                  ]
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn start_offset(&self) -> usize {
              self.offset
          }
      *)
      Definition start_offset
          (NUM_LIMBS : Value.t)
          (AB I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS AB I in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreAir")
                      [ NUM_LIMBS ]
                      []
                  ],
                self
              |) in
            M.read (|
              M.SubPointer.get_struct_record_field (|
                M.deref (| M.read (| self |) |),
                "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreAir",
                "offset"
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS : Value.t) (AB I : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::integration_api::VmCoreAir"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ AB; I ]
          (Self NUM_LIMBS AB I)
          (* Instance *)
          [
            ("eval", InstanceField.Method (eval NUM_LIMBS AB I));
            ("start_offset", InstanceField.Method (start_offset NUM_LIMBS AB I))
          ].
    End Impl_openvm_circuit_arch_integration_api_VmCoreAir_where_openvm_stark_backend_interaction_InteractionBuilder_AB_where_openvm_circuit_arch_integration_api_VmAdapterInterface_I_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_Reads_array_Usize_2_array_NUM_LIMBS_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_where_core_default_Default_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_Writes_where_core_convert_From_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__associated_in_trait_p3_air_air_AirBuilder___AB_Expr_I_ProcessedInstruction_openvm_circuit_arch_integration_api_ImmInstruction_associated_in_trait_p3_air_air_AirBuilder___AB_Expr_AB_I_for_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreAir_NUM_LIMBS.
    
    (* StructRecord
      {
        name := "BranchEqualCoreRecord";
        const_params := [ "NUM_LIMBS" ];
        ty_params := [ "T" ];
        fields :=
          [
            ("a", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("b", Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ]);
            ("cmp_result", T);
            ("imm", T);
            ("diff_inv_val", T);
            ("diff_idx", Ty.path "usize");
            ("opcode", Ty.path "openvm_rv32im_transpiler::instructions::BranchEqualOpcode")
          ];
      } *)
    
    Module Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreRecord_NUM_LIMBS_T.
      Definition Self (NUM_LIMBS : Value.t) (T : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord")
          [ NUM_LIMBS ]
          [ T ].
      
      (* Clone *)
      Definition clone
          (NUM_LIMBS : Value.t)
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS T in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord")
                      [ NUM_LIMBS ]
                      [ T ]
                  ],
                self
              |) in
            Value.mkStructRecord
              "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord"
              [ NUM_LIMBS ]
              [ T ]
              [
                ("a",
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                              "a"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("b",
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ],
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                              "b"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("cmp_result",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                              "cmp_result"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("imm",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                              "imm"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("diff_inv_val",
                  M.call_closure (|
                    T,
                    M.get_trait_method (| "core::clone::Clone", T, [], [], "clone", [], [] |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                              "diff_inv_val"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("diff_idx",
                  M.call_closure (|
                    Ty.path "usize",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "usize",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                              "diff_idx"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |));
                ("opcode",
                  M.call_closure (|
                    Ty.path "openvm_rv32im_transpiler::instructions::BranchEqualOpcode",
                    M.get_trait_method (|
                      "core::clone::Clone",
                      Ty.path "openvm_rv32im_transpiler::instructions::BranchEqualOpcode",
                      [],
                      [],
                      "clone",
                      [],
                      []
                    |),
                    [
                      M.borrow (|
                        Pointer.Kind.Ref,
                        M.deref (|
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              M.deref (| M.read (| self |) |),
                              "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                              "opcode"
                            |)
                          |)
                        |)
                      |)
                    ]
                  |))
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS : Value.t) (T : Ty.t),
        M.IsTraitInstance
          "core::clone::Clone"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_LIMBS T)
          (* Instance *) [ ("clone", InstanceField.Method (clone NUM_LIMBS T)) ].
    End Impl_core_clone_Clone_where_core_clone_Clone_T_for_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreRecord_NUM_LIMBS_T.
    
    Module Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreRecord_NUM_LIMBS_T.
      Definition Self (NUM_LIMBS : Value.t) (T : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord")
          [ NUM_LIMBS ]
          [ T ].
      
      (* Debug *)
      Definition fmt
          (NUM_LIMBS : Value.t)
          (T : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS T in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord")
                      [ NUM_LIMBS ]
                      [ T ]
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.read (|
              let~ names :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "array")
                        [ Value.Integer IntegerKind.Usize 7 ]
                        [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.deref (|
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.alloc (|
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 7 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                        Value.Array
                          [
                            mk_str (| "a" |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "b" |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "cmp_result" |) |)
                            |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "imm" |) |) |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (| mk_str (| "diff_inv_val" |) |)
                            |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "diff_idx" |) |) |);
                            M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "opcode" |) |) |)
                          ]
                      |)
                    |)
                  |)
                |) in
              let~ values :
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                    ] :=
                M.call_closure (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "slice")
                        []
                        [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ] ]
                    ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "array")
                          [ Value.Integer IntegerKind.Usize 7 ]
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ])
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "slice")
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                          ]
                      ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 7 ]
                              [
                                Ty.apply
                                  (Ty.path "&")
                                  []
                                  [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]
                              ],
                            Value.Array
                              [
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ] ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                                            "a"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ T ] ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                                            "b"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ T ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                                            "cmp_result"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ T ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                                            "imm"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ T ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                                            "diff_inv_val"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply (Ty.path "&") [] [ Ty.path "usize" ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.SubPointer.get_struct_record_field (|
                                            M.deref (| M.read (| self |) |),
                                            "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                                            "diff_idx"
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |);
                                M.call_closure (|
                                  Ty.apply
                                    (Ty.path "&")
                                    []
                                    [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                                  M.pointer_coercion
                                    M.PointerCoercion.Unsize
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [
                                        Ty.apply
                                          (Ty.path "&")
                                          []
                                          [
                                            Ty.path
                                              "openvm_rv32im_transpiler::instructions::BranchEqualOpcode"
                                          ]
                                      ])
                                    (Ty.apply
                                      (Ty.path "&")
                                      []
                                      [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                                  [
                                    M.borrow (|
                                      Pointer.Kind.Ref,
                                      M.deref (|
                                        M.borrow (|
                                          Pointer.Kind.Ref,
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "&")
                                              []
                                              [
                                                Ty.path
                                                  "openvm_rv32im_transpiler::instructions::BranchEqualOpcode"
                                              ],
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.SubPointer.get_struct_record_field (|
                                                M.deref (| M.read (| self |) |),
                                                "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                                                "opcode"
                                              |)
                                            |)
                                          |)
                                        |)
                                      |)
                                    |)
                                  ]
                                |)
                              ]
                          |)
                        |)
                      |)
                    |)
                  ]
                |) in
              M.alloc (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                M.call_closure (|
                  Ty.apply
                    (Ty.path "core::result::Result")
                    []
                    [ Ty.tuple []; Ty.path "core::fmt::Error" ],
                  M.get_associated_function (|
                    Ty.path "core::fmt::Formatter",
                    "debug_struct_fields_finish",
                    [],
                    []
                  |),
                  [
                    M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (| mk_str (| "BranchEqualCoreRecord" |) |)
                    |);
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ],
                      M.pointer_coercion
                        M.PointerCoercion.Unsize
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "array")
                              [ Value.Integer IntegerKind.Usize 7 ]
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ])
                        (Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "slice")
                              []
                              [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                          ]),
                      [ M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| names |) |) |) ]
                    |);
                    M.borrow (| Pointer.Kind.Ref, M.deref (| M.read (| values |) |) |)
                  ]
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS : Value.t) (T : Ty.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_LIMBS T)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt NUM_LIMBS T)) ].
    End Impl_core_fmt_Debug_where_core_fmt_Debug_T_for_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreRecord_NUM_LIMBS_T.
    
    Module underscore.
      Module Impl_serde_ser_Serialize_where_serde_ser_Serialize_T_for_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreRecord_NUM_LIMBS_T.
        Definition Self (NUM_LIMBS : Value.t) (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord")
            [ NUM_LIMBS ]
            [ T ].
        
        (* Serialize *)
        Definition serialize
            (NUM_LIMBS : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self NUM_LIMBS T in
          match ε, τ, α with
          | [], [ __S ], [ self; __serializer ] =>
            ltac:(M.monadic
              (let self :=
                M.alloc (|
                  Ty.apply
                    (Ty.path "&")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord")
                        [ NUM_LIMBS ]
                        [ T ]
                    ],
                  self
                |) in
              let __serializer := M.alloc (| __S, __serializer |) in
              M.catch_return
                (Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                    Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                  ]) (|
                ltac:(M.monadic
                  (M.read (|
                    let~ __serde_state :
                        Ty.associated_in_trait
                          "serde::ser::Serializer"
                          []
                          []
                          __S
                          "SerializeStruct" :=
                      M.match_operator (|
                        Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "SerializeStruct",
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.associated_in_trait
                                "serde::ser::Serializer"
                                []
                                []
                                __S
                                "SerializeStruct"
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.associated_in_trait
                                  "serde::ser::Serializer"
                                  []
                                  []
                                  __S
                                  "SerializeStruct"
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "SerializeStruct";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::Serializer",
                                  __S,
                                  [],
                                  [],
                                  "serialize_struct",
                                  [],
                                  []
                                |),
                                [
                                  M.read (| __serializer |);
                                  mk_str (| "BranchEqualCoreRecord" |);
                                  M.call_closure (|
                                    Ty.path "usize",
                                    BinOp.Wrap.add,
                                    [
                                      M.call_closure (|
                                        Ty.path "usize",
                                        BinOp.Wrap.add,
                                        [
                                          M.call_closure (|
                                            Ty.path "usize",
                                            BinOp.Wrap.add,
                                            [
                                              M.call_closure (|
                                                Ty.path "usize",
                                                BinOp.Wrap.add,
                                                [
                                                  M.call_closure (|
                                                    Ty.path "usize",
                                                    BinOp.Wrap.add,
                                                    [
                                                      M.call_closure (|
                                                        Ty.path "usize",
                                                        BinOp.Wrap.add,
                                                        [
                                                          M.call_closure (|
                                                            Ty.path "usize",
                                                            BinOp.Wrap.add,
                                                            [
                                                              M.cast
                                                                (Ty.path "usize")
                                                                (Value.Bool false);
                                                              Value.Integer IntegerKind.Usize 1
                                                            ]
                                                          |);
                                                          Value.Integer IntegerKind.Usize 1
                                                        ]
                                                      |);
                                                      Value.Integer IntegerKind.Usize 1
                                                    ]
                                                  |);
                                                  Value.Integer IntegerKind.Usize 1
                                                ]
                                              |);
                                              Value.Integer IntegerKind.Usize 1
                                            ]
                                          |);
                                          Value.Integer IntegerKind.Usize 1
                                        ]
                                      |);
                                      Value.Integer IntegerKind.Usize 1
                                    ]
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val :=
                                M.copy (|
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  γ0_0
                                |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::branch_eq::core::_::serialize::__SerializeWith")
                                      [ NUM_LIMBS ]
                                      [ T ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "a" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::branch_eq::core::_::serialize::__SerializeWith")
                                            [ NUM_LIMBS ]
                                            [ T ],
                                          Value.mkStructRecord
                                            "openvm_rv32im_circuit::branch_eq::core::_::serialize::__SerializeWith"
                                            [ NUM_LIMBS ]
                                            [ T ]
                                            [
                                              ("values",
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| self |) |),
                                                            "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                                                            "a"
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]);
                                              ("phantom",
                                                Value.StructTuple
                                                  "core::marker::PhantomData"
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord")
                                                      [ NUM_LIMBS ]
                                                      [ T ]
                                                  ]
                                                  [])
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.apply
                                      (Ty.path
                                        "openvm_rv32im_circuit::branch_eq::core::_::serialize::__SerializeWith'1")
                                      [ NUM_LIMBS ]
                                      [ T ]
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "b" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.alloc (|
                                          Ty.apply
                                            (Ty.path
                                              "openvm_rv32im_circuit::branch_eq::core::_::serialize::__SerializeWith'1")
                                            [ NUM_LIMBS ]
                                            [ T ],
                                          Value.mkStructRecord
                                            "openvm_rv32im_circuit::branch_eq::core::_::serialize::__SerializeWith'1"
                                            [ NUM_LIMBS ]
                                            [ T ]
                                            [
                                              ("values",
                                                Value.Tuple
                                                  [
                                                    M.borrow (|
                                                      Pointer.Kind.Ref,
                                                      M.deref (|
                                                        M.borrow (|
                                                          Pointer.Kind.Ref,
                                                          M.SubPointer.get_struct_record_field (|
                                                            M.deref (| M.read (| self |) |),
                                                            "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                                                            "b"
                                                          |)
                                                        |)
                                                      |)
                                                    |)
                                                  ]);
                                              ("phantom",
                                                Value.StructTuple
                                                  "core::marker::PhantomData"
                                                  []
                                                  [
                                                    Ty.apply
                                                      (Ty.path
                                                        "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord")
                                                      [ NUM_LIMBS ]
                                                      [ T ]
                                                  ]
                                                  [])
                                            ]
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ T ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "cmp_result" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                                          "cmp_result"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ T ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "imm" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                                          "imm"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ T ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "diff_inv_val" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                                          "diff_inv_val"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [ Ty.path "usize" ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "diff_idx" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                                          "diff_idx"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    let~ _ : Ty.tuple [] :=
                      M.match_operator (|
                        Ty.tuple [],
                        M.alloc (|
                          Ty.apply
                            (Ty.path "core::ops::control_flow::ControlFlow")
                            []
                            [
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.path "core::convert::Infallible";
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ];
                              Ty.tuple []
                            ],
                          M.call_closure (|
                            Ty.apply
                              (Ty.path "core::ops::control_flow::ControlFlow")
                              []
                              [
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.path "core::convert::Infallible";
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ];
                                Ty.tuple []
                              ],
                            M.get_trait_method (|
                              "core::ops::try_trait::Try",
                              Ty.apply
                                (Ty.path "core::result::Result")
                                []
                                [
                                  Ty.tuple [];
                                  Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                                ],
                              [],
                              [],
                              "branch",
                              [],
                              []
                            |),
                            [
                              M.call_closure (|
                                Ty.apply
                                  (Ty.path "core::result::Result")
                                  []
                                  [
                                    Ty.tuple [];
                                    Ty.associated_in_trait
                                      "serde::ser::Serializer"
                                      []
                                      []
                                      __S
                                      "Error"
                                  ],
                                M.get_trait_method (|
                                  "serde::ser::SerializeStruct",
                                  Ty.associated_in_trait
                                    "serde::ser::Serializer"
                                    []
                                    []
                                    __S
                                    "SerializeStruct",
                                  [],
                                  [],
                                  "serialize_field",
                                  [],
                                  [
                                    Ty.path
                                      "openvm_rv32im_transpiler::instructions::BranchEqualOpcode"
                                  ]
                                |),
                                [
                                  M.borrow (|
                                    Pointer.Kind.MutRef,
                                    M.deref (| M.borrow (| Pointer.Kind.MutRef, __serde_state |) |)
                                  |);
                                  mk_str (| "opcode" |);
                                  M.borrow (|
                                    Pointer.Kind.Ref,
                                    M.deref (|
                                      M.borrow (|
                                        Pointer.Kind.Ref,
                                        M.SubPointer.get_struct_record_field (|
                                          M.deref (| M.read (| self |) |),
                                          "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                                          "opcode"
                                        |)
                                      |)
                                    |)
                                  |)
                                ]
                              |)
                            ]
                          |)
                        |),
                        [
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Break",
                                  0
                                |) in
                              let residual :=
                                M.copy (|
                                  Ty.apply
                                    (Ty.path "core::result::Result")
                                    []
                                    [
                                      Ty.path "core::convert::Infallible";
                                      Ty.associated_in_trait
                                        "serde::ser::Serializer"
                                        []
                                        []
                                        __S
                                        "Error"
                                    ],
                                  γ0_0
                                |) in
                              M.never_to_any (|
                                M.read (|
                                  M.return_ (|
                                    M.call_closure (|
                                      Ty.apply
                                        (Ty.path "core::result::Result")
                                        []
                                        [
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Ok";
                                          Ty.associated_in_trait
                                            "serde::ser::Serializer"
                                            []
                                            []
                                            __S
                                            "Error"
                                        ],
                                      M.get_trait_method (|
                                        "core::ops::try_trait::FromResidual",
                                        Ty.apply
                                          (Ty.path "core::result::Result")
                                          []
                                          [
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Ok";
                                            Ty.associated_in_trait
                                              "serde::ser::Serializer"
                                              []
                                              []
                                              __S
                                              "Error"
                                          ],
                                        [],
                                        [
                                          Ty.apply
                                            (Ty.path "core::result::Result")
                                            []
                                            [
                                              Ty.path "core::convert::Infallible";
                                              Ty.associated_in_trait
                                                "serde::ser::Serializer"
                                                []
                                                []
                                                __S
                                                "Error"
                                            ]
                                        ],
                                        "from_residual",
                                        [],
                                        []
                                      |),
                                      [ M.read (| residual |) ]
                                    |)
                                  |)
                                |)
                              |)));
                          fun γ =>
                            ltac:(M.monadic
                              (let γ0_0 :=
                                M.SubPointer.get_struct_tuple_field (|
                                  γ,
                                  "core::ops::control_flow::ControlFlow::Continue",
                                  0
                                |) in
                              let val := M.copy (| Ty.tuple [], γ0_0 |) in
                              M.read (| val |)))
                        ]
                      |) in
                    M.alloc (|
                      Ty.apply
                        (Ty.path "core::result::Result")
                        []
                        [
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                          Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                        ],
                      M.call_closure (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Ok";
                            Ty.associated_in_trait "serde::ser::Serializer" [] [] __S "Error"
                          ],
                        M.get_trait_method (|
                          "serde::ser::SerializeStruct",
                          Ty.associated_in_trait
                            "serde::ser::Serializer"
                            []
                            []
                            __S
                            "SerializeStruct",
                          [],
                          [],
                          "end",
                          [],
                          []
                        |),
                        [ M.read (| __serde_state |) ]
                      |)
                    |)
                  |)))
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (NUM_LIMBS : Value.t) (T : Ty.t),
          M.IsTraitInstance
            "serde::ser::Serialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self NUM_LIMBS T)
            (* Instance *) [ ("serialize", InstanceField.Method (serialize NUM_LIMBS T)) ].
      End Impl_serde_ser_Serialize_where_serde_ser_Serialize_T_for_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreRecord_NUM_LIMBS_T.
      Module Impl_serde_de_Deserialize_where_serde_de_Deserialize_T_for_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreRecord_NUM_LIMBS_T.
        Definition Self (NUM_LIMBS : Value.t) (T : Ty.t) : Ty.t :=
          Ty.apply
            (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord")
            [ NUM_LIMBS ]
            [ T ].
        
        (* Deserialize *)
        Definition deserialize
            (NUM_LIMBS : Value.t)
            (T : Ty.t)
            (ε : list Value.t)
            (τ : list Ty.t)
            (α : list Value.t)
            : M :=
          let Self : Ty.t := Self NUM_LIMBS T in
          match ε, τ, α with
          | [], [ __D ], [ __deserializer ] =>
            ltac:(M.monadic
              (let __deserializer := M.alloc (| __D, __deserializer |) in
              M.call_closure (|
                Ty.apply
                  (Ty.path "core::result::Result")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord")
                      [ NUM_LIMBS ]
                      [ T ];
                    Ty.associated_in_trait "serde::de::Deserializer" [] [] __D "Error"
                  ],
                M.get_trait_method (|
                  "serde::de::Deserializer",
                  __D,
                  [],
                  [],
                  "deserialize_struct",
                  [],
                  [
                    Ty.apply
                      (Ty.path
                        "openvm_rv32im_circuit::branch_eq::core::_'1::deserialize::__Visitor")
                      [ NUM_LIMBS ]
                      [ T ]
                  ]
                |),
                [
                  M.read (| __deserializer |);
                  mk_str (| "BranchEqualCoreRecord" |);
                  M.read (|
                    get_constant (|
                      "openvm_rv32im_circuit::branch_eq::core::_'1::deserialize::FIELDS",
                      Ty.apply
                        (Ty.path "&")
                        []
                        [
                          Ty.apply
                            (Ty.path "slice")
                            []
                            [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ]
                        ]
                    |)
                  |);
                  Value.mkStructRecord
                    "openvm_rv32im_circuit::branch_eq::core::_'1::deserialize::__Visitor"
                    [ NUM_LIMBS ]
                    [ T ]
                    [
                      ("marker",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [
                            Ty.apply
                              (Ty.path
                                "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord")
                              [ NUM_LIMBS ]
                              [ T ]
                          ]
                          []);
                      ("lifetime",
                        Value.StructTuple
                          "core::marker::PhantomData"
                          []
                          [ Ty.apply (Ty.path "&") [] [ Ty.tuple [] ] ]
                          [])
                    ]
                ]
              |)))
          | _, _, _ => M.impossible "wrong number of arguments"
          end.
        
        Axiom Implements :
          forall (NUM_LIMBS : Value.t) (T : Ty.t),
          M.IsTraitInstance
            "serde::de::Deserialize"
            (* Trait polymorphic consts *) []
            (* Trait polymorphic types *) []
            (Self NUM_LIMBS T)
            (* Instance *) [ ("deserialize", InstanceField.Method (deserialize NUM_LIMBS T)) ].
      End Impl_serde_de_Deserialize_where_serde_de_Deserialize_T_for_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreRecord_NUM_LIMBS_T.
    End underscore.
    
    
    (* StructRecord
      {
        name := "BranchEqualCoreChip";
        const_params := [ "NUM_LIMBS" ];
        ty_params := [];
        fields :=
          [
            ("air",
              Ty.apply
                (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreAir")
                [ NUM_LIMBS ]
                [])
          ];
      } *)
    
    Module Impl_core_fmt_Debug_for_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreChip_NUM_LIMBS.
      Definition Self (NUM_LIMBS : Value.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
          [ NUM_LIMBS ]
          [].
      
      (* Debug *)
      Definition fmt
          (NUM_LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS in
        match ε, τ, α with
        | [], [], [ self; f ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                      [ NUM_LIMBS ]
                      []
                  ],
                self
              |) in
            let f :=
              M.alloc (| Ty.apply (Ty.path "&mut") [] [ Ty.path "core::fmt::Formatter" ], f |) in
            M.call_closure (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [ Ty.tuple []; Ty.path "core::fmt::Error" ],
              M.get_associated_function (|
                Ty.path "core::fmt::Formatter",
                "debug_struct_field1_finish",
                [],
                []
              |),
              [
                M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| f |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "BranchEqualCoreChip" |) |) |);
                M.borrow (| Pointer.Kind.Ref, M.deref (| mk_str (| "air" |) |) |);
                M.call_closure (|
                  Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ],
                  M.pointer_coercion
                    M.PointerCoercion.Unsize
                    (Ty.apply
                      (Ty.path "&")
                      []
                      [
                        Ty.apply
                          (Ty.path "&")
                          []
                          [
                            Ty.apply
                              (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreAir")
                              [ NUM_LIMBS ]
                              []
                          ]
                      ])
                    (Ty.apply (Ty.path "&") [] [ Ty.dyn [ ("core::fmt::Debug::Trait", []) ] ]),
                  [
                    M.borrow (|
                      Pointer.Kind.Ref,
                      M.deref (|
                        M.borrow (|
                          Pointer.Kind.Ref,
                          M.alloc (|
                            Ty.apply
                              (Ty.path "&")
                              []
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreAir")
                                  [ NUM_LIMBS ]
                                  []
                              ],
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.SubPointer.get_struct_record_field (|
                                M.deref (| M.read (| self |) |),
                                "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip",
                                "air"
                              |)
                            |)
                          |)
                        |)
                      |)
                    |)
                  ]
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS : Value.t),
        M.IsTraitInstance
          "core::fmt::Debug"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) []
          (Self NUM_LIMBS)
          (* Instance *) [ ("fmt", InstanceField.Method (fmt NUM_LIMBS)) ].
    End Impl_core_fmt_Debug_for_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreChip_NUM_LIMBS.
    
    Module Impl_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreChip_NUM_LIMBS.
      Definition Self (NUM_LIMBS : Value.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
          [ NUM_LIMBS ]
          [].
      
      (*
          pub fn new(offset: usize, pc_step: u32) -> Self {
              Self {
                  air: BranchEqualCoreAir { offset, pc_step },
              }
          }
      *)
      Definition new
          (NUM_LIMBS : Value.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS in
        match ε, τ, α with
        | [], [], [ offset; pc_step ] =>
          ltac:(M.monadic
            (let offset := M.alloc (| Ty.path "usize", offset |) in
            let pc_step := M.alloc (| Ty.path "u32", pc_step |) in
            Value.mkStructRecord
              "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip"
              [ NUM_LIMBS ]
              []
              [
                ("air",
                  Value.mkStructRecord
                    "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreAir"
                    [ NUM_LIMBS ]
                    []
                    [ ("offset", M.read (| offset |)); ("pc_step", M.read (| pc_step |)) ])
              ]))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Global Instance AssociatedFunction_new :
        forall (NUM_LIMBS : Value.t),
        M.IsAssociatedFunction.C (Self NUM_LIMBS) "new" (new NUM_LIMBS).
      Admitted.
      Global Typeclasses Opaque new.
    End Impl_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreChip_NUM_LIMBS.
    
    Module Impl_openvm_circuit_arch_integration_api_VmCoreChip_where_p3_field_field_PrimeField32_F_where_openvm_circuit_arch_integration_api_VmAdapterInterface_I_F_where_core_convert_Into_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__F_I_Reads_array_Usize_2_array_NUM_LIMBS_F_where_core_default_Default_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__F_I_Writes_F_I_for_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreChip_NUM_LIMBS.
      Definition Self (NUM_LIMBS : Value.t) (F I : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
          [ NUM_LIMBS ]
          [].
      
      (*     type Record = BranchEqualCoreRecord<F, NUM_LIMBS>; *)
      Definition _Record (NUM_LIMBS : Value.t) (F I : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord")
          [ NUM_LIMBS ]
          [ F ].
      
      (*     type Air = BranchEqualCoreAir<NUM_LIMBS>; *)
      Definition _Air (NUM_LIMBS : Value.t) (F I : Ty.t) : Ty.t :=
        Ty.apply
          (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreAir")
          [ NUM_LIMBS ]
          [].
      
      (*
          fn execute_instruction(
              &self,
              instruction: &Instruction<F>,
              from_pc: u32,
              reads: I::Reads,
          ) -> Result<(AdapterRuntimeContext<F, I>, Self::Record)> {
              let Instruction { opcode, c: imm, .. } = *instruction;
              let branch_eq_opcode =
                  BranchEqualOpcode::from_usize(opcode.local_opcode_idx(self.air.offset));
      
              let data: [[F; NUM_LIMBS]; 2] = reads.into();
              let x = data[0].map(|x| x.as_canonical_u32());
              let y = data[1].map(|y| y.as_canonical_u32());
              let (cmp_result, diff_idx, diff_inv_val) = run_eq::<F, NUM_LIMBS>(branch_eq_opcode, &x, &y);
      
              let output = AdapterRuntimeContext {
                  to_pc: cmp_result.then_some((F::from_canonical_u32(from_pc) + imm).as_canonical_u32()),
                  writes: Default::default(),
              };
              let record = BranchEqualCoreRecord {
                  opcode: branch_eq_opcode,
                  a: data[0],
                  b: data[1],
                  cmp_result: F::from_bool(cmp_result),
                  imm,
                  diff_idx,
                  diff_inv_val,
              };
      
              Ok((output, record))
          }
      *)
      Definition execute_instruction
          (NUM_LIMBS : Value.t)
          (F I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS F I in
        match ε, τ, α with
        | [], [], [ self; instruction; from_pc; reads ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                      [ NUM_LIMBS ]
                      []
                  ],
                self
              |) in
            let instruction :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [ Ty.apply (Ty.path "openvm_instructions::instruction::Instruction") [] [ F ] ],
                instruction
              |) in
            let from_pc := M.alloc (| Ty.path "u32", from_pc |) in
            let reads :=
              M.alloc (|
                Ty.associated_in_trait
                  "openvm_circuit::arch::integration_api::VmAdapterInterface"
                  []
                  [ F ]
                  I
                  "Reads",
                reads
              |) in
            M.match_operator (|
              Ty.apply
                (Ty.path "core::result::Result")
                []
                [
                  Ty.tuple
                    [
                      Ty.apply
                        (Ty.path "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                        []
                        [ F; I ];
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord")
                        [ NUM_LIMBS ]
                        [ F ]
                    ];
                  Ty.path "openvm_circuit::arch::execution::ExecutionError"
                ],
              M.deref (| M.read (| instruction |) |),
              [
                fun γ =>
                  ltac:(M.monadic
                    (let γ0_0 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_instructions::instruction::Instruction",
                        "opcode"
                      |) in
                    let γ0_1 :=
                      M.SubPointer.get_struct_record_field (|
                        γ,
                        "openvm_instructions::instruction::Instruction",
                        "c"
                      |) in
                    let opcode := M.copy (| Ty.path "openvm_instructions::VmOpcode", γ0_0 |) in
                    let imm := M.copy (| F, γ0_1 |) in
                    M.read (|
                      let~ branch_eq_opcode :
                          Ty.path "openvm_rv32im_transpiler::instructions::BranchEqualOpcode" :=
                        M.call_closure (|
                          Ty.path "openvm_rv32im_transpiler::instructions::BranchEqualOpcode",
                          M.get_trait_method (|
                            "openvm_instructions::LocalOpcode",
                            Ty.path "openvm_rv32im_transpiler::instructions::BranchEqualOpcode",
                            [],
                            [],
                            "from_usize",
                            [],
                            []
                          |),
                          [
                            M.call_closure (|
                              Ty.path "usize",
                              M.get_associated_function (|
                                Ty.path "openvm_instructions::VmOpcode",
                                "local_opcode_idx",
                                [],
                                []
                              |),
                              [
                                M.borrow (| Pointer.Kind.Ref, opcode |);
                                M.read (|
                                  M.SubPointer.get_struct_record_field (|
                                    M.SubPointer.get_struct_record_field (|
                                      M.deref (| M.read (| self |) |),
                                      "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip",
                                      "air"
                                    |),
                                    "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreAir",
                                    "offset"
                                  |)
                                |)
                              ]
                            |)
                          ]
                        |) in
                      let~ data :
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] ] :=
                        M.call_closure (|
                          Ty.apply
                            (Ty.path "array")
                            [ Value.Integer IntegerKind.Usize 2 ]
                            [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] ],
                          M.get_trait_method (|
                            "core::convert::Into",
                            Ty.associated_in_trait
                              "openvm_circuit::arch::integration_api::VmAdapterInterface"
                              []
                              [ F ]
                              I
                              "Reads",
                            [],
                            [
                              Ty.apply
                                (Ty.path "array")
                                [ Value.Integer IntegerKind.Usize 2 ]
                                [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ] ]
                            ],
                            "into",
                            [],
                            []
                          |),
                          [ M.read (| reads |) ]
                        |) in
                      let~ x : Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] :=
                        M.call_closure (|
                          Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ],
                            "map",
                            [],
                            [ Ty.function [ F ] (Ty.path "u32"); Ty.path "u32" ]
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_array_field (|
                                data,
                                Value.Integer IntegerKind.Usize 0
                              |)
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.path "u32",
                                        M.alloc (| F, α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let x := M.copy (| F, γ |) in
                                              M.call_closure (|
                                                Ty.path "u32",
                                                M.get_trait_method (|
                                                  "p3_field::field::PrimeField32",
                                                  F,
                                                  [],
                                                  [],
                                                  "as_canonical_u32",
                                                  [],
                                                  []
                                                |),
                                                [ M.borrow (| Pointer.Kind.Ref, x |) ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |) in
                      let~ y : Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] :=
                        M.call_closure (|
                          Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ],
                          M.get_associated_function (|
                            Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ],
                            "map",
                            [],
                            [ Ty.function [ F ] (Ty.path "u32"); Ty.path "u32" ]
                          |),
                          [
                            M.read (|
                              M.SubPointer.get_array_field (|
                                data,
                                Value.Integer IntegerKind.Usize 1
                              |)
                            |);
                            M.closure
                              (fun γ =>
                                ltac:(M.monadic
                                  match γ with
                                  | [ α0 ] =>
                                    ltac:(M.monadic
                                      (M.match_operator (|
                                        Ty.path "u32",
                                        M.alloc (| F, α0 |),
                                        [
                                          fun γ =>
                                            ltac:(M.monadic
                                              (let y := M.copy (| F, γ |) in
                                              M.call_closure (|
                                                Ty.path "u32",
                                                M.get_trait_method (|
                                                  "p3_field::field::PrimeField32",
                                                  F,
                                                  [],
                                                  [],
                                                  "as_canonical_u32",
                                                  [],
                                                  []
                                                |),
                                                [ M.borrow (| Pointer.Kind.Ref, y |) ]
                                              |)))
                                        ]
                                      |)))
                                  | _ => M.impossible "wrong number of arguments"
                                  end))
                          ]
                        |) in
                      M.alloc (|
                        Ty.apply
                          (Ty.path "core::result::Result")
                          []
                          [
                            Ty.tuple
                              [
                                Ty.apply
                                  (Ty.path
                                    "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                  []
                                  [ F; I ];
                                Ty.apply
                                  (Ty.path
                                    "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord")
                                  [ NUM_LIMBS ]
                                  [ F ]
                              ];
                            Ty.path "openvm_circuit::arch::execution::ExecutionError"
                          ],
                        M.match_operator (|
                          Ty.apply
                            (Ty.path "core::result::Result")
                            []
                            [
                              Ty.tuple
                                [
                                  Ty.apply
                                    (Ty.path
                                      "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                    []
                                    [ F; I ];
                                  Ty.apply
                                    (Ty.path
                                      "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord")
                                    [ NUM_LIMBS ]
                                    [ F ]
                                ];
                              Ty.path "openvm_circuit::arch::execution::ExecutionError"
                            ],
                          M.alloc (|
                            Ty.tuple [ Ty.path "bool"; Ty.path "usize"; F ],
                            M.call_closure (|
                              Ty.tuple [ Ty.path "bool"; Ty.path "usize"; F ],
                              M.get_function (|
                                "openvm_rv32im_circuit::branch_eq::core::run_eq",
                                [ NUM_LIMBS ],
                                [ F ]
                              |),
                              [
                                M.read (| branch_eq_opcode |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.borrow (| Pointer.Kind.Ref, x |) |)
                                |);
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.deref (| M.borrow (| Pointer.Kind.Ref, y |) |)
                                |)
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let γ0_0 := M.SubPointer.get_tuple_field (| γ, 0 |) in
                                let γ0_1 := M.SubPointer.get_tuple_field (| γ, 1 |) in
                                let γ0_2 := M.SubPointer.get_tuple_field (| γ, 2 |) in
                                let cmp_result := M.copy (| Ty.path "bool", γ0_0 |) in
                                let diff_idx := M.copy (| Ty.path "usize", γ0_1 |) in
                                let diff_inv_val := M.copy (| F, γ0_2 |) in
                                M.read (|
                                  let~ output :
                                      Ty.apply
                                        (Ty.path
                                          "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                        []
                                        [ F; I ] :=
                                    Value.mkStructRecord
                                      "openvm_circuit::arch::integration_api::AdapterRuntimeContext"
                                      []
                                      [ F; I ]
                                      [
                                        ("to_pc",
                                          M.call_closure (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.path "u32" ],
                                            M.get_associated_function (|
                                              Ty.path "bool",
                                              "then_some",
                                              [],
                                              [ Ty.path "u32" ]
                                            |),
                                            [
                                              M.read (| cmp_result |);
                                              M.call_closure (|
                                                Ty.path "u32",
                                                M.get_trait_method (|
                                                  "p3_field::field::PrimeField32",
                                                  F,
                                                  [],
                                                  [],
                                                  "as_canonical_u32",
                                                  [],
                                                  []
                                                |),
                                                [
                                                  M.borrow (|
                                                    Pointer.Kind.Ref,
                                                    M.alloc (|
                                                      F,
                                                      M.call_closure (|
                                                        F,
                                                        M.get_trait_method (|
                                                          "core::ops::arith::Add",
                                                          F,
                                                          [],
                                                          [ F ],
                                                          "add",
                                                          [],
                                                          []
                                                        |),
                                                        [
                                                          M.call_closure (|
                                                            F,
                                                            M.get_trait_method (|
                                                              "p3_field::field::FieldAlgebra",
                                                              F,
                                                              [],
                                                              [],
                                                              "from_canonical_u32",
                                                              [],
                                                              []
                                                            |),
                                                            [ M.read (| from_pc |) ]
                                                          |);
                                                          M.read (| imm |)
                                                        ]
                                                      |)
                                                    |)
                                                  |)
                                                ]
                                              |)
                                            ]
                                          |));
                                        ("writes",
                                          M.call_closure (|
                                            Ty.associated_in_trait
                                              "openvm_circuit::arch::integration_api::VmAdapterInterface"
                                              []
                                              [ F ]
                                              I
                                              "Writes",
                                            M.get_trait_method (|
                                              "core::default::Default",
                                              Ty.associated_in_trait
                                                "openvm_circuit::arch::integration_api::VmAdapterInterface"
                                                []
                                                [ F ]
                                                I
                                                "Writes",
                                              [],
                                              [],
                                              "default",
                                              [],
                                              []
                                            |),
                                            []
                                          |))
                                      ] in
                                  let~ record :
                                      Ty.apply
                                        (Ty.path
                                          "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord")
                                        [ NUM_LIMBS ]
                                        [ F ] :=
                                    Value.mkStructRecord
                                      "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord"
                                      [ NUM_LIMBS ]
                                      [ F ]
                                      [
                                        ("opcode", M.read (| branch_eq_opcode |));
                                        ("a",
                                          M.read (|
                                            M.SubPointer.get_array_field (|
                                              data,
                                              Value.Integer IntegerKind.Usize 0
                                            |)
                                          |));
                                        ("b",
                                          M.read (|
                                            M.SubPointer.get_array_field (|
                                              data,
                                              Value.Integer IntegerKind.Usize 1
                                            |)
                                          |));
                                        ("cmp_result",
                                          M.call_closure (|
                                            F,
                                            M.get_trait_method (|
                                              "p3_field::field::FieldAlgebra",
                                              F,
                                              [],
                                              [],
                                              "from_bool",
                                              [],
                                              []
                                            |),
                                            [ M.read (| cmp_result |) ]
                                          |));
                                        ("imm", M.read (| imm |));
                                        ("diff_idx", M.read (| diff_idx |));
                                        ("diff_inv_val", M.read (| diff_inv_val |))
                                      ] in
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "core::result::Result")
                                      []
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                              []
                                              [ F; I ];
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord")
                                              [ NUM_LIMBS ]
                                              [ F ]
                                          ];
                                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                      ],
                                    Value.StructTuple
                                      "core::result::Result::Ok"
                                      []
                                      [
                                        Ty.tuple
                                          [
                                            Ty.apply
                                              (Ty.path
                                                "openvm_circuit::arch::integration_api::AdapterRuntimeContext")
                                              []
                                              [ F; I ];
                                            Ty.apply
                                              (Ty.path
                                                "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord")
                                              [ NUM_LIMBS ]
                                              [ F ]
                                          ];
                                        Ty.path "openvm_circuit::arch::execution::ExecutionError"
                                      ]
                                      [ Value.Tuple [ M.read (| output |); M.read (| record |) ] ]
                                  |)
                                |)))
                          ]
                        |)
                      |)
                    |)))
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn get_opcode_name(&self, opcode: usize) -> String {
              format!(
                  "{:?}",
                  BranchEqualOpcode::from_usize(opcode - self.air.offset)
              )
          }
      *)
      Definition get_opcode_name
          (NUM_LIMBS : Value.t)
          (F I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS F I in
        match ε, τ, α with
        | [], [], [ self; opcode ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                      [ NUM_LIMBS ]
                      []
                  ],
                self
              |) in
            let opcode := M.alloc (| Ty.path "usize", opcode |) in
            M.call_closure (|
              Ty.path "alloc::string::String",
              M.get_function (| "core::hint::must_use", [], [ Ty.path "alloc::string::String" ] |),
              [
                M.read (|
                  let~ res : Ty.path "alloc::string::String" :=
                    M.call_closure (|
                      Ty.path "alloc::string::String",
                      M.get_function (| "alloc::fmt::format", [], [] |),
                      [
                        M.call_closure (|
                          Ty.path "core::fmt::Arguments",
                          M.get_associated_function (|
                            Ty.path "core::fmt::Arguments",
                            "new_v1",
                            [ Value.Integer IntegerKind.Usize 1; Value.Integer IntegerKind.Usize 1
                            ],
                            []
                          |),
                          [
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.apply (Ty.path "&") [] [ Ty.path "str" ] ],
                                    Value.Array [ mk_str (| "" |) ]
                                  |)
                                |)
                              |)
                            |);
                            M.borrow (|
                              Pointer.Kind.Ref,
                              M.deref (|
                                M.borrow (|
                                  Pointer.Kind.Ref,
                                  M.alloc (|
                                    Ty.apply
                                      (Ty.path "array")
                                      [ Value.Integer IntegerKind.Usize 1 ]
                                      [ Ty.path "core::fmt::rt::Argument" ],
                                    Value.Array
                                      [
                                        M.call_closure (|
                                          Ty.path "core::fmt::rt::Argument",
                                          M.get_associated_function (|
                                            Ty.path "core::fmt::rt::Argument",
                                            "new_debug",
                                            [],
                                            [
                                              Ty.path
                                                "openvm_rv32im_transpiler::instructions::BranchEqualOpcode"
                                            ]
                                          |),
                                          [
                                            M.borrow (|
                                              Pointer.Kind.Ref,
                                              M.deref (|
                                                M.borrow (|
                                                  Pointer.Kind.Ref,
                                                  M.alloc (|
                                                    Ty.path
                                                      "openvm_rv32im_transpiler::instructions::BranchEqualOpcode",
                                                    M.call_closure (|
                                                      Ty.path
                                                        "openvm_rv32im_transpiler::instructions::BranchEqualOpcode",
                                                      M.get_trait_method (|
                                                        "openvm_instructions::LocalOpcode",
                                                        Ty.path
                                                          "openvm_rv32im_transpiler::instructions::BranchEqualOpcode",
                                                        [],
                                                        [],
                                                        "from_usize",
                                                        [],
                                                        []
                                                      |),
                                                      [
                                                        M.call_closure (|
                                                          Ty.path "usize",
                                                          BinOp.Wrap.sub,
                                                          [
                                                            M.read (| opcode |);
                                                            M.read (|
                                                              M.SubPointer.get_struct_record_field (|
                                                                M.SubPointer.get_struct_record_field (|
                                                                  M.deref (| M.read (| self |) |),
                                                                  "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip",
                                                                  "air"
                                                                |),
                                                                "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreAir",
                                                                "offset"
                                                              |)
                                                            |)
                                                          ]
                                                        |)
                                                      ]
                                                    |)
                                                  |)
                                                |)
                                              |)
                                            |)
                                          ]
                                        |)
                                      ]
                                  |)
                                |)
                              |)
                            |)
                          ]
                        |)
                      ]
                    |) in
                  res
                |)
              ]
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn generate_trace_row(&self, row_slice: &mut [F], record: Self::Record) {
              let row_slice: &mut BranchEqualCoreCols<_, NUM_LIMBS> = row_slice.borrow_mut();
              row_slice.a = record.a;
              row_slice.b = record.b;
              row_slice.cmp_result = record.cmp_result;
              row_slice.imm = record.imm;
              row_slice.opcode_beq_flag = F::from_bool(record.opcode == BranchEqualOpcode::BEQ);
              row_slice.opcode_bne_flag = F::from_bool(record.opcode == BranchEqualOpcode::BNE);
              row_slice.diff_inv_marker = array::from_fn(|i| {
                  if i == record.diff_idx {
                      record.diff_inv_val
                  } else {
                      F::ZERO
                  }
              });
          }
      *)
      Definition generate_trace_row
          (NUM_LIMBS : Value.t)
          (F I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS F I in
        match ε, τ, α with
        | [], [], [ self; row_slice; record ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                      [ NUM_LIMBS ]
                      []
                  ],
                self
              |) in
            let row_slice :=
              M.alloc (|
                Ty.apply (Ty.path "&mut") [] [ Ty.apply (Ty.path "slice") [] [ F ] ],
                row_slice
              |) in
            let record :=
              M.alloc (|
                Ty.associated_in_trait
                  "openvm_circuit::arch::integration_api::VmCoreChip"
                  []
                  [ F; I ]
                  (Ty.apply
                    (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                    [ NUM_LIMBS ]
                    [])
                  "Record",
                record
              |) in
            M.read (|
              let~ row_slice :
                  Ty.apply
                    (Ty.path "&mut")
                    []
                    [
                      Ty.apply
                        (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
                        [ NUM_LIMBS ]
                        [ F ]
                    ] :=
                M.borrow (|
                  Pointer.Kind.MutRef,
                  M.deref (|
                    M.call_closure (|
                      Ty.apply
                        (Ty.path "&mut")
                        []
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
                            [ NUM_LIMBS ]
                            [ F ]
                        ],
                      M.get_trait_method (|
                        "core::borrow::BorrowMut",
                        Ty.apply (Ty.path "slice") [] [ F ],
                        [],
                        [
                          Ty.apply
                            (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols")
                            [ NUM_LIMBS ]
                            [ F ]
                        ],
                        "borrow_mut",
                        [],
                        []
                      |),
                      [ M.borrow (| Pointer.Kind.MutRef, M.deref (| M.read (| row_slice |) |) |) ]
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols",
                    "a"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                      "a"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols",
                    "b"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                      "b"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols",
                    "cmp_result"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                      "cmp_result"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols",
                    "imm"
                  |),
                  M.read (|
                    M.SubPointer.get_struct_record_field (|
                      record,
                      "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                      "imm"
                    |)
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols",
                    "opcode_beq_flag"
                  |),
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "from_bool",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "bool",
                        M.get_trait_method (|
                          "core::cmp::PartialEq",
                          Ty.path "openvm_rv32im_transpiler::instructions::BranchEqualOpcode",
                          [],
                          [ Ty.path "openvm_rv32im_transpiler::instructions::BranchEqualOpcode" ],
                          "eq",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              record,
                              "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                              "opcode"
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.path "openvm_rv32im_transpiler::instructions::BranchEqualOpcode",
                              Value.StructTuple
                                "openvm_rv32im_transpiler::instructions::BranchEqualOpcode::BEQ"
                                []
                                []
                                []
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols",
                    "opcode_bne_flag"
                  |),
                  M.call_closure (|
                    F,
                    M.get_trait_method (|
                      "p3_field::field::FieldAlgebra",
                      F,
                      [],
                      [],
                      "from_bool",
                      [],
                      []
                    |),
                    [
                      M.call_closure (|
                        Ty.path "bool",
                        M.get_trait_method (|
                          "core::cmp::PartialEq",
                          Ty.path "openvm_rv32im_transpiler::instructions::BranchEqualOpcode",
                          [],
                          [ Ty.path "openvm_rv32im_transpiler::instructions::BranchEqualOpcode" ],
                          "eq",
                          [],
                          []
                        |),
                        [
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.SubPointer.get_struct_record_field (|
                              record,
                              "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                              "opcode"
                            |)
                          |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.path "openvm_rv32im_transpiler::instructions::BranchEqualOpcode",
                              Value.StructTuple
                                "openvm_rv32im_transpiler::instructions::BranchEqualOpcode::BNE"
                                []
                                []
                                []
                            |)
                          |)
                        ]
                      |)
                    ]
                  |)
                |) in
              let~ _ : Ty.tuple [] :=
                M.write (|
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| row_slice |) |),
                    "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreCols",
                    "diff_inv_marker"
                  |),
                  M.call_closure (|
                    Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ F ],
                    M.get_function (|
                      "core::array::from_fn",
                      [ NUM_LIMBS ],
                      [ F; Ty.function [ Ty.path "usize" ] F ]
                    |),
                    [
                      M.closure
                        (fun γ =>
                          ltac:(M.monadic
                            match γ with
                            | [ α0 ] =>
                              ltac:(M.monadic
                                (M.match_operator (|
                                  F,
                                  M.alloc (| Ty.path "usize", α0 |),
                                  [
                                    fun γ =>
                                      ltac:(M.monadic
                                        (let i := M.copy (| Ty.path "usize", γ |) in
                                        M.match_operator (|
                                          F,
                                          M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ :=
                                                  M.use
                                                    (M.alloc (|
                                                      Ty.path "bool",
                                                      M.call_closure (|
                                                        Ty.path "bool",
                                                        BinOp.eq,
                                                        [
                                                          M.read (| i |);
                                                          M.read (|
                                                            M.SubPointer.get_struct_record_field (|
                                                              record,
                                                              "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                                                              "diff_idx"
                                                            |)
                                                          |)
                                                        ]
                                                      |)
                                                    |)) in
                                                let _ :=
                                                  is_constant_or_break_match (|
                                                    M.read (| γ |),
                                                    Value.Bool true
                                                  |) in
                                                M.read (|
                                                  M.SubPointer.get_struct_record_field (|
                                                    record,
                                                    "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreRecord",
                                                    "diff_inv_val"
                                                  |)
                                                |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (M.read (|
                                                  get_constant (|
                                                    "p3_field::field::FieldAlgebra::ZERO",
                                                    F
                                                  |)
                                                |)))
                                          ]
                                        |)))
                                  ]
                                |)))
                            | _ => M.impossible "wrong number of arguments"
                            end))
                    ]
                  |)
                |) in
              M.alloc (| Ty.tuple [], Value.Tuple [] |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      (*
          fn air(&self) -> &Self::Air {
              &self.air
          }
      *)
      Definition air
          (NUM_LIMBS : Value.t)
          (F I : Ty.t)
          (ε : list Value.t)
          (τ : list Ty.t)
          (α : list Value.t)
          : M :=
        let Self : Ty.t := Self NUM_LIMBS F I in
        match ε, τ, α with
        | [], [], [ self ] =>
          ltac:(M.monadic
            (let self :=
              M.alloc (|
                Ty.apply
                  (Ty.path "&")
                  []
                  [
                    Ty.apply
                      (Ty.path "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip")
                      [ NUM_LIMBS ]
                      []
                  ],
                self
              |) in
            M.borrow (|
              Pointer.Kind.Ref,
              M.deref (|
                M.borrow (|
                  Pointer.Kind.Ref,
                  M.SubPointer.get_struct_record_field (|
                    M.deref (| M.read (| self |) |),
                    "openvm_rv32im_circuit::branch_eq::core::BranchEqualCoreChip",
                    "air"
                  |)
                |)
              |)
            |)))
        | _, _, _ => M.impossible "wrong number of arguments"
        end.
      
      Axiom Implements :
        forall (NUM_LIMBS : Value.t) (F I : Ty.t),
        M.IsTraitInstance
          "openvm_circuit::arch::integration_api::VmCoreChip"
          (* Trait polymorphic consts *) []
          (* Trait polymorphic types *) [ F; I ]
          (Self NUM_LIMBS F I)
          (* Instance *)
          [
            ("Record", InstanceField.Ty (_Record NUM_LIMBS F I));
            ("Air", InstanceField.Ty (_Air NUM_LIMBS F I));
            ("execute_instruction", InstanceField.Method (execute_instruction NUM_LIMBS F I));
            ("get_opcode_name", InstanceField.Method (get_opcode_name NUM_LIMBS F I));
            ("generate_trace_row", InstanceField.Method (generate_trace_row NUM_LIMBS F I));
            ("air", InstanceField.Method (air NUM_LIMBS F I))
          ].
    End Impl_openvm_circuit_arch_integration_api_VmCoreChip_where_p3_field_field_PrimeField32_F_where_openvm_circuit_arch_integration_api_VmAdapterInterface_I_F_where_core_convert_Into_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__F_I_Reads_array_Usize_2_array_NUM_LIMBS_F_where_core_default_Default_associated_in_trait_openvm_circuit_arch_integration_api_VmAdapterInterface__F_I_Writes_F_I_for_openvm_rv32im_circuit_branch_eq_core_BranchEqualCoreChip_NUM_LIMBS.
    
    (*
    pub(super) fn run_eq<F: PrimeField32, const NUM_LIMBS: usize>(
        local_opcode: BranchEqualOpcode,
        x: &[u32; NUM_LIMBS],
        y: &[u32; NUM_LIMBS],
    ) -> (bool, usize, F) {
        for i in 0..NUM_LIMBS {
            if x[i] != y[i] {
                return (
                    local_opcode == BranchEqualOpcode::BNE,
                    i,
                    (F::from_canonical_u32(x[i]) - F::from_canonical_u32(y[i])).inverse(),
                );
            }
        }
        (local_opcode == BranchEqualOpcode::BEQ, 0, F::ZERO)
    }
    *)
    Definition run_eq (ε : list Value.t) (τ : list Ty.t) (α : list Value.t) : M :=
      match ε, τ, α with
      | [ NUM_LIMBS ], [ F ], [ local_opcode; x; y ] =>
        ltac:(M.monadic
          (let local_opcode :=
            M.alloc (|
              Ty.path "openvm_rv32im_transpiler::instructions::BranchEqualOpcode",
              local_opcode
            |) in
          let x :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] ],
              x
            |) in
          let y :=
            M.alloc (|
              Ty.apply
                (Ty.path "&")
                []
                [ Ty.apply (Ty.path "array") [ NUM_LIMBS ] [ Ty.path "u32" ] ],
              y
            |) in
          M.catch_return (Ty.tuple [ Ty.path "bool"; Ty.path "usize"; F ]) (|
            ltac:(M.monadic
              (M.read (|
                let~ _ : Ty.tuple [] :=
                  M.read (|
                    M.use
                      (M.alloc (|
                        Ty.tuple [],
                        M.match_operator (|
                          Ty.tuple [],
                          M.alloc (|
                            Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                            M.call_closure (|
                              Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                              M.get_trait_method (|
                                "core::iter::traits::collect::IntoIterator",
                                Ty.apply (Ty.path "core::ops::range::Range") [] [ Ty.path "usize" ],
                                [],
                                [],
                                "into_iter",
                                [],
                                []
                              |),
                              [
                                Value.mkStructRecord
                                  "core::ops::range::Range"
                                  []
                                  [ Ty.path "usize" ]
                                  [
                                    ("start", Value.Integer IntegerKind.Usize 0);
                                    ("end_", NUM_LIMBS)
                                  ]
                              ]
                            |)
                          |),
                          [
                            fun γ =>
                              ltac:(M.monadic
                                (let iter :=
                                  M.copy (|
                                    Ty.apply
                                      (Ty.path "core::ops::range::Range")
                                      []
                                      [ Ty.path "usize" ],
                                    γ
                                  |) in
                                M.read (|
                                  M.loop (|
                                    Ty.tuple [],
                                    ltac:(M.monadic
                                      (let~ _ : Ty.tuple [] :=
                                        M.match_operator (|
                                          Ty.tuple [],
                                          M.alloc (|
                                            Ty.apply
                                              (Ty.path "core::option::Option")
                                              []
                                              [ Ty.path "usize" ],
                                            M.call_closure (|
                                              Ty.apply
                                                (Ty.path "core::option::Option")
                                                []
                                                [ Ty.path "usize" ],
                                              M.get_trait_method (|
                                                "core::iter::traits::iterator::Iterator",
                                                Ty.apply
                                                  (Ty.path "core::ops::range::Range")
                                                  []
                                                  [ Ty.path "usize" ],
                                                [],
                                                [],
                                                "next",
                                                [],
                                                []
                                              |),
                                              [
                                                M.borrow (|
                                                  Pointer.Kind.MutRef,
                                                  M.deref (|
                                                    M.borrow (| Pointer.Kind.MutRef, iter |)
                                                  |)
                                                |)
                                              ]
                                            |)
                                          |),
                                          [
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let _ :=
                                                  M.is_struct_tuple (|
                                                    γ,
                                                    "core::option::Option::None"
                                                  |) in
                                                M.never_to_any (| M.read (| M.break (||) |) |)));
                                            fun γ =>
                                              ltac:(M.monadic
                                                (let γ0_0 :=
                                                  M.SubPointer.get_struct_tuple_field (|
                                                    γ,
                                                    "core::option::Option::Some",
                                                    0
                                                  |) in
                                                let i := M.copy (| Ty.path "usize", γ0_0 |) in
                                                M.match_operator (|
                                                  Ty.tuple [],
                                                  M.alloc (| Ty.tuple [], Value.Tuple [] |),
                                                  [
                                                    fun γ =>
                                                      ltac:(M.monadic
                                                        (let γ :=
                                                          M.use
                                                            (M.alloc (|
                                                              Ty.path "bool",
                                                              M.call_closure (|
                                                                Ty.path "bool",
                                                                BinOp.ne,
                                                                [
                                                                  M.read (|
                                                                    M.SubPointer.get_array_field (|
                                                                      M.deref (| M.read (| x |) |),
                                                                      M.read (| i |)
                                                                    |)
                                                                  |);
                                                                  M.read (|
                                                                    M.SubPointer.get_array_field (|
                                                                      M.deref (| M.read (| y |) |),
                                                                      M.read (| i |)
                                                                    |)
                                                                  |)
                                                                ]
                                                              |)
                                                            |)) in
                                                        let _ :=
                                                          is_constant_or_break_match (|
                                                            M.read (| γ |),
                                                            Value.Bool true
                                                          |) in
                                                        M.never_to_any (|
                                                          M.read (|
                                                            M.return_ (|
                                                              Value.Tuple
                                                                [
                                                                  M.call_closure (|
                                                                    Ty.path "bool",
                                                                    M.get_trait_method (|
                                                                      "core::cmp::PartialEq",
                                                                      Ty.path
                                                                        "openvm_rv32im_transpiler::instructions::BranchEqualOpcode",
                                                                      [],
                                                                      [
                                                                        Ty.path
                                                                          "openvm_rv32im_transpiler::instructions::BranchEqualOpcode"
                                                                      ],
                                                                      "eq",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        local_opcode
                                                                      |);
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.alloc (|
                                                                          Ty.path
                                                                            "openvm_rv32im_transpiler::instructions::BranchEqualOpcode",
                                                                          Value.StructTuple
                                                                            "openvm_rv32im_transpiler::instructions::BranchEqualOpcode::BNE"
                                                                            []
                                                                            []
                                                                            []
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |);
                                                                  M.read (| i |);
                                                                  M.call_closure (|
                                                                    F,
                                                                    M.get_trait_method (|
                                                                      "p3_field::field::Field",
                                                                      F,
                                                                      [],
                                                                      [],
                                                                      "inverse",
                                                                      [],
                                                                      []
                                                                    |),
                                                                    [
                                                                      M.borrow (|
                                                                        Pointer.Kind.Ref,
                                                                        M.alloc (|
                                                                          F,
                                                                          M.call_closure (|
                                                                            F,
                                                                            M.get_trait_method (|
                                                                              "core::ops::arith::Sub",
                                                                              F,
                                                                              [],
                                                                              [ F ],
                                                                              "sub",
                                                                              [],
                                                                              []
                                                                            |),
                                                                            [
                                                                              M.call_closure (|
                                                                                F,
                                                                                M.get_trait_method (|
                                                                                  "p3_field::field::FieldAlgebra",
                                                                                  F,
                                                                                  [],
                                                                                  [],
                                                                                  "from_canonical_u32",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    M.SubPointer.get_array_field (|
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          x
                                                                                        |)
                                                                                      |),
                                                                                      M.read (| i |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |);
                                                                              M.call_closure (|
                                                                                F,
                                                                                M.get_trait_method (|
                                                                                  "p3_field::field::FieldAlgebra",
                                                                                  F,
                                                                                  [],
                                                                                  [],
                                                                                  "from_canonical_u32",
                                                                                  [],
                                                                                  []
                                                                                |),
                                                                                [
                                                                                  M.read (|
                                                                                    M.SubPointer.get_array_field (|
                                                                                      M.deref (|
                                                                                        M.read (|
                                                                                          y
                                                                                        |)
                                                                                      |),
                                                                                      M.read (| i |)
                                                                                    |)
                                                                                  |)
                                                                                ]
                                                                              |)
                                                                            ]
                                                                          |)
                                                                        |)
                                                                      |)
                                                                    ]
                                                                  |)
                                                                ]
                                                            |)
                                                          |)
                                                        |)));
                                                    fun γ => ltac:(M.monadic (Value.Tuple []))
                                                  ]
                                                |)))
                                          ]
                                        |) in
                                      M.alloc (| Ty.tuple [], Value.Tuple [] |)))
                                  |)
                                |)))
                          ]
                        |)
                      |))
                  |) in
                M.alloc (|
                  Ty.tuple [ Ty.path "bool"; Ty.path "usize"; F ],
                  Value.Tuple
                    [
                      M.call_closure (|
                        Ty.path "bool",
                        M.get_trait_method (|
                          "core::cmp::PartialEq",
                          Ty.path "openvm_rv32im_transpiler::instructions::BranchEqualOpcode",
                          [],
                          [ Ty.path "openvm_rv32im_transpiler::instructions::BranchEqualOpcode" ],
                          "eq",
                          [],
                          []
                        |),
                        [
                          M.borrow (| Pointer.Kind.Ref, local_opcode |);
                          M.borrow (|
                            Pointer.Kind.Ref,
                            M.alloc (|
                              Ty.path "openvm_rv32im_transpiler::instructions::BranchEqualOpcode",
                              Value.StructTuple
                                "openvm_rv32im_transpiler::instructions::BranchEqualOpcode::BEQ"
                                []
                                []
                                []
                            |)
                          |)
                        ]
                      |);
                      Value.Integer IntegerKind.Usize 0;
                      M.read (| get_constant (| "p3_field::field::FieldAlgebra::ZERO", F |) |)
                    ]
                |)
              |)))
          |)))
      | _, _, _ => M.impossible "wrong number of arguments"
      end.
    
    Global Instance Instance_IsFunction_run_eq :
      M.IsFunction.C "openvm_rv32im_circuit::branch_eq::core::run_eq" run_eq.
    Admitted.
    Global Typeclasses Opaque run_eq.
  End core.
End branch_eq.
